2025-01-10 19:19:04,613 - INFO TEST
2025-01-10 19:19:04,613 - DEBUG TEST
2025-01-10 19:19:04,613 - ERROR TEST
2025-01-10 19:19:04,613 - iter: 0
2025-01-10 19:19:05,555 - table table_0 has 5 rows
2025-01-10 19:19:05,555 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [1, 2, 3], 'intersection_row_ids': [1]}
2025-01-10 19:19:05,555 - lock_same_resource: True
2025-01-10 19:19:05,555 - 
2025-01-10 19:19:05,555 - intersection phase1
2025-01-10 19:19:05,558 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-01-10 19:19:05,560 - needed_params: {'v2', 'v1', 'select_cols', 'table'}
2025-01-10 19:19:05,560 - params: {'v2': '1', 'v1': '1', 'select_cols': 'col_2', 'table': 'table_0'}
2025-01-10 19:19:05,563 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-01-10 19:19:05,564 - needed_params: {'table', 'insert_cols', 'vals'}
2025-01-10 19:19:05,564 - params: {'table': 'table_0', 'insert_cols': 'id, col_0, col_1, col_2, col_645', 'vals': "NULL, 'wHYgB', 18.67, 64.65, 13.49"}
2025-01-10 19:19:05,565 - intersection phase1 end
2025-01-10 19:19:05,565 - 
2025-01-10 19:19:05,565 - intersection phase2
2025-01-10 19:19:05,569 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-01-10 19:19:05,571 - needed_params: {'v2', 'v1', 'select_cols', 'table'}
2025-01-10 19:19:05,571 - params: {'v2': '2', 'v1': '2', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-01-10 19:19:05,573 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-01-10 19:19:05,574 - needed_params: {'set_expr', 'table', 'cond'}
2025-01-10 19:19:05,575 - params: {'set_expr': "col_0 = 'IibTz'", 'table': 'table_0', 'cond': '(id = 3) AND (col_645 IS NULL)'}
2025-01-10 19:19:05,575 - intersection phase2 end
2025-01-10 19:19:05,575 - 
2025-01-10 19:19:05,575 - intersection phase3
2025-01-10 19:19:05,579 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-01-10 19:19:05,580 - needed_params: {'table', 'insert_cols', 'vals'}
2025-01-10 19:19:05,580 - params: {'table': 'table_0', 'insert_cols': 'id, col_0, col_1, col_2, col_645', 'vals': "NULL, 'qICiG', 92.36, 10.49, 82.42"}
2025-01-10 19:19:05,584 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-01-10 19:19:05,585 - needed_params: {'v2', 'v1', 'select_cols', 'table'}
2025-01-10 19:19:05,585 - params: {'v2': '1', 'v1': '1', 'select_cols': '*', 'table': 'table_0'}
2025-01-10 19:19:05,585 - intersection phase3 end
2025-01-10 19:19:05,585 - 
2025-01-10 19:19:09,053 - 死锁发生在第 5 条语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-01-10 19:19:09,056 - 死锁发生，事务2被回滚，等待时间：2.0023598670959473秒
2025-01-10 19:19:09,056 - 
2025-01-10 19:19:09,882 - BUG FOUND: 死锁发生，事务2被回滚，但最终状态与事务1单独执行的结果不一致，不满足原子性
2025-01-10 19:19:09,882 - iter: 0
2025-01-10 19:19:09,882 - resource distribution: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [1, 2, 3], 'intersection_row_ids': [1]}
2025-01-10 19:19:09,882 - lock same resource: True
2025-01-10 19:19:09,882 - T1是否连续：False
2025-01-10 19:19:09,882 - T2是否连续：False
2025-01-10 19:19:09,882 - 事务1锁定的行ID：[1]
2025-01-10 19:19:09,882 - 事务2锁定的行ID：[1, 2, 3]
2025-01-10 19:19:09,882 - 交集行ID：[1]
2025-01-10 19:19:09,882 - 事务1独占行：[]
2025-01-10 19:19:09,882 - 事务2独占行：[2, 3]
2025-01-10 19:19:09,882 - 事务1：['BEGIN', 'SELECT col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', "INSERT INTO table_0 (id, col_0, col_1, col_2, col_645) VALUES (NULL, 'qICiG', 92.36, 10.49, 82.42)", 'COMMIT;']
2025-01-10 19:19:09,882 - 事务2：['BEGIN', "INSERT INTO table_0 (id, col_0, col_1, col_2, col_645) VALUES (NULL, 'wHYgB', 18.67, 64.65, 13.49)", 'SELECT id, col_2 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE', "UPDATE table_0 SET col_0 = 'IibTz' WHERE (id = 3) AND (col_645 IS NULL)", 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', 'COMMIT;']
2025-01-10 19:19:09,882 - 序列：[(1, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_645) VALUES (NULL, 'wHYgB', 18.67, 64.65, 13.49)"), (2, 'SELECT id, col_2 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'IibTz' WHERE (id = 3) AND (col_645 IS NULL)"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_645) VALUES (NULL, 'qICiG', 92.36, 10.49, 82.42)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-01-10 19:19:09,882 - 实际执行序列：[(1, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_645) VALUES (NULL, 'wHYgB', 18.67, 64.65, 13.49)"), (2, 'SELECT id, col_2 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'IibTz' WHERE (id = 3) AND (col_645 IS NULL)"), (2, '-- Error: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE (Deadlock/Timeout)'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_645) VALUES (NULL, 'qICiG', 92.36, 10.49, 82.42)"), (1, 'COMMIT'), (2, '-- Skipped: COMMIT')]
2025-01-10 19:19:09,883 - 快照：{'before': {'table_0': [(1, 'lnigc', 2.98, 38.22, None), (2, 'gkllg', 39.12, 47.92, None), (3, 'qnrgj', 70.95, 15.58, None), (4, 'ghcpg', 70.32, 54.95, None), (5, 'bankh', 28.66, 73.72, None)]}, 'trx1': {'table_0': [(1, 'lnigc', 2.98, 38.22, None), (2, 'gkllg', 39.12, 47.92, None), (3, 'qnrgj', 70.95, 15.58, None), (4, 'ghcpg', 70.32, 54.95, None), (5, 'bankh', 28.66, 73.72, None), (6, 'qICiG', 92.36, 10.49, 82.42)]}, 'trx2': {'table_0': [(1, 'lnigc', 2.98, 38.22, None), (2, 'gkllg', 39.12, 47.92, None), (3, 'IibTz', 70.95, 15.58, None), (4, 'ghcpg', 70.32, 54.95, None), (5, 'bankh', 28.66, 73.72, None), (7, 'wHYgB', 18.67, 64.65, 13.49)]}, 'serial': {'table_0': [(1, 'lnigc', 2.98, 38.22, None), (2, 'gkllg', 39.12, 47.92, None), (3, 'qnrgj', 70.95, 15.58, None), (4, 'ghcpg', 70.32, 54.95, None), (5, 'bankh', 28.66, 73.72, None), (9, 'qICiG', 92.36, 10.49, 82.42)]}}
2025-01-10 19:19:09,883 - 2025-01-12 00:11:36,830 - 2025-01-22 14:13:54,781 - 


2025-02-04 23:51:15,764 - INFO TEST
2025-02-04 23:51:15,764 - DEBUG TEST
2025-02-04 23:51:15,764 - ERROR TEST
2025-02-04 23:51:15,764 - iter: 0
2025-02-04 23:51:17,314 - table table_0 has 7 rows
2025-02-04 23:51:17,314 - res_dict: {'trx1_lock_row_ids': [2, 3], 'trx2_lock_row_ids': [4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-04 23:51:17,314 - lock_same_resource: False
2025-02-04 23:51:17,314 - 
2025-02-04 23:51:17,314 - non intersection phase1
2025-02-04 23:51:17,314 - 事务1在第一阶段自己加的锁: NK
2025-02-04 23:51:17,315 - 事务2在第一阶段自己加的锁: NK
2025-02-04 23:51:17,315 - 事务1在第二阶段请求对方资源的锁: II
2025-02-04 23:51:17,315 - 事务2在第二阶段请求对方资源的锁: II
2025-02-04 23:51:17,318 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-04 23:51:17,319 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:17,319 - params: {'v1': '2', 'v2': '3', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:51:17,323 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=True, range_end_idx=7
2025-02-04 23:51:17,324 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:17,324 - params: {'v1': '4', 'v2': '7', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:51:17,324 - non intersection phase1 end
2025-02-04 23:51:17,324 - 
2025-02-04 23:51:17,324 - non intersection phase2
2025-02-04 23:51:17,328 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-04 23:51:17,329 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:51:17,329 - params: {'v1': '4', 'set_expr': 'col_1 = 36.83, col_4 = 18.48, col_3 = 89', 'table': 'table_0', 'v2': '5'}
2025-02-04 23:51:17,333 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-04 23:51:17,334 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:51:17,335 - params: {'v1': '2', 'set_expr': "col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2", 'table': 'table_0', 'v2': '3'}
2025-02-04 23:51:17,335 - non intersection phase2 end
2025-02-04 23:51:17,335 - 
2025-02-04 23:51:17,335 - 生成死锁事务序列成功如下
2025-02-04 23:51:17,335 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE'), (2, "UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3"), (1, 'UPDATE table_0 SET col_1 = 36.83, col_4 = 18.48, col_3 = 89 WHERE id BETWEEN 4 AND 5'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:51:18,869 - 创建事务1连接成功
2025-02-04 23:51:18,870 - 执行事务1语句: BEGIN
2025-02-04 23:51:18,872 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE
2025-02-04 23:51:18,873 - 执行事务1语句: UPDATE table_0 SET col_1 = 36.83, col_4 = 18.48, col_3 = 89 WHERE id BETWEEN 4 AND 5
2025-02-04 23:51:18,875 - 执行事务1语句: COMMIT;
2025-02-04 23:51:18,880 - 执行事务1成功
2025-02-04 23:51:21,499 - 恢复初始状态成功
2025-02-04 23:51:22,290 - 创建事务2连接成功
2025-02-04 23:51:22,291 - 执行事务2语句: BEGIN
2025-02-04 23:51:22,292 - 执行事务2语句: SELECT * FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE
2025-02-04 23:51:22,293 - 执行事务2语句: UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3
2025-02-04 23:51:22,295 - 执行事务2语句: COMMIT;
2025-02-04 23:51:22,301 - 执行事务2成功
2025-02-04 23:51:27,289 - 
2025-02-04 23:51:27,289 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE', <Thread(Thread-1, started 38656)>, 1738684287.289353)}
2025-02-04 23:51:27,403 - stmt_idx: 2, status: success, result: None
2025-02-04 23:51:27,403 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE
2025-02-04 23:51:27,403 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:51:27,403 - 
2025-02-04 23:51:27,507 - 
2025-02-04 23:51:27,508 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE', <Thread(Thread-2, started 41408)>, 1738684287.5079372)}
2025-02-04 23:51:27,617 - stmt_idx: 3, status: success, result: None
2025-02-04 23:51:27,617 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE
2025-02-04 23:51:27,617 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:51:27,617 - 
2025-02-04 23:51:27,725 - 
2025-02-04 23:51:27,726 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3", <Thread(Thread-3, started 41168)>, 1738684287.7255332)}
2025-02-04 23:51:27,834 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3
2025-02-04 23:51:27,834 - 执行后idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3", <Thread(Thread-3, started 41168)>, 1738684287.7255332)}
2025-02-04 23:51:27,835 - 
2025-02-04 23:51:27,941 - 
2025-02-04 23:51:27,942 - 执行前idx: 6, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3", <Thread(Thread-3, started 41168)>, 1738684287.7255332), 5: (1, 'UPDATE table_0 SET col_1 = 36.83, col_4 = 18.48, col_3 = 89 WHERE id BETWEEN 4 AND 5', <Thread(Thread-4, started 16052)>, 1738684287.9419827)}
2025-02-04 23:51:27,945 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_1 = 36.83, col_4 = 18.48, col_3 = 89 WHERE id BETWEEN 4 AND 5
2025-02-04 23:51:28,052 - stmt_idx: 4, status: success, result: None
2025-02-04 23:51:28,052 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3
2025-02-04 23:51:28,052 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3
2025-02-04 23:51:28,163 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:51:28,163 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_1 = 36.83, col_4 = 18.48, col_3 = 89 WHERE id BETWEEN 4 AND 5
2025-02-04 23:51:28,163 - 错误: dictionary changed size during iteration
2025-02-04 23:51:28,168 - 执行序列成功
2025-02-04 23:51:28,976 - is_atomic: True
2025-02-04 23:51:28,976 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-04 23:51:28,976 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE'), (2, "UPDATE table_0 SET col_2 = 'pRDfX', col_4 = 80.15, col_3 = 80, col_1 = 1.2 WHERE id BETWEEN 2 AND 3"), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-04 23:51:28,976 - snapshots: {'before': {'table_0': [(1, 1.2, 'qkqnm', 61, 19.73), (2, 26.05, 'ymbqf', 23, 22.78), (3, 28.66, 'youkv', 38, 48.15), (4, 2.66, 'nqwgg', 66, 53.11), (5, 39.38, 'cddnv', 13, 16.26), (6, 56.73, 'rdnym', 12, 27.04), (7, 42.36, 'yuecs', 43, 20.04)]}, 'trx1': {'table_0': [(1, 1.2, 'qkqnm', 61, 19.73), (2, 26.05, 'ymbqf', 23, 22.78), (3, 28.66, 'youkv', 38, 48.15), (4, 36.83, 'nqwgg', 89, 18.48), (5, 36.83, 'cddnv', 89, 18.48), (6, 56.73, 'rdnym', 12, 27.04), (7, 42.36, 'yuecs', 43, 20.04)]}, 'trx2': {'table_0': [(1, 1.2, 'qkqnm', 61, 19.73), (2, 1.2, 'pRDfX', 80, 80.15), (3, 1.2, 'pRDfX', 80, 80.15), (4, 2.66, 'nqwgg', 66, 53.11), (5, 39.38, 'cddnv', 13, 16.26), (6, 56.73, 'rdnym', 12, 27.04), (7, 42.36, 'yuecs', 43, 20.04)]}, 'serial': {'table_0': [(1, 1.2, 'qkqnm', 61, 19.73), (2, 1.2, 'pRDfX', 80, 80.15), (3, 1.2, 'pRDfX', 80, 80.15), (4, 2.66, 'nqwgg', 66, 53.11), (5, 39.38, 'cddnv', 13, 16.26), (6, 56.73, 'rdnym', 12, 27.04), (7, 42.36, 'yuecs', 43, 20.04)]}}
2025-02-04 23:51:28,977 - 
2025-02-04 23:51:28,990 - iter: 1
2025-02-04 23:51:30,569 - table table_0 has 13 rows
2025-02-04 23:51:30,570 - trx1_start_id: 2
2025-02-04 23:51:30,570 - trx1_end_id: 9
2025-02-04 23:51:30,570 - trx1_exclusive_start_id: 2
2025-02-04 23:51:30,570 - trx1_exclusive_end_id: 5
2025-02-04 23:51:30,570 - trx1_exclusive_ids: [2, 3, 4, 5]
2025-02-04 23:51:30,570 - trx2_start_id: 6
2025-02-04 23:51:30,570 - trx2_end_id: 11
2025-02-04 23:51:30,570 - trx2_exclusive_start_id: 10
2025-02-04 23:51:30,570 - trx2_exclusive_end_id: 11
2025-02-04 23:51:30,570 - trx2_exclusive_ids: [10, 11]
2025-02-04 23:51:30,570 - intersection_ids: [6, 7, 8, 9]
2025-02-04 23:51:30,570 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [6, 7, 8, 9, 10, 11], 'intersection_row_ids': [6, 7, 8, 9]}
2025-02-04 23:51:30,570 - lock_same_resource: True
2025-02-04 23:51:30,570 - 
2025-02-04 23:51:30,571 - intersection phase1
2025-02-04 23:51:30,577 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=True, range_end_idx=9
2025-02-04 23:51:30,579 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:30,579 - params: {'v1': '2', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-04 23:51:30,585 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=6, is_continuous=True, range_end_idx=11
2025-02-04 23:51:30,588 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:30,588 - params: {'v1': '6', 'v2': '11', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:51:30,588 - intersection phase1 end
2025-02-04 23:51:30,589 - 
2025-02-04 23:51:30,589 - intersection phase2
2025-02-04 23:51:30,589 - 事务1在第二阶段自己加的锁: II
2025-02-04 23:51:30,589 - 事务2在第二阶段自己加的锁: X
2025-02-04 23:51:30,590 - 事务1在第三阶段请求对方资源的锁: X
2025-02-04 23:51:30,590 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-04 23:51:30,596 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=5
2025-02-04 23:51:30,598 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:51:30,598 - params: {'v1': '2', 'set_expr': 'col_1 = 7.47, col_0 = 79, col_888 = 6', 'table': 'table_0', 'v2': '5'}
2025-02-04 23:51:30,604 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=10, is_continuous=True, range_end_idx=11
2025-02-04 23:51:30,608 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:30,608 - params: {'v1': '10', 'v2': '11', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_888'}
2025-02-04 23:51:30,609 - intersection phase2 end
2025-02-04 23:51:30,609 - 
2025-02-04 23:51:30,609 - intersection phase3
2025-02-04 23:51:30,614 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-04 23:51:30,616 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:51:30,617 - params: {'cond': '(col_0 = 65) AND (col_888 IS NULL)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:51:30,620 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-04 23:51:30,623 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:30,623 - params: {'v1': '4', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-04 23:51:30,623 - intersection phase3 end
2025-02-04 23:51:30,623 - 
2025-02-04 23:51:30,623 - 生成死锁事务序列成功如下
2025-02-04 23:51:30,623 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_888 FROM table_0 WHERE id BETWEEN 10 AND 11 FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 7.47, col_0 = 79, col_888 = 6 WHERE id BETWEEN 2 AND 5'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 65) AND (col_888 IS NULL) FOR UPDATE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id >= 4 AND id <= 5 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:51:32,240 - 创建事务1连接成功
2025-02-04 23:51:32,242 - 执行事务1语句: BEGIN
2025-02-04 23:51:32,243 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE
2025-02-04 23:51:32,244 - 执行事务1语句: UPDATE table_0 SET col_1 = 7.47, col_0 = 79, col_888 = 6 WHERE id BETWEEN 2 AND 5
2025-02-04 23:51:32,245 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 65) AND (col_888 IS NULL) FOR UPDATE
2025-02-04 23:51:32,248 - 执行事务1语句: COMMIT;
2025-02-04 23:51:32,253 - 执行事务1成功
2025-02-04 23:51:34,889 - 恢复初始状态成功
2025-02-04 23:51:35,680 - 创建事务2连接成功
2025-02-04 23:51:35,682 - 执行事务2语句: BEGIN
2025-02-04 23:51:35,683 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE
2025-02-04 23:51:35,685 - 执行事务2语句: SELECT id, col_0, col_1, col_888 FROM table_0 WHERE id BETWEEN 10 AND 11 FOR UPDATE
2025-02-04 23:51:35,685 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id >= 4 AND id <= 5 FOR UPDATE
2025-02-04 23:51:35,686 - 执行事务2语句: COMMIT;
2025-02-04 23:51:35,692 - 执行事务2成功
2025-02-04 23:51:40,852 - 
2025-02-04 23:51:40,852 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE', <Thread(Thread-5, started 39880)>, 1738684300.8525171)}
2025-02-04 23:51:40,954 - stmt_idx: 2, status: success, result: None
2025-02-04 23:51:40,954 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE
2025-02-04 23:51:40,954 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:51:40,954 - 
2025-02-04 23:51:41,062 - 
2025-02-04 23:51:41,063 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE', <Thread(Thread-6, started 26784)>, 1738684301.0621302)}
2025-02-04 23:51:41,170 - wait for lock, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE
2025-02-04 23:51:41,170 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE', <Thread(Thread-6, started 26784)>, 1738684301.0621302)}
2025-02-04 23:51:41,170 - 
2025-02-04 23:51:41,278 - 
2025-02-04 23:51:41,279 - 执行前idx: 5, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE', <Thread(Thread-6, started 26784)>, 1738684301.0621302), 4: (2, 'SELECT id, col_0, col_1, col_888 FROM table_0 WHERE id BETWEEN 10 AND 11 FOR UPDATE', <Thread(Thread-7, started 34596)>, 1738684301.2785342)}
2025-02-04 23:51:41,387 - wait for lock, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE
2025-02-04 23:51:41,499 - stmt_idx: 4, status: success, result: None
2025-02-04 23:51:41,499 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_888 FROM table_0 WHERE id BETWEEN 10 AND 11 FOR UPDATE
2025-02-04 23:51:41,499 - 执行后idx: 5, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE', <Thread(Thread-6, started 26784)>, 1738684301.0621302)}
2025-02-04 23:51:41,499 - 
2025-02-04 23:51:41,606 - 
2025-02-04 23:51:41,607 - 执行前idx: 8, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE', <Thread(Thread-6, started 26784)>, 1738684301.0621302), 7: (2, 'SELECT id, col_0 FROM table_0 WHERE id >= 4 AND id <= 5 FOR UPDATE', <Thread(Thread-8, started 26780)>, 1738684301.6066759)}
2025-02-04 23:51:41,609 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE
2025-02-04 23:51:41,713 - stmt_idx: 3, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:51:41,713 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE
2025-02-04 23:51:41,713 - 错误: dictionary changed size during iteration
2025-02-04 23:51:41,716 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, 'SELECT id, col_0 FROM table_0 WHERE id >= 4 AND id <= 5 FOR UPDATE', <Thread(Thread-8, stopped 26780)>, 1738684301.6066759)}
2025-02-04 23:51:41,716 - 
2025-02-04 23:51:41,716 - 执行前idx: 10, pending_stmts: {7: (2, 'SELECT id, col_0 FROM table_0 WHERE id >= 4 AND id <= 5 FOR UPDATE', <Thread(Thread-8, stopped 26780)>, 1738684301.6066759)}
2025-02-04 23:51:41,820 - stmt_idx: 7, status: success, result: None
2025-02-04 23:51:41,820 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id >= 4 AND id <= 5 FOR UPDATE
2025-02-04 23:51:41,820 - 执行后idx: 10, pending_stmts: {}
2025-02-04 23:51:41,820 - 
2025-02-04 23:51:41,929 - 执行序列成功
2025-02-04 23:51:42,746 - is_atomic: True
2025-02-04 23:51:42,746 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-04 23:51:42,746 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_888 FROM table_0 WHERE id BETWEEN 10 AND 11 FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, 'SELECT id, col_0 FROM table_0 WHERE id >= 4 AND id <= 5 FOR UPDATE')]
2025-02-04 23:51:42,746 - snapshots: {'before': {'table_0': [(1, 15, 13.4, None), (2, 21, 69.37, None), (3, 18, 89.8, None), (4, 7, 24.19, None), (5, 76, 32.85, None), (6, 1, 98.97, None), (7, 27, 78.93, None), (8, 83, 70.59, None), (9, 36, 35.88, None), (10, 65, 31.09, None), (11, 94, 36.77, None), (12, 88, 81.24, None), (13, 16, 59.28, None)]}, 'trx1': {'table_0': [(1, 15, 13.4, None), (2, 79, 7.47, 6), (3, 79, 7.47, 6), (4, 79, 7.47, 6), (5, 79, 7.47, 6), (6, 1, 98.97, None), (7, 27, 78.93, None), (8, 83, 70.59, None), (9, 36, 35.88, None), (10, 65, 31.09, None), (11, 94, 36.77, None), (12, 88, 81.24, None), (13, 16, 59.28, None)]}, 'trx2': {'table_0': [(1, 15, 13.4, None), (2, 21, 69.37, None), (3, 18, 89.8, None), (4, 7, 24.19, None), (5, 76, 32.85, None), (6, 1, 98.97, None), (7, 27, 78.93, None), (8, 83, 70.59, None), (9, 36, 35.88, None), (10, 65, 31.09, None), (11, 94, 36.77, None), (12, 88, 81.24, None), (13, 16, 59.28, None)]}, 'serial': {'table_0': [(1, 15, 13.4, None), (2, 21, 69.37, None), (3, 18, 89.8, None), (4, 7, 24.19, None), (5, 76, 32.85, None), (6, 1, 98.97, None), (7, 27, 78.93, None), (8, 83, 70.59, None), (9, 36, 35.88, None), (10, 65, 31.09, None), (11, 94, 36.77, None), (12, 88, 81.24, None), (13, 16, 59.28, None)]}}
2025-02-04 23:51:42,746 - 
2025-02-04 23:51:42,760 - iter: 2
2025-02-04 23:51:44,297 - table table_0 has 9 rows
2025-02-04 23:51:44,297 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9]
2025-02-04 23:51:44,297 - trx2_lock_row_ids: [2, 3, 4, 5, 6, 7, 8, 9]
2025-02-04 23:51:44,297 - intersection_row_ids: [2, 3, 4, 5, 6, 7, 8, 9]
2025-02-04 23:51:44,297 - trx1_exclusive_ids: [1]
2025-02-04 23:51:44,297 - trx2_exclusive_ids: []
2025-02-04 23:51:44,297 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7, 8, 9], 'intersection_row_ids': [2, 3, 4, 5, 6, 7, 8, 9]}
2025-02-04 23:51:44,298 - lock_same_resource: True
2025-02-04 23:51:44,298 - 
2025-02-04 23:51:44,298 - intersection phase1
2025-02-04 23:51:44,303 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,305 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:51:44,305 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'wDJGZ', 11.84, 'QbAIi'", 'table': 'table_0'}
2025-02-04 23:51:44,308 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,310 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:51:44,310 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'Mfsql', 32.56, 'wMUOT'", 'table': 'table_0'}
2025-02-04 23:51:44,313 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,314 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,315 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'col_1, col_2'}
2025-02-04 23:51:44,319 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,320 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,320 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:51:44,325 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,327 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:51:44,327 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'quJaN', 97.88, 'mZwIP'", 'table': 'table_0'}
2025-02-04 23:51:44,331 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,333 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,333 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-04 23:51:44,337 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,339 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,339 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:51:44,344 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,346 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,346 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-04 23:51:44,350 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,351 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,351 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:51:44,355 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,357 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,357 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:51:44,362 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,363 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:51:44,363 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'HUTAZ', 64.9, 'rwrPq'", 'table': 'table_0'}
2025-02-04 23:51:44,368 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,370 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:51:44,370 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'yCjFc', 26.09, 'yHXYc'", 'table': 'table_0'}
2025-02-04 23:51:44,375 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,376 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,377 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:51:44,381 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,383 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:51:44,383 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'wGGwT', 48.6, 'tpdpm'", 'table': 'table_0'}
2025-02-04 23:51:44,387 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,388 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:51:44,388 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:51:44,392 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,394 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:51:44,394 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'kxfJx', 17.36, 'ZAtfY'", 'table': 'table_0'}
2025-02-04 23:51:44,394 - intersection phase1 end
2025-02-04 23:51:44,394 - 
2025-02-04 23:51:44,394 - intersection phase2
2025-02-04 23:51:44,395 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:51:44,395 - 事务2在第二阶段自己加的锁: NK
2025-02-04 23:51:44,395 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-04 23:51:44,395 - 事务2在第三阶段请求对方资源的锁: S
2025-02-04 23:51:44,400 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,402 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:51:44,402 - params: {'set_expr': "col_0 = 'ycAcs', col_1 = 8.19", 'table': 'table_0', 'cond': "(col_2 = 'jqryr') AND (col_1 = 45.44)"}
2025-02-04 23:51:44,402 - intersection phase2 end
2025-02-04 23:51:44,402 - 
2025-02-04 23:51:44,403 - intersection phase3
2025-02-04 23:51:44,406 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:51:44,408 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:51:44,409 - params: {'set_expr': 'col_1 = 87.61', 'table': 'table_0', 'cond': "(col_2 = 'seset') AND (col_0 = 'tylzp') AND (col_1 = 17.84)"}
2025-02-04 23:51:44,409 - intersection phase3 end
2025-02-04 23:51:44,409 - 
2025-02-04 23:51:44,409 - 生成死锁事务序列成功如下
2025-02-04 23:51:44,409 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'HUTAZ', 64.9, 'rwrPq')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'yCjFc', 26.09, 'yHXYc')"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wGGwT', 48.6, 'tpdpm')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wDJGZ', 11.84, 'QbAIi')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'Mfsql', 32.56, 'wMUOT')"), (1, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kxfJx', 17.36, 'ZAtfY')"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'quJaN', 97.88, 'mZwIP')"), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 'ycAcs', col_1 = 8.19 WHERE (col_2 = 'jqryr') AND (col_1 = 45.44)"), (1, "UPDATE table_0 SET col_1 = 87.61 WHERE (col_2 = 'seset') AND (col_0 = 'tylzp') AND (col_1 = 17.84)"), (2, None), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:51:46,030 - 创建事务1连接成功
2025-02-04 23:51:46,032 - 执行事务1语句: BEGIN
2025-02-04 23:51:46,033 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wDJGZ', 11.84, 'QbAIi')
2025-02-04 23:51:46,034 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'Mfsql', 32.56, 'wMUOT')
2025-02-04 23:51:46,034 - 执行事务1语句: SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:51:46,035 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:51:46,036 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'quJaN', 97.88, 'mZwIP')
2025-02-04 23:51:46,037 - 执行事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-04 23:51:46,037 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:51:46,039 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-04 23:51:46,039 - 执行事务1语句: UPDATE table_0 SET col_0 = 'ycAcs', col_1 = 8.19 WHERE (col_2 = 'jqryr') AND (col_1 = 45.44)
2025-02-04 23:51:46,040 - 执行事务1语句: UPDATE table_0 SET col_1 = 87.61 WHERE (col_2 = 'seset') AND (col_0 = 'tylzp') AND (col_1 = 17.84)
2025-02-04 23:51:46,042 - 执行事务1语句: COMMIT;
2025-02-04 23:51:46,048 - 执行事务1成功
2025-02-04 23:51:48,697 - 恢复初始状态成功
2025-02-04 23:51:49,511 - 创建事务2连接成功
2025-02-04 23:51:49,513 - 执行事务2语句: BEGIN
2025-02-04 23:51:49,514 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:51:49,515 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:51:49,516 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'HUTAZ', 64.9, 'rwrPq')
2025-02-04 23:51:49,517 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'yCjFc', 26.09, 'yHXYc')
2025-02-04 23:51:49,518 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-04 23:51:49,518 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wGGwT', 48.6, 'tpdpm')
2025-02-04 23:51:49,519 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:51:49,520 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kxfJx', 17.36, 'ZAtfY')
2025-02-04 23:51:49,522 - 执行事务2语句: COMMIT;
2025-02-04 23:51:49,529 - 执行事务2成功
2025-02-04 23:51:54,491 - 
2025-02-04 23:51:54,491 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-9, started 22188)>, 1738684314.4911864)}
2025-02-04 23:51:54,605 - stmt_idx: 2, status: success, result: None
2025-02-04 23:51:54,605 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:51:54,605 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:51:54,605 - 
2025-02-04 23:51:54,714 - 
2025-02-04 23:51:54,714 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-10, started 37468)>, 1738684314.7142015)}
2025-02-04 23:51:54,822 - stmt_idx: 3, status: success, result: None
2025-02-04 23:51:54,822 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:51:54,822 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:51:54,822 - 
2025-02-04 23:51:54,932 - 
2025-02-04 23:51:54,933 - 执行前idx: 5, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'HUTAZ', 64.9, 'rwrPq')", <Thread(Thread-11, started 14988)>, 1738684314.9321425)}
2025-02-04 23:51:55,040 - stmt_idx: 4, status: success, result: None
2025-02-04 23:51:55,040 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'HUTAZ', 64.9, 'rwrPq')
2025-02-04 23:51:55,040 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:51:55,040 - 
2025-02-04 23:51:55,148 - 
2025-02-04 23:51:55,149 - 执行前idx: 6, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'yCjFc', 26.09, 'yHXYc')", <Thread(Thread-12, started 16980)>, 1738684315.1486566)}
2025-02-04 23:51:55,256 - stmt_idx: 5, status: success, result: None
2025-02-04 23:51:55,256 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'yCjFc', 26.09, 'yHXYc')
2025-02-04 23:51:55,256 - 执行后idx: 6, pending_stmts: {}
2025-02-04 23:51:55,256 - 
2025-02-04 23:51:55,361 - 
2025-02-04 23:51:55,362 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-13, started 37424)>, 1738684315.3611515)}
2025-02-04 23:51:55,469 - stmt_idx: 6, status: success, result: None
2025-02-04 23:51:55,469 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-04 23:51:55,469 - 执行后idx: 7, pending_stmts: {}
2025-02-04 23:51:55,469 - 
2025-02-04 23:51:55,580 - 
2025-02-04 23:51:55,581 - 执行前idx: 8, pending_stmts: {7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wGGwT', 48.6, 'tpdpm')", <Thread(Thread-14, started 33972)>, 1738684315.5801606)}
2025-02-04 23:51:55,690 - stmt_idx: 7, status: success, result: None
2025-02-04 23:51:55,690 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wGGwT', 48.6, 'tpdpm')
2025-02-04 23:51:55,691 - 执行后idx: 8, pending_stmts: {}
2025-02-04 23:51:55,691 - 
2025-02-04 23:51:55,800 - 
2025-02-04 23:51:55,800 - 执行前idx: 9, pending_stmts: {8: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wDJGZ', 11.84, 'QbAIi')", <Thread(Thread-15, started 40588)>, 1738684315.8003955)}
2025-02-04 23:51:55,910 - stmt_idx: 8, status: success, result: None
2025-02-04 23:51:55,910 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wDJGZ', 11.84, 'QbAIi')
2025-02-04 23:51:55,910 - 执行后idx: 9, pending_stmts: {}
2025-02-04 23:51:55,910 - 
2025-02-04 23:51:56,020 - 
2025-02-04 23:51:56,021 - 执行前idx: 10, pending_stmts: {9: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'Mfsql', 32.56, 'wMUOT')", <Thread(Thread-16, started 30840)>, 1738684316.0201743)}
2025-02-04 23:51:56,130 - stmt_idx: 9, status: success, result: None
2025-02-04 23:51:56,130 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'Mfsql', 32.56, 'wMUOT')
2025-02-04 23:51:56,130 - 执行后idx: 10, pending_stmts: {}
2025-02-04 23:51:56,130 - 
2025-02-04 23:51:56,237 - 
2025-02-04 23:51:56,237 - 执行前idx: 11, pending_stmts: {10: (1, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-17, started 13004)>, 1738684316.2378817)}
2025-02-04 23:51:56,345 - stmt_idx: 10, status: success, result: None
2025-02-04 23:51:56,345 - 成功执行序列中事务1语句: SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:51:56,345 - 执行后idx: 11, pending_stmts: {}
2025-02-04 23:51:56,345 - 
2025-02-04 23:51:56,454 - 
2025-02-04 23:51:56,455 - 执行前idx: 12, pending_stmts: {11: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-18, started 38836)>, 1738684316.4541109)}
2025-02-04 23:51:56,562 - stmt_idx: 11, status: success, result: None
2025-02-04 23:51:56,562 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:51:56,562 - 执行后idx: 12, pending_stmts: {}
2025-02-04 23:51:56,562 - 
2025-02-04 23:51:56,670 - 
2025-02-04 23:51:56,671 - 执行前idx: 13, pending_stmts: {12: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kxfJx', 17.36, 'ZAtfY')", <Thread(Thread-19, started 20544)>, 1738684316.6708305)}
2025-02-04 23:51:56,777 - stmt_idx: 12, status: success, result: None
2025-02-04 23:51:56,777 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kxfJx', 17.36, 'ZAtfY')
2025-02-04 23:51:56,777 - 执行后idx: 13, pending_stmts: {}
2025-02-04 23:51:56,777 - 
2025-02-04 23:51:56,883 - 
2025-02-04 23:51:56,884 - 执行前idx: 14, pending_stmts: {13: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-20, started 40444)>, 1738684316.8839624)}
2025-02-04 23:51:56,990 - stmt_idx: 13, status: success, result: None
2025-02-04 23:51:56,990 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:51:56,990 - 执行后idx: 14, pending_stmts: {}
2025-02-04 23:51:56,990 - 
2025-02-04 23:51:57,098 - 
2025-02-04 23:51:57,099 - 执行前idx: 15, pending_stmts: {14: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'quJaN', 97.88, 'mZwIP')", <Thread(Thread-21, started 3664)>, 1738684317.0988202)}
2025-02-04 23:51:57,205 - stmt_idx: 14, status: success, result: None
2025-02-04 23:51:57,205 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'quJaN', 97.88, 'mZwIP')
2025-02-04 23:51:57,205 - 执行后idx: 15, pending_stmts: {}
2025-02-04 23:51:57,205 - 
2025-02-04 23:51:57,313 - 
2025-02-04 23:51:57,313 - 执行前idx: 16, pending_stmts: {15: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-22, started 41856)>, 1738684317.3134022)}
2025-02-04 23:51:57,421 - stmt_idx: 15, status: success, result: None
2025-02-04 23:51:57,421 - 成功执行序列中事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-04 23:51:57,421 - 执行后idx: 16, pending_stmts: {}
2025-02-04 23:51:57,421 - 
2025-02-04 23:51:57,530 - 
2025-02-04 23:51:57,531 - 执行前idx: 17, pending_stmts: {16: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-23, started 25216)>, 1738684317.5309412)}
2025-02-04 23:51:57,638 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:51:57,638 - 执行后idx: 17, pending_stmts: {16: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-23, started 25216)>, 1738684317.5309412)}
2025-02-04 23:51:57,638 - 
2025-02-04 23:51:57,748 - stmt为None, trx_id: 2, stmt: None
2025-02-04 23:51:57,752 - 序列遍历完成，开始查看剩余阻塞的语句：{16: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-23, started 25216)>, 1738684317.5309412)}
2025-02-04 23:51:57,752 - 
2025-02-04 23:51:57,752 - 执行前idx: 23, pending_stmts: {16: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-23, started 25216)>, 1738684317.5309412)}
2025-02-04 23:51:57,857 - stmt_idx: 16, status: success, result: None
2025-02-04 23:51:57,857 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:51:57,857 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:51:57,858 - 执行后idx: 23, pending_stmts: {17: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-24, started 35256)>, 1738684317.85846), 18: (1, "UPDATE table_0 SET col_0 = 'ycAcs', col_1 = 8.19 WHERE (col_2 = 'jqryr') AND (col_1 = 45.44)", <Thread(Thread-25, started 41900)>, 1738684317.85846), 19: (1, "UPDATE table_0 SET col_1 = 87.61 WHERE (col_2 = 'seset') AND (col_0 = 'tylzp') AND (col_1 = 17.84)", <Thread(Thread-26, started 37172)>, 1738684317.858741), 21: (1, 'COMMIT', <Thread(Thread-27, started 38064)>, 1738684317.858741)}
2025-02-04 23:51:57,859 - 
2025-02-04 23:51:57,963 - 序列遍历完成，开始查看剩余阻塞的语句：{17: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-24, stopped 35256)>, 1738684317.85846), 18: (1, "UPDATE table_0 SET col_0 = 'ycAcs', col_1 = 8.19 WHERE (col_2 = 'jqryr') AND (col_1 = 45.44)", <Thread(Thread-25, stopped 41900)>, 1738684317.85846), 19: (1, "UPDATE table_0 SET col_1 = 87.61 WHERE (col_2 = 'seset') AND (col_0 = 'tylzp') AND (col_1 = 17.84)", <Thread(Thread-26, stopped 37172)>, 1738684317.858741), 21: (1, 'COMMIT', <Thread(Thread-27, stopped 38064)>, 1738684317.858741)}
2025-02-04 23:51:57,963 - 
2025-02-04 23:51:57,963 - 执行前idx: 23, pending_stmts: {17: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-24, stopped 35256)>, 1738684317.85846), 18: (1, "UPDATE table_0 SET col_0 = 'ycAcs', col_1 = 8.19 WHERE (col_2 = 'jqryr') AND (col_1 = 45.44)", <Thread(Thread-25, stopped 41900)>, 1738684317.85846), 19: (1, "UPDATE table_0 SET col_1 = 87.61 WHERE (col_2 = 'seset') AND (col_0 = 'tylzp') AND (col_1 = 17.84)", <Thread(Thread-26, stopped 37172)>, 1738684317.858741), 21: (1, 'COMMIT', <Thread(Thread-27, stopped 38064)>, 1738684317.858741)}
2025-02-04 23:51:58,075 - stmt_idx: 17, status: success, result: None
2025-02-04 23:51:58,075 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-04 23:51:58,184 - stmt_idx: 18, status: success, result: None
2025-02-04 23:51:58,184 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'ycAcs', col_1 = 8.19 WHERE (col_2 = 'jqryr') AND (col_1 = 45.44)
2025-02-04 23:51:58,292 - stmt_idx: 19, status: success, result: None
2025-02-04 23:51:58,292 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 87.61 WHERE (col_2 = 'seset') AND (col_0 = 'tylzp') AND (col_1 = 17.84)
2025-02-04 23:51:58,399 - stmt_idx: 21, status: success, result: None
2025-02-04 23:51:58,399 - 成功执行序列中事务1语句: COMMIT
2025-02-04 23:51:58,399 - 执行后idx: 23, pending_stmts: {}
2025-02-04 23:51:58,399 - 
2025-02-04 23:51:58,508 - 执行序列成功
2025-02-04 23:51:59,300 - is_atomic: True
2025-02-04 23:51:59,301 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:51:59,301 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'HUTAZ', 64.9, 'rwrPq')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'yCjFc', 26.09, 'yHXYc')"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wGGwT', 48.6, 'tpdpm')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'wDJGZ', 11.84, 'QbAIi')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'Mfsql', 32.56, 'wMUOT')"), (1, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kxfJx', 17.36, 'ZAtfY')"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'quJaN', 97.88, 'mZwIP')"), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 'ycAcs', col_1 = 8.19 WHERE (col_2 = 'jqryr') AND (col_1 = 45.44)"), (1, "UPDATE table_0 SET col_1 = 87.61 WHERE (col_2 = 'seset') AND (col_0 = 'tylzp') AND (col_1 = 17.84)"), (1, 'COMMIT')]
2025-02-04 23:51:59,301 - snapshots: {'before': {'table_0': [(1, 'mznaq', 45.44, 'jqryr'), (2, 'bixga', 14.02, 'hylaz'), (3, 'xnnuz', 13.45, 'ggewv'), (4, 'shses', 24.82, 'cqkvh'), (5, 'egwya', 27.06, 'umdsl'), (6, 'qycvk', 85.91, 'rdeij'), (7, 'rxrsl', 36.05, 'osyjo'), (8, 'tylzp', 17.84, 'seset'), (9, 'qvtar', 49.6, 'joiaa')]}, 'trx1': {'table_0': [(1, 'mznaq', 45.44, 'jqryr'), (2, 'bixga', 14.02, 'hylaz'), (3, 'xnnuz', 13.45, 'ggewv'), (4, 'shses', 24.82, 'cqkvh'), (5, 'egwya', 27.06, 'umdsl'), (6, 'qycvk', 85.91, 'rdeij'), (7, 'rxrsl', 36.05, 'osyjo'), (8, 'tylzp', 17.84, 'seset'), (9, 'qvtar', 49.6, 'joiaa'), (10, 'wDJGZ', 11.84, 'QbAIi'), (11, 'Mfsql', 32.56, 'wMUOT'), (12, 'quJaN', 97.88, 'mZwIP')]}, 'trx2': {'table_0': [(1, 'mznaq', 45.44, 'jqryr'), (2, 'bixga', 14.02, 'hylaz'), (3, 'xnnuz', 13.45, 'ggewv'), (4, 'shses', 24.82, 'cqkvh'), (5, 'egwya', 27.06, 'umdsl'), (6, 'qycvk', 85.91, 'rdeij'), (7, 'rxrsl', 36.05, 'osyjo'), (8, 'tylzp', 17.84, 'seset'), (9, 'qvtar', 49.6, 'joiaa'), (13, 'HUTAZ', 64.9, 'rwrPq'), (14, 'yCjFc', 26.09, 'yHXYc'), (15, 'wGGwT', 48.6, 'tpdpm'), (16, 'kxfJx', 17.36, 'ZAtfY')]}, 'serial': {'table_0': [(1, 'mznaq', 45.44, 'jqryr'), (2, 'bixga', 14.02, 'hylaz'), (3, 'xnnuz', 13.45, 'ggewv'), (4, 'shses', 24.82, 'cqkvh'), (5, 'egwya', 27.06, 'umdsl'), (6, 'qycvk', 85.91, 'rdeij'), (7, 'rxrsl', 36.05, 'osyjo'), (8, 'tylzp', 17.84, 'seset'), (9, 'qvtar', 49.6, 'joiaa'), (17, 'HUTAZ', 64.9, 'rwrPq'), (18, 'yCjFc', 26.09, 'yHXYc'), (19, 'wGGwT', 48.6, 'tpdpm'), (20, 'wDJGZ', 11.84, 'QbAIi'), (21, 'Mfsql', 32.56, 'wMUOT'), (22, 'kxfJx', 17.36, 'ZAtfY'), (23, 'quJaN', 97.88, 'mZwIP')]}}
2025-02-04 23:51:59,301 - 
2025-02-04 23:51:59,315 - iter: 3
2025-02-04 23:52:00,902 - table table_0 has 9 rows
2025-02-04 23:52:00,902 - trx1_lock_row_ids: [3, 5, 7, 8]
2025-02-04 23:52:00,902 - trx2_lock_row_ids: [7, 8, 9]
2025-02-04 23:52:00,902 - intersection_row_ids: [7, 8]
2025-02-04 23:52:00,902 - trx1_exclusive_ids: [3, 5]
2025-02-04 23:52:00,902 - trx2_exclusive_ids: [9]
2025-02-04 23:52:00,903 - res_dict: {'trx1_lock_row_ids': [3, 5, 7, 8], 'trx2_lock_row_ids': [7, 8, 9], 'intersection_row_ids': [7, 8]}
2025-02-04 23:52:00,903 - lock_same_resource: True
2025-02-04 23:52:00,903 - 
2025-02-04 23:52:00,903 - intersection phase1
2025-02-04 23:52:00,907 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:52:00,908 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:00,908 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'col_2'}
2025-02-04 23:52:00,912 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:52:00,914 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:52:00,914 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 'xcKxZ', 49, 50, 'SXwbT', 'KCrvC'", 'table': 'table_0'}
2025-02-04 23:52:00,917 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:52:00,919 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:52:00,919 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 'zyFUY', 33, 51, 'FVzxA', 'WvVZm'", 'table': 'table_0'}
2025-02-04 23:52:00,922 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:52:00,923 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:00,923 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3, col_4'}
2025-02-04 23:52:00,924 - intersection phase1 end
2025-02-04 23:52:00,924 - 
2025-02-04 23:52:00,924 - intersection phase2
2025-02-04 23:52:00,924 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:52:00,924 - 事务2在第二阶段自己加的锁: NK
2025-02-04 23:52:00,924 - 事务1在第三阶段请求对方资源的锁: X
2025-02-04 23:52:00,924 - 事务2在第三阶段请求对方资源的锁: II
2025-02-04 23:52:00,929 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:52:00,930 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:52:00,930 - params: {'cond': "(id = 3) AND (col_3 = 'meqxo') AND (col_1 = 41) AND (col_2 = 71)", 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:52:00,933 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:52:00,935 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:52:00,935 - params: {'set_expr': "col_3 = 'hHVHI', col_0 = 'IfsJl'", 'table': 'table_0', 'cond': '(col_2 = 30)'}
2025-02-04 23:52:00,939 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:52:00,940 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:00,940 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:52:00,940 - intersection phase2 end
2025-02-04 23:52:00,940 - 
2025-02-04 23:52:00,941 - intersection phase3
2025-02-04 23:52:00,946 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:52:00,948 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:52:00,948 - params: {'set_expr': 'col_1 = 96', 'table': 'table_0', 'cond': '(id = 9)'}
2025-02-04 23:52:00,948 - intersection phase3 end
2025-02-04 23:52:00,948 - 
2025-02-04 23:52:00,948 - 生成死锁事务序列成功如下
2025-02-04 23:52:00,948 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'zyFUY', 33, 51, 'FVzxA', 'WvVZm')"), (1, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'xcKxZ', 49, 50, 'SXwbT', 'KCrvC')"), (1, "SELECT * FROM table_0 WHERE (id = 3) AND (col_3 = 'meqxo') AND (col_1 = 41) AND (col_2 = 71) FOR UPDATE"), (1, "UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)"), (2, 'SELECT id FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 96 WHERE (id = 9)'), (2, None), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:52:02,507 - 创建事务1连接成功
2025-02-04 23:52:02,509 - 执行事务1语句: BEGIN
2025-02-04 23:52:02,510 - 执行事务1语句: SELECT col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-04 23:52:02,511 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'xcKxZ', 49, 50, 'SXwbT', 'KCrvC')
2025-02-04 23:52:02,512 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 3) AND (col_3 = 'meqxo') AND (col_1 = 41) AND (col_2 = 71) FOR UPDATE
2025-02-04 23:52:02,513 - 执行事务1语句: UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)
2025-02-04 23:52:02,514 - 执行事务1语句: UPDATE table_0 SET col_1 = 96 WHERE (id = 9)
2025-02-04 23:52:02,516 - 执行事务1语句: COMMIT;
2025-02-04 23:52:02,521 - 执行事务1成功
2025-02-04 23:52:05,143 - 恢复初始状态成功
2025-02-04 23:52:05,931 - 创建事务2连接成功
2025-02-04 23:52:05,933 - 执行事务2语句: BEGIN
2025-02-04 23:52:05,934 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'zyFUY', 33, 51, 'FVzxA', 'WvVZm')
2025-02-04 23:52:05,935 - 执行事务2语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-04 23:52:05,936 - 执行事务2语句: SELECT id FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE
2025-02-04 23:52:05,938 - 执行事务2语句: COMMIT;
2025-02-04 23:52:05,943 - 执行事务2成功
2025-02-04 23:52:10,890 - 
2025-02-04 23:52:10,890 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'zyFUY', 33, 51, 'FVzxA', 'WvVZm')", <Thread(Thread-28, started 38456)>, 1738684330.890862)}
2025-02-04 23:52:10,999 - stmt_idx: 2, status: success, result: None
2025-02-04 23:52:10,999 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'zyFUY', 33, 51, 'FVzxA', 'WvVZm')
2025-02-04 23:52:10,999 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:52:10,999 - 
2025-02-04 23:52:11,108 - 
2025-02-04 23:52:11,109 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-29, started 35956)>, 1738684331.10818)}
2025-02-04 23:52:11,217 - stmt_idx: 3, status: success, result: None
2025-02-04 23:52:11,217 - 成功执行序列中事务1语句: SELECT col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-04 23:52:11,217 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:52:11,217 - 
2025-02-04 23:52:11,327 - 
2025-02-04 23:52:11,328 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE', <Thread(Thread-30, started 6932)>, 1738684331.327328)}
2025-02-04 23:52:11,435 - stmt_idx: 4, status: success, result: None
2025-02-04 23:52:11,435 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-04 23:52:11,435 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:52:11,435 - 
2025-02-04 23:52:11,543 - 
2025-02-04 23:52:11,544 - 执行前idx: 6, pending_stmts: {5: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'xcKxZ', 49, 50, 'SXwbT', 'KCrvC')", <Thread(Thread-31, started 13176)>, 1738684331.5437016)}
2025-02-04 23:52:11,653 - stmt_idx: 5, status: success, result: None
2025-02-04 23:52:11,653 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'xcKxZ', 49, 50, 'SXwbT', 'KCrvC')
2025-02-04 23:52:11,653 - 执行后idx: 6, pending_stmts: {}
2025-02-04 23:52:11,653 - 
2025-02-04 23:52:11,764 - 
2025-02-04 23:52:11,765 - 执行前idx: 7, pending_stmts: {6: (1, "SELECT * FROM table_0 WHERE (id = 3) AND (col_3 = 'meqxo') AND (col_1 = 41) AND (col_2 = 71) FOR UPDATE", <Thread(Thread-32, started 21156)>, 1738684331.7644176)}
2025-02-04 23:52:11,871 - stmt_idx: 6, status: success, result: None
2025-02-04 23:52:11,871 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 3) AND (col_3 = 'meqxo') AND (col_1 = 41) AND (col_2 = 71) FOR UPDATE
2025-02-04 23:52:11,871 - 执行后idx: 7, pending_stmts: {}
2025-02-04 23:52:11,871 - 
2025-02-04 23:52:11,981 - 
2025-02-04 23:52:11,982 - 执行前idx: 8, pending_stmts: {7: (1, "UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)", <Thread(Thread-33, started 34268)>, 1738684331.981908)}
2025-02-04 23:52:12,090 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)
2025-02-04 23:52:12,091 - 执行后idx: 8, pending_stmts: {7: (1, "UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)", <Thread(Thread-33, started 34268)>, 1738684331.981908)}
2025-02-04 23:52:12,091 - 
2025-02-04 23:52:12,200 - 
2025-02-04 23:52:12,201 - 执行前idx: 9, pending_stmts: {7: (1, "UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)", <Thread(Thread-33, started 34268)>, 1738684331.981908), 8: (2, 'SELECT id FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE', <Thread(Thread-34, started 36020)>, 1738684332.200154)}
2025-02-04 23:52:12,307 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)
2025-02-04 23:52:12,415 - stmt_idx: 8, status: success, result: None
2025-02-04 23:52:12,415 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE
2025-02-04 23:52:12,415 - 执行后idx: 9, pending_stmts: {7: (1, "UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)", <Thread(Thread-33, started 34268)>, 1738684331.981908)}
2025-02-04 23:52:12,415 - 
2025-02-04 23:52:12,523 - stmt为None, trx_id: 2, stmt: None
2025-02-04 23:52:12,526 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, "UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)", <Thread(Thread-33, started 34268)>, 1738684331.981908)}
2025-02-04 23:52:12,527 - 
2025-02-04 23:52:12,527 - 执行前idx: 13, pending_stmts: {7: (1, "UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)", <Thread(Thread-33, stopped 34268)>, 1738684331.981908)}
2025-02-04 23:52:12,632 - stmt_idx: 7, status: success, result: None
2025-02-04 23:52:12,632 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)
2025-02-04 23:52:12,632 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)
2025-02-04 23:52:12,633 - 执行后idx: 13, pending_stmts: {9: (1, 'UPDATE table_0 SET col_1 = 96 WHERE (id = 9)', <Thread(Thread-35, started 32032)>, 1738684332.633002), 11: (1, 'COMMIT', <Thread(Thread-36, started 9196)>, 1738684332.6335692)}
2025-02-04 23:52:12,633 - 
2025-02-04 23:52:12,739 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (1, 'UPDATE table_0 SET col_1 = 96 WHERE (id = 9)', <Thread(Thread-35, stopped 32032)>, 1738684332.633002), 11: (1, 'COMMIT', <Thread(Thread-36, stopped 9196)>, 1738684332.6335692)}
2025-02-04 23:52:12,739 - 
2025-02-04 23:52:12,739 - 执行前idx: 13, pending_stmts: {9: (1, 'UPDATE table_0 SET col_1 = 96 WHERE (id = 9)', <Thread(Thread-35, stopped 32032)>, 1738684332.633002), 11: (1, 'COMMIT', <Thread(Thread-36, stopped 9196)>, 1738684332.6335692)}
2025-02-04 23:52:12,848 - stmt_idx: 9, status: success, result: None
2025-02-04 23:52:12,848 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 96 WHERE (id = 9)
2025-02-04 23:52:12,954 - stmt_idx: 11, status: success, result: None
2025-02-04 23:52:12,954 - 成功执行序列中事务1语句: COMMIT
2025-02-04 23:52:12,954 - 执行后idx: 13, pending_stmts: {}
2025-02-04 23:52:12,955 - 
2025-02-04 23:52:13,065 - 执行序列成功
2025-02-04 23:52:13,827 - is_atomic: True
2025-02-04 23:52:13,828 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:52:13,828 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'zyFUY', 33, 51, 'FVzxA', 'WvVZm')"), (1, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'xcKxZ', 49, 50, 'SXwbT', 'KCrvC')"), (1, "SELECT * FROM table_0 WHERE (id = 3) AND (col_3 = 'meqxo') AND (col_1 = 41) AND (col_2 = 71) FOR UPDATE"), (2, 'SELECT id FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE'), (2, 'COMMIT'), (1, "UPDATE table_0 SET col_3 = 'hHVHI', col_0 = 'IfsJl' WHERE (col_2 = 30)"), (1, 'UPDATE table_0 SET col_1 = 96 WHERE (id = 9)'), (1, 'COMMIT')]
2025-02-04 23:52:13,828 - snapshots: {'before': {'table_0': [(1, 'rsysf', 69, 96, 'pbeub', 'mpncr'), (2, 'cynen', 39, 44, 'xqmfw', 'avlir'), (3, 'ahnfy', 41, 71, 'meqxo', 'clacq'), (4, 'ordhp', 63, 38, 'skcov', 'znjpz'), (5, 'sbkbp', 53, 30, 'cjnov', 'msmsg'), (6, 'naitm', 95, 49, 'gsupl', 'mievs'), (7, 'ishfo', 61, 32, 'yxqqz', 'bngcc'), (8, 'fzkak', 26, 64, 'tgkes', 'oyssr'), (9, 'agoyf', 72, 71, 'hqpoz', 'tcxjf')]}, 'trx1': {'table_0': [(1, 'rsysf', 69, 96, 'pbeub', 'mpncr'), (2, 'cynen', 39, 44, 'xqmfw', 'avlir'), (3, 'ahnfy', 41, 71, 'meqxo', 'clacq'), (4, 'ordhp', 63, 38, 'skcov', 'znjpz'), (5, 'IfsJl', 53, 30, 'hHVHI', 'msmsg'), (6, 'naitm', 95, 49, 'gsupl', 'mievs'), (7, 'ishfo', 61, 32, 'yxqqz', 'bngcc'), (8, 'fzkak', 26, 64, 'tgkes', 'oyssr'), (9, 'agoyf', 96, 71, 'hqpoz', 'tcxjf'), (10, 'xcKxZ', 49, 50, 'SXwbT', 'KCrvC')]}, 'trx2': {'table_0': [(1, 'rsysf', 69, 96, 'pbeub', 'mpncr'), (2, 'cynen', 39, 44, 'xqmfw', 'avlir'), (3, 'ahnfy', 41, 71, 'meqxo', 'clacq'), (4, 'ordhp', 63, 38, 'skcov', 'znjpz'), (5, 'sbkbp', 53, 30, 'cjnov', 'msmsg'), (6, 'naitm', 95, 49, 'gsupl', 'mievs'), (7, 'ishfo', 61, 32, 'yxqqz', 'bngcc'), (8, 'fzkak', 26, 64, 'tgkes', 'oyssr'), (9, 'agoyf', 72, 71, 'hqpoz', 'tcxjf'), (11, 'zyFUY', 33, 51, 'FVzxA', 'WvVZm')]}, 'serial': {'table_0': [(1, 'rsysf', 69, 96, 'pbeub', 'mpncr'), (2, 'cynen', 39, 44, 'xqmfw', 'avlir'), (3, 'ahnfy', 41, 71, 'meqxo', 'clacq'), (4, 'ordhp', 63, 38, 'skcov', 'znjpz'), (5, 'IfsJl', 53, 30, 'hHVHI', 'msmsg'), (6, 'naitm', 95, 49, 'gsupl', 'mievs'), (7, 'ishfo', 61, 32, 'yxqqz', 'bngcc'), (8, 'fzkak', 26, 64, 'tgkes', 'oyssr'), (9, 'agoyf', 96, 71, 'hqpoz', 'tcxjf'), (12, 'zyFUY', 33, 51, 'FVzxA', 'WvVZm'), (13, 'xcKxZ', 49, 50, 'SXwbT', 'KCrvC')]}}
2025-02-04 23:52:13,828 - 
2025-02-04 23:52:13,840 - iter: 4
2025-02-04 23:52:15,348 - table table_0 has 8 rows
2025-02-04 23:52:15,348 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6], 'trx2_lock_row_ids': [1, 7, 8], 'intersection_row_ids': []}
2025-02-04 23:52:15,348 - lock_same_resource: False
2025-02-04 23:52:15,348 - 
2025-02-04 23:52:15,348 - non intersection phase1
2025-02-04 23:52:15,349 - 事务1在第一阶段自己加的锁: NK
2025-02-04 23:52:15,349 - 事务2在第一阶段自己加的锁: S
2025-02-04 23:52:15,349 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:52:15,349 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-04 23:52:15,353 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-04 23:52:15,355 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:15,355 - params: {'v1': '2', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-04 23:52:15,358 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:52:15,359 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:15,359 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_705'}
2025-02-04 23:52:15,363 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:52:15,364 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:52:15,364 - params: {'cond': "(col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81)", 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:52:15,368 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:52:15,370 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:52:15,370 - params: {'cond': "(col_0 = 'rvlbg') AND (col_705 IS NULL)", 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_705'}
2025-02-04 23:52:15,370 - non intersection phase1 end
2025-02-04 23:52:15,370 - 
2025-02-04 23:52:15,370 - non intersection phase2
2025-02-04 23:52:15,374 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:52:15,376 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:52:15,376 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_705', 'vals': "NULL, 'KTYvf', 68, 'OCmOb', 'wIkhG'", 'table': 'table_0'}
2025-02-04 23:52:15,380 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-04 23:52:15,381 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:15,382 - params: {'v1': '5', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_705'}
2025-02-04 23:52:15,382 - non intersection phase2 end
2025-02-04 23:52:15,382 - 
2025-02-04 23:52:15,382 - 生成死锁事务序列成功如下
2025-02-04 23:52:15,382 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 6 FOR UPDATE'), (2, 'SELECT id, col_1, col_2, col_705 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, "SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE"), (2, "SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE (col_0 = 'rvlbg') AND (col_705 IS NULL) LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_705) VALUES (NULL, 'KTYvf', 68, 'OCmOb', 'wIkhG')"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:52:16,930 - 创建事务1连接成功
2025-02-04 23:52:16,932 - 执行事务1语句: BEGIN
2025-02-04 23:52:16,933 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 6 FOR UPDATE
2025-02-04 23:52:16,934 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_705) VALUES (NULL, 'KTYvf', 68, 'OCmOb', 'wIkhG')
2025-02-04 23:52:16,937 - 执行事务1语句: COMMIT;
2025-02-04 23:52:16,943 - 执行事务1成功
2025-02-04 23:52:19,558 - 恢复初始状态成功
2025-02-04 23:52:20,316 - 创建事务2连接成功
2025-02-04 23:52:20,317 - 执行事务2语句: BEGIN
2025-02-04 23:52:20,318 - 执行事务2语句: SELECT id, col_1, col_2, col_705 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-04 23:52:20,319 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE
2025-02-04 23:52:20,320 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE (col_0 = 'rvlbg') AND (col_705 IS NULL) LOCK IN SHARE MODE
2025-02-04 23:52:20,321 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE
2025-02-04 23:52:20,322 - 执行事务2语句: COMMIT;
2025-02-04 23:52:20,326 - 执行事务2成功
2025-02-04 23:52:25,216 - 
2025-02-04 23:52:25,217 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 6 FOR UPDATE', <Thread(Thread-37, started 35888)>, 1738684345.2164912)}
2025-02-04 23:52:25,318 - stmt_idx: 2, status: success, result: None
2025-02-04 23:52:25,318 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 6 FOR UPDATE
2025-02-04 23:52:25,318 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:52:25,318 - 
2025-02-04 23:52:25,428 - 
2025-02-04 23:52:25,428 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_705 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-38, started 20164)>, 1738684345.4284196)}
2025-02-04 23:52:25,535 - stmt_idx: 3, status: success, result: None
2025-02-04 23:52:25,535 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_705 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-04 23:52:25,536 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:52:25,536 - 
2025-02-04 23:52:25,642 - 
2025-02-04 23:52:25,643 - 执行前idx: 5, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE", <Thread(Thread-39, started 5756)>, 1738684345.6421425)}
2025-02-04 23:52:25,750 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE
2025-02-04 23:52:25,751 - 执行后idx: 5, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE", <Thread(Thread-39, started 5756)>, 1738684345.6421425)}
2025-02-04 23:52:25,751 - 
2025-02-04 23:52:25,860 - 
2025-02-04 23:52:25,860 - 执行前idx: 8, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE", <Thread(Thread-39, started 5756)>, 1738684345.6421425), 7: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_705) VALUES (NULL, 'KTYvf', 68, 'OCmOb', 'wIkhG')", <Thread(Thread-40, started 31992)>, 1738684345.8608642)}
2025-02-04 23:52:25,967 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE
2025-02-04 23:52:26,074 - stmt_idx: 7, status: success, result: None
2025-02-04 23:52:26,074 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_705) VALUES (NULL, 'KTYvf', 68, 'OCmOb', 'wIkhG')
2025-02-04 23:52:26,075 - 执行后idx: 8, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE", <Thread(Thread-39, started 5756)>, 1738684345.6421425)}
2025-02-04 23:52:26,075 - 
2025-02-04 23:52:26,185 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, "SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE", <Thread(Thread-39, stopped 5756)>, 1738684345.6421425)}
2025-02-04 23:52:26,185 - 
2025-02-04 23:52:26,185 - 执行前idx: 10, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE", <Thread(Thread-39, stopped 5756)>, 1738684345.6421425)}
2025-02-04 23:52:26,288 - stmt_idx: 4, status: success, result: None
2025-02-04 23:52:26,288 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE
2025-02-04 23:52:26,288 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE
2025-02-04 23:52:26,289 - 执行后idx: 10, pending_stmts: {5: (2, "SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE (col_0 = 'rvlbg') AND (col_705 IS NULL) LOCK IN SHARE MODE", <Thread(Thread-41, started 40500)>, 1738684346.289349), 6: (2, 'SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE', <Thread(Thread-42, started 40648)>, 1738684346.2897952), 8: (2, 'COMMIT', <Thread(Thread-43, started 33544)>, 1738684346.2897952)}
2025-02-04 23:52:26,289 - 
2025-02-04 23:52:26,396 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, "SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE (col_0 = 'rvlbg') AND (col_705 IS NULL) LOCK IN SHARE MODE", <Thread(Thread-41, stopped 40500)>, 1738684346.289349), 6: (2, 'SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE', <Thread(Thread-42, stopped 40648)>, 1738684346.2897952), 8: (2, 'COMMIT', <Thread(Thread-43, stopped 33544)>, 1738684346.2897952)}
2025-02-04 23:52:26,396 - 
2025-02-04 23:52:26,396 - 执行前idx: 10, pending_stmts: {5: (2, "SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE (col_0 = 'rvlbg') AND (col_705 IS NULL) LOCK IN SHARE MODE", <Thread(Thread-41, stopped 40500)>, 1738684346.289349), 6: (2, 'SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE', <Thread(Thread-42, stopped 40648)>, 1738684346.2897952), 8: (2, 'COMMIT', <Thread(Thread-43, stopped 33544)>, 1738684346.2897952)}
2025-02-04 23:52:26,503 - stmt_idx: 5, status: success, result: None
2025-02-04 23:52:26,503 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE (col_0 = 'rvlbg') AND (col_705 IS NULL) LOCK IN SHARE MODE
2025-02-04 23:52:26,609 - stmt_idx: 6, status: success, result: None
2025-02-04 23:52:26,609 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE
2025-02-04 23:52:26,718 - stmt_idx: 8, status: success, result: None
2025-02-04 23:52:26,718 - 成功执行序列中事务2语句: COMMIT
2025-02-04 23:52:26,718 - 执行后idx: 10, pending_stmts: {}
2025-02-04 23:52:26,718 - 
2025-02-04 23:52:26,824 - 执行序列成功
2025-02-04 23:52:27,584 - is_atomic: True
2025-02-04 23:52:27,584 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:52:27,584 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 6 FOR UPDATE'), (2, 'SELECT id, col_1, col_2, col_705 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_705) VALUES (NULL, 'KTYvf', 68, 'OCmOb', 'wIkhG')"), (1, 'COMMIT'), (2, "SELECT * FROM table_0 WHERE (col_705 IS NULL) AND (col_2 = 'wznra') AND (col_1 = 81) LOCK IN SHARE MODE"), (2, "SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE (col_0 = 'rvlbg') AND (col_705 IS NULL) LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2, col_705 FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE'), (2, 'COMMIT')]
2025-02-04 23:52:27,584 - snapshots: {'before': {'table_0': [(1, 'akwws', 23, 'tazix', None), (2, 'jxucv', 55, 'uscwo', None), (3, 'lvjkw', 1, 'lavgq', None), (4, 'vgkix', 100, 'oxajh', None), (5, 'dcayy', 29, 'vqyyy', None), (6, 'bfupp', 45, 'wzlsi', None), (7, 'zoyyz', 81, 'wznra', None), (8, 'rvlbg', 54, 'beplw', None)]}, 'trx1': {'table_0': [(1, 'akwws', 23, 'tazix', None), (2, 'jxucv', 55, 'uscwo', None), (3, 'lvjkw', 1, 'lavgq', None), (4, 'vgkix', 100, 'oxajh', None), (5, 'dcayy', 29, 'vqyyy', None), (6, 'bfupp', 45, 'wzlsi', None), (7, 'zoyyz', 81, 'wznra', None), (8, 'rvlbg', 54, 'beplw', None), (9, 'KTYvf', 68, 'OCmOb', 'wIkhG')]}, 'trx2': {'table_0': [(1, 'akwws', 23, 'tazix', None), (2, 'jxucv', 55, 'uscwo', None), (3, 'lvjkw', 1, 'lavgq', None), (4, 'vgkix', 100, 'oxajh', None), (5, 'dcayy', 29, 'vqyyy', None), (6, 'bfupp', 45, 'wzlsi', None), (7, 'zoyyz', 81, 'wznra', None), (8, 'rvlbg', 54, 'beplw', None)]}, 'serial': {'table_0': [(1, 'akwws', 23, 'tazix', None), (2, 'jxucv', 55, 'uscwo', None), (3, 'lvjkw', 1, 'lavgq', None), (4, 'vgkix', 100, 'oxajh', None), (5, 'dcayy', 29, 'vqyyy', None), (6, 'bfupp', 45, 'wzlsi', None), (7, 'zoyyz', 81, 'wznra', None), (8, 'rvlbg', 54, 'beplw', None), (10, 'KTYvf', 68, 'OCmOb', 'wIkhG')]}}
2025-02-04 23:52:27,584 - 
2025-02-04 23:52:27,596 - iter: 5
2025-02-04 23:52:29,093 - table table_0 has 11 rows
2025-02-04 23:52:29,094 - trx1_lock_row_ids: [5, 6, 9, 11]
2025-02-04 23:52:29,094 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-04 23:52:29,094 - intersection_row_ids: [5, 6]
2025-02-04 23:52:29,094 - trx1_exclusive_ids: [9, 11]
2025-02-04 23:52:29,094 - trx2_exclusive_ids: [1, 2, 3, 4, 7, 8]
2025-02-04 23:52:29,094 - res_dict: {'trx1_lock_row_ids': [5, 6, 9, 11], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': [5, 6]}
2025-02-04 23:52:29,094 - lock_same_resource: True
2025-02-04 23:52:29,094 - 
2025-02-04 23:52:29,094 - intersection phase1
2025-02-04 23:52:29,099 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=8
2025-02-04 23:52:29,100 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:52:29,100 - params: {'v1': '1', 'set_expr': "col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50", 'table': 'table_0', 'v2': '8'}
2025-02-04 23:52:29,104 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,105 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:52:29,105 - params: {'set_expr': "col_1 = 66, col_2 = 'pPyZG', col_0 = 10, col_4 = 'raAYd', col_3 = 4.95", 'table': 'table_0', 'cond': '(id = 5)'}
2025-02-04 23:52:29,108 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,110 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:52:29,110 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 95, 58, 'naJRi', 79.69, 'wRxRH'", 'table': 'table_0'}
2025-02-04 23:52:29,111 - intersection phase1 end
2025-02-04 23:52:29,111 - 
2025-02-04 23:52:29,111 - intersection phase2
2025-02-04 23:52:29,111 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:52:29,111 - 事务2在第二阶段自己加的锁: II
2025-02-04 23:52:29,111 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-04 23:52:29,111 - 事务2在第三阶段请求对方资源的锁: X
2025-02-04 23:52:29,115 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,116 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:52:29,116 - params: {'cond': '(id = 9)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_4'}
2025-02-04 23:52:29,121 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,122 - needed_params: {'cond', 'table'}
2025-02-04 23:52:29,122 - params: {'cond': "(col_4 = 'lgjqe') AND (col_2 = 'jefig') AND (col_3 = 2.98)", 'table': 'table_0'}
2025-02-04 23:52:29,125 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,127 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:52:29,127 - params: {'set_expr': "col_2 = 'GjVXm', col_0 = 66, col_1 = 15, col_3 = 32.73, col_4 = 'wvWYz'", 'table': 'table_0', 'cond': '(col_3 = 56.19)'}
2025-02-04 23:52:29,132 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,133 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:52:29,133 - params: {'v1': '2', 'set_expr': "col_3 = 4.09, col_0 = 7, col_1 = 47, col_4 = 'Wkhid', col_2 = 'ZzKGt'", 'table': 'table_0', 'v2': '2'}
2025-02-04 23:52:29,136 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,138 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:52:29,138 - params: {'v1': '3', 'set_expr': "col_4 = 'xJfGf', col_1 = 45, col_2 = 'rTero'", 'table': 'table_0', 'v2': '3'}
2025-02-04 23:52:29,142 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,143 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:52:29,143 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 55, 50, 'Zdwso', 51.19, 'PjFxl'", 'table': 'table_0'}
2025-02-04 23:52:29,147 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,149 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:52:29,149 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 53, 18, 'MLkdL', 26.54, 'nknaT'", 'table': 'table_0'}
2025-02-04 23:52:29,152 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:52:29,154 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:52:29,154 - params: {'v1': '8', 'set_expr': 'col_1 = 74, col_3 = 16.78', 'table': 'table_0', 'v2': '8'}
2025-02-04 23:52:29,154 - intersection phase2 end
2025-02-04 23:52:29,154 - 
2025-02-04 23:52:29,154 - intersection phase3
2025-02-04 23:52:29,158 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=True, range_end_idx=4
2025-02-04 23:52:29,159 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:29,159 - params: {'v1': '2', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-04 23:52:29,159 - intersection phase3 end
2025-02-04 23:52:29,159 - 
2025-02-04 23:52:29,159 - 生成死锁事务序列成功如下
2025-02-04 23:52:29,160 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_1 = 66, col_2 = 'pPyZG', col_0 = 10, col_4 = 'raAYd', col_3 = 4.95 WHERE (id = 5)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 95, 58, 'naJRi', 79.69, 'wRxRH')"), (2, "UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8"), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (id = 9) FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (col_4 = 'lgjqe') AND (col_2 = 'jefig') AND (col_3 = 2.98)"), (2, "UPDATE table_0 SET col_2 = 'GjVXm', col_0 = 66, col_1 = 15, col_3 = 32.73, col_4 = 'wvWYz' WHERE (col_3 = 56.19)"), (2, "UPDATE table_0 SET col_3 = 4.09, col_0 = 7, col_1 = 47, col_4 = 'Wkhid', col_2 = 'ZzKGt' WHERE id BETWEEN 2 AND 2"), (2, "UPDATE table_0 SET col_4 = 'xJfGf', col_1 = 45, col_2 = 'rTero' WHERE id BETWEEN 3 AND 3"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 50, 'Zdwso', 51.19, 'PjFxl')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 53, 18, 'MLkdL', 26.54, 'nknaT')"), (2, 'UPDATE table_0 SET col_1 = 74, col_3 = 16.78 WHERE id BETWEEN 8 AND 8'), (2, None), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 2 AND id <= 4 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:52:30,689 - 创建事务1连接成功
2025-02-04 23:52:30,690 - 执行事务1语句: BEGIN
2025-02-04 23:52:30,691 - 执行事务1语句: UPDATE table_0 SET col_1 = 66, col_2 = 'pPyZG', col_0 = 10, col_4 = 'raAYd', col_3 = 4.95 WHERE (id = 5)
2025-02-04 23:52:30,692 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 95, 58, 'naJRi', 79.69, 'wRxRH')
2025-02-04 23:52:30,693 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (id = 9) FOR UPDATE
2025-02-04 23:52:30,694 - 执行事务1语句: DELETE FROM table_0 WHERE (col_4 = 'lgjqe') AND (col_2 = 'jefig') AND (col_3 = 2.98)
2025-02-04 23:52:30,694 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 2 AND id <= 4 FOR UPDATE
2025-02-04 23:52:30,696 - 执行事务1语句: COMMIT;
2025-02-04 23:52:30,701 - 执行事务1成功
2025-02-04 23:52:33,328 - 恢复初始状态成功
2025-02-04 23:52:34,124 - 创建事务2连接成功
2025-02-04 23:52:34,127 - 执行事务2语句: BEGIN
2025-02-04 23:52:34,128 - 执行事务2语句: UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8
2025-02-04 23:52:34,130 - 执行事务2语句: UPDATE table_0 SET col_2 = 'GjVXm', col_0 = 66, col_1 = 15, col_3 = 32.73, col_4 = 'wvWYz' WHERE (col_3 = 56.19)
2025-02-04 23:52:34,130 - 执行事务2语句: UPDATE table_0 SET col_3 = 4.09, col_0 = 7, col_1 = 47, col_4 = 'Wkhid', col_2 = 'ZzKGt' WHERE id BETWEEN 2 AND 2
2025-02-04 23:52:34,131 - 执行事务2语句: UPDATE table_0 SET col_4 = 'xJfGf', col_1 = 45, col_2 = 'rTero' WHERE id BETWEEN 3 AND 3
2025-02-04 23:52:34,132 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 50, 'Zdwso', 51.19, 'PjFxl')
2025-02-04 23:52:34,133 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 53, 18, 'MLkdL', 26.54, 'nknaT')
2025-02-04 23:52:34,134 - 执行事务2语句: UPDATE table_0 SET col_1 = 74, col_3 = 16.78 WHERE id BETWEEN 8 AND 8
2025-02-04 23:52:34,136 - 执行事务2语句: COMMIT;
2025-02-04 23:52:34,141 - 执行事务2成功
2025-02-04 23:52:39,174 - 
2025-02-04 23:52:39,174 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_1 = 66, col_2 = 'pPyZG', col_0 = 10, col_4 = 'raAYd', col_3 = 4.95 WHERE (id = 5)", <Thread(Thread-44, started 23768)>, 1738684359.1746423)}
2025-02-04 23:52:39,276 - stmt_idx: 2, status: success, result: None
2025-02-04 23:52:39,276 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 66, col_2 = 'pPyZG', col_0 = 10, col_4 = 'raAYd', col_3 = 4.95 WHERE (id = 5)
2025-02-04 23:52:39,276 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:52:39,276 - 
2025-02-04 23:52:39,381 - 
2025-02-04 23:52:39,381 - 执行前idx: 4, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 95, 58, 'naJRi', 79.69, 'wRxRH')", <Thread(Thread-45, started 32568)>, 1738684359.3818789)}
2025-02-04 23:52:39,489 - stmt_idx: 3, status: success, result: None
2025-02-04 23:52:39,489 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 95, 58, 'naJRi', 79.69, 'wRxRH')
2025-02-04 23:52:39,489 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:52:39,489 - 
2025-02-04 23:52:39,600 - 
2025-02-04 23:52:39,601 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8", <Thread(Thread-46, started 17148)>, 1738684359.600179)}
2025-02-04 23:52:39,708 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8
2025-02-04 23:52:39,708 - 执行后idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8", <Thread(Thread-46, started 17148)>, 1738684359.600179)}
2025-02-04 23:52:39,709 - 
2025-02-04 23:52:39,816 - 
2025-02-04 23:52:39,817 - 执行前idx: 6, pending_stmts: {4: (2, "UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8", <Thread(Thread-46, started 17148)>, 1738684359.600179), 5: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (id = 9) FOR UPDATE', <Thread(Thread-47, started 20488)>, 1738684359.8165903)}
2025-02-04 23:52:39,921 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8
2025-02-04 23:52:40,032 - stmt_idx: 5, status: success, result: None
2025-02-04 23:52:40,032 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (id = 9) FOR UPDATE
2025-02-04 23:52:40,032 - 执行后idx: 6, pending_stmts: {4: (2, "UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8", <Thread(Thread-46, started 17148)>, 1738684359.600179)}
2025-02-04 23:52:40,032 - 
2025-02-04 23:52:40,140 - 
2025-02-04 23:52:40,141 - 执行前idx: 7, pending_stmts: {4: (2, "UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8", <Thread(Thread-46, started 17148)>, 1738684359.600179), 6: (1, "DELETE FROM table_0 WHERE (col_4 = 'lgjqe') AND (col_2 = 'jefig') AND (col_3 = 2.98)", <Thread(Thread-48, started 16064)>, 1738684360.1405087)}
2025-02-04 23:52:40,144 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (col_4 = 'lgjqe') AND (col_2 = 'jefig') AND (col_3 = 2.98)
2025-02-04 23:52:40,245 - stmt_idx: 4, status: success, result: None
2025-02-04 23:52:40,245 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8
2025-02-04 23:52:40,245 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8
2025-02-04 23:52:40,352 - stmt_idx: 6, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:52:40,352 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: DELETE FROM table_0 WHERE (col_4 = 'lgjqe') AND (col_2 = 'jefig') AND (col_3 = 2.98)
2025-02-04 23:52:40,352 - 错误: dictionary changed size during iteration
2025-02-04 23:52:40,353 - 
2025-02-04 23:52:40,353 - 执行前idx: 8, pending_stmts: {7: (2, "UPDATE table_0 SET col_2 = 'GjVXm', col_0 = 66, col_1 = 15, col_3 = 32.73, col_4 = 'wvWYz' WHERE (col_3 = 56.19)", <Thread(Thread-49, started 6928)>, 1738684360.3528268)}
2025-02-04 23:52:40,459 - stmt_idx: 7, status: success, result: None
2025-02-04 23:52:40,459 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'GjVXm', col_0 = 66, col_1 = 15, col_3 = 32.73, col_4 = 'wvWYz' WHERE (col_3 = 56.19)
2025-02-04 23:52:40,459 - 执行后idx: 8, pending_stmts: {}
2025-02-04 23:52:40,459 - 
2025-02-04 23:52:40,567 - 
2025-02-04 23:52:40,568 - 执行前idx: 9, pending_stmts: {8: (2, "UPDATE table_0 SET col_3 = 4.09, col_0 = 7, col_1 = 47, col_4 = 'Wkhid', col_2 = 'ZzKGt' WHERE id BETWEEN 2 AND 2", <Thread(Thread-50, started 3524)>, 1738684360.5677233)}
2025-02-04 23:52:40,676 - stmt_idx: 8, status: success, result: None
2025-02-04 23:52:40,676 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 4.09, col_0 = 7, col_1 = 47, col_4 = 'Wkhid', col_2 = 'ZzKGt' WHERE id BETWEEN 2 AND 2
2025-02-04 23:52:40,676 - 执行后idx: 9, pending_stmts: {}
2025-02-04 23:52:40,676 - 
2025-02-04 23:52:40,782 - 
2025-02-04 23:52:40,782 - 执行前idx: 10, pending_stmts: {9: (2, "UPDATE table_0 SET col_4 = 'xJfGf', col_1 = 45, col_2 = 'rTero' WHERE id BETWEEN 3 AND 3", <Thread(Thread-51, started 24460)>, 1738684360.7828126)}
2025-02-04 23:52:40,891 - stmt_idx: 9, status: success, result: None
2025-02-04 23:52:40,891 - 成功执行序列中事务2语句: UPDATE table_0 SET col_4 = 'xJfGf', col_1 = 45, col_2 = 'rTero' WHERE id BETWEEN 3 AND 3
2025-02-04 23:52:40,891 - 执行后idx: 10, pending_stmts: {}
2025-02-04 23:52:40,891 - 
2025-02-04 23:52:40,999 - 
2025-02-04 23:52:41,000 - 执行前idx: 11, pending_stmts: {10: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 50, 'Zdwso', 51.19, 'PjFxl')", <Thread(Thread-52, started 27572)>, 1738684360.9997942)}
2025-02-04 23:52:41,107 - stmt_idx: 10, status: success, result: None
2025-02-04 23:52:41,107 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 50, 'Zdwso', 51.19, 'PjFxl')
2025-02-04 23:52:41,107 - 执行后idx: 11, pending_stmts: {}
2025-02-04 23:52:41,107 - 
2025-02-04 23:52:41,218 - 
2025-02-04 23:52:41,219 - 执行前idx: 12, pending_stmts: {11: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 53, 18, 'MLkdL', 26.54, 'nknaT')", <Thread(Thread-53, started 35500)>, 1738684361.2188973)}
2025-02-04 23:52:41,325 - stmt_idx: 11, status: success, result: None
2025-02-04 23:52:41,325 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 53, 18, 'MLkdL', 26.54, 'nknaT')
2025-02-04 23:52:41,325 - 执行后idx: 12, pending_stmts: {}
2025-02-04 23:52:41,325 - 
2025-02-04 23:52:41,434 - 
2025-02-04 23:52:41,435 - 执行前idx: 13, pending_stmts: {12: (2, 'UPDATE table_0 SET col_1 = 74, col_3 = 16.78 WHERE id BETWEEN 8 AND 8', <Thread(Thread-54, started 28340)>, 1738684361.4346907)}
2025-02-04 23:52:41,542 - stmt_idx: 12, status: success, result: None
2025-02-04 23:52:41,542 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 74, col_3 = 16.78 WHERE id BETWEEN 8 AND 8
2025-02-04 23:52:41,542 - 执行后idx: 13, pending_stmts: {}
2025-02-04 23:52:41,542 - 
2025-02-04 23:52:41,651 - stmt为None, trx_id: 2, stmt: None
2025-02-04 23:52:41,656 - 执行序列成功
2025-02-04 23:52:42,428 - is_atomic: True
2025-02-04 23:52:42,428 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-04 23:52:42,428 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_1 = 66, col_2 = 'pPyZG', col_0 = 10, col_4 = 'raAYd', col_3 = 4.95 WHERE (id = 5)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 95, 58, 'naJRi', 79.69, 'wRxRH')"), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (id = 9) FOR UPDATE'), (2, "UPDATE table_0 SET col_3 = 2.85, col_1 = 39, col_2 = 'uixxN', col_0 = 50 WHERE id BETWEEN 1 AND 8"), (1, 'ROLLBACK'), (2, "UPDATE table_0 SET col_2 = 'GjVXm', col_0 = 66, col_1 = 15, col_3 = 32.73, col_4 = 'wvWYz' WHERE (col_3 = 56.19)"), (2, "UPDATE table_0 SET col_3 = 4.09, col_0 = 7, col_1 = 47, col_4 = 'Wkhid', col_2 = 'ZzKGt' WHERE id BETWEEN 2 AND 2"), (2, "UPDATE table_0 SET col_4 = 'xJfGf', col_1 = 45, col_2 = 'rTero' WHERE id BETWEEN 3 AND 3"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 50, 'Zdwso', 51.19, 'PjFxl')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 53, 18, 'MLkdL', 26.54, 'nknaT')"), (2, 'UPDATE table_0 SET col_1 = 74, col_3 = 16.78 WHERE id BETWEEN 8 AND 8'), (1, '--Skipped, trx_id: 1, stmt: SELECT id, col_0 FROM table_0 WHERE id >= 2 AND id <= 4 FOR UPDATE'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-04 23:52:42,428 - snapshots: {'before': {'table_0': [(1, 85, 89, 'uteup', 56.19, 'feief'), (2, 77, 70, 'wedyg', 74.86, 'xqnix'), (3, 33, 61, 'wuovx', 98.41, 'rlhfk'), (4, 5, 9, 'tfikd', 5.74, 'pfeyo'), (5, 85, 61, 'vccrc', 89.8, 'bwblo'), (6, 37, 15, 'wmbjm', 25.38, 'ywcrc'), (7, 44, 68, 'cqehv', 5.22, 'dkvmt'), (8, 44, 47, 'ufcox', 38.5, 'bwxyq'), (9, 16, 18, 'oskxg', 53.97, 'dksoa'), (10, 27, 50, 'ivbvn', 68.21, 'mjmfm'), (11, 86, 38, 'jefig', 2.98, 'lgjqe')]}, 'trx1': {'table_0': [(1, 85, 89, 'uteup', 56.19, 'feief'), (2, 77, 70, 'wedyg', 74.86, 'xqnix'), (3, 33, 61, 'wuovx', 98.41, 'rlhfk'), (4, 5, 9, 'tfikd', 5.74, 'pfeyo'), (5, 10, 66, 'pPyZG', 4.95, 'raAYd'), (6, 37, 15, 'wmbjm', 25.38, 'ywcrc'), (7, 44, 68, 'cqehv', 5.22, 'dkvmt'), (8, 44, 47, 'ufcox', 38.5, 'bwxyq'), (9, 16, 18, 'oskxg', 53.97, 'dksoa'), (10, 27, 50, 'ivbvn', 68.21, 'mjmfm'), (11, 86, 38, 'jefig', 2.98, 'lgjqe'), (12, 95, 58, 'naJRi', 79.69, 'wRxRH')]}, 'trx2': {'table_0': [(1, 50, 39, 'uixxN', 2.85, 'feief'), (2, 7, 47, 'ZzKGt', 4.09, 'Wkhid'), (3, 50, 45, 'rTero', 2.85, 'xJfGf'), (4, 50, 39, 'uixxN', 2.85, 'pfeyo'), (5, 50, 39, 'uixxN', 2.85, 'bwblo'), (6, 50, 39, 'uixxN', 2.85, 'ywcrc'), (7, 50, 39, 'uixxN', 2.85, 'dkvmt'), (8, 50, 74, 'uixxN', 16.78, 'bwxyq'), (9, 16, 18, 'oskxg', 53.97, 'dksoa'), (10, 27, 50, 'ivbvn', 68.21, 'mjmfm'), (11, 86, 38, 'jefig', 2.98, 'lgjqe'), (13, 55, 50, 'Zdwso', 51.19, 'PjFxl'), (14, 53, 18, 'MLkdL', 26.54, 'nknaT')]}, 'serial': {'table_0': [(1, 50, 39, 'uixxN', 2.85, 'feief'), (2, 7, 47, 'ZzKGt', 4.09, 'Wkhid'), (3, 50, 45, 'rTero', 2.85, 'xJfGf'), (4, 50, 39, 'uixxN', 2.85, 'pfeyo'), (5, 50, 39, 'uixxN', 2.85, 'bwblo'), (6, 50, 39, 'uixxN', 2.85, 'ywcrc'), (7, 50, 39, 'uixxN', 2.85, 'dkvmt'), (8, 50, 74, 'uixxN', 16.78, 'bwxyq'), (9, 16, 18, 'oskxg', 53.97, 'dksoa'), (10, 27, 50, 'ivbvn', 68.21, 'mjmfm'), (11, 86, 38, 'jefig', 2.98, 'lgjqe'), (16, 55, 50, 'Zdwso', 51.19, 'PjFxl'), (17, 53, 18, 'MLkdL', 26.54, 'nknaT')]}}
2025-02-04 23:52:42,428 - 
2025-02-04 23:52:42,442 - iter: 6
2025-02-04 23:52:43,971 - table table_0 has 12 rows
2025-02-04 23:52:43,972 - res_dict: {'trx1_lock_row_ids': [2, 3], 'trx2_lock_row_ids': [11], 'intersection_row_ids': []}
2025-02-04 23:52:43,972 - lock_same_resource: False
2025-02-04 23:52:43,972 - 
2025-02-04 23:52:43,972 - non intersection phase1
2025-02-04 23:52:43,972 - 事务1在第一阶段自己加的锁: X
2025-02-04 23:52:43,972 - 事务2在第一阶段自己加的锁: S
2025-02-04 23:52:43,972 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:52:43,973 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:52:43,977 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-04 23:52:43,978 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:43,978 - params: {'v1': '2', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4'}
2025-02-04 23:52:43,982 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=11, is_continuous=True, range_end_idx=11
2025-02-04 23:52:43,983 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:43,983 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:52:43,983 - non intersection phase1 end
2025-02-04 23:52:43,983 - 
2025-02-04 23:52:43,983 - non intersection phase2
2025-02-04 23:52:43,987 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=11, is_continuous=True, range_end_idx=11
2025-02-04 23:52:43,988 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:43,988 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3'}
2025-02-04 23:52:43,992 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-04 23:52:43,994 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:43,994 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_3'}
2025-02-04 23:52:43,994 - non intersection phase2 end
2025-02-04 23:52:43,994 - 
2025-02-04 23:52:43,994 - 生成死锁事务序列成功如下
2025-02-04 23:52:43,994 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:52:45,540 - 创建事务1连接成功
2025-02-04 23:52:45,541 - 执行事务1语句: BEGIN
2025-02-04 23:52:45,543 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-04 23:52:45,544 - 执行事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE
2025-02-04 23:52:45,544 - 执行事务1语句: COMMIT;
2025-02-04 23:52:45,549 - 执行事务1成功
2025-02-04 23:52:48,140 - 恢复初始状态成功
2025-02-04 23:52:49,009 - 创建事务2连接成功
2025-02-04 23:52:49,011 - 执行事务2语句: BEGIN
2025-02-04 23:52:49,012 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-04 23:52:49,013 - 执行事务2语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:52:49,014 - 执行事务2语句: COMMIT;
2025-02-04 23:52:49,019 - 执行事务2成功
2025-02-04 23:52:54,143 - 
2025-02-04 23:52:54,144 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-55, started 34312)>, 1738684374.143805)}
2025-02-04 23:52:54,244 - stmt_idx: 2, status: success, result: None
2025-02-04 23:52:54,244 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-04 23:52:54,244 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:52:54,244 - 
2025-02-04 23:52:54,355 - 
2025-02-04 23:52:54,356 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-56, started 36492)>, 1738684374.355642)}
2025-02-04 23:52:54,466 - stmt_idx: 3, status: success, result: None
2025-02-04 23:52:54,466 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-04 23:52:54,466 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:52:54,466 - 
2025-02-04 23:52:54,576 - 
2025-02-04 23:52:54,576 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-57, started 34096)>, 1738684374.5762384)}
2025-02-04 23:52:54,686 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:52:54,686 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-57, started 34096)>, 1738684374.5762384)}
2025-02-04 23:52:54,687 - 
2025-02-04 23:52:54,794 - 
2025-02-04 23:52:54,795 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-57, started 34096)>, 1738684374.5762384), 5: (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE', <Thread(Thread-58, started 11996)>, 1738684374.794321)}
2025-02-04 23:52:54,797 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE
2025-02-04 23:52:54,901 - stmt_idx: 4, status: success, result: None
2025-02-04 23:52:54,901 - 成功执行序列中事务2语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:52:54,901 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:52:55,010 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:52:55,010 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE
2025-02-04 23:52:55,011 - 错误: dictionary changed size during iteration
2025-02-04 23:52:55,014 - 执行序列成功
2025-02-04 23:52:55,802 - is_atomic: True
2025-02-04 23:52:55,803 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-04 23:52:55,803 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-04 23:52:55,803 - snapshots: {'before': {'table_0': [(1, 'hvkcl', 34.88, 47.73, 2.51, 55), (2, 'xutue', 53.25, 51.05, 20.03, 79), (3, 'bshln', 8.08, 52.43, 38.46, 55), (4, 'iywkc', 54.11, 77.93, 72.96, 87), (5, 'bfbte', 46.7, 32.83, 51.12, 65), (6, 'tndcg', 30.77, 40.9, 36.17, 88), (7, 'dwimd', 91.7, 63.49, 60.04, 92), (8, 'uecko', 24.16, 35.66, 36.37, 94), (9, 'prguh', 25.96, 50.44, 28.1, 26), (10, 'yongv', 52.35, 77.53, 71.69, 70), (11, 'cqice', 97.54, 46.0, 26.44, 36), (12, 'ekttw', 48.22, 41.53, 49.25, 78)]}, 'trx1': {'table_0': [(1, 'hvkcl', 34.88, 47.73, 2.51, 55), (2, 'xutue', 53.25, 51.05, 20.03, 79), (3, 'bshln', 8.08, 52.43, 38.46, 55), (4, 'iywkc', 54.11, 77.93, 72.96, 87), (5, 'bfbte', 46.7, 32.83, 51.12, 65), (6, 'tndcg', 30.77, 40.9, 36.17, 88), (7, 'dwimd', 91.7, 63.49, 60.04, 92), (8, 'uecko', 24.16, 35.66, 36.37, 94), (9, 'prguh', 25.96, 50.44, 28.1, 26), (10, 'yongv', 52.35, 77.53, 71.69, 70), (11, 'cqice', 97.54, 46.0, 26.44, 36), (12, 'ekttw', 48.22, 41.53, 49.25, 78)]}, 'trx2': {'table_0': [(1, 'hvkcl', 34.88, 47.73, 2.51, 55), (2, 'xutue', 53.25, 51.05, 20.03, 79), (3, 'bshln', 8.08, 52.43, 38.46, 55), (4, 'iywkc', 54.11, 77.93, 72.96, 87), (5, 'bfbte', 46.7, 32.83, 51.12, 65), (6, 'tndcg', 30.77, 40.9, 36.17, 88), (7, 'dwimd', 91.7, 63.49, 60.04, 92), (8, 'uecko', 24.16, 35.66, 36.37, 94), (9, 'prguh', 25.96, 50.44, 28.1, 26), (10, 'yongv', 52.35, 77.53, 71.69, 70), (11, 'cqice', 97.54, 46.0, 26.44, 36), (12, 'ekttw', 48.22, 41.53, 49.25, 78)]}, 'serial': {'table_0': [(1, 'hvkcl', 34.88, 47.73, 2.51, 55), (2, 'xutue', 53.25, 51.05, 20.03, 79), (3, 'bshln', 8.08, 52.43, 38.46, 55), (4, 'iywkc', 54.11, 77.93, 72.96, 87), (5, 'bfbte', 46.7, 32.83, 51.12, 65), (6, 'tndcg', 30.77, 40.9, 36.17, 88), (7, 'dwimd', 91.7, 63.49, 60.04, 92), (8, 'uecko', 24.16, 35.66, 36.37, 94), (9, 'prguh', 25.96, 50.44, 28.1, 26), (10, 'yongv', 52.35, 77.53, 71.69, 70), (11, 'cqice', 97.54, 46.0, 26.44, 36), (12, 'ekttw', 48.22, 41.53, 49.25, 78)]}}
2025-02-04 23:52:55,803 - 
2025-02-04 23:52:55,817 - iter: 7
2025-02-04 23:52:57,340 - table table_0 has 10 rows
2025-02-04 23:52:57,340 - res_dict: {'trx1_lock_row_ids': [8, 9], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-04 23:52:57,340 - lock_same_resource: False
2025-02-04 23:52:57,340 - 
2025-02-04 23:52:57,340 - non intersection phase1
2025-02-04 23:52:57,341 - 事务1在第一阶段自己加的锁: NK
2025-02-04 23:52:57,341 - 事务2在第一阶段自己加的锁: NK
2025-02-04 23:52:57,341 - 事务1在第二阶段请求对方资源的锁: II
2025-02-04 23:52:57,341 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:52:57,345 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:52:57,347 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:52:57,347 - params: {'set_expr': "col_2 = 'xbQYT', col_3 = 72.56, col_0 = 91.66", 'table': 'table_0', 'cond': '(id = 8)'}
2025-02-04 23:52:57,351 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:52:57,353 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:52:57,353 - params: {'set_expr': "col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF'", 'table': 'table_0', 'cond': "(col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)"}
2025-02-04 23:52:57,359 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=True, range_end_idx=7
2025-02-04 23:52:57,361 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:52:57,362 - params: {'v1': '1', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3'}
2025-02-04 23:52:57,362 - non intersection phase1 end
2025-02-04 23:52:57,362 - 
2025-02-04 23:52:57,362 - non intersection phase2
2025-02-04 23:52:57,366 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-04 23:52:57,368 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:52:57,369 - params: {'v1': '7', 'set_expr': "col_2 = 'EZOAj', col_0 = 22.36", 'table': 'table_0', 'v2': '7'}
2025-02-04 23:52:57,374 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:52:57,375 - needed_params: {'cond', 'table'}
2025-02-04 23:52:57,376 - params: {'cond': '(id = 8)', 'table': 'table_0'}
2025-02-04 23:52:57,376 - non intersection phase2 end
2025-02-04 23:52:57,376 - 
2025-02-04 23:52:57,376 - 生成死锁事务序列成功如下
2025-02-04 23:52:57,376 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id >= 1 AND id <= 7 FOR UPDATE'), (1, "UPDATE table_0 SET col_2 = 'xbQYT', col_3 = 72.56, col_0 = 91.66 WHERE (id = 8)"), (1, "UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)"), (1, "UPDATE table_0 SET col_2 = 'EZOAj', col_0 = 22.36 WHERE id BETWEEN 7 AND 7"), (2, 'DELETE FROM table_0 WHERE (id = 8)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:52:58,919 - 创建事务1连接成功
2025-02-04 23:52:58,920 - 执行事务1语句: BEGIN
2025-02-04 23:52:58,921 - 执行事务1语句: UPDATE table_0 SET col_2 = 'xbQYT', col_3 = 72.56, col_0 = 91.66 WHERE (id = 8)
2025-02-04 23:52:58,922 - 执行事务1语句: UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)
2025-02-04 23:52:58,923 - 执行事务1语句: UPDATE table_0 SET col_2 = 'EZOAj', col_0 = 22.36 WHERE id BETWEEN 7 AND 7
2025-02-04 23:52:58,925 - 执行事务1语句: COMMIT;
2025-02-04 23:52:58,930 - 执行事务1成功
2025-02-04 23:53:01,543 - 恢复初始状态成功
2025-02-04 23:53:02,324 - 创建事务2连接成功
2025-02-04 23:53:02,325 - 执行事务2语句: BEGIN
2025-02-04 23:53:02,327 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id >= 1 AND id <= 7 FOR UPDATE
2025-02-04 23:53:02,327 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 8)
2025-02-04 23:53:02,329 - 执行事务2语句: COMMIT;
2025-02-04 23:53:02,335 - 执行事务2成功
2025-02-04 23:53:07,312 - 
2025-02-04 23:53:07,313 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id >= 1 AND id <= 7 FOR UPDATE', <Thread(Thread-59, started 40716)>, 1738684387.3128314)}
2025-02-04 23:53:07,419 - stmt_idx: 2, status: success, result: None
2025-02-04 23:53:07,419 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id >= 1 AND id <= 7 FOR UPDATE
2025-02-04 23:53:07,419 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:53:07,419 - 
2025-02-04 23:53:07,527 - 
2025-02-04 23:53:07,528 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 'xbQYT', col_3 = 72.56, col_0 = 91.66 WHERE (id = 8)", <Thread(Thread-60, started 32108)>, 1738684387.5279543)}
2025-02-04 23:53:07,635 - stmt_idx: 3, status: success, result: None
2025-02-04 23:53:07,635 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'xbQYT', col_3 = 72.56, col_0 = 91.66 WHERE (id = 8)
2025-02-04 23:53:07,635 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:53:07,635 - 
2025-02-04 23:53:07,744 - 
2025-02-04 23:53:07,745 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)", <Thread(Thread-61, started 34372)>, 1738684387.744841)}
2025-02-04 23:53:07,855 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)
2025-02-04 23:53:07,855 - 执行后idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)", <Thread(Thread-61, started 34372)>, 1738684387.744841)}
2025-02-04 23:53:07,855 - 
2025-02-04 23:53:07,963 - 
2025-02-04 23:53:07,964 - 执行前idx: 7, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)", <Thread(Thread-61, started 34372)>, 1738684387.744841), 6: (2, 'DELETE FROM table_0 WHERE (id = 8)', <Thread(Thread-62, started 40148)>, 1738684387.963393)}
2025-02-04 23:53:07,966 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (id = 8)
2025-02-04 23:53:08,071 - stmt_idx: 4, status: success, result: None
2025-02-04 23:53:08,071 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)
2025-02-04 23:53:08,071 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)
2025-02-04 23:53:08,179 - stmt_idx: 6, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:53:08,179 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: DELETE FROM table_0 WHERE (id = 8)
2025-02-04 23:53:08,180 - 错误: dictionary changed size during iteration
2025-02-04 23:53:08,184 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, "UPDATE table_0 SET col_2 = 'EZOAj', col_0 = 22.36 WHERE id BETWEEN 7 AND 7", <Thread(Thread-63, stopped 35436)>, 1738684388.0726602)}
2025-02-04 23:53:08,184 - 
2025-02-04 23:53:08,184 - 执行前idx: 9, pending_stmts: {5: (1, "UPDATE table_0 SET col_2 = 'EZOAj', col_0 = 22.36 WHERE id BETWEEN 7 AND 7", <Thread(Thread-63, stopped 35436)>, 1738684388.0726602)}
2025-02-04 23:53:08,286 - stmt_idx: 5, status: success, result: None
2025-02-04 23:53:08,286 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'EZOAj', col_0 = 22.36 WHERE id BETWEEN 7 AND 7
2025-02-04 23:53:08,286 - 执行后idx: 9, pending_stmts: {}
2025-02-04 23:53:08,286 - 
2025-02-04 23:53:08,395 - 执行序列成功
2025-02-04 23:53:09,177 - is_atomic: True
2025-02-04 23:53:09,177 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-04 23:53:09,177 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id >= 1 AND id <= 7 FOR UPDATE'), (1, "UPDATE table_0 SET col_2 = 'xbQYT', col_3 = 72.56, col_0 = 91.66 WHERE (id = 8)"), (1, "UPDATE table_0 SET col_0 = 78.81, col_1 = 'NVYbr', col_2 = 'wEwQF' WHERE (col_1 = 'fhkwz') AND (col_3 = 22.36) AND (col_0 = 50.19)"), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, "UPDATE table_0 SET col_2 = 'EZOAj', col_0 = 22.36 WHERE id BETWEEN 7 AND 7")]
2025-02-04 23:53:09,177 - snapshots: {'before': {'table_0': [(1, 41.77, 'apgnr', 'sylxl', 33.66), (2, 75.35, 'tyewp', 'noeeg', 42.49), (3, 24.87, 'izuok', 'qbxvw', 47.87), (4, 35.89, 'vkqtr', 'tpxgj', 66.06), (5, 1.68, 'oxemd', 'rklzp', 99.33), (6, 24.09, 'vwdpx', 'unchc', 94.53), (7, 89.95, 'ymauw', 'kfzmm', 24.71), (8, 16.6, 'ckcrn', 'jdjgn', 98.2), (9, 50.19, 'fhkwz', 'wnnfu', 22.36), (10, 11.41, 'crkyp', 'opqkn', 51.43)]}, 'trx1': {'table_0': [(1, 41.77, 'apgnr', 'sylxl', 33.66), (2, 75.35, 'tyewp', 'noeeg', 42.49), (3, 24.87, 'izuok', 'qbxvw', 47.87), (4, 35.89, 'vkqtr', 'tpxgj', 66.06), (5, 1.68, 'oxemd', 'rklzp', 99.33), (6, 24.09, 'vwdpx', 'unchc', 94.53), (7, 22.36, 'ymauw', 'EZOAj', 24.71), (8, 91.66, 'ckcrn', 'xbQYT', 72.56), (9, 78.81, 'NVYbr', 'wEwQF', 22.36), (10, 11.41, 'crkyp', 'opqkn', 51.43)]}, 'trx2': {'table_0': [(1, 41.77, 'apgnr', 'sylxl', 33.66), (2, 75.35, 'tyewp', 'noeeg', 42.49), (3, 24.87, 'izuok', 'qbxvw', 47.87), (4, 35.89, 'vkqtr', 'tpxgj', 66.06), (5, 1.68, 'oxemd', 'rklzp', 99.33), (6, 24.09, 'vwdpx', 'unchc', 94.53), (7, 89.95, 'ymauw', 'kfzmm', 24.71), (9, 50.19, 'fhkwz', 'wnnfu', 22.36), (10, 11.41, 'crkyp', 'opqkn', 51.43)]}, 'serial': {'table_0': [(1, 41.77, 'apgnr', 'sylxl', 33.66), (2, 75.35, 'tyewp', 'noeeg', 42.49), (3, 24.87, 'izuok', 'qbxvw', 47.87), (4, 35.89, 'vkqtr', 'tpxgj', 66.06), (5, 1.68, 'oxemd', 'rklzp', 99.33), (6, 24.09, 'vwdpx', 'unchc', 94.53), (7, 22.36, 'ymauw', 'EZOAj', 24.71), (8, 91.66, 'ckcrn', 'xbQYT', 72.56), (9, 78.81, 'NVYbr', 'wEwQF', 22.36), (10, 11.41, 'crkyp', 'opqkn', 51.43)]}}
2025-02-04 23:53:09,178 - 
2025-02-04 23:53:09,191 - iter: 8
2025-02-04 23:53:10,721 - table table_0 has 6 rows
2025-02-04 23:53:10,721 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [2, 3, 4, 5, 6], 'intersection_row_ids': []}
2025-02-04 23:53:10,721 - lock_same_resource: False
2025-02-04 23:53:10,722 - 
2025-02-04 23:53:10,722 - non intersection phase1
2025-02-04 23:53:10,723 - 事务1在第一阶段自己加的锁: X
2025-02-04 23:53:10,723 - 事务2在第一阶段自己加的锁: II
2025-02-04 23:53:10,723 - 事务1在第二阶段请求对方资源的锁: X
2025-02-04 23:53:10,723 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-04 23:53:10,726 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:53:10,727 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:53:10,727 - params: {'cond': '(id = 1)', 'table': 'table_0', 'select_cols': 'id, col_0, col_798'}
2025-02-04 23:53:10,731 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-04 23:53:10,733 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:53:10,733 - params: {'v1': '2', 'set_expr': "col_0 = 88.17, col_798 = 'nECCO'", 'table': 'table_0', 'v2': '6'}
2025-02-04 23:53:10,733 - non intersection phase1 end
2025-02-04 23:53:10,733 - 
2025-02-04 23:53:10,733 - non intersection phase2
2025-02-04 23:53:10,736 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-04 23:53:10,739 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:10,739 - params: {'v1': '5', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_0, col_798'}
2025-02-04 23:53:10,743 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:53:10,744 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:10,744 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'col_0'}
2025-02-04 23:53:10,744 - non intersection phase2 end
2025-02-04 23:53:10,744 - 
2025-02-04 23:53:10,744 - 生成死锁事务序列成功如下
2025-02-04 23:53:10,744 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_798 FROM table_0 WHERE (id = 1) FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 88.17, col_798 = 'nECCO' WHERE id BETWEEN 2 AND 6"), (2, 'SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'SELECT id, col_0, col_798 FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:53:12,284 - 创建事务1连接成功
2025-02-04 23:53:12,285 - 执行事务1语句: BEGIN
2025-02-04 23:53:12,286 - 执行事务1语句: SELECT id, col_0, col_798 FROM table_0 WHERE (id = 1) FOR UPDATE
2025-02-04 23:53:12,287 - 执行事务1语句: SELECT id, col_0, col_798 FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-04 23:53:12,287 - 执行事务1语句: COMMIT;
2025-02-04 23:53:12,292 - 执行事务1成功
2025-02-04 23:53:14,907 - 恢复初始状态成功
2025-02-04 23:53:15,687 - 创建事务2连接成功
2025-02-04 23:53:15,688 - 执行事务2语句: BEGIN
2025-02-04 23:53:15,689 - 执行事务2语句: UPDATE table_0 SET col_0 = 88.17, col_798 = 'nECCO' WHERE id BETWEEN 2 AND 6
2025-02-04 23:53:15,690 - 执行事务2语句: SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-04 23:53:15,692 - 执行事务2语句: COMMIT;
2025-02-04 23:53:15,697 - 执行事务2成功
2025-02-04 23:53:20,609 - 
2025-02-04 23:53:20,609 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_798 FROM table_0 WHERE (id = 1) FOR UPDATE', <Thread(Thread-64, started 37944)>, 1738684400.6092334)}
2025-02-04 23:53:20,721 - stmt_idx: 2, status: success, result: None
2025-02-04 23:53:20,721 - 成功执行序列中事务1语句: SELECT id, col_0, col_798 FROM table_0 WHERE (id = 1) FOR UPDATE
2025-02-04 23:53:20,721 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:53:20,721 - 
2025-02-04 23:53:20,830 - 
2025-02-04 23:53:20,832 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 88.17, col_798 = 'nECCO' WHERE id BETWEEN 2 AND 6", <Thread(Thread-65, started 7428)>, 1738684400.8309395)}
2025-02-04 23:53:20,938 - stmt_idx: 3, status: success, result: None
2025-02-04 23:53:20,938 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 88.17, col_798 = 'nECCO' WHERE id BETWEEN 2 AND 6
2025-02-04 23:53:20,938 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:53:20,938 - 
2025-02-04 23:53:21,047 - 
2025-02-04 23:53:21,047 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-66, started 31928)>, 1738684401.047503)}
2025-02-04 23:53:21,155 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-04 23:53:21,155 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-66, started 31928)>, 1738684401.047503)}
2025-02-04 23:53:21,155 - 
2025-02-04 23:53:21,261 - 
2025-02-04 23:53:21,262 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-66, started 31928)>, 1738684401.047503), 5: (1, 'SELECT id, col_0, col_798 FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE', <Thread(Thread-67, started 10160)>, 1738684401.2619417)}
2025-02-04 23:53:21,264 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_798 FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-04 23:53:21,369 - stmt_idx: 4, status: success, result: None
2025-02-04 23:53:21,369 - 成功执行序列中事务2语句: SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-04 23:53:21,369 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-04 23:53:21,475 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:53:21,475 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_798 FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-04 23:53:21,475 - 错误: dictionary changed size during iteration
2025-02-04 23:53:21,480 - 执行序列成功
2025-02-04 23:53:22,253 - is_atomic: True
2025-02-04 23:53:22,253 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-04 23:53:22,253 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_798 FROM table_0 WHERE (id = 1) FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 88.17, col_798 = 'nECCO' WHERE id BETWEEN 2 AND 6"), (2, 'SELECT col_0 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-04 23:53:22,253 - snapshots: {'before': {'table_0': [(1, 27.33, None), (2, 59.0, None), (3, 50.96, None), (4, 65.97, None), (5, 42.04, None), (6, 97.66, None)]}, 'trx1': {'table_0': [(1, 27.33, None), (2, 59.0, None), (3, 50.96, None), (4, 65.97, None), (5, 42.04, None), (6, 97.66, None)]}, 'trx2': {'table_0': [(1, 27.33, None), (2, 88.17, 'nECCO'), (3, 88.17, 'nECCO'), (4, 88.17, 'nECCO'), (5, 88.17, 'nECCO'), (6, 88.17, 'nECCO')]}, 'serial': {'table_0': [(1, 27.33, None), (2, 88.17, 'nECCO'), (3, 88.17, 'nECCO'), (4, 88.17, 'nECCO'), (5, 88.17, 'nECCO'), (6, 88.17, 'nECCO')]}}
2025-02-04 23:53:22,253 - 
2025-02-04 23:53:22,266 - iter: 9
2025-02-04 23:53:23,818 - table table_0 has 13 rows
2025-02-04 23:53:23,819 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 10, 11, 13]
2025-02-04 23:53:23,819 - trx2_lock_row_ids: [1, 5, 7, 8, 9, 13]
2025-02-04 23:53:23,819 - intersection_row_ids: [1, 5, 13]
2025-02-04 23:53:23,819 - trx1_exclusive_ids: [2, 3, 4, 6, 10, 11]
2025-02-04 23:53:23,819 - trx2_exclusive_ids: [7, 8, 9]
2025-02-04 23:53:23,819 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 10, 11, 13], 'trx2_lock_row_ids': [1, 5, 7, 8, 9, 13], 'intersection_row_ids': [1, 5, 13]}
2025-02-04 23:53:23,819 - lock_same_resource: True
2025-02-04 23:53:23,819 - 
2025-02-04 23:53:23,819 - intersection phase1
2025-02-04 23:53:23,825 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,828 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,828 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_4'}
2025-02-04 23:53:23,832 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,835 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,835 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_2'}
2025-02-04 23:53:23,840 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,841 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:53:23,842 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_4', 'vals': "NULL, 77.68, 'EMXWH', 82, 52", 'table': 'table_0'}
2025-02-04 23:53:23,845 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,847 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,848 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:53:23,853 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,854 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,854 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_1, col_4'}
2025-02-04 23:53:23,858 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,861 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,861 - params: {'v1': '13', 'v2': '13', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-04 23:53:23,861 - intersection phase1 end
2025-02-04 23:53:23,861 - 
2025-02-04 23:53:23,862 - intersection phase2
2025-02-04 23:53:23,862 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:53:23,862 - 事务2在第二阶段自己加的锁: II
2025-02-04 23:53:23,862 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-04 23:53:23,862 - 事务2在第三阶段请求对方资源的锁: X
2025-02-04 23:53:23,867 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,870 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,870 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_4'}
2025-02-04 23:53:23,873 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,874 - needed_params: {'cond', 'table'}
2025-02-04 23:53:23,875 - params: {'cond': '(id = 3)', 'table': 'table_0'}
2025-02-04 23:53:23,879 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,881 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,881 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_4'}
2025-02-04 23:53:23,885 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,887 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,887 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_2, col_4'}
2025-02-04 23:53:23,891 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,893 - needed_params: {'cond', 'table'}
2025-02-04 23:53:23,893 - params: {'cond': '(id = 10)', 'table': 'table_0'}
2025-02-04 23:53:23,896 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,899 - needed_params: {'cond', 'table'}
2025-02-04 23:53:23,899 - params: {'cond': '(id = 11)', 'table': 'table_0'}
2025-02-04 23:53:23,903 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,904 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:53:23,905 - params: {'v1': '7', 'set_expr': 'col_0 = 60.73, col_4 = 51', 'table': 'table_0', 'v2': '7'}
2025-02-04 23:53:23,909 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,911 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:53:23,911 - params: {'set_expr': 'col_4 = 79', 'table': 'table_0', 'cond': "(id = 8) AND (col_1 = 'bsrlb') AND (col_4 = 26) AND (col_0 = 13.36)"}
2025-02-04 23:53:23,914 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,916 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:53:23,916 - params: {'v1': '9', 'set_expr': "col_1 = 'olzqW'", 'table': 'table_0', 'v2': '9'}
2025-02-04 23:53:23,916 - intersection phase2 end
2025-02-04 23:53:23,916 - 
2025-02-04 23:53:23,917 - intersection phase3
2025-02-04 23:53:23,921 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:53:23,922 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:23,922 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-04 23:53:23,923 - intersection phase3 end
2025-02-04 23:53:23,923 - 
2025-02-04 23:53:23,923 - 生成死锁事务序列成功如下
2025-02-04 23:53:23,923 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_4) VALUES (NULL, 77.68, 'EMXWH', 82, 52)"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'SELECT id, col_1, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 60.73, col_4 = 51 WHERE id BETWEEN 7 AND 7'), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 3)'), (2, "UPDATE table_0 SET col_4 = 79 WHERE (id = 8) AND (col_1 = 'bsrlb') AND (col_4 = 26) AND (col_0 = 13.36)"), (2, "UPDATE table_0 SET col_1 = 'olzqW' WHERE id BETWEEN 9 AND 9"), (1, 'SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 10)'), (1, 'DELETE FROM table_0 WHERE (id = 11)'), (1, 'SELECT id, col_2 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE'), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:53:25,483 - 创建事务1连接成功
2025-02-04 23:53:25,485 - 执行事务1语句: BEGIN
2025-02-04 23:53:25,486 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:25,486 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:53:25,487 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_4) VALUES (NULL, 77.68, 'EMXWH', 82, 52)
2025-02-04 23:53:25,488 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:53:25,488 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 3)
2025-02-04 23:53:25,489 - 执行事务1语句: SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:53:25,490 - 执行事务1语句: SELECT id, col_2, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-04 23:53:25,491 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 10)
2025-02-04 23:53:25,492 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 11)
2025-02-04 23:53:25,492 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-04 23:53:25,494 - 执行事务1语句: COMMIT;
2025-02-04 23:53:25,499 - 执行事务1成功
2025-02-04 23:53:28,118 - 恢复初始状态成功
2025-02-04 23:53:28,943 - 创建事务2连接成功
2025-02-04 23:53:28,946 - 执行事务2语句: BEGIN
2025-02-04 23:53:28,947 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:28,948 - 执行事务2语句: SELECT id, col_1, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:53:28,949 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-04 23:53:28,950 - 执行事务2语句: UPDATE table_0 SET col_0 = 60.73, col_4 = 51 WHERE id BETWEEN 7 AND 7
2025-02-04 23:53:28,951 - 执行事务2语句: UPDATE table_0 SET col_4 = 79 WHERE (id = 8) AND (col_1 = 'bsrlb') AND (col_4 = 26) AND (col_0 = 13.36)
2025-02-04 23:53:28,953 - 执行事务2语句: UPDATE table_0 SET col_1 = 'olzqW' WHERE id BETWEEN 9 AND 9
2025-02-04 23:53:28,955 - 执行事务2语句: COMMIT;
2025-02-04 23:53:28,961 - 执行事务2成功
2025-02-04 23:53:33,955 - 
2025-02-04 23:53:33,955 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-68, started 4284)>, 1738684413.9552727)}
2025-02-04 23:53:34,060 - stmt_idx: 2, status: success, result: None
2025-02-04 23:53:34,060 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:34,060 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:53:34,060 - 
2025-02-04 23:53:34,169 - 
2025-02-04 23:53:34,169 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-69, started 38532)>, 1738684414.169536)}
2025-02-04 23:53:34,275 - stmt_idx: 3, status: success, result: None
2025-02-04 23:53:34,275 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:53:34,275 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:53:34,275 - 
2025-02-04 23:53:34,382 - 
2025-02-04 23:53:34,382 - 执行前idx: 5, pending_stmts: {4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_4) VALUES (NULL, 77.68, 'EMXWH', 82, 52)", <Thread(Thread-70, started 34676)>, 1738684414.3825939)}
2025-02-04 23:53:34,490 - stmt_idx: 4, status: success, result: None
2025-02-04 23:53:34,490 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_4) VALUES (NULL, 77.68, 'EMXWH', 82, 52)
2025-02-04 23:53:34,490 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:53:34,490 - 
2025-02-04 23:53:34,600 - 
2025-02-04 23:53:34,601 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:34,708 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:34,708 - 执行后idx: 6, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:34,708 - 
2025-02-04 23:53:34,815 - 
2025-02-04 23:53:34,815 - 执行前idx: 10, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314), 9: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-72, started 31444)>, 1738684414.8152883)}
2025-02-04 23:53:34,920 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:35,026 - stmt_idx: 9, status: success, result: None
2025-02-04 23:53:35,026 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:53:35,026 - 执行后idx: 10, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:35,026 - 
2025-02-04 23:53:35,134 - 
2025-02-04 23:53:35,135 - 执行前idx: 11, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314), 10: (1, 'DELETE FROM table_0 WHERE (id = 3)', <Thread(Thread-73, started 37240)>, 1738684415.1342037)}
2025-02-04 23:53:35,241 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:35,350 - stmt_idx: 10, status: success, result: None
2025-02-04 23:53:35,350 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 3)
2025-02-04 23:53:35,350 - 执行后idx: 11, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:35,350 - 
2025-02-04 23:53:35,459 - 
2025-02-04 23:53:35,460 - 执行前idx: 14, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314), 13: (1, 'SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-74, started 11440)>, 1738684415.4591215)}
2025-02-04 23:53:35,567 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:35,674 - stmt_idx: 13, status: success, result: None
2025-02-04 23:53:35,674 - 成功执行序列中事务1语句: SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:53:35,674 - 执行后idx: 14, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:35,674 - 
2025-02-04 23:53:35,785 - 
2025-02-04 23:53:35,785 - 执行前idx: 15, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314), 14: (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-75, started 35632)>, 1738684415.785003)}
2025-02-04 23:53:35,892 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:36,000 - stmt_idx: 14, status: success, result: None
2025-02-04 23:53:36,000 - 成功执行序列中事务1语句: SELECT id, col_2, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-04 23:53:36,000 - 执行后idx: 15, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:36,000 - 
2025-02-04 23:53:36,107 - 
2025-02-04 23:53:36,107 - 执行前idx: 16, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314), 15: (1, 'DELETE FROM table_0 WHERE (id = 10)', <Thread(Thread-76, started 38656)>, 1738684416.1062274)}
2025-02-04 23:53:36,214 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:36,319 - stmt_idx: 15, status: success, result: None
2025-02-04 23:53:36,319 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 10)
2025-02-04 23:53:36,319 - 执行后idx: 16, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:36,320 - 
2025-02-04 23:53:36,429 - 
2025-02-04 23:53:36,429 - 执行前idx: 17, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314), 16: (1, 'DELETE FROM table_0 WHERE (id = 11)', <Thread(Thread-77, started 41408)>, 1738684416.4293394)}
2025-02-04 23:53:36,536 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:36,645 - stmt_idx: 16, status: success, result: None
2025-02-04 23:53:36,645 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 11)
2025-02-04 23:53:36,646 - 执行后idx: 17, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:36,646 - 
2025-02-04 23:53:36,754 - 
2025-02-04 23:53:36,755 - 执行前idx: 18, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314), 17: (1, 'SELECT id, col_2 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE', <Thread(Thread-78, started 5932)>, 1738684416.754163)}
2025-02-04 23:53:36,860 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:36,968 - stmt_idx: 17, status: success, result: None
2025-02-04 23:53:36,968 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-04 23:53:36,968 - 执行后idx: 18, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:36,968 - 
2025-02-04 23:53:37,075 - stmt为None, trx_id: 2, stmt: None
2025-02-04 23:53:37,080 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, started 36040)>, 1738684414.6009314)}
2025-02-04 23:53:37,080 - 
2025-02-04 23:53:37,081 - 执行前idx: 21, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-71, stopped 36040)>, 1738684414.6009314)}
2025-02-04 23:53:37,182 - stmt_idx: 5, status: success, result: None
2025-02-04 23:53:37,182 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:37,182 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:53:37,185 - 执行后idx: 21, pending_stmts: {6: (2, 'SELECT id, col_1, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-79, started 1856)>, 1738684417.183873), 7: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-80, started 34684)>, 1738684417.1844933), 8: (2, 'UPDATE table_0 SET col_0 = 60.73, col_4 = 51 WHERE id BETWEEN 7 AND 7', <Thread(Thread-81, started 35892)>, 1738684417.1844933), 11: (2, "UPDATE table_0 SET col_4 = 79 WHERE (id = 8) AND (col_1 = 'bsrlb') AND (col_4 = 26) AND (col_0 = 13.36)", <Thread(Thread-82, started 40860)>, 1738684417.1850014), 12: (2, "UPDATE table_0 SET col_1 = 'olzqW' WHERE id BETWEEN 9 AND 9", <Thread(Thread-83, started 34180)>, 1738684417.1850014), 19: (2, 'COMMIT', <Thread(Thread-84, started 41180)>, 1738684417.1850014)}
2025-02-04 23:53:37,185 - 
2025-02-04 23:53:37,290 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, 'SELECT id, col_1, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-79, stopped 1856)>, 1738684417.183873), 7: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-80, stopped 34684)>, 1738684417.1844933), 8: (2, 'UPDATE table_0 SET col_0 = 60.73, col_4 = 51 WHERE id BETWEEN 7 AND 7', <Thread(Thread-81, stopped 35892)>, 1738684417.1844933), 11: (2, "UPDATE table_0 SET col_4 = 79 WHERE (id = 8) AND (col_1 = 'bsrlb') AND (col_4 = 26) AND (col_0 = 13.36)", <Thread(Thread-82, stopped 40860)>, 1738684417.1850014), 12: (2, "UPDATE table_0 SET col_1 = 'olzqW' WHERE id BETWEEN 9 AND 9", <Thread(Thread-83, stopped 34180)>, 1738684417.1850014), 19: (2, 'COMMIT', <Thread(Thread-84, stopped 41180)>, 1738684417.1850014)}
2025-02-04 23:53:37,290 - 
2025-02-04 23:53:37,290 - 执行前idx: 21, pending_stmts: {6: (2, 'SELECT id, col_1, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-79, stopped 1856)>, 1738684417.183873), 7: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-80, stopped 34684)>, 1738684417.1844933), 8: (2, 'UPDATE table_0 SET col_0 = 60.73, col_4 = 51 WHERE id BETWEEN 7 AND 7', <Thread(Thread-81, stopped 35892)>, 1738684417.1844933), 11: (2, "UPDATE table_0 SET col_4 = 79 WHERE (id = 8) AND (col_1 = 'bsrlb') AND (col_4 = 26) AND (col_0 = 13.36)", <Thread(Thread-82, stopped 40860)>, 1738684417.1850014), 12: (2, "UPDATE table_0 SET col_1 = 'olzqW' WHERE id BETWEEN 9 AND 9", <Thread(Thread-83, stopped 34180)>, 1738684417.1850014), 19: (2, 'COMMIT', <Thread(Thread-84, stopped 41180)>, 1738684417.1850014)}
2025-02-04 23:53:37,398 - stmt_idx: 6, status: success, result: None
2025-02-04 23:53:37,398 - 成功执行序列中事务2语句: SELECT id, col_1, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:53:37,504 - stmt_idx: 7, status: success, result: None
2025-02-04 23:53:37,504 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-04 23:53:37,610 - stmt_idx: 8, status: success, result: None
2025-02-04 23:53:37,610 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 60.73, col_4 = 51 WHERE id BETWEEN 7 AND 7
2025-02-04 23:53:37,718 - stmt_idx: 11, status: success, result: None
2025-02-04 23:53:37,718 - 成功执行序列中事务2语句: UPDATE table_0 SET col_4 = 79 WHERE (id = 8) AND (col_1 = 'bsrlb') AND (col_4 = 26) AND (col_0 = 13.36)
2025-02-04 23:53:37,825 - stmt_idx: 12, status: success, result: None
2025-02-04 23:53:37,825 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'olzqW' WHERE id BETWEEN 9 AND 9
2025-02-04 23:53:37,933 - stmt_idx: 19, status: success, result: None
2025-02-04 23:53:37,933 - 成功执行序列中事务2语句: COMMIT
2025-02-04 23:53:37,933 - 执行后idx: 21, pending_stmts: {}
2025-02-04 23:53:37,933 - 
2025-02-04 23:53:38,043 - 执行序列成功
2025-02-04 23:53:38,846 - is_atomic: True
2025-02-04 23:53:38,846 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:53:38,846 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_4) VALUES (NULL, 77.68, 'EMXWH', 82, 52)"), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 3)'), (1, 'SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 10)'), (1, 'DELETE FROM table_0 WHERE (id = 11)'), (1, 'SELECT id, col_2 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE'), (1, 'COMMIT'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'SELECT id, col_1, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 60.73, col_4 = 51 WHERE id BETWEEN 7 AND 7'), (2, "UPDATE table_0 SET col_4 = 79 WHERE (id = 8) AND (col_1 = 'bsrlb') AND (col_4 = 26) AND (col_0 = 13.36)"), (2, "UPDATE table_0 SET col_1 = 'olzqW' WHERE id BETWEEN 9 AND 9"), (2, 'COMMIT')]
2025-02-04 23:53:38,847 - snapshots: {'before': {'table_0': [(1, 47.09, 'arfro', 60, 74), (2, 60.02, 'ovegh', 19, 20), (3, 75.15, 'nklio', 54, 22), (4, 79.43, 'zrfns', 71, 49), (5, 2.14, 'qrpkn', 76, 96), (6, 73.31, 'vuctm', 89, 59), (7, 98.42, 'ggeil', 21, 1), (8, 13.36, 'bsrlb', 83, 26), (9, 67.99, 'qinig', 44, 38), (10, 79.43, 'qrtrx', 26, 96), (11, 17.74, 'hvbzh', 75, 91), (12, 85.1, 'cinvc', 37, 66), (13, 85.78, 'inrbt', 44, 9)]}, 'trx1': {'table_0': [(1, 47.09, 'arfro', 60, 74), (2, 60.02, 'ovegh', 19, 20), (4, 79.43, 'zrfns', 71, 49), (5, 2.14, 'qrpkn', 76, 96), (6, 73.31, 'vuctm', 89, 59), (7, 98.42, 'ggeil', 21, 1), (8, 13.36, 'bsrlb', 83, 26), (9, 67.99, 'qinig', 44, 38), (12, 85.1, 'cinvc', 37, 66), (13, 85.78, 'inrbt', 44, 9), (14, 77.68, 'EMXWH', 82, 52)]}, 'trx2': {'table_0': [(1, 47.09, 'arfro', 60, 74), (2, 60.02, 'ovegh', 19, 20), (3, 75.15, 'nklio', 54, 22), (4, 79.43, 'zrfns', 71, 49), (5, 2.14, 'qrpkn', 76, 96), (6, 73.31, 'vuctm', 89, 59), (7, 60.73, 'ggeil', 21, 51), (8, 13.36, 'bsrlb', 83, 26), (9, 67.99, 'olzqW', 44, 38), (10, 79.43, 'qrtrx', 26, 96), (11, 17.74, 'hvbzh', 75, 91), (12, 85.1, 'cinvc', 37, 66), (13, 85.78, 'inrbt', 44, 9)]}, 'serial': {'table_0': [(1, 47.09, 'arfro', 60, 74), (2, 60.02, 'ovegh', 19, 20), (4, 79.43, 'zrfns', 71, 49), (5, 2.14, 'qrpkn', 76, 96), (6, 73.31, 'vuctm', 89, 59), (7, 60.73, 'ggeil', 21, 51), (8, 13.36, 'bsrlb', 83, 26), (9, 67.99, 'olzqW', 44, 38), (12, 85.1, 'cinvc', 37, 66), (13, 85.78, 'inrbt', 44, 9), (15, 77.68, 'EMXWH', 82, 52)]}}
2025-02-04 23:53:38,847 - 
2025-02-04 23:53:38,861 - iter: 10
2025-02-04 23:53:40,412 - table table_0 has 7 rows
2025-02-04 23:53:40,413 - trx1_lock_row_ids: [2, 3, 4, 5]
2025-02-04 23:53:40,413 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 7]
2025-02-04 23:53:40,413 - intersection_row_ids: [2, 3, 4, 5]
2025-02-04 23:53:40,413 - trx1_exclusive_ids: []
2025-02-04 23:53:40,413 - trx2_exclusive_ids: [1, 7]
2025-02-04 23:53:40,413 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 7], 'intersection_row_ids': [2, 3, 4, 5]}
2025-02-04 23:53:40,413 - lock_same_resource: True
2025-02-04 23:53:40,413 - 
2025-02-04 23:53:40,413 - intersection phase1
2025-02-04 23:53:40,421 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=5
2025-02-04 23:53:40,424 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:40,425 - params: {'v1': '2', 'v2': '5', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:53:40,435 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:53:40,438 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:53:40,439 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'filXA', 'kFcXs', 'xypcU'", 'table': 'table_0'}
2025-02-04 23:53:40,448 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:53:40,451 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:40,451 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:53:40,458 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:53:40,461 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:53:40,461 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'lGRZf', 'bSgXw', 'lSZdD'", 'table': 'table_0'}
2025-02-04 23:53:40,467 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:53:40,470 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:53:40,470 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'EHwjp', 'vatSI', 'rGQJT'", 'table': 'table_0'}
2025-02-04 23:53:40,470 - intersection phase1 end
2025-02-04 23:53:40,471 - 
2025-02-04 23:53:40,471 - intersection phase2
2025-02-04 23:53:40,471 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:53:40,471 - 事务2在第二阶段自己加的锁: S
2025-02-04 23:53:40,471 - 事务1在第三阶段请求对方资源的锁: X
2025-02-04 23:53:40,471 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-04 23:53:40,476 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:53:40,478 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:53:40,478 - params: {'cond': "(col_0 = 'rugze') AND (col_1 = 'wavdq')", 'table': 'table_0', 'select_cols': 'col_2'}
2025-02-04 23:53:40,484 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:53:40,486 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:40,486 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-04 23:53:40,487 - intersection phase2 end
2025-02-04 23:53:40,487 - 
2025-02-04 23:53:40,487 - intersection phase3
2025-02-04 23:53:40,491 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:53:40,493 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:53:40,493 - params: {'cond': "(col_2 = 'srgpj')", 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-04 23:53:40,497 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:53:40,499 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:53:40,499 - params: {'set_expr': "col_1 = 'tauFZ', col_2 = 'FWFXp', col_0 = 'DNPIM'", 'table': 'table_0', 'cond': "(col_0 = 'pqggx') AND (col_2 = 'hujlm')"}
2025-02-04 23:53:40,499 - intersection phase3 end
2025-02-04 23:53:40,499 - 
2025-02-04 23:53:40,499 - 生成死锁事务序列成功如下
2025-02-04 23:53:40,499 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'filXA', 'kFcXs', 'xypcU')"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'lGRZf', 'bSgXw', 'lSZdD')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'EHwjp', 'vatSI', 'rGQJT')"), (2, "SELECT col_2 FROM table_0 WHERE (col_0 = 'rugze') AND (col_1 = 'wavdq') LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "SELECT id, col_1 FROM table_0 WHERE (col_2 = 'srgpj') FOR UPDATE"), (2, "UPDATE table_0 SET col_1 = 'tauFZ', col_2 = 'FWFXp', col_0 = 'DNPIM' WHERE (col_0 = 'pqggx') AND (col_2 = 'hujlm')"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:53:42,131 - 创建事务1连接成功
2025-02-04 23:53:42,132 - 执行事务1语句: BEGIN
2025-02-04 23:53:42,133 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE
2025-02-04 23:53:42,134 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE (col_2 = 'srgpj') FOR UPDATE
2025-02-04 23:53:42,135 - 执行事务1语句: COMMIT;
2025-02-04 23:53:42,140 - 执行事务1成功
2025-02-04 23:53:44,769 - 恢复初始状态成功
2025-02-04 23:53:45,562 - 创建事务2连接成功
2025-02-04 23:53:45,564 - 执行事务2语句: BEGIN
2025-02-04 23:53:45,564 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'filXA', 'kFcXs', 'xypcU')
2025-02-04 23:53:45,566 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:53:45,567 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'lGRZf', 'bSgXw', 'lSZdD')
2025-02-04 23:53:45,567 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'EHwjp', 'vatSI', 'rGQJT')
2025-02-04 23:53:45,568 - 执行事务2语句: SELECT col_2 FROM table_0 WHERE (col_0 = 'rugze') AND (col_1 = 'wavdq') LOCK IN SHARE MODE
2025-02-04 23:53:45,569 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-04 23:53:45,569 - 执行事务2语句: UPDATE table_0 SET col_1 = 'tauFZ', col_2 = 'FWFXp', col_0 = 'DNPIM' WHERE (col_0 = 'pqggx') AND (col_2 = 'hujlm')
2025-02-04 23:53:45,571 - 执行事务2语句: COMMIT;
2025-02-04 23:53:45,576 - 执行事务2成功
2025-02-04 23:53:50,568 - 
2025-02-04 23:53:50,568 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE', <Thread(Thread-85, started 35280)>, 1738684430.5681427)}
2025-02-04 23:53:50,676 - stmt_idx: 2, status: success, result: None
2025-02-04 23:53:50,676 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE
2025-02-04 23:53:50,676 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:53:50,676 - 
2025-02-04 23:53:50,783 - 
2025-02-04 23:53:50,783 - 执行前idx: 4, pending_stmts: {3: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'filXA', 'kFcXs', 'xypcU')", <Thread(Thread-86, started 38464)>, 1738684430.783705)}
2025-02-04 23:53:50,891 - stmt_idx: 3, status: success, result: None
2025-02-04 23:53:50,891 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'filXA', 'kFcXs', 'xypcU')
2025-02-04 23:53:50,891 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:53:50,891 - 
2025-02-04 23:53:50,998 - 
2025-02-04 23:53:50,999 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-87, started 27736)>, 1738684430.998336)}
2025-02-04 23:53:51,106 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:53:51,106 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-87, started 27736)>, 1738684430.998336)}
2025-02-04 23:53:51,106 - 
2025-02-04 23:53:51,212 - 
2025-02-04 23:53:51,213 - 执行前idx: 10, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-87, started 27736)>, 1738684430.998336), 9: (1, "SELECT id, col_1 FROM table_0 WHERE (col_2 = 'srgpj') FOR UPDATE", <Thread(Thread-88, started 27072)>, 1738684431.2127497)}
2025-02-04 23:53:51,216 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:53:51,317 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:53:51,317 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:53:51,317 - 错误: dictionary changed size during iteration
2025-02-04 23:53:51,320 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (1, "SELECT id, col_1 FROM table_0 WHERE (col_2 = 'srgpj') FOR UPDATE", <Thread(Thread-88, stopped 27072)>, 1738684431.2127497)}
2025-02-04 23:53:51,320 - 
2025-02-04 23:53:51,320 - 执行前idx: 13, pending_stmts: {9: (1, "SELECT id, col_1 FROM table_0 WHERE (col_2 = 'srgpj') FOR UPDATE", <Thread(Thread-88, stopped 27072)>, 1738684431.2127497)}
2025-02-04 23:53:51,426 - stmt_idx: 9, status: success, result: None
2025-02-04 23:53:51,426 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE (col_2 = 'srgpj') FOR UPDATE
2025-02-04 23:53:51,426 - 执行后idx: 13, pending_stmts: {}
2025-02-04 23:53:51,426 - 
2025-02-04 23:53:51,535 - 执行序列成功
2025-02-04 23:53:52,341 - is_atomic: True
2025-02-04 23:53:52,341 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-04 23:53:52,341 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'filXA', 'kFcXs', 'xypcU')"), (2, 'ROLLBACK'), (2, "--Skipped, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'tauFZ', col_2 = 'FWFXp', col_0 = 'DNPIM' WHERE (col_0 = 'pqggx') AND (col_2 = 'hujlm')"), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, "SELECT id, col_1 FROM table_0 WHERE (col_2 = 'srgpj') FOR UPDATE")]
2025-02-04 23:53:52,341 - snapshots: {'before': {'table_0': [(1, 'rugze', 'wavdq', 'cymfy'), (2, 'pqggx', 'yfpyk', 'hujlm'), (3, 'qohln', 'ynzad', 'ipkzy'), (4, 'evbrl', 'ktfyh', 'esefi'), (5, 'wzfwi', 'gbghy', 'jnrhy'), (6, 'ulatt', 'ohgmj', 'gycbf'), (7, 'ztfwe', 'mplmg', 'srgpj')]}, 'trx1': {'table_0': [(1, 'rugze', 'wavdq', 'cymfy'), (2, 'pqggx', 'yfpyk', 'hujlm'), (3, 'qohln', 'ynzad', 'ipkzy'), (4, 'evbrl', 'ktfyh', 'esefi'), (5, 'wzfwi', 'gbghy', 'jnrhy'), (6, 'ulatt', 'ohgmj', 'gycbf'), (7, 'ztfwe', 'mplmg', 'srgpj')]}, 'trx2': {'table_0': [(1, 'rugze', 'wavdq', 'cymfy'), (2, 'DNPIM', 'tauFZ', 'FWFXp'), (3, 'qohln', 'ynzad', 'ipkzy'), (4, 'evbrl', 'ktfyh', 'esefi'), (5, 'wzfwi', 'gbghy', 'jnrhy'), (6, 'ulatt', 'ohgmj', 'gycbf'), (7, 'ztfwe', 'mplmg', 'srgpj'), (8, 'filXA', 'kFcXs', 'xypcU'), (9, 'lGRZf', 'bSgXw', 'lSZdD'), (10, 'EHwjp', 'vatSI', 'rGQJT')]}, 'serial': {'table_0': [(1, 'rugze', 'wavdq', 'cymfy'), (2, 'pqggx', 'yfpyk', 'hujlm'), (3, 'qohln', 'ynzad', 'ipkzy'), (4, 'evbrl', 'ktfyh', 'esefi'), (5, 'wzfwi', 'gbghy', 'jnrhy'), (6, 'ulatt', 'ohgmj', 'gycbf'), (7, 'ztfwe', 'mplmg', 'srgpj')]}}
2025-02-04 23:53:52,341 - 
2025-02-04 23:53:52,355 - iter: 11
2025-02-04 23:53:53,911 - table table_0 has 15 rows
2025-02-04 23:53:53,911 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [13], 'intersection_row_ids': []}
2025-02-04 23:53:53,911 - lock_same_resource: False
2025-02-04 23:53:53,911 - 
2025-02-04 23:53:53,911 - non intersection phase1
2025-02-04 23:53:53,912 - 事务1在第一阶段自己加的锁: X
2025-02-04 23:53:53,912 - 事务2在第一阶段自己加的锁: X
2025-02-04 23:53:53,912 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:53:53,912 - 事务2在第二阶段请求对方资源的锁: S
2025-02-04 23:53:53,915 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-04 23:53:53,916 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:53,916 - params: {'v1': '1', 'v2': '2', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:53:53,919 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=13, is_continuous=True, range_end_idx=13
2025-02-04 23:53:53,921 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:53,921 - params: {'v1': '13', 'v2': '13', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-04 23:53:53,921 - non intersection phase1 end
2025-02-04 23:53:53,921 - 
2025-02-04 23:53:53,921 - non intersection phase2
2025-02-04 23:53:53,925 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=13, is_continuous=True, range_end_idx=13
2025-02-04 23:53:53,926 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:53,926 - params: {'v1': '13', 'v2': '13', 'table': 'table_0', 'select_cols': 'col_3'}
2025-02-04 23:53:53,930 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-04 23:53:53,932 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:53:53,932 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'col_3'}
2025-02-04 23:53:53,932 - non intersection phase2 end
2025-02-04 23:53:53,932 - 
2025-02-04 23:53:53,932 - 生成死锁事务序列成功如下
2025-02-04 23:53:53,933 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (1, 'SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE'), (2, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:53:55,522 - 创建事务1连接成功
2025-02-04 23:53:55,524 - 执行事务1语句: BEGIN
2025-02-04 23:53:55,525 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-04 23:53:55,525 - 执行事务1语句: SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE
2025-02-04 23:53:55,526 - 执行事务1语句: COMMIT;
2025-02-04 23:53:55,531 - 执行事务1成功
2025-02-04 23:53:58,138 - 恢复初始状态成功
2025-02-04 23:53:58,919 - 创建事务2连接成功
2025-02-04 23:53:58,921 - 执行事务2语句: BEGIN
2025-02-04 23:53:58,922 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-04 23:53:58,923 - 执行事务2语句: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-04 23:53:58,924 - 执行事务2语句: COMMIT;
2025-02-04 23:53:58,928 - 执行事务2成功
2025-02-04 23:54:03,901 - 
2025-02-04 23:54:03,901 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-89, started 38204)>, 1738684443.9018097)}
2025-02-04 23:54:04,003 - stmt_idx: 2, status: success, result: None
2025-02-04 23:54:04,003 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-04 23:54:04,003 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:54:04,003 - 
2025-02-04 23:54:04,113 - 
2025-02-04 23:54:04,113 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-90, started 37136)>, 1738684444.1139345)}
2025-02-04 23:54:04,221 - stmt_idx: 3, status: success, result: None
2025-02-04 23:54:04,221 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-04 23:54:04,221 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:54:04,221 - 
2025-02-04 23:54:04,329 - 
2025-02-04 23:54:04,329 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE', <Thread(Thread-91, started 41424)>, 1738684444.3291712)}
2025-02-04 23:54:04,437 - wait for lock, trx_id: 1, stmt: SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE
2025-02-04 23:54:04,437 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE', <Thread(Thread-91, started 41424)>, 1738684444.3291712)}
2025-02-04 23:54:04,437 - 
2025-02-04 23:54:04,544 - 
2025-02-04 23:54:04,544 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE', <Thread(Thread-91, started 41424)>, 1738684444.3291712), 5: (2, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-92, started 31436)>, 1738684444.5439284)}
2025-02-04 23:54:04,546 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-04 23:54:04,650 - stmt_idx: 4, status: success, result: None
2025-02-04 23:54:04,650 - 成功执行序列中事务1语句: SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE
2025-02-04 23:54:04,650 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE
2025-02-04 23:54:04,755 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:54:04,755 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-04 23:54:04,756 - 错误: dictionary changed size during iteration
2025-02-04 23:54:04,758 - 执行序列成功
2025-02-04 23:54:05,536 - is_atomic: True
2025-02-04 23:54:05,536 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-04 23:54:05,536 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (1, 'SELECT col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-04 23:54:05,536 - snapshots: {'before': {'table_0': [(1, 5.34, 81.36, 60, 'imefe', 2.22), (2, 20.67, 16.87, 8, 'mndah', 59.81), (3, 82.51, 58.45, 2, 'nqjaj', 46.38), (4, 92.93, 57.03, 46, 'xlkfq', 56.85), (5, 2.19, 94.71, 43, 'vqwtz', 7.03), (6, 87.64, 41.3, 79, 'buvdn', 26.09), (7, 58.45, 95.39, 20, 'tioqn', 91.95), (8, 48.16, 98.93, 7, 'rbbpn', 91.71), (9, 62.24, 33.26, 100, 'lvxpp', 92.56), (10, 15.86, 23.61, 77, 'lzhdr', 73.19), (11, 84.03, 60.27, 98, 'xwrgl', 11.31), (12, 23.47, 75.08, 33, 'grnxv', 51.78), (13, 83.99, 49.04, 11, 'fstlc', 93.62), (14, 97.44, 26.42, 78, 'qflak', 21.36), (15, 63.47, 8.45, 65, 'oprkk', 2.65)]}, 'trx1': {'table_0': [(1, 5.34, 81.36, 60, 'imefe', 2.22), (2, 20.67, 16.87, 8, 'mndah', 59.81), (3, 82.51, 58.45, 2, 'nqjaj', 46.38), (4, 92.93, 57.03, 46, 'xlkfq', 56.85), (5, 2.19, 94.71, 43, 'vqwtz', 7.03), (6, 87.64, 41.3, 79, 'buvdn', 26.09), (7, 58.45, 95.39, 20, 'tioqn', 91.95), (8, 48.16, 98.93, 7, 'rbbpn', 91.71), (9, 62.24, 33.26, 100, 'lvxpp', 92.56), (10, 15.86, 23.61, 77, 'lzhdr', 73.19), (11, 84.03, 60.27, 98, 'xwrgl', 11.31), (12, 23.47, 75.08, 33, 'grnxv', 51.78), (13, 83.99, 49.04, 11, 'fstlc', 93.62), (14, 97.44, 26.42, 78, 'qflak', 21.36), (15, 63.47, 8.45, 65, 'oprkk', 2.65)]}, 'trx2': {'table_0': [(1, 5.34, 81.36, 60, 'imefe', 2.22), (2, 20.67, 16.87, 8, 'mndah', 59.81), (3, 82.51, 58.45, 2, 'nqjaj', 46.38), (4, 92.93, 57.03, 46, 'xlkfq', 56.85), (5, 2.19, 94.71, 43, 'vqwtz', 7.03), (6, 87.64, 41.3, 79, 'buvdn', 26.09), (7, 58.45, 95.39, 20, 'tioqn', 91.95), (8, 48.16, 98.93, 7, 'rbbpn', 91.71), (9, 62.24, 33.26, 100, 'lvxpp', 92.56), (10, 15.86, 23.61, 77, 'lzhdr', 73.19), (11, 84.03, 60.27, 98, 'xwrgl', 11.31), (12, 23.47, 75.08, 33, 'grnxv', 51.78), (13, 83.99, 49.04, 11, 'fstlc', 93.62), (14, 97.44, 26.42, 78, 'qflak', 21.36), (15, 63.47, 8.45, 65, 'oprkk', 2.65)]}, 'serial': {'table_0': [(1, 5.34, 81.36, 60, 'imefe', 2.22), (2, 20.67, 16.87, 8, 'mndah', 59.81), (3, 82.51, 58.45, 2, 'nqjaj', 46.38), (4, 92.93, 57.03, 46, 'xlkfq', 56.85), (5, 2.19, 94.71, 43, 'vqwtz', 7.03), (6, 87.64, 41.3, 79, 'buvdn', 26.09), (7, 58.45, 95.39, 20, 'tioqn', 91.95), (8, 48.16, 98.93, 7, 'rbbpn', 91.71), (9, 62.24, 33.26, 100, 'lvxpp', 92.56), (10, 15.86, 23.61, 77, 'lzhdr', 73.19), (11, 84.03, 60.27, 98, 'xwrgl', 11.31), (12, 23.47, 75.08, 33, 'grnxv', 51.78), (13, 83.99, 49.04, 11, 'fstlc', 93.62), (14, 97.44, 26.42, 78, 'qflak', 21.36), (15, 63.47, 8.45, 65, 'oprkk', 2.65)]}}
2025-02-04 23:54:05,536 - 
2025-02-04 23:54:05,549 - iter: 12
2025-02-04 23:54:07,058 - table table_0 has 5 rows
2025-02-04 23:54:07,058 - res_dict: {'trx1_lock_row_ids': [4], 'trx2_lock_row_ids': [1, 2], 'intersection_row_ids': []}
2025-02-04 23:54:07,059 - lock_same_resource: False
2025-02-04 23:54:07,059 - 
2025-02-04 23:54:07,059 - non intersection phase1
2025-02-04 23:54:07,060 - 事务1在第一阶段自己加的锁: X
2025-02-04 23:54:07,060 - 事务2在第一阶段自己加的锁: S
2025-02-04 23:54:07,060 - 事务1在第二阶段请求对方资源的锁: X
2025-02-04 23:54:07,060 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:54:07,063 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:54:07,064 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:54:07,064 - params: {'set_expr': 'col_1 = 41.41, col_3 = 80.92, col_0 = 69', 'table': 'table_0', 'cond': '(col_4 = 27)'}
2025-02-04 23:54:07,067 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-04 23:54:07,068 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:07,069 - params: {'v1': '1', 'v2': '2', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:54:07,069 - non intersection phase1 end
2025-02-04 23:54:07,069 - 
2025-02-04 23:54:07,069 - non intersection phase2
2025-02-04 23:54:07,074 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-04 23:54:07,075 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:07,076 - params: {'v1': '1', 'v2': '2', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:54:07,079 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:54:07,081 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:07,081 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_3, col_4'}
2025-02-04 23:54:07,081 - non intersection phase2 end
2025-02-04 23:54:07,081 - 
2025-02-04 23:54:07,081 - 生成死锁事务序列成功如下
2025-02-04 23:54:07,081 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_1 = 41.41, col_3 = 80.92, col_0 = 69 WHERE (col_4 = 27)'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (2, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:54:08,639 - 创建事务1连接成功
2025-02-04 23:54:08,641 - 执行事务1语句: BEGIN
2025-02-04 23:54:08,643 - 执行事务1语句: UPDATE table_0 SET col_1 = 41.41, col_3 = 80.92, col_0 = 69 WHERE (col_4 = 27)
2025-02-04 23:54:08,644 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-04 23:54:08,646 - 执行事务1语句: COMMIT;
2025-02-04 23:54:08,652 - 执行事务1成功
2025-02-04 23:54:11,331 - 恢复初始状态成功
2025-02-04 23:54:12,111 - 创建事务2连接成功
2025-02-04 23:54:12,112 - 执行事务2语句: BEGIN
2025-02-04 23:54:12,113 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-04 23:54:12,114 - 执行事务2语句: SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:54:12,115 - 执行事务2语句: COMMIT;
2025-02-04 23:54:12,119 - 执行事务2成功
2025-02-04 23:54:17,084 - 
2025-02-04 23:54:17,085 - 执行前idx: 3, pending_stmts: {2: (1, 'UPDATE table_0 SET col_1 = 41.41, col_3 = 80.92, col_0 = 69 WHERE (col_4 = 27)', <Thread(Thread-93, started 23596)>, 1738684457.0844927)}
2025-02-04 23:54:17,185 - stmt_idx: 2, status: success, result: None
2025-02-04 23:54:17,185 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 41.41, col_3 = 80.92, col_0 = 69 WHERE (col_4 = 27)
2025-02-04 23:54:17,185 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:54:17,185 - 
2025-02-04 23:54:17,286 - 
2025-02-04 23:54:17,286 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE', <Thread(Thread-94, started 21112)>, 1738684457.2863941)}
2025-02-04 23:54:17,396 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-04 23:54:17,396 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE', <Thread(Thread-94, started 21112)>, 1738684457.2863941)}
2025-02-04 23:54:17,396 - 
2025-02-04 23:54:17,505 - 
2025-02-04 23:54:17,506 - 执行前idx: 5, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE', <Thread(Thread-94, started 21112)>, 1738684457.2863941), 4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-95, started 38432)>, 1738684457.5050893)}
2025-02-04 23:54:17,612 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-04 23:54:17,718 - stmt_idx: 4, status: success, result: None
2025-02-04 23:54:17,718 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-04 23:54:17,718 - 执行后idx: 5, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE', <Thread(Thread-94, started 21112)>, 1738684457.2863941)}
2025-02-04 23:54:17,718 - 
2025-02-04 23:54:17,829 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE', <Thread(Thread-94, stopped 21112)>, 1738684457.2863941)}
2025-02-04 23:54:17,829 - 
2025-02-04 23:54:17,829 - 执行前idx: 8, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE', <Thread(Thread-94, stopped 21112)>, 1738684457.2863941)}
2025-02-04 23:54:17,933 - stmt_idx: 3, status: success, result: None
2025-02-04 23:54:17,933 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-04 23:54:17,933 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-04 23:54:17,934 - 执行后idx: 8, pending_stmts: {5: (2, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-96, started 34604)>, 1738684457.934038), 6: (2, 'COMMIT', <Thread(Thread-97, started 11288)>, 1738684457.9344604)}
2025-02-04 23:54:17,934 - 
2025-02-04 23:54:18,042 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-96, stopped 34604)>, 1738684457.934038), 6: (2, 'COMMIT', <Thread(Thread-97, stopped 11288)>, 1738684457.9344604)}
2025-02-04 23:54:18,042 - 
2025-02-04 23:54:18,042 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-96, stopped 34604)>, 1738684457.934038), 6: (2, 'COMMIT', <Thread(Thread-97, stopped 11288)>, 1738684457.9344604)}
2025-02-04 23:54:18,151 - stmt_idx: 5, status: success, result: None
2025-02-04 23:54:18,151 - 成功执行序列中事务2语句: SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:54:18,257 - stmt_idx: 6, status: success, result: None
2025-02-04 23:54:18,257 - 成功执行序列中事务2语句: COMMIT
2025-02-04 23:54:18,257 - 执行后idx: 8, pending_stmts: {}
2025-02-04 23:54:18,257 - 
2025-02-04 23:54:18,363 - 执行序列成功
2025-02-04 23:54:19,161 - is_atomic: True
2025-02-04 23:54:19,161 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:54:19,161 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_1 = 41.41, col_3 = 80.92, col_0 = 69 WHERE (col_4 = 27)'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (1, 'COMMIT'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'COMMIT')]
2025-02-04 23:54:19,162 - snapshots: {'before': {'table_0': [(1, 97, 48.31, 79.45, 43), (2, 88, 84.48, 4.65, 73), (3, 64, 25.56, 5.35, 73), (4, 94, 56.62, 31.52, 27), (5, 70, 14.24, 85.45, 9)]}, 'trx1': {'table_0': [(1, 97, 48.31, 79.45, 43), (2, 88, 84.48, 4.65, 73), (3, 64, 25.56, 5.35, 73), (4, 69, 41.41, 80.92, 27), (5, 70, 14.24, 85.45, 9)]}, 'trx2': {'table_0': [(1, 97, 48.31, 79.45, 43), (2, 88, 84.48, 4.65, 73), (3, 64, 25.56, 5.35, 73), (4, 94, 56.62, 31.52, 27), (5, 70, 14.24, 85.45, 9)]}, 'serial': {'table_0': [(1, 97, 48.31, 79.45, 43), (2, 88, 84.48, 4.65, 73), (3, 64, 25.56, 5.35, 73), (4, 69, 41.41, 80.92, 27), (5, 70, 14.24, 85.45, 9)]}}
2025-02-04 23:54:19,162 - 
2025-02-04 23:54:19,174 - iter: 13
2025-02-04 23:54:20,695 - table table_0 has 14 rows
2025-02-04 23:54:20,696 - res_dict: {'trx1_lock_row_ids': [13], 'trx2_lock_row_ids': [5, 6], 'intersection_row_ids': []}
2025-02-04 23:54:20,696 - lock_same_resource: False
2025-02-04 23:54:20,696 - 
2025-02-04 23:54:20,696 - non intersection phase1
2025-02-04 23:54:20,696 - 事务1在第一阶段自己加的锁: NK
2025-02-04 23:54:20,696 - 事务2在第一阶段自己加的锁: NK
2025-02-04 23:54:20,696 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:54:20,696 - 事务2在第二阶段请求对方资源的锁: II
2025-02-04 23:54:20,699 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=13, is_continuous=True, range_end_idx=13
2025-02-04 23:54:20,701 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:20,701 - params: {'v1': '13', 'v2': '13', 'table': 'table_0', 'select_cols': 'col_0, col_3'}
2025-02-04 23:54:20,704 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-04 23:54:20,705 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:20,705 - params: {'v1': '5', 'v2': '6', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:54:20,705 - non intersection phase1 end
2025-02-04 23:54:20,705 - 
2025-02-04 23:54:20,706 - non intersection phase2
2025-02-04 23:54:20,711 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-04 23:54:20,712 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:20,712 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_0, col_2'}
2025-02-04 23:54:20,715 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=13, is_continuous=True, range_end_idx=13
2025-02-04 23:54:20,716 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:54:20,716 - params: {'v1': '13', 'set_expr': "col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39", 'table': 'table_0', 'v2': '13'}
2025-02-04 23:54:20,716 - non intersection phase2 end
2025-02-04 23:54:20,716 - 
2025-02-04 23:54:20,717 - 生成死锁事务序列成功如下
2025-02-04 23:54:20,717 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_0, col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13"), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:54:22,257 - 创建事务1连接成功
2025-02-04 23:54:22,259 - 执行事务1语句: BEGIN
2025-02-04 23:54:22,260 - 执行事务1语句: SELECT col_0, col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE
2025-02-04 23:54:22,261 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE
2025-02-04 23:54:22,262 - 执行事务1语句: COMMIT;
2025-02-04 23:54:22,266 - 执行事务1成功
2025-02-04 23:54:24,882 - 恢复初始状态成功
2025-02-04 23:54:25,666 - 创建事务2连接成功
2025-02-04 23:54:25,668 - 执行事务2语句: BEGIN
2025-02-04 23:54:25,669 - 执行事务2语句: SELECT id FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE
2025-02-04 23:54:25,670 - 执行事务2语句: UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13
2025-02-04 23:54:25,672 - 执行事务2语句: COMMIT;
2025-02-04 23:54:25,677 - 执行事务2成功
2025-02-04 23:54:30,580 - 
2025-02-04 23:54:30,581 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT col_0, col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE', <Thread(Thread-98, started 37164)>, 1738684470.580992)}
2025-02-04 23:54:30,693 - stmt_idx: 2, status: success, result: None
2025-02-04 23:54:30,693 - 成功执行序列中事务1语句: SELECT col_0, col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE
2025-02-04 23:54:30,693 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:54:30,693 - 
2025-02-04 23:54:30,802 - 
2025-02-04 23:54:30,802 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE', <Thread(Thread-99, started 41604)>, 1738684470.8020244)}
2025-02-04 23:54:30,908 - stmt_idx: 3, status: success, result: None
2025-02-04 23:54:30,908 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE
2025-02-04 23:54:30,908 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:54:30,908 - 
2025-02-04 23:54:31,016 - 
2025-02-04 23:54:31,017 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13", <Thread(Thread-100, started 37388)>, 1738684471.0163267)}
2025-02-04 23:54:31,123 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13
2025-02-04 23:54:31,124 - 执行后idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13", <Thread(Thread-100, started 37388)>, 1738684471.0163267)}
2025-02-04 23:54:31,124 - 
2025-02-04 23:54:31,232 - 
2025-02-04 23:54:31,233 - 执行前idx: 6, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13", <Thread(Thread-100, started 37388)>, 1738684471.0163267), 5: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE', <Thread(Thread-101, started 41516)>, 1738684471.2321892)}
2025-02-04 23:54:31,235 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE
2025-02-04 23:54:31,344 - stmt_idx: 4, status: success, result: None
2025-02-04 23:54:31,344 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13
2025-02-04 23:54:31,344 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13
2025-02-04 23:54:31,455 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:54:31,455 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE
2025-02-04 23:54:31,455 - 错误: dictionary changed size during iteration
2025-02-04 23:54:31,460 - 执行序列成功
2025-02-04 23:54:32,256 - is_atomic: True
2025-02-04 23:54:32,256 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-04 23:54:32,256 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_0, col_3 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id >= 5 AND id <= 6 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'IbUjk', col_3 = 'cdgkT', col_1 = 'flYLa', col_2 = 48.39 WHERE id BETWEEN 13 AND 13"), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-04 23:54:32,256 - snapshots: {'before': {'table_0': [(1, 'utxfp', 'lunve', 81.06, 'pxvra'), (2, 'mlmef', 'jotxf', 68.71, 'hxufg'), (3, 'uyslp', 'qeqgj', 38.18, 'eypxo'), (4, 'axnjk', 'asoss', 12.32, 'fukja'), (5, 'hrdmq', 'skwul', 48.25, 'iuqko'), (6, 'hueal', 'taqlw', 72.42, 'fkqlz'), (7, 'epsid', 'riekk', 60.84, 'isnkl'), (8, 'fdism', 'zmavx', 16.45, 'xmvne'), (9, 'ofrwg', 'cadlu', 11.08, 'ugkye'), (10, 'nlhrp', 'otuwb', 95.21, 'ugnmq'), (11, 'efpfx', 'apzwi', 41.17, 'fllvt'), (12, 'dngit', 'lrgky', 29.67, 'uxich'), (13, 'gesub', 'vjwee', 1.17, 'tdguy'), (14, 'numic', 'vtgqe', 27.73, 'rpnsj')]}, 'trx1': {'table_0': [(1, 'utxfp', 'lunve', 81.06, 'pxvra'), (2, 'mlmef', 'jotxf', 68.71, 'hxufg'), (3, 'uyslp', 'qeqgj', 38.18, 'eypxo'), (4, 'axnjk', 'asoss', 12.32, 'fukja'), (5, 'hrdmq', 'skwul', 48.25, 'iuqko'), (6, 'hueal', 'taqlw', 72.42, 'fkqlz'), (7, 'epsid', 'riekk', 60.84, 'isnkl'), (8, 'fdism', 'zmavx', 16.45, 'xmvne'), (9, 'ofrwg', 'cadlu', 11.08, 'ugkye'), (10, 'nlhrp', 'otuwb', 95.21, 'ugnmq'), (11, 'efpfx', 'apzwi', 41.17, 'fllvt'), (12, 'dngit', 'lrgky', 29.67, 'uxich'), (13, 'gesub', 'vjwee', 1.17, 'tdguy'), (14, 'numic', 'vtgqe', 27.73, 'rpnsj')]}, 'trx2': {'table_0': [(1, 'utxfp', 'lunve', 81.06, 'pxvra'), (2, 'mlmef', 'jotxf', 68.71, 'hxufg'), (3, 'uyslp', 'qeqgj', 38.18, 'eypxo'), (4, 'axnjk', 'asoss', 12.32, 'fukja'), (5, 'hrdmq', 'skwul', 48.25, 'iuqko'), (6, 'hueal', 'taqlw', 72.42, 'fkqlz'), (7, 'epsid', 'riekk', 60.84, 'isnkl'), (8, 'fdism', 'zmavx', 16.45, 'xmvne'), (9, 'ofrwg', 'cadlu', 11.08, 'ugkye'), (10, 'nlhrp', 'otuwb', 95.21, 'ugnmq'), (11, 'efpfx', 'apzwi', 41.17, 'fllvt'), (12, 'dngit', 'lrgky', 29.67, 'uxich'), (13, 'IbUjk', 'flYLa', 48.39, 'cdgkT'), (14, 'numic', 'vtgqe', 27.73, 'rpnsj')]}, 'serial': {'table_0': [(1, 'utxfp', 'lunve', 81.06, 'pxvra'), (2, 'mlmef', 'jotxf', 68.71, 'hxufg'), (3, 'uyslp', 'qeqgj', 38.18, 'eypxo'), (4, 'axnjk', 'asoss', 12.32, 'fukja'), (5, 'hrdmq', 'skwul', 48.25, 'iuqko'), (6, 'hueal', 'taqlw', 72.42, 'fkqlz'), (7, 'epsid', 'riekk', 60.84, 'isnkl'), (8, 'fdism', 'zmavx', 16.45, 'xmvne'), (9, 'ofrwg', 'cadlu', 11.08, 'ugkye'), (10, 'nlhrp', 'otuwb', 95.21, 'ugnmq'), (11, 'efpfx', 'apzwi', 41.17, 'fllvt'), (12, 'dngit', 'lrgky', 29.67, 'uxich'), (13, 'IbUjk', 'flYLa', 48.39, 'cdgkT'), (14, 'numic', 'vtgqe', 27.73, 'rpnsj')]}}
2025-02-04 23:54:32,256 - 
2025-02-04 23:54:32,268 - iter: 14
2025-02-04 23:54:33,760 - table table_0 has 9 rows
2025-02-04 23:54:33,760 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': []}
2025-02-04 23:54:33,760 - lock_same_resource: False
2025-02-04 23:54:33,760 - 
2025-02-04 23:54:33,760 - non intersection phase1
2025-02-04 23:54:33,761 - 事务1在第一阶段自己加的锁: S
2025-02-04 23:54:33,761 - 事务2在第一阶段自己加的锁: NK
2025-02-04 23:54:33,761 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:54:33,761 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-04 23:54:33,764 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:54:33,765 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:54:33,765 - params: {'cond': '(id = 1)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:54:33,769 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=True, range_end_idx=8
2025-02-04 23:54:33,771 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:33,771 - params: {'v1': '2', 'v2': '8', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:54:33,772 - non intersection phase1 end
2025-02-04 23:54:33,772 - 
2025-02-04 23:54:33,772 - non intersection phase2
2025-02-04 23:54:33,776 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=7, is_continuous=True, range_end_idx=8
2025-02-04 23:54:33,778 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:33,778 - params: {'v1': '7', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:54:33,783 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:54:33,784 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:54:33,785 - params: {'set_expr': 'col_0 = 82, col_1 = 33', 'table': 'table_0', 'cond': '(id = 1)'}
2025-02-04 23:54:33,785 - non intersection phase2 end
2025-02-04 23:54:33,785 - 
2025-02-04 23:54:33,785 - 生成死锁事务序列成功如下
2025-02-04 23:54:33,785 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 8 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 82, col_1 = 33 WHERE (id = 1)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:54:35,346 - 创建事务1连接成功
2025-02-04 23:54:35,347 - 执行事务1语句: BEGIN
2025-02-04 23:54:35,348 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-04 23:54:35,349 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE
2025-02-04 23:54:35,350 - 执行事务1语句: COMMIT;
2025-02-04 23:54:35,354 - 执行事务1成功
2025-02-04 23:54:37,970 - 恢复初始状态成功
2025-02-04 23:54:38,728 - 创建事务2连接成功
2025-02-04 23:54:38,730 - 执行事务2语句: BEGIN
2025-02-04 23:54:38,730 - 执行事务2语句: SELECT * FROM table_0 WHERE id >= 2 AND id <= 8 FOR UPDATE
2025-02-04 23:54:38,732 - 执行事务2语句: UPDATE table_0 SET col_0 = 82, col_1 = 33 WHERE (id = 1)
2025-02-04 23:54:38,734 - 执行事务2语句: COMMIT;
2025-02-04 23:54:38,738 - 执行事务2成功
2025-02-04 23:54:43,695 - 
2025-02-04 23:54:43,696 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 8 FOR UPDATE', <Thread(Thread-102, started 40096)>, 1738684483.6955204)}
2025-02-04 23:54:43,810 - stmt_idx: 2, status: success, result: None
2025-02-04 23:54:43,810 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id >= 2 AND id <= 8 FOR UPDATE
2025-02-04 23:54:43,810 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:54:43,810 - 
2025-02-04 23:54:43,919 - 
2025-02-04 23:54:43,920 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE', <Thread(Thread-103, started 21636)>, 1738684483.919463)}
2025-02-04 23:54:44,025 - stmt_idx: 3, status: success, result: None
2025-02-04 23:54:44,025 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-04 23:54:44,025 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:54:44,025 - 
2025-02-04 23:54:44,135 - 
2025-02-04 23:54:44,136 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE', <Thread(Thread-104, started 27420)>, 1738684484.1358266)}
2025-02-04 23:54:44,243 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE
2025-02-04 23:54:44,243 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE', <Thread(Thread-104, started 27420)>, 1738684484.1358266)}
2025-02-04 23:54:44,243 - 
2025-02-04 23:54:44,350 - 
2025-02-04 23:54:44,350 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE', <Thread(Thread-104, started 27420)>, 1738684484.1358266), 5: (2, 'UPDATE table_0 SET col_0 = 82, col_1 = 33 WHERE (id = 1)', <Thread(Thread-105, started 35768)>, 1738684484.3500643)}
2025-02-04 23:54:44,352 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_0 = 82, col_1 = 33 WHERE (id = 1)
2025-02-04 23:54:44,460 - stmt_idx: 4, status: success, result: None
2025-02-04 23:54:44,460 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE
2025-02-04 23:54:44,460 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE
2025-02-04 23:54:44,568 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:54:44,568 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: UPDATE table_0 SET col_0 = 82, col_1 = 33 WHERE (id = 1)
2025-02-04 23:54:44,568 - 错误: dictionary changed size during iteration
2025-02-04 23:54:44,571 - 执行序列成功
2025-02-04 23:54:45,329 - is_atomic: True
2025-02-04 23:54:45,329 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-04 23:54:45,329 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 8 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 7 AND id <= 8 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-04 23:54:45,329 - snapshots: {'before': {'table_0': [(1, 42, 7), (2, 94, 1), (3, 37, 96), (4, 100, 51), (5, 65, 44), (6, 48, 66), (7, 79, 90), (8, 34, 81), (9, 59, 8)]}, 'trx1': {'table_0': [(1, 42, 7), (2, 94, 1), (3, 37, 96), (4, 100, 51), (5, 65, 44), (6, 48, 66), (7, 79, 90), (8, 34, 81), (9, 59, 8)]}, 'trx2': {'table_0': [(1, 82, 33), (2, 94, 1), (3, 37, 96), (4, 100, 51), (5, 65, 44), (6, 48, 66), (7, 79, 90), (8, 34, 81), (9, 59, 8)]}, 'serial': {'table_0': [(1, 42, 7), (2, 94, 1), (3, 37, 96), (4, 100, 51), (5, 65, 44), (6, 48, 66), (7, 79, 90), (8, 34, 81), (9, 59, 8)]}}
2025-02-04 23:54:45,329 - 
2025-02-04 23:54:45,341 - iter: 15
2025-02-04 23:54:46,825 - table table_0 has 9 rows
2025-02-04 23:54:46,825 - trx1_lock_row_ids: [1, 4, 5, 9]
2025-02-04 23:54:46,825 - trx2_lock_row_ids: [4, 5]
2025-02-04 23:54:46,825 - intersection_row_ids: [4, 5]
2025-02-04 23:54:46,825 - trx1_exclusive_ids: [1, 9]
2025-02-04 23:54:46,826 - trx2_exclusive_ids: []
2025-02-04 23:54:46,826 - res_dict: {'trx1_lock_row_ids': [1, 4, 5, 9], 'trx2_lock_row_ids': [4, 5], 'intersection_row_ids': [4, 5]}
2025-02-04 23:54:46,826 - lock_same_resource: True
2025-02-04 23:54:46,826 - 
2025-02-04 23:54:46,826 - intersection phase1
2025-02-04 23:54:46,829 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-04 23:54:46,831 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:46,831 - params: {'v1': '4', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4'}
2025-02-04 23:54:46,833 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:54:46,835 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:46,835 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_2, col_3'}
2025-02-04 23:54:46,838 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:54:46,840 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:46,840 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:54:46,840 - intersection phase1 end
2025-02-04 23:54:46,840 - 
2025-02-04 23:54:46,840 - intersection phase2
2025-02-04 23:54:46,841 - 事务1在第二阶段自己加的锁: NK
2025-02-04 23:54:46,841 - 事务2在第二阶段自己加的锁: NK
2025-02-04 23:54:46,841 - 事务1在第三阶段请求对方资源的锁: S
2025-02-04 23:54:46,841 - 事务2在第三阶段请求对方资源的锁: S
2025-02-04 23:54:46,845 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:54:46,846 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:54:46,846 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40", 'table': 'table_0'}
2025-02-04 23:54:46,848 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:54:46,850 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:54:46,850 - params: {'set_expr': "col_2 = 'jinCj', col_0 = 'HClDg', col_3 = 13.34", 'table': 'table_0', 'cond': '(id = 9)'}
2025-02-04 23:54:46,851 - intersection phase2 end
2025-02-04 23:54:46,851 - 
2025-02-04 23:54:46,851 - intersection phase3
2025-02-04 23:54:46,854 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:54:46,855 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:54:46,856 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_3'}
2025-02-04 23:54:46,856 - intersection phase3 end
2025-02-04 23:54:46,856 - 
2025-02-04 23:54:46,856 - 生成死锁事务序列成功如下
2025-02-04 23:54:46,856 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)"), (1, "UPDATE table_0 SET col_2 = 'jinCj', col_0 = 'HClDg', col_3 = 13.34 WHERE (id = 9)"), (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:54:48,400 - 创建事务1连接成功
2025-02-04 23:54:48,402 - 执行事务1语句: BEGIN
2025-02-04 23:54:48,403 - 执行事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:54:48,403 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:54:48,404 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)
2025-02-04 23:54:48,405 - 执行事务1语句: UPDATE table_0 SET col_2 = 'jinCj', col_0 = 'HClDg', col_3 = 13.34 WHERE (id = 9)
2025-02-04 23:54:48,406 - 执行事务1语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-04 23:54:48,408 - 执行事务1语句: COMMIT;
2025-02-04 23:54:48,413 - 执行事务1成功
2025-02-04 23:54:51,031 - 恢复初始状态成功
2025-02-04 23:54:51,806 - 创建事务2连接成功
2025-02-04 23:54:51,808 - 执行事务2语句: BEGIN
2025-02-04 23:54:51,810 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-04 23:54:51,811 - 执行事务2语句: COMMIT;
2025-02-04 23:54:51,817 - 执行事务2成功
2025-02-04 23:54:56,732 - 
2025-02-04 23:54:56,732 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-106, started 41292)>, 1738684496.732053)}
2025-02-04 23:54:56,836 - stmt_idx: 2, status: success, result: None
2025-02-04 23:54:56,836 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-04 23:54:56,836 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:54:56,836 - 
2025-02-04 23:54:56,948 - 
2025-02-04 23:54:56,949 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-107, started 3324)>, 1738684496.948058)}
2025-02-04 23:54:57,056 - wait for lock, trx_id: 1, stmt: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:54:57,056 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-107, started 3324)>, 1738684496.948058)}
2025-02-04 23:54:57,056 - 
2025-02-04 23:54:57,164 - stmt为None, trx_id: 2, stmt: None
2025-02-04 23:54:57,167 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-107, started 3324)>, 1738684496.948058)}
2025-02-04 23:54:57,167 - 
2025-02-04 23:54:57,167 - 执行前idx: 11, pending_stmts: {3: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-107, stopped 3324)>, 1738684496.948058)}
2025-02-04 23:54:57,273 - stmt_idx: 3, status: success, result: None
2025-02-04 23:54:57,273 - 成功执行序列中事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:54:57,273 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:54:57,275 - 执行后idx: 11, pending_stmts: {4: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-108, started 32148)>, 1738684497.2743747), 5: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)", <Thread(Thread-109, started 20912)>, 1738684497.2743747), 6: (1, "UPDATE table_0 SET col_2 = 'jinCj', col_0 = 'HClDg', col_3 = 13.34 WHERE (id = 9)", <Thread(Thread-110, started 9772)>, 1738684497.2748408), 7: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-111, started 31728)>, 1738684497.2748408), 10: (1, 'COMMIT', <Thread(Thread-112, started 27948)>, 1738684497.275351)}
2025-02-04 23:54:57,275 - 
2025-02-04 23:54:57,380 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-108, stopped 32148)>, 1738684497.2743747), 5: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)", <Thread(Thread-109, stopped 20912)>, 1738684497.2743747), 6: (1, "UPDATE table_0 SET col_2 = 'jinCj', col_0 = 'HClDg', col_3 = 13.34 WHERE (id = 9)", <Thread(Thread-110, stopped 9772)>, 1738684497.2748408), 7: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-111, stopped 31728)>, 1738684497.2748408), 10: (1, 'COMMIT', <Thread(Thread-112, stopped 27948)>, 1738684497.275351)}
2025-02-04 23:54:57,380 - 
2025-02-04 23:54:57,380 - 执行前idx: 11, pending_stmts: {4: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-108, stopped 32148)>, 1738684497.2743747), 5: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)", <Thread(Thread-109, stopped 20912)>, 1738684497.2743747), 6: (1, "UPDATE table_0 SET col_2 = 'jinCj', col_0 = 'HClDg', col_3 = 13.34 WHERE (id = 9)", <Thread(Thread-110, stopped 9772)>, 1738684497.2748408), 7: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-111, stopped 31728)>, 1738684497.2748408), 10: (1, 'COMMIT', <Thread(Thread-112, stopped 27948)>, 1738684497.275351)}
2025-02-04 23:54:57,488 - stmt_idx: 4, status: success, result: None
2025-02-04 23:54:57,488 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:54:57,597 - stmt_idx: 5, status: success, result: None
2025-02-04 23:54:57,597 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)
2025-02-04 23:54:57,706 - stmt_idx: 6, status: success, result: None
2025-02-04 23:54:57,706 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'jinCj', col_0 = 'HClDg', col_3 = 13.34 WHERE (id = 9)
2025-02-04 23:54:57,815 - stmt_idx: 7, status: success, result: None
2025-02-04 23:54:57,815 - 成功执行序列中事务1语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-04 23:54:57,923 - stmt_idx: 10, status: success, result: None
2025-02-04 23:54:57,923 - 成功执行序列中事务1语句: COMMIT
2025-02-04 23:54:57,923 - 执行后idx: 11, pending_stmts: {}
2025-02-04 23:54:57,923 - 
2025-02-04 23:54:58,032 - 执行序列成功
2025-02-04 23:54:58,806 - is_atomic: True
2025-02-04 23:54:58,806 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:54:58,807 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)"), (1, "UPDATE table_0 SET col_2 = 'jinCj', col_0 = 'HClDg', col_3 = 13.34 WHERE (id = 9)"), (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'COMMIT')]
2025-02-04 23:54:58,807 - snapshots: {'before': {'table_0': [(1, 'jpcur', 'nkodn', 'adxgk', 40.98, 98), (2, 'lryma', 'izktr', 'jfiue', 67.31, 7), (3, 'mgzqd', 'mhhop', 'zwxme', 28.0, 31), (4, 'axwpj', 'ezrhr', 'ehcvc', 30.85, 50), (5, 'syzpw', 'niklr', 'oclfs', 44.1, 85), (6, 'elloq', 'zpfcy', 'bsvri', 99.28, 46), (7, 'svvfb', 'qfpun', 'khpmj', 28.3, 73), (8, 'czyro', 'qojht', 'uvyqq', 62.87, 23), (9, 'qfqpn', 'ocppo', 'pcrap', 91.81, 99)]}, 'trx1': {'table_0': [(1, 'jpcur', 'nkodn', 'adxgk', 40.98, 98), (2, 'lryma', 'izktr', 'jfiue', 67.31, 7), (3, 'mgzqd', 'mhhop', 'zwxme', 28.0, 31), (4, 'axwpj', 'ezrhr', 'ehcvc', 30.85, 50), (5, 'syzpw', 'niklr', 'oclfs', 44.1, 85), (6, 'elloq', 'zpfcy', 'bsvri', 99.28, 46), (7, 'svvfb', 'qfpun', 'khpmj', 28.3, 73), (8, 'czyro', 'qojht', 'uvyqq', 62.87, 23), (9, 'HClDg', 'ocppo', 'jinCj', 13.34, 99), (10, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)]}, 'trx2': {'table_0': [(1, 'jpcur', 'nkodn', 'adxgk', 40.98, 98), (2, 'lryma', 'izktr', 'jfiue', 67.31, 7), (3, 'mgzqd', 'mhhop', 'zwxme', 28.0, 31), (4, 'axwpj', 'ezrhr', 'ehcvc', 30.85, 50), (5, 'syzpw', 'niklr', 'oclfs', 44.1, 85), (6, 'elloq', 'zpfcy', 'bsvri', 99.28, 46), (7, 'svvfb', 'qfpun', 'khpmj', 28.3, 73), (8, 'czyro', 'qojht', 'uvyqq', 62.87, 23), (9, 'qfqpn', 'ocppo', 'pcrap', 91.81, 99)]}, 'serial': {'table_0': [(1, 'jpcur', 'nkodn', 'adxgk', 40.98, 98), (2, 'lryma', 'izktr', 'jfiue', 67.31, 7), (3, 'mgzqd', 'mhhop', 'zwxme', 28.0, 31), (4, 'axwpj', 'ezrhr', 'ehcvc', 30.85, 50), (5, 'syzpw', 'niklr', 'oclfs', 44.1, 85), (6, 'elloq', 'zpfcy', 'bsvri', 99.28, 46), (7, 'svvfb', 'qfpun', 'khpmj', 28.3, 73), (8, 'czyro', 'qojht', 'uvyqq', 62.87, 23), (9, 'HClDg', 'ocppo', 'jinCj', 13.34, 99), (11, 'AYSnD', 'XEJcX', 'GorWL', 16.08, 40)]}}
2025-02-04 23:54:58,807 - 
2025-02-04 23:54:58,818 - iter: 16
2025-02-04 23:55:00,324 - table table_0 has 14 rows
2025-02-04 23:55:00,324 - res_dict: {'trx1_lock_row_ids': [10, 11, 12], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7, 8, 9], 'intersection_row_ids': []}
2025-02-04 23:55:00,324 - lock_same_resource: False
2025-02-04 23:55:00,325 - 
2025-02-04 23:55:00,325 - non intersection phase1
2025-02-04 23:55:00,325 - 事务1在第一阶段自己加的锁: S
2025-02-04 23:55:00,325 - 事务2在第一阶段自己加的锁: X
2025-02-04 23:55:00,325 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:55:00,325 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:55:00,328 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-04 23:55:00,329 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:55:00,329 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3'}
2025-02-04 23:55:00,333 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-04 23:55:00,335 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:55:00,335 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:55:00,338 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-04 23:55:00,339 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:55:00,340 - params: {'cond': "(col_1 = 'vmmof') AND (col_3 = 94.77)", 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:55:00,343 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=9
2025-02-04 23:55:00,344 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:55:00,345 - params: {'v1': '2', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3'}
2025-02-04 23:55:00,345 - non intersection phase1 end
2025-02-04 23:55:00,345 - 
2025-02-04 23:55:00,345 - non intersection phase2
2025-02-04 23:55:00,348 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=6, is_continuous=True, range_end_idx=8
2025-02-04 23:55:00,350 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:55:00,350 - params: {'v1': '6', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-04 23:55:00,353 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-04 23:55:00,354 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:55:00,355 - params: {'set_expr': 'col_0 = 90.68', 'table': 'table_0', 'cond': '(id = 10)'}
2025-02-04 23:55:00,355 - non intersection phase2 end
2025-02-04 23:55:00,355 - 
2025-02-04 23:55:00,355 - 生成死锁事务序列成功如下
2025-02-04 23:55:00,355 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE"), (2, 'UPDATE table_0 SET col_0 = 90.68 WHERE (id = 10)'), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id >= 6 AND id <= 8 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:55:01,881 - 创建事务1连接成功
2025-02-04 23:55:01,883 - 执行事务1语句: BEGIN
2025-02-04 23:55:01,884 - 执行事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-04 23:55:01,884 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-04 23:55:01,886 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE
2025-02-04 23:55:01,886 - 执行事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id >= 6 AND id <= 8 FOR UPDATE
2025-02-04 23:55:01,887 - 执行事务1语句: COMMIT;
2025-02-04 23:55:01,891 - 执行事务1成功
2025-02-04 23:55:04,480 - 恢复初始状态成功
2025-02-04 23:55:05,270 - 创建事务2连接成功
2025-02-04 23:55:05,271 - 执行事务2语句: BEGIN
2025-02-04 23:55:05,272 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE
2025-02-04 23:55:05,273 - 执行事务2语句: UPDATE table_0 SET col_0 = 90.68 WHERE (id = 10)
2025-02-04 23:55:05,275 - 执行事务2语句: COMMIT;
2025-02-04 23:55:05,280 - 执行事务2成功
2025-02-04 23:55:10,176 - 
2025-02-04 23:55:10,176 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE', <Thread(Thread-113, started 24168)>, 1738684510.176318)}
2025-02-04 23:55:10,286 - stmt_idx: 2, status: success, result: None
2025-02-04 23:55:10,286 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE
2025-02-04 23:55:10,286 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:55:10,286 - 
2025-02-04 23:55:10,394 - 
2025-02-04 23:55:10,394 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-114, started 4824)>, 1738684510.3948586)}
2025-02-04 23:55:10,503 - stmt_idx: 3, status: success, result: None
2025-02-04 23:55:10,503 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-04 23:55:10,503 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:55:10,503 - 
2025-02-04 23:55:10,611 - 
2025-02-04 23:55:10,612 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-115, started 10872)>, 1738684510.6111388)}
2025-02-04 23:55:10,719 - stmt_idx: 4, status: success, result: None
2025-02-04 23:55:10,719 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-04 23:55:10,719 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:55:10,719 - 
2025-02-04 23:55:10,829 - 
2025-02-04 23:55:10,829 - 执行前idx: 6, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE", <Thread(Thread-116, started 39432)>, 1738684510.8293924)}
2025-02-04 23:55:10,934 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE
2025-02-04 23:55:10,935 - 执行后idx: 6, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE", <Thread(Thread-116, started 39432)>, 1738684510.8293924)}
2025-02-04 23:55:10,935 - 
2025-02-04 23:55:11,042 - 
2025-02-04 23:55:11,043 - 执行前idx: 7, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE", <Thread(Thread-116, started 39432)>, 1738684510.8293924), 6: (2, 'UPDATE table_0 SET col_0 = 90.68 WHERE (id = 10)', <Thread(Thread-117, started 4204)>, 1738684511.0422263)}
2025-02-04 23:55:11,045 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_0 = 90.68 WHERE (id = 10)
2025-02-04 23:55:11,149 - stmt_idx: 5, status: success, result: None
2025-02-04 23:55:11,149 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE
2025-02-04 23:55:11,149 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE
2025-02-04 23:55:11,257 - stmt_idx: 6, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:55:11,257 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: UPDATE table_0 SET col_0 = 90.68 WHERE (id = 10)
2025-02-04 23:55:11,257 - 错误: dictionary changed size during iteration
2025-02-04 23:55:11,258 - 
2025-02-04 23:55:11,258 - 执行前idx: 8, pending_stmts: {7: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id >= 6 AND id <= 8 FOR UPDATE', <Thread(Thread-118, started 11840)>, 1738684511.258255)}
2025-02-04 23:55:11,367 - stmt_idx: 7, status: success, result: None
2025-02-04 23:55:11,367 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id >= 6 AND id <= 8 FOR UPDATE
2025-02-04 23:55:11,367 - 执行后idx: 8, pending_stmts: {}
2025-02-04 23:55:11,368 - 
2025-02-04 23:55:11,479 - 执行序列成功
2025-02-04 23:55:12,248 - is_atomic: True
2025-02-04 23:55:12,249 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-04 23:55:12,249 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 9 FOR UPDATE'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_1 = 'vmmof') AND (col_3 = 94.77) LOCK IN SHARE MODE"), (2, 'ROLLBACK'), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id >= 6 AND id <= 8 FOR UPDATE'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-04 23:55:12,249 - snapshots: {'before': {'table_0': [(1, 24.4, 'axevy', 'wbagt', 84.81), (2, 49.53, 'ikouz', 'tbdir', 25.17), (3, 89.26, 'cwdvy', 'firbf', 44.18), (4, 46.47, 'bdgcf', 'tvqar', 28.53), (5, 81.82, 'lgaxp', 'rjoto', 62.54), (6, 93.97, 'ihkpf', 'ueqfc', 28.45), (7, 58.09, 'fbdal', 'szctx', 91.2), (8, 11.34, 'scsaa', 'arzmy', 87.89), (9, 35.77, 'llhvl', 'awgej', 97.47), (10, 92.48, 'fyxes', 'pzpgd', 70.24), (11, 40.54, 'gbryd', 'elena', 59.3), (12, 87.13, 'vmmof', 'tfaos', 94.77), (13, 31.5, 'ybbbr', 'mbwsc', 8.52), (14, 57.1, 'lgfcm', 'roids', 61.55)]}, 'trx1': {'table_0': [(1, 24.4, 'axevy', 'wbagt', 84.81), (2, 49.53, 'ikouz', 'tbdir', 25.17), (3, 89.26, 'cwdvy', 'firbf', 44.18), (4, 46.47, 'bdgcf', 'tvqar', 28.53), (5, 81.82, 'lgaxp', 'rjoto', 62.54), (6, 93.97, 'ihkpf', 'ueqfc', 28.45), (7, 58.09, 'fbdal', 'szctx', 91.2), (8, 11.34, 'scsaa', 'arzmy', 87.89), (9, 35.77, 'llhvl', 'awgej', 97.47), (10, 92.48, 'fyxes', 'pzpgd', 70.24), (11, 40.54, 'gbryd', 'elena', 59.3), (12, 87.13, 'vmmof', 'tfaos', 94.77), (13, 31.5, 'ybbbr', 'mbwsc', 8.52), (14, 57.1, 'lgfcm', 'roids', 61.55)]}, 'trx2': {'table_0': [(1, 24.4, 'axevy', 'wbagt', 84.81), (2, 49.53, 'ikouz', 'tbdir', 25.17), (3, 89.26, 'cwdvy', 'firbf', 44.18), (4, 46.47, 'bdgcf', 'tvqar', 28.53), (5, 81.82, 'lgaxp', 'rjoto', 62.54), (6, 93.97, 'ihkpf', 'ueqfc', 28.45), (7, 58.09, 'fbdal', 'szctx', 91.2), (8, 11.34, 'scsaa', 'arzmy', 87.89), (9, 35.77, 'llhvl', 'awgej', 97.47), (10, 90.68, 'fyxes', 'pzpgd', 70.24), (11, 40.54, 'gbryd', 'elena', 59.3), (12, 87.13, 'vmmof', 'tfaos', 94.77), (13, 31.5, 'ybbbr', 'mbwsc', 8.52), (14, 57.1, 'lgfcm', 'roids', 61.55)]}, 'serial': {'table_0': [(1, 24.4, 'axevy', 'wbagt', 84.81), (2, 49.53, 'ikouz', 'tbdir', 25.17), (3, 89.26, 'cwdvy', 'firbf', 44.18), (4, 46.47, 'bdgcf', 'tvqar', 28.53), (5, 81.82, 'lgaxp', 'rjoto', 62.54), (6, 93.97, 'ihkpf', 'ueqfc', 28.45), (7, 58.09, 'fbdal', 'szctx', 91.2), (8, 11.34, 'scsaa', 'arzmy', 87.89), (9, 35.77, 'llhvl', 'awgej', 97.47), (10, 92.48, 'fyxes', 'pzpgd', 70.24), (11, 40.54, 'gbryd', 'elena', 59.3), (12, 87.13, 'vmmof', 'tfaos', 94.77), (13, 31.5, 'ybbbr', 'mbwsc', 8.52), (14, 57.1, 'lgfcm', 'roids', 61.55)]}}
2025-02-04 23:55:12,249 - 
2025-02-04 23:55:12,263 - iter: 17
2025-02-04 23:55:13,765 - table table_0 has 7 rows
2025-02-04 23:55:13,765 - res_dict: {'trx1_lock_row_ids': [1, 3, 4, 5, 7], 'trx2_lock_row_ids': [2, 6], 'intersection_row_ids': []}
2025-02-04 23:55:13,765 - lock_same_resource: False
2025-02-04 23:55:13,765 - 
2025-02-04 23:55:13,766 - non intersection phase1
2025-02-04 23:55:13,766 - 事务1在第一阶段自己加的锁: X
2025-02-04 23:55:13,766 - 事务2在第一阶段自己加的锁: II
2025-02-04 23:55:13,767 - 事务1在第二阶段请求对方资源的锁: S
2025-02-04 23:55:13,767 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-04 23:55:13,770 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,771 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:55:13,771 - params: {'cond': '(col_1 = 3.22) AND (col_0 = 21.56)', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-04 23:55:13,774 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,776 - needed_params: {'cond', 'table'}
2025-02-04 23:55:13,776 - params: {'cond': '(id = 3)', 'table': 'table_0'}
2025-02-04 23:55:13,779 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,781 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:55:13,782 - params: {'cond': '(col_1 = 78.61)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:55:13,786 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,789 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:55:13,789 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:55:13,794 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,795 - needed_params: {'cond', 'table'}
2025-02-04 23:55:13,796 - params: {'cond': '(col_0 = 18.67)', 'table': 'table_0'}
2025-02-04 23:55:13,799 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,801 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:55:13,801 - params: {'insert_cols': 'id, col_0, col_1', 'vals': 'NULL, 11.18, 66.81', 'table': 'table_0'}
2025-02-04 23:55:13,806 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,808 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:55:13,808 - params: {'insert_cols': 'id, col_0, col_1', 'vals': 'NULL, 72.78, 96.32', 'table': 'table_0'}
2025-02-04 23:55:13,808 - non intersection phase1 end
2025-02-04 23:55:13,808 - 
2025-02-04 23:55:13,808 - non intersection phase2
2025-02-04 23:55:13,813 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,814 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:55:13,814 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:55:13,818 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:55:13,820 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:55:13,820 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:55:13,820 - non intersection phase2 end
2025-02-04 23:55:13,820 - 
2025-02-04 23:55:13,820 - 生成死锁事务序列成功如下
2025-02-04 23:55:13,821 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0 FROM table_0 WHERE (col_1 = 3.22) AND (col_0 = 21.56) FOR UPDATE'), (2, 'INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 11.18, 66.81)'), (1, 'DELETE FROM table_0 WHERE (id = 3)'), (2, 'INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 72.78, 96.32)'), (1, 'SELECT id FROM table_0 WHERE (col_1 = 78.61) FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (col_0 = 18.67)'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:55:15,373 - 创建事务1连接成功
2025-02-04 23:55:15,375 - 执行事务1语句: BEGIN
2025-02-04 23:55:15,376 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE (col_1 = 3.22) AND (col_0 = 21.56) FOR UPDATE
2025-02-04 23:55:15,377 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 3)
2025-02-04 23:55:15,377 - 执行事务1语句: SELECT id FROM table_0 WHERE (col_1 = 78.61) FOR UPDATE
2025-02-04 23:55:15,378 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:55:15,379 - 执行事务1语句: DELETE FROM table_0 WHERE (col_0 = 18.67)
2025-02-04 23:55:15,379 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-04 23:55:15,382 - 执行事务1语句: COMMIT;
2025-02-04 23:55:15,386 - 执行事务1成功
2025-02-04 23:55:17,988 - 恢复初始状态成功
2025-02-04 23:55:18,786 - 创建事务2连接成功
2025-02-04 23:55:18,788 - 执行事务2语句: BEGIN
2025-02-04 23:55:18,789 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 11.18, 66.81)
2025-02-04 23:55:18,790 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 72.78, 96.32)
2025-02-04 23:55:18,791 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-04 23:55:18,794 - 执行事务2语句: COMMIT;
2025-02-04 23:55:18,799 - 执行事务2成功
2025-02-04 23:57:21,735 - 
2025-02-04 23:57:21,735 - 执行前idx: 3, pending_stmts: {2: (1, 'UPDATE table_0 SET col_0 = 93.39 WHERE (id = 5)', <Thread(Thread-200, started 34692)>, 1738684641.7358036)}
2025-02-04 23:57:21,837 - stmt_idx: 2, status: success, result: None
2025-02-04 23:57:21,837 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 93.39 WHERE (id = 5)
2025-02-04 23:57:21,837 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:57:21,837 - 
2025-02-04 23:57:21,947 - 
2025-02-04 23:57:21,948 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-201, started 3720)>, 1738684641.947922)}
2025-02-04 23:57:22,053 - stmt_idx: 3, status: success, result: None
2025-02-04 23:57:22,053 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-04 23:57:22,053 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:57:22,053 - 
2025-02-04 23:57:22,164 - 
2025-02-04 23:57:22,165 - 执行前idx: 5, pending_stmts: {4: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 93.55, 73.06, 8.62)', <Thread(Thread-202, started 37064)>, 1738684642.163818)}
2025-02-04 23:57:22,272 - stmt_idx: 4, status: success, result: None
2025-02-04 23:57:22,272 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 93.55, 73.06, 8.62)
2025-02-04 23:57:22,273 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:57:22,273 - 
2025-02-04 23:57:22,380 - 
2025-02-04 23:57:22,381 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE', <Thread(Thread-203, started 11588)>, 1738684642.38052)}
2025-02-04 23:57:22,487 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE
2025-02-04 23:57:22,488 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE', <Thread(Thread-203, started 11588)>, 1738684642.38052)}
2025-02-04 23:57:22,488 - 
2025-02-04 23:57:22,599 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE', <Thread(Thread-203, started 11588)>, 1738684642.38052)}
2025-02-04 23:57:22,599 - 
2025-02-04 23:57:22,599 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE', <Thread(Thread-203, stopped 11588)>, 1738684642.38052)}
2025-02-04 23:57:22,703 - stmt_idx: 5, status: success, result: None
2025-02-04 23:57:22,704 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE
2025-02-04 23:57:22,704 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE
2025-02-04 23:57:22,704 - 执行后idx: 8, pending_stmts: {7: (1, 'COMMIT', <Thread(Thread-204, started 24548)>, 1738684642.7042148)}
2025-02-04 23:57:22,704 - 
2025-02-04 23:57:22,809 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'COMMIT', <Thread(Thread-204, stopped 24548)>, 1738684642.7042148)}
2025-02-04 23:57:22,809 - 
2025-02-04 23:57:22,809 - 执行前idx: 8, pending_stmts: {7: (1, 'COMMIT', <Thread(Thread-204, stopped 24548)>, 1738684642.7042148)}
2025-02-04 23:57:22,918 - stmt_idx: 7, status: success, result: None
2025-02-04 23:57:22,919 - 成功执行序列中事务1语句: COMMIT
2025-02-04 23:57:22,919 - 执行后idx: 8, pending_stmts: {}
2025-02-04 23:57:22,919 - 
2025-02-04 23:57:23,026 - 执行序列成功
2025-02-04 23:57:23,834 - is_atomic: True
2025-02-04 23:57:23,834 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:57:23,834 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_0 = 93.39 WHERE (id = 5)'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 93.55, 73.06, 8.62)'), (2, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 2 AND id <= 3 FOR UPDATE'), (1, 'COMMIT')]
2025-02-04 23:57:23,834 - snapshots: {'before': {'table_0': [(1, 81.73, 82.01, 20.8), (2, 24.13, 21.01, 63.03), (3, 80.67, 69.23, 61.19), (4, 92.43, 6.4, 39.54), (5, 84.76, 85.55, 98.72)]}, 'trx1': {'table_0': [(1, 81.73, 82.01, 20.8), (2, 24.13, 21.01, 63.03), (3, 80.67, 69.23, 61.19), (4, 92.43, 6.4, 39.54), (5, 93.39, 85.55, 98.72)]}, 'trx2': {'table_0': [(1, 81.73, 82.01, 20.8), (2, 24.13, 21.01, 63.03), (3, 80.67, 69.23, 61.19), (4, 92.43, 6.4, 39.54), (5, 84.76, 85.55, 98.72), (6, 93.55, 73.06, 8.62)]}, 'serial': {'table_0': [(1, 81.73, 82.01, 20.8), (2, 24.13, 21.01, 63.03), (3, 80.67, 69.23, 61.19), (4, 92.43, 6.4, 39.54), (5, 93.39, 85.55, 98.72), (7, 93.55, 73.06, 8.62)]}}
2025-02-04 23:57:23,834 - 
2025-02-04 23:57:23,846 - iter: 26
2025-02-04 23:57:25,385 - table table_0 has 6 rows
2025-02-04 23:57:25,386 - trx1_lock_row_ids: [1, 3, 4, 5, 6]
2025-02-04 23:57:25,386 - trx2_lock_row_ids: [1, 2, 3, 4]
2025-02-04 23:57:25,386 - intersection_row_ids: [1, 3, 4]
2025-02-04 23:57:25,386 - trx1_exclusive_ids: [5, 6]
2025-02-04 23:57:25,386 - trx2_exclusive_ids: [2]
2025-02-04 23:57:25,386 - res_dict: {'trx1_lock_row_ids': [1, 3, 4, 5, 6], 'trx2_lock_row_ids': [1, 2, 3, 4], 'intersection_row_ids': [1, 3, 4]}
2025-02-04 23:57:25,386 - lock_same_resource: True
2025-02-04 23:57:25,386 - 
2025-02-04 23:57:25,386 - intersection phase1
2025-02-04 23:57:25,391 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-04 23:57:25,393 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:25,393 - params: {'v1': '1', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-04 23:57:25,396 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:57:25,398 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:25,398 - params: {'cond': '(id = 1)', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:57:25,401 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:57:25,402 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:25,402 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:57:25,406 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:57:25,407 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:25,407 - params: {'cond': '(col_0 = 84) AND (col_2 = 1.56) AND (col_3 = 91.03)', 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_4'}
2025-02-04 23:57:25,408 - intersection phase1 end
2025-02-04 23:57:25,408 - 
2025-02-04 23:57:25,408 - intersection phase2
2025-02-04 23:57:25,408 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:57:25,408 - 事务2在第二阶段自己加的锁: S
2025-02-04 23:57:25,408 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-04 23:57:25,408 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-04 23:57:25,413 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:57:25,414 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:25,414 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3'}
2025-02-04 23:57:25,418 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:57:25,419 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:25,419 - params: {'cond': '(id = 6) AND (col_0 = 87) AND (col_2 = 86.28)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:57:25,424 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:57:25,426 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:25,426 - params: {'cond': '(col_3 = 85.48)', 'table': 'table_0', 'select_cols': 'id, col_4'}
2025-02-04 23:57:25,426 - intersection phase2 end
2025-02-04 23:57:25,426 - 
2025-02-04 23:57:25,426 - intersection phase3
2025-02-04 23:57:25,429 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:57:25,431 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:57:25,431 - params: {'set_expr': 'col_1 = 58', 'table': 'table_0', 'cond': '(col_3 = 85.48) AND (col_0 = 35)'}
2025-02-04 23:57:25,432 - intersection phase3 end
2025-02-04 23:57:25,432 - 
2025-02-04 23:57:25,432 - 生成死锁事务序列成功如下
2025-02-04 23:57:25,432 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2, col_4 FROM table_0 WHERE (col_0 = 84) AND (col_2 = 1.56) AND (col_3 = 91.03) LOCK IN SHARE MODE'), (2, 'SELECT id, col_4 FROM table_0 WHERE (col_3 = 85.48) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_0 = 87) AND (col_2 = 86.28) FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 58 WHERE (col_3 = 85.48) AND (col_0 = 35)'), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:57:26,997 - 创建事务1连接成功
2025-02-04 23:57:26,998 - 执行事务1语句: BEGIN
2025-02-04 23:57:26,999 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-04 23:57:27,000 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-04 23:57:27,001 - 执行事务1语句: SELECT id, col_0, col_2, col_4 FROM table_0 WHERE (col_0 = 84) AND (col_2 = 1.56) AND (col_3 = 91.03) LOCK IN SHARE MODE
2025-02-04 23:57:27,002 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:57:27,002 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_0 = 87) AND (col_2 = 86.28) FOR UPDATE
2025-02-04 23:57:27,003 - 执行事务1语句: UPDATE table_0 SET col_1 = 58 WHERE (col_3 = 85.48) AND (col_0 = 35)
2025-02-04 23:57:27,003 - 执行事务1语句: COMMIT;
2025-02-04 23:57:27,007 - 执行事务1成功
2025-02-04 23:57:29,609 - 恢复初始状态成功
2025-02-04 23:57:30,380 - 创建事务2连接成功
2025-02-04 23:57:30,381 - 执行事务2语句: BEGIN
2025-02-04 23:57:30,382 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE
2025-02-04 23:57:30,383 - 执行事务2语句: SELECT id, col_4 FROM table_0 WHERE (col_3 = 85.48) LOCK IN SHARE MODE
2025-02-04 23:57:30,384 - 执行事务2语句: COMMIT;
2025-02-04 23:57:30,388 - 执行事务2成功
2025-02-04 23:57:35,421 - 
2025-02-04 23:57:35,421 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE', <Thread(Thread-205, started 41004)>, 1738684655.4211829)}
2025-02-04 23:57:35,525 - stmt_idx: 2, status: success, result: None
2025-02-04 23:57:35,525 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-04 23:57:35,525 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:57:35,525 - 
2025-02-04 23:57:35,631 - 
2025-02-04 23:57:35,631 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-206, started 40616)>, 1738684655.631414)}
2025-02-04 23:57:35,737 - stmt_idx: 3, status: success, result: None
2025-02-04 23:57:35,737 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-04 23:57:35,737 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:57:35,737 - 
2025-02-04 23:57:35,846 - 
2025-02-04 23:57:35,847 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE', <Thread(Thread-207, started 34684)>, 1738684655.8463752)}
2025-02-04 23:57:35,954 - stmt_idx: 4, status: success, result: None
2025-02-04 23:57:35,954 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE
2025-02-04 23:57:35,954 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:57:35,954 - 
2025-02-04 23:57:36,065 - 
2025-02-04 23:57:36,066 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_2, col_4 FROM table_0 WHERE (col_0 = 84) AND (col_2 = 1.56) AND (col_3 = 91.03) LOCK IN SHARE MODE', <Thread(Thread-208, started 35892)>, 1738684656.0655756)}
2025-02-04 23:57:36,173 - stmt_idx: 5, status: success, result: None
2025-02-04 23:57:36,173 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_4 FROM table_0 WHERE (col_0 = 84) AND (col_2 = 1.56) AND (col_3 = 91.03) LOCK IN SHARE MODE
2025-02-04 23:57:36,173 - 执行后idx: 6, pending_stmts: {}
2025-02-04 23:57:36,173 - 
2025-02-04 23:57:36,281 - 
2025-02-04 23:57:36,282 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT id, col_4 FROM table_0 WHERE (col_3 = 85.48) LOCK IN SHARE MODE', <Thread(Thread-209, started 34180)>, 1738684656.2818534)}
2025-02-04 23:57:36,391 - stmt_idx: 6, status: success, result: None
2025-02-04 23:57:36,391 - 成功执行序列中事务2语句: SELECT id, col_4 FROM table_0 WHERE (col_3 = 85.48) LOCK IN SHARE MODE
2025-02-04 23:57:36,391 - 执行后idx: 7, pending_stmts: {}
2025-02-04 23:57:36,391 - 
2025-02-04 23:57:36,497 - 
2025-02-04 23:57:36,498 - 执行前idx: 8, pending_stmts: {7: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-210, started 41180)>, 1738684656.4978)}
2025-02-04 23:57:36,607 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:57:36,607 - 执行后idx: 8, pending_stmts: {7: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-210, started 41180)>, 1738684656.4978)}
2025-02-04 23:57:36,607 - 
2025-02-04 23:57:36,715 - stmt为None, trx_id: 2, stmt: None
2025-02-04 23:57:36,718 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-210, started 41180)>, 1738684656.4978)}
2025-02-04 23:57:36,719 - 
2025-02-04 23:57:36,719 - 执行前idx: 13, pending_stmts: {7: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-210, stopped 41180)>, 1738684656.4978)}
2025-02-04 23:57:36,822 - stmt_idx: 7, status: success, result: None
2025-02-04 23:57:36,822 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:57:36,822 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-04 23:57:36,823 - 执行后idx: 13, pending_stmts: {8: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_0 = 87) AND (col_2 = 86.28) FOR UPDATE', <Thread(Thread-211, started 16444)>, 1738684656.8235776), 9: (1, 'UPDATE table_0 SET col_1 = 58 WHERE (col_3 = 85.48) AND (col_0 = 35)', <Thread(Thread-212, started 32048)>, 1738684656.8235776), 12: (1, 'COMMIT', <Thread(Thread-213, started 5244)>, 1738684656.8239725)}
2025-02-04 23:57:36,823 - 
2025-02-04 23:57:36,932 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_0 = 87) AND (col_2 = 86.28) FOR UPDATE', <Thread(Thread-211, stopped 16444)>, 1738684656.8235776), 9: (1, 'UPDATE table_0 SET col_1 = 58 WHERE (col_3 = 85.48) AND (col_0 = 35)', <Thread(Thread-212, stopped 32048)>, 1738684656.8235776), 12: (1, 'COMMIT', <Thread(Thread-213, stopped 5244)>, 1738684656.8239725)}
2025-02-04 23:57:36,932 - 
2025-02-04 23:57:36,932 - 执行前idx: 13, pending_stmts: {8: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_0 = 87) AND (col_2 = 86.28) FOR UPDATE', <Thread(Thread-211, stopped 16444)>, 1738684656.8235776), 9: (1, 'UPDATE table_0 SET col_1 = 58 WHERE (col_3 = 85.48) AND (col_0 = 35)', <Thread(Thread-212, stopped 32048)>, 1738684656.8235776), 12: (1, 'COMMIT', <Thread(Thread-213, stopped 5244)>, 1738684656.8239725)}
2025-02-04 23:57:37,037 - stmt_idx: 8, status: success, result: None
2025-02-04 23:57:37,037 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_0 = 87) AND (col_2 = 86.28) FOR UPDATE
2025-02-04 23:57:37,147 - stmt_idx: 9, status: success, result: None
2025-02-04 23:57:37,147 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 58 WHERE (col_3 = 85.48) AND (col_0 = 35)
2025-02-04 23:57:37,255 - stmt_idx: 12, status: success, result: None
2025-02-04 23:57:37,255 - 成功执行序列中事务1语句: COMMIT
2025-02-04 23:57:37,256 - 执行后idx: 13, pending_stmts: {}
2025-02-04 23:57:37,256 - 
2025-02-04 23:57:37,367 - 执行序列成功
2025-02-04 23:57:38,158 - is_atomic: True
2025-02-04 23:57:38,159 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:57:38,159 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2, col_4 FROM table_0 WHERE (col_0 = 84) AND (col_2 = 1.56) AND (col_3 = 91.03) LOCK IN SHARE MODE'), (2, 'SELECT id, col_4 FROM table_0 WHERE (col_3 = 85.48) LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_0 = 87) AND (col_2 = 86.28) FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 58 WHERE (col_3 = 85.48) AND (col_0 = 35)'), (1, 'COMMIT')]
2025-02-04 23:57:38,159 - snapshots: {'before': {'table_0': [(1, 97, 49, 23.8, 89.99, 'gpsnv'), (2, 35, 59, 62.71, 85.48, 'usggo'), (3, 100, 24, 25.63, 45.88, 'rdfeq'), (4, 84, 1, 1.56, 91.03, 'emllq'), (5, 37, 58, 40.16, 62.75, 'vbkuu'), (6, 87, 78, 86.28, 63.57, 'ffetm')]}, 'trx1': {'table_0': [(1, 97, 49, 23.8, 89.99, 'gpsnv'), (2, 35, 59, 62.71, 85.48, 'usggo'), (3, 100, 24, 25.63, 45.88, 'rdfeq'), (4, 84, 1, 1.56, 91.03, 'emllq'), (5, 37, 58, 40.16, 62.75, 'vbkuu'), (6, 87, 78, 86.28, 63.57, 'ffetm')]}, 'trx2': {'table_0': [(1, 97, 49, 23.8, 89.99, 'gpsnv'), (2, 35, 59, 62.71, 85.48, 'usggo'), (3, 100, 24, 25.63, 45.88, 'rdfeq'), (4, 84, 1, 1.56, 91.03, 'emllq'), (5, 37, 58, 40.16, 62.75, 'vbkuu'), (6, 87, 78, 86.28, 63.57, 'ffetm')]}, 'serial': {'table_0': [(1, 97, 49, 23.8, 89.99, 'gpsnv'), (2, 35, 59, 62.71, 85.48, 'usggo'), (3, 100, 24, 25.63, 45.88, 'rdfeq'), (4, 84, 1, 1.56, 91.03, 'emllq'), (5, 37, 58, 40.16, 62.75, 'vbkuu'), (6, 87, 78, 86.28, 63.57, 'ffetm')]}}
2025-02-04 23:57:38,159 - 
2025-02-04 23:57:38,170 - iter: 27
2025-02-04 23:57:39,673 - table table_0 has 7 rows
2025-02-04 23:57:39,674 - res_dict: {'trx1_lock_row_ids': [4], 'trx2_lock_row_ids': [2, 3, 5, 6], 'intersection_row_ids': []}
2025-02-04 23:57:39,674 - lock_same_resource: False
2025-02-04 23:57:39,674 - 
2025-02-04 23:57:39,674 - non intersection phase1
2025-02-04 23:57:39,674 - 事务1在第一阶段自己加的锁: X
2025-02-04 23:57:39,674 - 事务2在第一阶段自己加的锁: II
2025-02-04 23:57:39,674 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:57:39,675 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:57:39,679 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-04 23:57:39,681 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:39,681 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'col_0, col_1, col_2, col_3, col_4'}
2025-02-04 23:57:39,684 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:57:39,686 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:57:39,686 - params: {'set_expr': 'col_3 = 35.36, col_4 = 60, col_1 = 88.48, col_2 = 17, col_0 = 32.41', 'table': 'table_0', 'cond': '(id = 2) AND (col_3 = 63.87) AND (col_0 = 54.12)'}
2025-02-04 23:57:39,691 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:57:39,693 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:57:39,693 - params: {'v1': '3', 'set_expr': 'col_4 = 56, col_0 = 85.77', 'table': 'table_0', 'v2': '3'}
2025-02-04 23:57:39,697 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:57:39,698 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:57:39,699 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': 'NULL, 31.89, 95.11, 87, 66.53, 75', 'table': 'table_0'}
2025-02-04 23:57:39,703 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:57:39,705 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:57:39,705 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': 'NULL, 9.1, 20.61, 22, 15.98, 34', 'table': 'table_0'}
2025-02-04 23:57:39,706 - non intersection phase1 end
2025-02-04 23:57:39,706 - 
2025-02-04 23:57:39,706 - non intersection phase2
2025-02-04 23:57:39,710 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:57:39,712 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:39,712 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_3, col_4'}
2025-02-04 23:57:39,716 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-04 23:57:39,718 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:39,719 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3, col_4'}
2025-02-04 23:57:39,719 - non intersection phase2 end
2025-02-04 23:57:39,719 - 
2025-02-04 23:57:39,719 - 生成死锁事务序列成功如下
2025-02-04 23:57:39,719 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'UPDATE table_0 SET col_3 = 35.36, col_4 = 60, col_1 = 88.48, col_2 = 17, col_0 = 32.41 WHERE (id = 2) AND (col_3 = 63.87) AND (col_0 = 54.12)'), (2, 'UPDATE table_0 SET col_4 = 56, col_0 = 85.77 WHERE id BETWEEN 3 AND 3'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 31.89, 95.11, 87, 66.53, 75)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 9.1, 20.61, 22, 15.98, 34)'), (2, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT id, col_3, col_4 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:57:41,298 - 创建事务1连接成功
2025-02-04 23:57:41,300 - 执行事务1语句: BEGIN
2025-02-04 23:57:41,301 - 执行事务1语句: SELECT col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:57:41,302 - 执行事务1语句: SELECT id, col_3, col_4 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-04 23:57:41,303 - 执行事务1语句: COMMIT;
2025-02-04 23:57:41,307 - 执行事务1成功
2025-02-04 23:57:43,910 - 恢复初始状态成功
2025-02-04 23:57:44,694 - 创建事务2连接成功
2025-02-04 23:57:44,696 - 执行事务2语句: BEGIN
2025-02-04 23:57:44,697 - 执行事务2语句: UPDATE table_0 SET col_3 = 35.36, col_4 = 60, col_1 = 88.48, col_2 = 17, col_0 = 32.41 WHERE (id = 2) AND (col_3 = 63.87) AND (col_0 = 54.12)
2025-02-04 23:57:44,698 - 执行事务2语句: UPDATE table_0 SET col_4 = 56, col_0 = 85.77 WHERE id BETWEEN 3 AND 3
2025-02-04 23:57:44,699 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 31.89, 95.11, 87, 66.53, 75)
2025-02-04 23:57:44,700 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 9.1, 20.61, 22, 15.98, 34)
2025-02-04 23:57:44,701 - 执行事务2语句: SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:57:44,703 - 执行事务2语句: COMMIT;
2025-02-04 23:57:44,707 - 执行事务2成功
2025-02-04 23:57:49,678 - 
2025-02-04 23:57:49,678 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-214, started 32268)>, 1738684669.6787484)}
2025-02-04 23:57:49,788 - stmt_idx: 2, status: success, result: None
2025-02-04 23:57:49,788 - 成功执行序列中事务1语句: SELECT col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:57:49,788 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:57:49,788 - 
2025-02-04 23:57:49,898 - 
2025-02-04 23:57:49,899 - 执行前idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_3 = 35.36, col_4 = 60, col_1 = 88.48, col_2 = 17, col_0 = 32.41 WHERE (id = 2) AND (col_3 = 63.87) AND (col_0 = 54.12)', <Thread(Thread-215, started 10608)>, 1738684669.898745)}
2025-02-04 23:57:50,007 - stmt_idx: 3, status: success, result: None
2025-02-04 23:57:50,007 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 35.36, col_4 = 60, col_1 = 88.48, col_2 = 17, col_0 = 32.41 WHERE (id = 2) AND (col_3 = 63.87) AND (col_0 = 54.12)
2025-02-04 23:57:50,007 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:57:50,007 - 
2025-02-04 23:57:50,115 - 
2025-02-04 23:57:50,116 - 执行前idx: 5, pending_stmts: {4: (2, 'UPDATE table_0 SET col_4 = 56, col_0 = 85.77 WHERE id BETWEEN 3 AND 3', <Thread(Thread-216, started 26896)>, 1738684670.1152203)}
2025-02-04 23:57:50,224 - stmt_idx: 4, status: success, result: None
2025-02-04 23:57:50,224 - 成功执行序列中事务2语句: UPDATE table_0 SET col_4 = 56, col_0 = 85.77 WHERE id BETWEEN 3 AND 3
2025-02-04 23:57:50,224 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:57:50,224 - 
2025-02-04 23:57:50,331 - 
2025-02-04 23:57:50,332 - 执行前idx: 6, pending_stmts: {5: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 31.89, 95.11, 87, 66.53, 75)', <Thread(Thread-217, started 41136)>, 1738684670.3319802)}
2025-02-04 23:57:50,438 - stmt_idx: 5, status: success, result: None
2025-02-04 23:57:50,438 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 31.89, 95.11, 87, 66.53, 75)
2025-02-04 23:57:50,438 - 执行后idx: 6, pending_stmts: {}
2025-02-04 23:57:50,438 - 
2025-02-04 23:57:50,546 - 
2025-02-04 23:57:50,547 - 执行前idx: 7, pending_stmts: {6: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 9.1, 20.61, 22, 15.98, 34)', <Thread(Thread-218, started 39828)>, 1738684670.5461895)}
2025-02-04 23:57:50,652 - stmt_idx: 6, status: success, result: None
2025-02-04 23:57:50,652 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 9.1, 20.61, 22, 15.98, 34)
2025-02-04 23:57:50,652 - 执行后idx: 7, pending_stmts: {}
2025-02-04 23:57:50,652 - 
2025-02-04 23:57:50,761 - 
2025-02-04 23:57:50,762 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-219, started 38828)>, 1738684670.7615104)}
2025-02-04 23:57:50,867 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:57:50,867 - 执行后idx: 8, pending_stmts: {7: (2, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-219, started 38828)>, 1738684670.7615104)}
2025-02-04 23:57:50,868 - 
2025-02-04 23:57:50,973 - 
2025-02-04 23:57:50,974 - 执行前idx: 9, pending_stmts: {7: (2, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-219, started 38828)>, 1738684670.7615104), 8: (1, 'SELECT id, col_3, col_4 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE', <Thread(Thread-220, started 13368)>, 1738684670.9738417)}
2025-02-04 23:57:50,977 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_3, col_4 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-04 23:57:51,082 - stmt_idx: 7, status: success, result: None
2025-02-04 23:57:51,082 - 成功执行序列中事务2语句: SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:57:51,082 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:57:51,192 - stmt_idx: 8, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:57:51,192 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_3, col_4 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-04 23:57:51,193 - 错误: dictionary changed size during iteration
2025-02-04 23:57:51,197 - 执行序列成功
2025-02-04 23:57:52,028 - is_atomic: True
2025-02-04 23:57:52,029 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-04 23:57:52,029 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'UPDATE table_0 SET col_3 = 35.36, col_4 = 60, col_1 = 88.48, col_2 = 17, col_0 = 32.41 WHERE (id = 2) AND (col_3 = 63.87) AND (col_0 = 54.12)'), (2, 'UPDATE table_0 SET col_4 = 56, col_0 = 85.77 WHERE id BETWEEN 3 AND 3'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 31.89, 95.11, 87, 66.53, 75)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 9.1, 20.61, 22, 15.98, 34)'), (2, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-04 23:57:52,029 - snapshots: {'before': {'table_0': [(1, 80.92, 17.49, 15, 34.49, 31), (2, 54.12, 56.44, 26, 63.87, 39), (3, 26.48, 60.42, 40, 25.81, 33), (4, 16.71, 76.47, 93, 56.19, 20), (5, 40.92, 88.58, 66, 5.36, 94), (6, 89.72, 89.06, 51, 40.99, 18), (7, 18.24, 49.04, 58, 17.38, 16)]}, 'trx1': {'table_0': [(1, 80.92, 17.49, 15, 34.49, 31), (2, 54.12, 56.44, 26, 63.87, 39), (3, 26.48, 60.42, 40, 25.81, 33), (4, 16.71, 76.47, 93, 56.19, 20), (5, 40.92, 88.58, 66, 5.36, 94), (6, 89.72, 89.06, 51, 40.99, 18), (7, 18.24, 49.04, 58, 17.38, 16)]}, 'trx2': {'table_0': [(1, 80.92, 17.49, 15, 34.49, 31), (2, 54.12, 56.44, 26, 63.87, 39), (3, 85.77, 60.42, 40, 25.81, 56), (4, 16.71, 76.47, 93, 56.19, 20), (5, 40.92, 88.58, 66, 5.36, 94), (6, 89.72, 89.06, 51, 40.99, 18), (7, 18.24, 49.04, 58, 17.38, 16), (8, 31.89, 95.11, 87, 66.53, 75), (9, 9.1, 20.61, 22, 15.98, 34)]}, 'serial': {'table_0': [(1, 80.92, 17.49, 15, 34.49, 31), (2, 54.12, 56.44, 26, 63.87, 39), (3, 85.77, 60.42, 40, 25.81, 56), (4, 16.71, 76.47, 93, 56.19, 20), (5, 40.92, 88.58, 66, 5.36, 94), (6, 89.72, 89.06, 51, 40.99, 18), (7, 18.24, 49.04, 58, 17.38, 16), (10, 31.89, 95.11, 87, 66.53, 75), (11, 9.1, 20.61, 22, 15.98, 34)]}}
2025-02-04 23:57:52,029 - 
2025-02-04 23:57:52,042 - iter: 28
2025-02-04 23:57:53,569 - table table_0 has 7 rows
2025-02-04 23:57:53,569 - trx1_lock_row_ids: [3]
2025-02-04 23:57:53,569 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6]
2025-02-04 23:57:53,569 - intersection_row_ids: [3]
2025-02-04 23:57:53,569 - trx1_exclusive_ids: []
2025-02-04 23:57:53,569 - trx2_exclusive_ids: [1, 2, 4, 5, 6]
2025-02-04 23:57:53,569 - res_dict: {'trx1_lock_row_ids': [3], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6], 'intersection_row_ids': [3]}
2025-02-04 23:57:53,569 - lock_same_resource: True
2025-02-04 23:57:53,569 - 
2025-02-04 23:57:53,570 - intersection phase1
2025-02-04 23:57:53,573 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,574 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:53,574 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-04 23:57:53,578 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,579 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:57:53,579 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 35.62, 'EQTyL', 54.66", 'table': 'table_0'}
2025-02-04 23:57:53,580 - intersection phase1 end
2025-02-04 23:57:53,580 - 
2025-02-04 23:57:53,580 - intersection phase2
2025-02-04 23:57:53,580 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:57:53,580 - 事务2在第二阶段自己加的锁: S
2025-02-04 23:57:53,580 - 事务1在第三阶段请求对方资源的锁: X
2025-02-04 23:57:53,580 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-04 23:57:53,584 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,585 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:53,585 - params: {'cond': '(id = 1)', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-04 23:57:53,588 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,590 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:53,590 - params: {'cond': '(id = 2)', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-04 23:57:53,594 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,595 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:53,595 - params: {'cond': "(col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2)", 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-04 23:57:53,598 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,600 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:53,601 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_1, col_3'}
2025-02-04 23:57:53,604 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,606 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:53,606 - params: {'cond': "(id = 6) AND (col_1 = 40.9) AND (col_2 = 'exsei') AND (col_3 = 39.93)", 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-04 23:57:53,606 - intersection phase2 end
2025-02-04 23:57:53,606 - 
2025-02-04 23:57:53,606 - intersection phase3
2025-02-04 23:57:53,610 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,612 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:57:53,612 - params: {'cond': '(id = 6)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:57:53,615 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:57:53,617 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:57:53,617 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:57:53,617 - intersection phase3 end
2025-02-04 23:57:53,617 - 
2025-02-04 23:57:53,617 - 生成死锁事务序列成功如下
2025-02-04 23:57:53,618 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 35.62, 'EQTyL', 54.66)"), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE"), (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (id = 6) AND (col_1 = 40.9) AND (col_2 = 'exsei') AND (col_3 = 39.93) LOCK IN SHARE MODE"), (2, 'SELECT * FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE (id = 6) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:57:55,222 - 创建事务1连接成功
2025-02-04 23:57:55,224 - 执行事务1语句: BEGIN
2025-02-04 23:57:55,225 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:57:55,226 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 6) FOR UPDATE
2025-02-04 23:57:55,227 - 执行事务1语句: COMMIT;
2025-02-04 23:57:55,231 - 执行事务1成功
2025-02-04 23:57:57,900 - 恢复初始状态成功
2025-02-04 23:57:58,691 - 创建事务2连接成功
2025-02-04 23:57:58,693 - 执行事务2语句: BEGIN
2025-02-04 23:57:58,694 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 35.62, 'EQTyL', 54.66)
2025-02-04 23:57:58,695 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-04 23:57:58,695 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-04 23:57:58,696 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE
2025-02-04 23:57:58,697 - 执行事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-04 23:57:58,698 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE (id = 6) AND (col_1 = 40.9) AND (col_2 = 'exsei') AND (col_3 = 39.93) LOCK IN SHARE MODE
2025-02-04 23:57:58,699 - 执行事务2语句: SELECT * FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-04 23:57:58,701 - 执行事务2语句: COMMIT;
2025-02-04 23:57:58,705 - 执行事务2成功
2025-02-04 23:58:03,690 - 
2025-02-04 23:58:03,690 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-221, started 39880)>, 1738684683.690319)}
2025-02-04 23:58:03,794 - stmt_idx: 2, status: success, result: None
2025-02-04 23:58:03,794 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:58:03,794 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:58:03,794 - 
2025-02-04 23:58:03,906 - 
2025-02-04 23:58:03,906 - 执行前idx: 4, pending_stmts: {3: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 35.62, 'EQTyL', 54.66)", <Thread(Thread-222, started 38868)>, 1738684683.9060287)}
2025-02-04 23:58:04,013 - stmt_idx: 3, status: success, result: None
2025-02-04 23:58:04,013 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 35.62, 'EQTyL', 54.66)
2025-02-04 23:58:04,013 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:58:04,013 - 
2025-02-04 23:58:04,121 - 
2025-02-04 23:58:04,122 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE', <Thread(Thread-223, started 34464)>, 1738684684.1218824)}
2025-02-04 23:58:04,229 - stmt_idx: 4, status: success, result: None
2025-02-04 23:58:04,229 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-04 23:58:04,229 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:58:04,229 - 
2025-02-04 23:58:04,340 - 
2025-02-04 23:58:04,341 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-224, started 41168)>, 1738684684.3402998)}
2025-02-04 23:58:04,447 - stmt_idx: 5, status: success, result: None
2025-02-04 23:58:04,447 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-04 23:58:04,447 - 执行后idx: 6, pending_stmts: {}
2025-02-04 23:58:04,447 - 
2025-02-04 23:58:04,555 - 
2025-02-04 23:58:04,556 - 执行前idx: 7, pending_stmts: {6: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE", <Thread(Thread-225, started 33080)>, 1738684684.5557415)}
2025-02-04 23:58:04,664 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE
2025-02-04 23:58:04,665 - 执行后idx: 7, pending_stmts: {6: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE", <Thread(Thread-225, started 33080)>, 1738684684.5557415)}
2025-02-04 23:58:04,665 - 
2025-02-04 23:58:04,772 - 
2025-02-04 23:58:04,773 - 执行前idx: 11, pending_stmts: {6: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE", <Thread(Thread-225, started 33080)>, 1738684684.5557415), 10: (1, 'SELECT id FROM table_0 WHERE (id = 6) FOR UPDATE', <Thread(Thread-226, started 6152)>, 1738684684.7726896)}
2025-02-04 23:58:04,880 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE
2025-02-04 23:58:04,987 - stmt_idx: 10, status: success, result: None
2025-02-04 23:58:04,987 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (id = 6) FOR UPDATE
2025-02-04 23:58:04,987 - 执行后idx: 11, pending_stmts: {6: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE", <Thread(Thread-225, started 33080)>, 1738684684.5557415)}
2025-02-04 23:58:04,987 - 
2025-02-04 23:58:05,099 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE", <Thread(Thread-225, started 33080)>, 1738684684.5557415)}
2025-02-04 23:58:05,100 - 
2025-02-04 23:58:05,100 - 执行前idx: 13, pending_stmts: {6: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE", <Thread(Thread-225, stopped 33080)>, 1738684684.5557415)}
2025-02-04 23:58:05,205 - stmt_idx: 6, status: success, result: None
2025-02-04 23:58:05,205 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE
2025-02-04 23:58:05,205 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE
2025-02-04 23:58:05,207 - 执行后idx: 13, pending_stmts: {7: (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-227, started 40772)>, 1738684685.2067041), 8: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (id = 6) AND (col_1 = 40.9) AND (col_2 = 'exsei') AND (col_3 = 39.93) LOCK IN SHARE MODE", <Thread(Thread-228, started 14952)>, 1738684685.2071846), 9: (2, 'SELECT * FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE', <Thread(Thread-229, started 38496)>, 1738684685.2071846), 11: (2, 'COMMIT', <Thread(Thread-230, started 33828)>, 1738684685.2071846)}
2025-02-04 23:58:05,207 - 
2025-02-04 23:58:05,314 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-227, stopped 40772)>, 1738684685.2067041), 8: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (id = 6) AND (col_1 = 40.9) AND (col_2 = 'exsei') AND (col_3 = 39.93) LOCK IN SHARE MODE", <Thread(Thread-228, stopped 14952)>, 1738684685.2071846), 9: (2, 'SELECT * FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE', <Thread(Thread-229, stopped 38496)>, 1738684685.2071846), 11: (2, 'COMMIT', <Thread(Thread-230, stopped 33828)>, 1738684685.2071846)}
2025-02-04 23:58:05,314 - 
2025-02-04 23:58:05,314 - 执行前idx: 13, pending_stmts: {7: (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-227, stopped 40772)>, 1738684685.2067041), 8: (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (id = 6) AND (col_1 = 40.9) AND (col_2 = 'exsei') AND (col_3 = 39.93) LOCK IN SHARE MODE", <Thread(Thread-228, stopped 14952)>, 1738684685.2071846), 9: (2, 'SELECT * FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE', <Thread(Thread-229, stopped 38496)>, 1738684685.2071846), 11: (2, 'COMMIT', <Thread(Thread-230, stopped 33828)>, 1738684685.2071846)}
2025-02-04 23:58:05,423 - stmt_idx: 7, status: success, result: None
2025-02-04 23:58:05,423 - 成功执行序列中事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-04 23:58:05,532 - stmt_idx: 8, status: success, result: None
2025-02-04 23:58:05,532 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE (id = 6) AND (col_1 = 40.9) AND (col_2 = 'exsei') AND (col_3 = 39.93) LOCK IN SHARE MODE
2025-02-04 23:58:05,639 - stmt_idx: 9, status: success, result: None
2025-02-04 23:58:05,639 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-04 23:58:05,749 - stmt_idx: 11, status: success, result: None
2025-02-04 23:58:05,749 - 成功执行序列中事务2语句: COMMIT
2025-02-04 23:58:05,749 - 执行后idx: 13, pending_stmts: {}
2025-02-04 23:58:05,749 - 
2025-02-04 23:58:05,859 - 执行序列成功
2025-02-04 23:58:06,655 - is_atomic: True
2025-02-04 23:58:06,655 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:58:06,655 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 35.62, 'EQTyL', 54.66)"), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (id = 6) FOR UPDATE'), (1, 'COMMIT'), (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_1 = 74.67) AND (col_2 = 'ccwqo') AND (col_3 = 24.2) LOCK IN SHARE MODE"), (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, "SELECT id, col_1, col_2 FROM table_0 WHERE (id = 6) AND (col_1 = 40.9) AND (col_2 = 'exsei') AND (col_3 = 39.93) LOCK IN SHARE MODE"), (2, 'SELECT * FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (2, 'COMMIT')]
2025-02-04 23:58:06,655 - snapshots: {'before': {'table_0': [(1, 75.76, 'jbxgm', 12.32), (2, 77.77, 'krteh', 32.34), (3, 65.12, 'kiluq', 1.94), (4, 74.67, 'ccwqo', 24.2), (5, 14.7, 'hylgh', 48.21), (6, 40.9, 'exsei', 39.93), (7, 30.33, 'cuthp', 61.52)]}, 'trx1': {'table_0': [(1, 75.76, 'jbxgm', 12.32), (2, 77.77, 'krteh', 32.34), (3, 65.12, 'kiluq', 1.94), (4, 74.67, 'ccwqo', 24.2), (5, 14.7, 'hylgh', 48.21), (6, 40.9, 'exsei', 39.93), (7, 30.33, 'cuthp', 61.52)]}, 'trx2': {'table_0': [(1, 75.76, 'jbxgm', 12.32), (2, 77.77, 'krteh', 32.34), (3, 65.12, 'kiluq', 1.94), (4, 74.67, 'ccwqo', 24.2), (5, 14.7, 'hylgh', 48.21), (6, 40.9, 'exsei', 39.93), (7, 30.33, 'cuthp', 61.52), (8, 35.62, 'EQTyL', 54.66)]}, 'serial': {'table_0': [(1, 75.76, 'jbxgm', 12.32), (2, 77.77, 'krteh', 32.34), (3, 65.12, 'kiluq', 1.94), (4, 74.67, 'ccwqo', 24.2), (5, 14.7, 'hylgh', 48.21), (6, 40.9, 'exsei', 39.93), (7, 30.33, 'cuthp', 61.52), (9, 35.62, 'EQTyL', 54.66)]}}
2025-02-04 23:58:06,656 - 
2025-02-04 23:58:06,667 - iter: 29
2025-02-04 23:58:08,193 - table table_0 has 14 rows
2025-02-04 23:58:08,194 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [11, 12, 13, 14], 'intersection_row_ids': []}
2025-02-04 23:58:08,194 - lock_same_resource: False
2025-02-04 23:58:08,194 - 
2025-02-04 23:58:08,194 - non intersection phase1
2025-02-04 23:58:08,194 - 事务1在第一阶段自己加的锁: NK
2025-02-04 23:58:08,194 - 事务2在第一阶段自己加的锁: X
2025-02-04 23:58:08,194 - 事务1在第二阶段请求对方资源的锁: S
2025-02-04 23:58:08,194 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:58:08,198 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-04 23:58:08,199 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:08,199 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_2, col_4'}
2025-02-04 23:58:08,203 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=11, is_continuous=True, range_end_idx=14
2025-02-04 23:58:08,205 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:08,205 - params: {'v1': '11', 'v2': '14', 'table': 'table_0', 'select_cols': 'col_2, col_3'}
2025-02-04 23:58:08,205 - non intersection phase1 end
2025-02-04 23:58:08,205 - 
2025-02-04 23:58:08,205 - non intersection phase2
2025-02-04 23:58:08,209 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=12, is_continuous=True, range_end_idx=13
2025-02-04 23:58:08,211 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:08,211 - params: {'v1': '12', 'v2': '13', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-04 23:58:08,215 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-04 23:58:08,217 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:08,217 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4'}
2025-02-04 23:58:08,217 - non intersection phase2 end
2025-02-04 23:58:08,217 - 
2025-02-04 23:58:08,217 - 生成死锁事务序列成功如下
2025-02-04 23:58:08,217 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 14 FOR UPDATE'), (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 12 AND 13 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:58:09,785 - 创建事务1连接成功
2025-02-04 23:58:09,786 - 执行事务1语句: BEGIN
2025-02-04 23:58:09,787 - 执行事务1语句: SELECT id, col_2, col_4 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-04 23:58:09,788 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 12 AND 13 LOCK IN SHARE MODE
2025-02-04 23:58:09,789 - 执行事务1语句: COMMIT;
2025-02-04 23:58:09,793 - 执行事务1成功
2025-02-04 23:58:12,406 - 恢复初始状态成功
2025-02-04 23:58:13,178 - 创建事务2连接成功
2025-02-04 23:58:13,180 - 执行事务2语句: BEGIN
2025-02-04 23:58:13,181 - 执行事务2语句: SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 14 FOR UPDATE
2025-02-04 23:58:13,182 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:58:13,183 - 执行事务2语句: COMMIT;
2025-02-04 23:58:13,187 - 执行事务2成功
2025-02-04 23:58:18,146 - 
2025-02-04 23:58:18,146 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 14 FOR UPDATE', <Thread(Thread-231, started 35156)>, 1738684698.1456666)}
2025-02-04 23:58:18,246 - stmt_idx: 2, status: success, result: None
2025-02-04 23:58:18,246 - 成功执行序列中事务2语句: SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 14 FOR UPDATE
2025-02-04 23:58:18,246 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:58:18,246 - 
2025-02-04 23:58:18,346 - 
2025-02-04 23:58:18,347 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE', <Thread(Thread-232, started 38308)>, 1738684698.3469493)}
2025-02-04 23:58:18,447 - stmt_idx: 3, status: success, result: None
2025-02-04 23:58:18,447 - 成功执行序列中事务1语句: SELECT id, col_2, col_4 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-04 23:58:18,447 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:58:18,447 - 
2025-02-04 23:58:18,548 - 
2025-02-04 23:58:18,548 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-233, started 31404)>, 1738684698.5485935)}
2025-02-04 23:58:18,649 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:58:18,649 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-233, started 31404)>, 1738684698.5485935)}
2025-02-04 23:58:18,649 - 
2025-02-04 23:58:18,750 - 
2025-02-04 23:58:18,750 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-233, started 31404)>, 1738684698.5485935), 5: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 12 AND 13 LOCK IN SHARE MODE', <Thread(Thread-234, started 31676)>, 1738684698.7501132)}
2025-02-04 23:58:18,753 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 12 AND 13 LOCK IN SHARE MODE
2025-02-04 23:58:18,851 - stmt_idx: 4, status: success, result: None
2025-02-04 23:58:18,851 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:58:18,851 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:58:18,951 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:58:18,951 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 12 AND 13 LOCK IN SHARE MODE
2025-02-04 23:58:18,951 - 错误: dictionary changed size during iteration
2025-02-04 23:58:18,954 - 执行序列成功
2025-02-04 23:58:19,728 - is_atomic: True
2025-02-04 23:58:19,729 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-04 23:58:19,729 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 14 FOR UPDATE'), (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-04 23:58:19,729 - snapshots: {'before': {'table_0': [(1, 14, 'lwqts', 11, 41.09, 4), (2, 78, 'xnrkk', 53, 75.85, 6), (3, 1, 'fgpsx', 74, 50.1, 19), (4, 11, 'kmhcx', 58, 69.99, 97), (5, 46, 'pcuep', 32, 65.33, 70), (6, 45, 'kqpbd', 90, 45.52, 67), (7, 33, 'iihjr', 52, 40.08, 51), (8, 17, 'cwtbt', 37, 11.27, 25), (9, 2, 'lkinh', 4, 34.67, 47), (10, 42, 'ulzti', 29, 68.82, 62), (11, 47, 'djxxv', 41, 86.17, 14), (12, 15, 'igldi', 2, 90.71, 82), (13, 46, 'elnju', 37, 28.75, 7), (14, 95, 'fqugf', 79, 20.92, 76)]}, 'trx1': {'table_0': [(1, 14, 'lwqts', 11, 41.09, 4), (2, 78, 'xnrkk', 53, 75.85, 6), (3, 1, 'fgpsx', 74, 50.1, 19), (4, 11, 'kmhcx', 58, 69.99, 97), (5, 46, 'pcuep', 32, 65.33, 70), (6, 45, 'kqpbd', 90, 45.52, 67), (7, 33, 'iihjr', 52, 40.08, 51), (8, 17, 'cwtbt', 37, 11.27, 25), (9, 2, 'lkinh', 4, 34.67, 47), (10, 42, 'ulzti', 29, 68.82, 62), (11, 47, 'djxxv', 41, 86.17, 14), (12, 15, 'igldi', 2, 90.71, 82), (13, 46, 'elnju', 37, 28.75, 7), (14, 95, 'fqugf', 79, 20.92, 76)]}, 'trx2': {'table_0': [(1, 14, 'lwqts', 11, 41.09, 4), (2, 78, 'xnrkk', 53, 75.85, 6), (3, 1, 'fgpsx', 74, 50.1, 19), (4, 11, 'kmhcx', 58, 69.99, 97), (5, 46, 'pcuep', 32, 65.33, 70), (6, 45, 'kqpbd', 90, 45.52, 67), (7, 33, 'iihjr', 52, 40.08, 51), (8, 17, 'cwtbt', 37, 11.27, 25), (9, 2, 'lkinh', 4, 34.67, 47), (10, 42, 'ulzti', 29, 68.82, 62), (11, 47, 'djxxv', 41, 86.17, 14), (12, 15, 'igldi', 2, 90.71, 82), (13, 46, 'elnju', 37, 28.75, 7), (14, 95, 'fqugf', 79, 20.92, 76)]}, 'serial': {'table_0': [(1, 14, 'lwqts', 11, 41.09, 4), (2, 78, 'xnrkk', 53, 75.85, 6), (3, 1, 'fgpsx', 74, 50.1, 19), (4, 11, 'kmhcx', 58, 69.99, 97), (5, 46, 'pcuep', 32, 65.33, 70), (6, 45, 'kqpbd', 90, 45.52, 67), (7, 33, 'iihjr', 52, 40.08, 51), (8, 17, 'cwtbt', 37, 11.27, 25), (9, 2, 'lkinh', 4, 34.67, 47), (10, 42, 'ulzti', 29, 68.82, 62), (11, 47, 'djxxv', 41, 86.17, 14), (12, 15, 'igldi', 2, 90.71, 82), (13, 46, 'elnju', 37, 28.75, 7), (14, 95, 'fqugf', 79, 20.92, 76)]}}
2025-02-04 23:58:19,729 - 
2025-02-04 23:58:19,740 - iter: 30
2025-02-04 23:58:21,237 - table table_0 has 10 rows
2025-02-04 23:58:21,237 - trx1_lock_row_ids: [2, 3, 4, 5, 6]
2025-02-04 23:58:21,237 - trx2_lock_row_ids: [3, 4, 7, 8, 10]
2025-02-04 23:58:21,237 - intersection_row_ids: [3, 4]
2025-02-04 23:58:21,238 - trx1_exclusive_ids: [2, 5, 6]
2025-02-04 23:58:21,238 - trx2_exclusive_ids: [7, 8, 10]
2025-02-04 23:58:21,238 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6], 'trx2_lock_row_ids': [3, 4, 7, 8, 10], 'intersection_row_ids': [3, 4]}
2025-02-04 23:58:21,238 - lock_same_resource: True
2025-02-04 23:58:21,238 - 
2025-02-04 23:58:21,238 - intersection phase1
2025-02-04 23:58:21,242 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-04 23:58:21,243 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:21,243 - params: {'v1': '2', 'v2': '6', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:58:21,246 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,247 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:58:21,247 - params: {'cond': '(col_2 = 49.64)', 'table': 'table_0', 'select_cols': 'col_0, col_2'}
2025-02-04 23:58:21,250 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,252 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:58:21,252 - params: {'cond': "(id = 4) AND (col_0 = 69.05) AND (col_1 = 'gsmdb')", 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-04 23:58:21,252 - intersection phase1 end
2025-02-04 23:58:21,252 - 
2025-02-04 23:58:21,252 - intersection phase2
2025-02-04 23:58:21,253 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:58:21,253 - 事务2在第二阶段自己加的锁: S
2025-02-04 23:58:21,253 - 事务1在第三阶段请求对方资源的锁: X
2025-02-04 23:58:21,253 - 事务2在第三阶段请求对方资源的锁: X
2025-02-04 23:58:21,256 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,258 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:21,258 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:58:21,262 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,264 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:58:21,264 - params: {'set_expr': "col_0 = 65.99, col_1 = 'tPyBR'", 'table': 'table_0', 'cond': "(id = 5) AND (col_1 = 'tgvmy')"}
2025-02-04 23:58:21,268 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,270 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:58:21,270 - params: {'set_expr': "col_1 = 'IKAUK', col_2 = 59.68, col_0 = 68.14", 'table': 'table_0', 'cond': '(id = 6)'}
2025-02-04 23:58:21,274 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,276 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:21,276 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'col_1, col_2'}
2025-02-04 23:58:21,280 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,283 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:58:21,283 - params: {'cond': '(id = 8)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:58:21,287 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,290 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:58:21,290 - params: {'cond': '(id = 10)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-04 23:58:21,290 - intersection phase2 end
2025-02-04 23:58:21,290 - 
2025-02-04 23:58:21,291 - intersection phase3
2025-02-04 23:58:21,295 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,297 - needed_params: {'cond', 'table'}
2025-02-04 23:58:21,297 - params: {'cond': '(col_2 = 14.77)', 'table': 'table_0'}
2025-02-04 23:58:21,300 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-04 23:58:21,302 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:21,302 - params: {'v1': '5', 'v2': '6', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:58:21,306 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:58:21,308 - needed_params: {'cond', 'table'}
2025-02-04 23:58:21,308 - params: {'cond': '(col_0 = 44.15)', 'table': 'table_0'}
2025-02-04 23:58:21,308 - intersection phase3 end
2025-02-04 23:58:21,308 - 
2025-02-04 23:58:21,308 - 生成死锁事务序列成功如下
2025-02-04 23:58:21,308 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE'), (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 4) AND (col_0 = 69.05) AND (col_1 = 'gsmdb') LOCK IN SHARE MODE"), (2, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 65.99, col_1 = 'tPyBR' WHERE (id = 5) AND (col_1 = 'tgvmy')"), (1, "UPDATE table_0 SET col_1 = 'IKAUK', col_2 = 59.68, col_0 = 68.14 WHERE (id = 6)"), (2, 'DELETE FROM table_0 WHERE (col_0 = 44.15)'), (1, 'DELETE FROM table_0 WHERE (col_2 = 14.77)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:58:22,868 - 创建事务1连接成功
2025-02-04 23:58:22,869 - 执行事务1语句: BEGIN
2025-02-04 23:58:22,870 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE
2025-02-04 23:58:22,871 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:58:22,872 - 执行事务1语句: UPDATE table_0 SET col_0 = 65.99, col_1 = 'tPyBR' WHERE (id = 5) AND (col_1 = 'tgvmy')
2025-02-04 23:58:22,873 - 执行事务1语句: UPDATE table_0 SET col_1 = 'IKAUK', col_2 = 59.68, col_0 = 68.14 WHERE (id = 6)
2025-02-04 23:58:22,873 - 执行事务1语句: DELETE FROM table_0 WHERE (col_2 = 14.77)
2025-02-04 23:58:22,875 - 执行事务1语句: COMMIT;
2025-02-04 23:58:22,880 - 执行事务1成功
2025-02-04 23:58:25,505 - 恢复初始状态成功
2025-02-04 23:58:26,288 - 创建事务2连接成功
2025-02-04 23:58:26,289 - 执行事务2语句: BEGIN
2025-02-04 23:58:26,290 - 执行事务2语句: SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE
2025-02-04 23:58:26,291 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 4) AND (col_0 = 69.05) AND (col_1 = 'gsmdb') LOCK IN SHARE MODE
2025-02-04 23:58:26,292 - 执行事务2语句: SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-04 23:58:26,295 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-04 23:58:26,299 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE
2025-02-04 23:58:26,300 - 执行事务2语句: DELETE FROM table_0 WHERE (col_0 = 44.15)
2025-02-04 23:58:26,303 - 执行事务2语句: COMMIT;
2025-02-04 23:58:26,309 - 执行事务2成功
2025-02-04 23:58:31,326 - 
2025-02-04 23:58:31,326 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE', <Thread(Thread-235, started 17972)>, 1738684711.3260567)}
2025-02-04 23:58:31,427 - stmt_idx: 2, status: success, result: None
2025-02-04 23:58:31,427 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE
2025-02-04 23:58:31,427 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:58:31,427 - 
2025-02-04 23:58:31,532 - 
2025-02-04 23:58:31,533 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442)}
2025-02-04 23:58:31,643 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE
2025-02-04 23:58:31,643 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442)}
2025-02-04 23:58:31,643 - 
2025-02-04 23:58:31,751 - 
2025-02-04 23:58:31,752 - 执行前idx: 9, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442), 8: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-237, started 36704)>, 1738684711.7519224)}
2025-02-04 23:58:31,860 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE
2025-02-04 23:58:31,969 - stmt_idx: 8, status: success, result: None
2025-02-04 23:58:31,970 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-04 23:58:31,970 - 执行后idx: 9, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442)}
2025-02-04 23:58:31,970 - 
2025-02-04 23:58:32,079 - 
2025-02-04 23:58:32,080 - 执行前idx: 10, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442), 9: (1, "UPDATE table_0 SET col_0 = 65.99, col_1 = 'tPyBR' WHERE (id = 5) AND (col_1 = 'tgvmy')", <Thread(Thread-238, started 11948)>, 1738684712.0796108)}
2025-02-04 23:58:32,188 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE
2025-02-04 23:58:32,297 - stmt_idx: 9, status: success, result: None
2025-02-04 23:58:32,297 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 65.99, col_1 = 'tPyBR' WHERE (id = 5) AND (col_1 = 'tgvmy')
2025-02-04 23:58:32,297 - 执行后idx: 10, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442)}
2025-02-04 23:58:32,297 - 
2025-02-04 23:58:32,403 - 
2025-02-04 23:58:32,404 - 执行前idx: 11, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442), 10: (1, "UPDATE table_0 SET col_1 = 'IKAUK', col_2 = 59.68, col_0 = 68.14 WHERE (id = 6)", <Thread(Thread-239, started 21636)>, 1738684712.4039931)}
2025-02-04 23:58:32,513 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE
2025-02-04 23:58:32,620 - stmt_idx: 10, status: success, result: None
2025-02-04 23:58:32,620 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'IKAUK', col_2 = 59.68, col_0 = 68.14 WHERE (id = 6)
2025-02-04 23:58:32,620 - 执行后idx: 11, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442)}
2025-02-04 23:58:32,620 - 
2025-02-04 23:58:32,728 - 
2025-02-04 23:58:32,729 - 执行前idx: 13, pending_stmts: {3: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE', <Thread(Thread-236, started 28440)>, 1738684711.5327442), 12: (1, 'DELETE FROM table_0 WHERE (col_2 = 14.77)', <Thread(Thread-240, started 35768)>, 1738684712.7286947)}
2025-02-04 23:58:32,731 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE
2025-02-04 23:58:32,837 - stmt_idx: 3, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:58:32,837 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT col_0, col_2 FROM table_0 WHERE (col_2 = 49.64) LOCK IN SHARE MODE
2025-02-04 23:58:32,837 - 错误: dictionary changed size during iteration
2025-02-04 23:58:32,841 - 序列遍历完成，开始查看剩余阻塞的语句：{12: (1, 'DELETE FROM table_0 WHERE (col_2 = 14.77)', <Thread(Thread-240, stopped 35768)>, 1738684712.7286947)}
2025-02-04 23:58:32,842 - 
2025-02-04 23:58:32,842 - 执行前idx: 15, pending_stmts: {12: (1, 'DELETE FROM table_0 WHERE (col_2 = 14.77)', <Thread(Thread-240, stopped 35768)>, 1738684712.7286947)}
2025-02-04 23:58:32,946 - stmt_idx: 12, status: success, result: None
2025-02-04 23:58:32,946 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_2 = 14.77)
2025-02-04 23:58:32,946 - 执行后idx: 15, pending_stmts: {}
2025-02-04 23:58:32,946 - 
2025-02-04 23:58:33,053 - 执行序列成功
2025-02-04 23:58:33,837 - is_atomic: True
2025-02-04 23:58:33,837 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-04 23:58:33,837 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 65.99, col_1 = 'tPyBR' WHERE (id = 5) AND (col_1 = 'tgvmy')"), (1, "UPDATE table_0 SET col_1 = 'IKAUK', col_2 = 59.68, col_0 = 68.14 WHERE (id = 6)"), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'DELETE FROM table_0 WHERE (col_2 = 14.77)')]
2025-02-04 23:58:33,837 - snapshots: {'before': {'table_0': [(1, 79.52, 'wzhph', 80.92), (2, 31.61, 'okzcx', 34.65), (3, 30.12, 'qxzwn', 49.64), (4, 69.05, 'gsmdb', 12.72), (5, 86.27, 'tgvmy', 84.85), (6, 44.15, 'opswi', 48.97), (7, 50.63, 'hkhmp', 40.79), (8, 29.88, 'djmqv', 85.51), (9, 59.62, 'iuvdb', 11.74), (10, 78.47, 'irnim', 14.77)]}, 'trx1': {'table_0': [(1, 79.52, 'wzhph', 80.92), (2, 31.61, 'okzcx', 34.65), (3, 30.12, 'qxzwn', 49.64), (4, 69.05, 'gsmdb', 12.72), (5, 65.99, 'tPyBR', 84.85), (6, 68.14, 'IKAUK', 59.68), (7, 50.63, 'hkhmp', 40.79), (8, 29.88, 'djmqv', 85.51), (9, 59.62, 'iuvdb', 11.74), (10, 78.47, 'irnim', 14.77)]}, 'trx2': {'table_0': [(1, 79.52, 'wzhph', 80.92), (2, 31.61, 'okzcx', 34.65), (3, 30.12, 'qxzwn', 49.64), (4, 69.05, 'gsmdb', 12.72), (5, 86.27, 'tgvmy', 84.85), (7, 50.63, 'hkhmp', 40.79), (8, 29.88, 'djmqv', 85.51), (9, 59.62, 'iuvdb', 11.74), (10, 78.47, 'irnim', 14.77)]}, 'serial': {'table_0': [(1, 79.52, 'wzhph', 80.92), (2, 31.61, 'okzcx', 34.65), (3, 30.12, 'qxzwn', 49.64), (4, 69.05, 'gsmdb', 12.72), (5, 65.99, 'tPyBR', 84.85), (6, 68.14, 'IKAUK', 59.68), (7, 50.63, 'hkhmp', 40.79), (8, 29.88, 'djmqv', 85.51), (9, 59.62, 'iuvdb', 11.74), (10, 78.47, 'irnim', 14.77)]}}
2025-02-04 23:58:33,837 - 
2025-02-04 23:58:33,849 - iter: 31
2025-02-04 23:58:35,350 - table table_0 has 6 rows
2025-02-04 23:58:35,350 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-04 23:58:35,350 - lock_same_resource: False
2025-02-04 23:58:35,351 - 
2025-02-04 23:58:35,351 - non intersection phase1
2025-02-04 23:58:35,351 - 事务1在第一阶段自己加的锁: S
2025-02-04 23:58:35,351 - 事务2在第一阶段自己加的锁: S
2025-02-04 23:58:35,351 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:58:35,351 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-04 23:58:35,356 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-04 23:58:35,358 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:35,358 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_458'}
2025-02-04 23:58:35,362 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-04 23:58:35,364 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:35,364 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_2, col_458'}
2025-02-04 23:58:35,364 - non intersection phase1 end
2025-02-04 23:58:35,364 - 
2025-02-04 23:58:35,364 - non intersection phase2
2025-02-04 23:58:35,367 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-04 23:58:35,370 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:35,370 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:58:35,374 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-04 23:58:35,377 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:35,377 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_0, col_458'}
2025-02-04 23:58:35,377 - non intersection phase2 end
2025-02-04 23:58:35,377 - 
2025-02-04 23:58:35,377 - 生成死锁事务序列成功如下
2025-02-04 23:58:35,377 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_458 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id, col_2, col_458 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_458 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:58:36,968 - 创建事务1连接成功
2025-02-04 23:58:36,969 - 执行事务1语句: BEGIN
2025-02-04 23:58:36,970 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_458 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-04 23:58:36,972 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-04 23:58:36,973 - 执行事务1语句: COMMIT;
2025-02-04 23:58:36,977 - 执行事务1成功
2025-02-04 23:58:39,658 - 恢复初始状态成功
2025-02-04 23:58:40,442 - 创建事务2连接成功
2025-02-04 23:58:40,444 - 执行事务2语句: BEGIN
2025-02-04 23:58:40,445 - 执行事务2语句: SELECT id, col_2, col_458 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-04 23:58:40,445 - 执行事务2语句: SELECT id, col_0, col_458 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-04 23:58:40,446 - 执行事务2语句: COMMIT;
2025-02-04 23:58:40,451 - 执行事务2成功
2025-02-04 23:58:45,411 - 
2025-02-04 23:58:45,412 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_458 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-241, started 3492)>, 1738684725.4117851)}
2025-02-04 23:58:45,515 - stmt_idx: 2, status: success, result: None
2025-02-04 23:58:45,515 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_458 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-04 23:58:45,515 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:58:45,515 - 
2025-02-04 23:58:45,625 - 
2025-02-04 23:58:45,626 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_2, col_458 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-242, started 37956)>, 1738684725.6250634)}
2025-02-04 23:58:45,732 - stmt_idx: 3, status: success, result: None
2025-02-04 23:58:45,732 - 成功执行序列中事务2语句: SELECT id, col_2, col_458 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-04 23:58:45,732 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:58:45,732 - 
2025-02-04 23:58:45,841 - 
2025-02-04 23:58:45,842 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-243, started 41284)>, 1738684725.8416164)}
2025-02-04 23:58:45,949 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-04 23:58:45,949 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-243, started 41284)>, 1738684725.8416164)}
2025-02-04 23:58:45,949 - 
2025-02-04 23:58:46,056 - 
2025-02-04 23:58:46,056 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-243, started 41284)>, 1738684725.8416164), 5: (2, 'SELECT id, col_0, col_458 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE', <Thread(Thread-244, started 41044)>, 1738684726.0563734)}
2025-02-04 23:58:46,060 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_458 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-04 23:58:46,167 - stmt_idx: 4, status: success, result: None
2025-02-04 23:58:46,167 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-04 23:58:46,167 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-04 23:58:46,278 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:58:46,278 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0, col_458 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-04 23:58:46,278 - 错误: dictionary changed size during iteration
2025-02-04 23:58:46,281 - 执行序列成功
2025-02-04 23:58:47,064 - is_atomic: True
2025-02-04 23:58:47,064 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-04 23:58:47,064 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_458 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id, col_2, col_458 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-04 23:58:47,064 - snapshots: {'before': {'table_0': [(1, 'zhdaw', 74.62, 63, None), (2, 'osgdq', 38.92, 96, None), (3, 'qdiqf', 3.75, 67, None), (4, 'virrp', 68.52, 33, None), (5, 'atmwk', 79.87, 74, None), (6, 'pgeyt', 13.8, 63, None)]}, 'trx1': {'table_0': [(1, 'zhdaw', 74.62, 63, None), (2, 'osgdq', 38.92, 96, None), (3, 'qdiqf', 3.75, 67, None), (4, 'virrp', 68.52, 33, None), (5, 'atmwk', 79.87, 74, None), (6, 'pgeyt', 13.8, 63, None)]}, 'trx2': {'table_0': [(1, 'zhdaw', 74.62, 63, None), (2, 'osgdq', 38.92, 96, None), (3, 'qdiqf', 3.75, 67, None), (4, 'virrp', 68.52, 33, None), (5, 'atmwk', 79.87, 74, None), (6, 'pgeyt', 13.8, 63, None)]}, 'serial': {'table_0': [(1, 'zhdaw', 74.62, 63, None), (2, 'osgdq', 38.92, 96, None), (3, 'qdiqf', 3.75, 67, None), (4, 'virrp', 68.52, 33, None), (5, 'atmwk', 79.87, 74, None), (6, 'pgeyt', 13.8, 63, None)]}}
2025-02-04 23:58:47,064 - 
2025-02-04 23:58:47,075 - iter: 32
2025-02-04 23:58:48,643 - table table_0 has 13 rows
2025-02-04 23:58:48,643 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 6], 'trx2_lock_row_ids': [4, 5, 9, 11, 12], 'intersection_row_ids': []}
2025-02-04 23:58:48,643 - lock_same_resource: False
2025-02-04 23:58:48,643 - 
2025-02-04 23:58:48,643 - non intersection phase1
2025-02-04 23:58:48,643 - 事务1在第一阶段自己加的锁: X
2025-02-04 23:58:48,644 - 事务2在第一阶段自己加的锁: S
2025-02-04 23:58:48,644 - 事务1在第二阶段请求对方资源的锁: S
2025-02-04 23:58:48,644 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:58:48,647 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,649 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:58:48,649 - params: {'set_expr': 'col_0 = 16.87', 'table': 'table_0', 'cond': '(id = 1)'}
2025-02-04 23:58:48,652 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,653 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:58:48,654 - params: {'set_expr': 'col_0 = 1.37, col_1 = 28', 'table': 'table_0', 'cond': '(col_1 = 1) AND (col_0 = 63.91)'}
2025-02-04 23:58:48,656 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,658 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:58:48,658 - params: {'cond': '(id = 3)', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:58:48,661 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,663 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:48,663 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:58:48,666 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,668 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:48,668 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-04 23:58:48,673 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,675 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:58:48,676 - params: {'cond': '(id = 5)', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-04 23:58:48,680 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,683 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:58:48,683 - params: {'cond': '(id = 9)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:58:48,686 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,688 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:48,688 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': 'col_0'}
2025-02-04 23:58:48,693 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,694 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:58:48,695 - params: {'cond': '(id = 12)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:58:48,695 - non intersection phase1 end
2025-02-04 23:58:48,695 - 
2025-02-04 23:58:48,695 - non intersection phase2
2025-02-04 23:58:48,699 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,701 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:58:48,701 - params: {'v1': '12', 'v2': '12', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:58:48,704 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:58:48,705 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:58:48,706 - params: {'set_expr': 'col_1 = 87', 'table': 'table_0', 'cond': '(id = 6)'}
2025-02-04 23:58:48,706 - non intersection phase2 end
2025-02-04 23:58:48,706 - 
2025-02-04 23:58:48,706 - 生成死锁事务序列成功如下
2025-02-04 23:58:48,706 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_0 = 16.87 WHERE (id = 1)'), (2, 'SELECT id, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE'), (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)'), (1, 'SELECT * FROM table_0 WHERE (id = 3) FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 87 WHERE (id = 6)'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-04 23:58:50,286 - 创建事务1连接成功
2025-02-04 23:58:50,288 - 执行事务1语句: BEGIN
2025-02-04 23:58:50,289 - 执行事务1语句: UPDATE table_0 SET col_0 = 16.87 WHERE (id = 1)
2025-02-04 23:58:50,289 - 执行事务1语句: UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)
2025-02-04 23:58:50,291 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-04 23:58:50,291 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-04 23:58:50,292 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-04 23:58:50,294 - 执行事务1语句: COMMIT;
2025-02-04 23:58:50,300 - 执行事务1成功
2025-02-04 23:58:52,911 - 恢复初始状态成功
2025-02-04 23:58:53,689 - 创建事务2连接成功
2025-02-04 23:58:53,690 - 执行事务2语句: BEGIN
2025-02-04 23:58:53,691 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-04 23:58:53,692 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-04 23:58:53,693 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE
2025-02-04 23:58:53,694 - 执行事务2语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-04 23:58:53,695 - 执行事务2语句: SELECT id FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE
2025-02-04 23:58:53,695 - 执行事务2语句: UPDATE table_0 SET col_1 = 87 WHERE (id = 6)
2025-02-04 23:58:53,697 - 执行事务2语句: COMMIT;
2025-02-04 23:58:53,702 - 执行事务2成功
2025-02-04 23:58:58,617 - 
2025-02-04 23:58:58,617 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-245, started 11904)>, 1738684738.617703)}
2025-02-04 23:58:58,729 - stmt_idx: 2, status: success, result: None
2025-02-04 23:58:58,729 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-04 23:58:58,729 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:58:58,729 - 
2025-02-04 23:58:58,837 - 
2025-02-04 23:58:58,838 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_0 = 16.87 WHERE (id = 1)', <Thread(Thread-246, started 12300)>, 1738684738.8376675)}
2025-02-04 23:58:58,944 - stmt_idx: 3, status: success, result: None
2025-02-04 23:58:58,944 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 16.87 WHERE (id = 1)
2025-02-04 23:58:58,944 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:58:58,944 - 
2025-02-04 23:58:59,052 - 
2025-02-04 23:58:59,053 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-247, started 40672)>, 1738684739.0521064)}
2025-02-04 23:58:59,162 - stmt_idx: 4, status: success, result: None
2025-02-04 23:58:59,162 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-04 23:58:59,162 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:58:59,162 - 
2025-02-04 23:58:59,271 - 
2025-02-04 23:58:59,272 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE', <Thread(Thread-248, started 14424)>, 1738684739.2718399)}
2025-02-04 23:58:59,380 - stmt_idx: 5, status: success, result: None
2025-02-04 23:58:59,380 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE
2025-02-04 23:58:59,380 - 执行后idx: 6, pending_stmts: {}
2025-02-04 23:58:59,380 - 
2025-02-04 23:58:59,486 - 
2025-02-04 23:58:59,487 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-249, started 35176)>, 1738684739.486848)}
2025-02-04 23:58:59,595 - stmt_idx: 6, status: success, result: None
2025-02-04 23:58:59,595 - 成功执行序列中事务2语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-04 23:58:59,595 - 执行后idx: 7, pending_stmts: {}
2025-02-04 23:58:59,595 - 
2025-02-04 23:58:59,703 - 
2025-02-04 23:58:59,704 - 执行前idx: 8, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)', <Thread(Thread-250, started 14828)>, 1738684739.7031715)}
2025-02-04 23:58:59,810 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)
2025-02-04 23:58:59,810 - 执行后idx: 8, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)', <Thread(Thread-250, started 14828)>, 1738684739.7031715)}
2025-02-04 23:58:59,810 - 
2025-02-04 23:58:59,918 - 
2025-02-04 23:58:59,918 - 执行前idx: 10, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)', <Thread(Thread-250, started 14828)>, 1738684739.7031715), 9: (2, 'SELECT id FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE', <Thread(Thread-251, started 30740)>, 1738684739.9184587)}
2025-02-04 23:59:00,024 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)
2025-02-04 23:59:00,132 - stmt_idx: 9, status: success, result: None
2025-02-04 23:59:00,132 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE
2025-02-04 23:59:00,132 - 执行后idx: 10, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)', <Thread(Thread-250, started 14828)>, 1738684739.7031715)}
2025-02-04 23:59:00,132 - 
2025-02-04 23:59:00,241 - 
2025-02-04 23:59:00,242 - 执行前idx: 12, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)', <Thread(Thread-250, started 14828)>, 1738684739.7031715), 11: (2, 'UPDATE table_0 SET col_1 = 87 WHERE (id = 6)', <Thread(Thread-252, started 39612)>, 1738684740.241698)}
2025-02-04 23:59:00,352 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)
2025-02-04 23:59:00,459 - stmt_idx: 11, status: success, result: None
2025-02-04 23:59:00,459 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 87 WHERE (id = 6)
2025-02-04 23:59:00,459 - 执行后idx: 12, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)', <Thread(Thread-250, started 14828)>, 1738684739.7031715)}
2025-02-04 23:59:00,459 - 
2025-02-04 23:59:00,571 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)', <Thread(Thread-250, started 14828)>, 1738684739.7031715)}
2025-02-04 23:59:00,571 - 
2025-02-04 23:59:00,571 - 执行前idx: 15, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)', <Thread(Thread-250, stopped 14828)>, 1738684739.7031715)}
2025-02-04 23:59:00,677 - stmt_idx: 7, status: success, result: None
2025-02-04 23:59:00,677 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)
2025-02-04 23:59:00,677 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)
2025-02-04 23:59:00,679 - 执行后idx: 15, pending_stmts: {8: (1, 'SELECT * FROM table_0 WHERE (id = 3) FOR UPDATE', <Thread(Thread-253, started 41292)>, 1738684740.6782389), 10: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-254, started 3324)>, 1738684740.678785), 12: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-255, started 32148)>, 1738684740.678785), 13: (1, 'COMMIT', <Thread(Thread-256, started 20912)>, 1738684740.6793003)}
2025-02-04 23:59:00,679 - 
2025-02-04 23:59:00,785 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (1, 'SELECT * FROM table_0 WHERE (id = 3) FOR UPDATE', <Thread(Thread-253, stopped 41292)>, 1738684740.6782389), 10: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-254, stopped 3324)>, 1738684740.678785), 12: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-255, stopped 32148)>, 1738684740.678785), 13: (1, 'COMMIT', <Thread(Thread-256, stopped 20912)>, 1738684740.6793003)}
2025-02-04 23:59:00,785 - 
2025-02-04 23:59:00,785 - 执行前idx: 15, pending_stmts: {8: (1, 'SELECT * FROM table_0 WHERE (id = 3) FOR UPDATE', <Thread(Thread-253, stopped 41292)>, 1738684740.6782389), 10: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-254, stopped 3324)>, 1738684740.678785), 12: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-255, stopped 32148)>, 1738684740.678785), 13: (1, 'COMMIT', <Thread(Thread-256, stopped 20912)>, 1738684740.6793003)}
2025-02-04 23:59:00,894 - stmt_idx: 8, status: success, result: None
2025-02-04 23:59:00,894 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-04 23:59:01,001 - stmt_idx: 10, status: success, result: None
2025-02-04 23:59:01,001 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-04 23:59:01,108 - stmt_idx: 12, status: success, result: None
2025-02-04 23:59:01,109 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-04 23:59:01,217 - stmt_idx: 13, status: success, result: None
2025-02-04 23:59:01,217 - 成功执行序列中事务1语句: COMMIT
2025-02-04 23:59:01,217 - 执行后idx: 15, pending_stmts: {}
2025-02-04 23:59:01,217 - 
2025-02-04 23:59:01,327 - 执行序列成功
2025-02-04 23:59:02,090 - is_atomic: True
2025-02-04 23:59:02,090 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:59:02,090 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_0 = 16.87 WHERE (id = 1)'), (2, 'SELECT id, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE'), (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_1 = 87 WHERE (id = 6)'), (2, 'COMMIT'), (1, 'UPDATE table_0 SET col_0 = 1.37, col_1 = 28 WHERE (col_1 = 1) AND (col_0 = 63.91)'), (1, 'SELECT * FROM table_0 WHERE (id = 3) FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, 'COMMIT')]
2025-02-04 23:59:02,090 - snapshots: {'before': {'table_0': [(1, 96.75, 25), (2, 63.91, 1), (3, 8.81, 90), (4, 51.8, 40), (5, 56.35, 81), (6, 3.93, 12), (7, 66.03, 100), (8, 56.4, 84), (9, 41.65, 96), (10, 47.38, 17), (11, 42.03, 2), (12, 98.76, 92), (13, 8.88, 59)]}, 'trx1': {'table_0': [(1, 16.87, 25), (2, 1.37, 28), (3, 8.81, 90), (4, 51.8, 40), (5, 56.35, 81), (6, 3.93, 12), (7, 66.03, 100), (8, 56.4, 84), (9, 41.65, 96), (10, 47.38, 17), (11, 42.03, 2), (12, 98.76, 92), (13, 8.88, 59)]}, 'trx2': {'table_0': [(1, 96.75, 25), (2, 63.91, 1), (3, 8.81, 90), (4, 51.8, 40), (5, 56.35, 81), (6, 3.93, 87), (7, 66.03, 100), (8, 56.4, 84), (9, 41.65, 96), (10, 47.38, 17), (11, 42.03, 2), (12, 98.76, 92), (13, 8.88, 59)]}, 'serial': {'table_0': [(1, 16.87, 25), (2, 1.37, 28), (3, 8.81, 90), (4, 51.8, 40), (5, 56.35, 81), (6, 3.93, 87), (7, 66.03, 100), (8, 56.4, 84), (9, 41.65, 96), (10, 47.38, 17), (11, 42.03, 2), (12, 98.76, 92), (13, 8.88, 59)]}}
2025-02-04 23:59:02,090 - 
2025-02-04 23:59:02,103 - iter: 33
2025-02-04 23:59:03,598 - table table_0 has 12 rows
2025-02-04 23:59:03,598 - trx1_start_id: 11
2025-02-04 23:59:03,598 - trx1_end_id: 11
2025-02-04 23:59:03,599 - trx1_exclusive_start_id: 11
2025-02-04 23:59:03,599 - trx1_exclusive_end_id: 10
2025-02-04 23:59:03,599 - trx1_exclusive_ids: []
2025-02-04 23:59:03,599 - trx2_start_id: 11
2025-02-04 23:59:03,599 - trx2_end_id: 11
2025-02-04 23:59:03,599 - trx2_exclusive_start_id: 12
2025-02-04 23:59:03,599 - trx2_exclusive_end_id: 11
2025-02-04 23:59:03,599 - trx2_exclusive_ids: []
2025-02-04 23:59:03,599 - intersection_ids: [11]
2025-02-04 23:59:03,599 - res_dict: {'trx1_lock_row_ids': [11], 'trx2_lock_row_ids': [11], 'intersection_row_ids': [11]}
2025-02-04 23:59:03,599 - lock_same_resource: True
2025-02-04 23:59:03,599 - 
2025-02-04 23:59:03,599 - intersection phase1
2025-02-04 23:59:03,602 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=11, is_continuous=True, range_end_idx=11
2025-02-04 23:59:03,603 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:03,604 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:03,607 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=11, is_continuous=True, range_end_idx=11
2025-02-04 23:59:03,608 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:59:03,608 - params: {'v1': '11', 'set_expr': "col_0 = 'vBVQq'", 'table': 'table_0', 'v2': '11'}
2025-02-04 23:59:03,608 - intersection phase1 end
2025-02-04 23:59:03,608 - 
2025-02-04 23:59:03,609 - intersection phase2
2025-02-04 23:59:03,609 - 事务1在第二阶段自己加的锁: NK
2025-02-04 23:59:03,609 - 事务2在第二阶段自己加的锁: NK
2025-02-04 23:59:03,609 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-04 23:59:03,609 - 事务2在第三阶段请求对方资源的锁: X
2025-02-04 23:59:03,613 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=11, is_continuous=True, range_end_idx=10
2025-02-04 23:59:03,615 - 生成连续锁定SQL失败: 找不到从11到10的行
2025-02-04 23:59:03,615 - 生成锁SQL失败: 找不到从11到10的行
2025-02-04 23:59:03,615 - 生成死锁事务序列失败: 找不到从11到10的行
2025-02-04 23:59:03,615 - 
2025-02-04 23:59:03,615 - Error in iteration 33: 找不到从11到10的行
2025-02-04 23:59:03,615 - 
2025-02-04 23:59:03,621 - iter: 34
2025-02-04 23:59:05,127 - table table_0 has 14 rows
2025-02-04 23:59:05,127 - res_dict: {'trx1_lock_row_ids': [3, 4], 'trx2_lock_row_ids': [10, 11, 12, 13], 'intersection_row_ids': []}
2025-02-04 23:59:05,127 - lock_same_resource: False
2025-02-04 23:59:05,127 - 
2025-02-04 23:59:05,127 - non intersection phase1
2025-02-04 23:59:05,128 - 事务1在第一阶段自己加的锁: X
2025-02-04 23:59:05,128 - 事务2在第一阶段自己加的锁: S
2025-02-04 23:59:05,128 - 事务1在第二阶段请求对方资源的锁: S
2025-02-04 23:59:05,128 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:59:05,131 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=4
2025-02-04 23:59:05,132 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:05,133 - params: {'v1': '3', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_1, col_771'}
2025-02-04 23:59:05,136 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=10, is_continuous=True, range_end_idx=13
2025-02-04 23:59:05,137 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:05,137 - params: {'v1': '10', 'v2': '13', 'table': 'table_0', 'select_cols': 'id, col_0, col_771'}
2025-02-04 23:59:05,137 - non intersection phase1 end
2025-02-04 23:59:05,137 - 
2025-02-04 23:59:05,137 - non intersection phase2
2025-02-04 23:59:05,142 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=10, is_continuous=True, range_end_idx=13
2025-02-04 23:59:05,143 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:05,143 - params: {'v1': '10', 'v2': '13', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-04 23:59:05,148 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-04 23:59:05,149 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:05,150 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:05,150 - non intersection phase2 end
2025-02-04 23:59:05,150 - 
2025-02-04 23:59:05,150 - 生成死锁事务序列成功如下
2025-02-04 23:59:05,150 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_771 FROM table_0 WHERE id BETWEEN 3 AND 4 FOR UPDATE'), (2, 'SELECT id, col_0, col_771 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:59:06,734 - 创建事务1连接成功
2025-02-04 23:59:06,735 - 执行事务1语句: BEGIN
2025-02-04 23:59:06,737 - 执行事务1语句: SELECT id, col_1, col_771 FROM table_0 WHERE id BETWEEN 3 AND 4 FOR UPDATE
2025-02-04 23:59:06,737 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE
2025-02-04 23:59:06,738 - 执行事务1语句: COMMIT;
2025-02-04 23:59:06,742 - 执行事务1成功
2025-02-04 23:59:09,344 - 恢复初始状态成功
2025-02-04 23:59:10,102 - 创建事务2连接成功
2025-02-04 23:59:10,104 - 执行事务2语句: BEGIN
2025-02-04 23:59:10,105 - 执行事务2语句: SELECT id, col_0, col_771 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE
2025-02-04 23:59:10,105 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:59:10,106 - 执行事务2语句: COMMIT;
2025-02-04 23:59:10,110 - 执行事务2成功
2025-02-04 23:59:15,001 - 
2025-02-04 23:59:15,001 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_1, col_771 FROM table_0 WHERE id BETWEEN 3 AND 4 FOR UPDATE', <Thread(Thread-257, started 31092)>, 1738684755.000829)}
2025-02-04 23:59:15,113 - stmt_idx: 2, status: success, result: None
2025-02-04 23:59:15,113 - 成功执行序列中事务1语句: SELECT id, col_1, col_771 FROM table_0 WHERE id BETWEEN 3 AND 4 FOR UPDATE
2025-02-04 23:59:15,113 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:59:15,113 - 
2025-02-04 23:59:15,220 - 
2025-02-04 23:59:15,221 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_771 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE', <Thread(Thread-258, started 35444)>, 1738684755.2202168)}
2025-02-04 23:59:15,327 - stmt_idx: 3, status: success, result: None
2025-02-04 23:59:15,327 - 成功执行序列中事务2语句: SELECT id, col_0, col_771 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE
2025-02-04 23:59:15,327 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:59:15,327 - 
2025-02-04 23:59:15,436 - 
2025-02-04 23:59:15,436 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE', <Thread(Thread-259, started 41828)>, 1738684755.4364612)}
2025-02-04 23:59:15,541 - stmt_idx: 4, status: success, result: None
2025-02-04 23:59:15,541 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE
2025-02-04 23:59:15,541 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:59:15,541 - 
2025-02-04 23:59:15,648 - 
2025-02-04 23:59:15,648 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-260, started 41132)>, 1738684755.6483164)}
2025-02-04 23:59:15,756 - wait for lock, trx_id: 2, stmt: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:59:15,756 - 执行后idx: 6, pending_stmts: {5: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-260, started 41132)>, 1738684755.6483164)}
2025-02-04 23:59:15,756 - 
2025-02-04 23:59:15,864 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-260, started 41132)>, 1738684755.6483164)}
2025-02-04 23:59:15,864 - 
2025-02-04 23:59:15,865 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-260, stopped 41132)>, 1738684755.6483164)}
2025-02-04 23:59:15,969 - stmt_idx: 5, status: success, result: None
2025-02-04 23:59:15,969 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:59:15,969 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-04 23:59:15,970 - 执行后idx: 8, pending_stmts: {6: (2, 'COMMIT', <Thread(Thread-261, started 41368)>, 1738684755.9702344)}
2025-02-04 23:59:15,970 - 
2025-02-04 23:59:16,077 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, 'COMMIT', <Thread(Thread-261, stopped 41368)>, 1738684755.9702344)}
2025-02-04 23:59:16,077 - 
2025-02-04 23:59:16,077 - 执行前idx: 8, pending_stmts: {6: (2, 'COMMIT', <Thread(Thread-261, stopped 41368)>, 1738684755.9702344)}
2025-02-04 23:59:16,185 - stmt_idx: 6, status: success, result: None
2025-02-04 23:59:16,185 - 成功执行序列中事务2语句: COMMIT
2025-02-04 23:59:16,185 - 执行后idx: 8, pending_stmts: {}
2025-02-04 23:59:16,185 - 
2025-02-04 23:59:16,293 - 执行序列成功
2025-02-04 23:59:17,082 - is_atomic: True
2025-02-04 23:59:17,082 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:59:17,082 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_771 FROM table_0 WHERE id BETWEEN 3 AND 4 FOR UPDATE'), (2, 'SELECT id, col_0, col_771 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 13 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'COMMIT')]
2025-02-04 23:59:17,082 - snapshots: {'before': {'table_0': [(1, 'ovqwx', 'jntcq', None), (2, 'jihzf', 'szkks', None), (3, 'keopq', 'lbzgp', None), (4, 'onmlt', 'xytty', None), (5, 'eoprl', 'hscvx', None), (6, 'fmvru', 'gfimk', None), (7, 'jlkzj', 'upjjj', None), (8, 'nscpq', 'ippwl', None), (9, 'ndqff', 'zovcw', None), (10, 'dnppl', 'jcops', None), (11, 'suyen', 'dyzie', None), (12, 'bvhjv', 'gfjda', None), (13, 'xwbsv', 'ogmey', None), (14, 'mtmca', 'gbrcr', None)]}, 'trx1': {'table_0': [(1, 'ovqwx', 'jntcq', None), (2, 'jihzf', 'szkks', None), (3, 'keopq', 'lbzgp', None), (4, 'onmlt', 'xytty', None), (5, 'eoprl', 'hscvx', None), (6, 'fmvru', 'gfimk', None), (7, 'jlkzj', 'upjjj', None), (8, 'nscpq', 'ippwl', None), (9, 'ndqff', 'zovcw', None), (10, 'dnppl', 'jcops', None), (11, 'suyen', 'dyzie', None), (12, 'bvhjv', 'gfjda', None), (13, 'xwbsv', 'ogmey', None), (14, 'mtmca', 'gbrcr', None)]}, 'trx2': {'table_0': [(1, 'ovqwx', 'jntcq', None), (2, 'jihzf', 'szkks', None), (3, 'keopq', 'lbzgp', None), (4, 'onmlt', 'xytty', None), (5, 'eoprl', 'hscvx', None), (6, 'fmvru', 'gfimk', None), (7, 'jlkzj', 'upjjj', None), (8, 'nscpq', 'ippwl', None), (9, 'ndqff', 'zovcw', None), (10, 'dnppl', 'jcops', None), (11, 'suyen', 'dyzie', None), (12, 'bvhjv', 'gfjda', None), (13, 'xwbsv', 'ogmey', None), (14, 'mtmca', 'gbrcr', None)]}, 'serial': {'table_0': [(1, 'ovqwx', 'jntcq', None), (2, 'jihzf', 'szkks', None), (3, 'keopq', 'lbzgp', None), (4, 'onmlt', 'xytty', None), (5, 'eoprl', 'hscvx', None), (6, 'fmvru', 'gfimk', None), (7, 'jlkzj', 'upjjj', None), (8, 'nscpq', 'ippwl', None), (9, 'ndqff', 'zovcw', None), (10, 'dnppl', 'jcops', None), (11, 'suyen', 'dyzie', None), (12, 'bvhjv', 'gfjda', None), (13, 'xwbsv', 'ogmey', None), (14, 'mtmca', 'gbrcr', None)]}}
2025-02-04 23:59:17,082 - 
2025-02-04 23:59:17,092 - iter: 35
2025-02-04 23:59:18,586 - table table_0 has 6 rows
2025-02-04 23:59:18,586 - trx1_lock_row_ids: [2, 3]
2025-02-04 23:59:18,586 - trx2_lock_row_ids: [1, 3, 4, 5]
2025-02-04 23:59:18,586 - intersection_row_ids: [3]
2025-02-04 23:59:18,587 - trx1_exclusive_ids: [2]
2025-02-04 23:59:18,587 - trx2_exclusive_ids: [1, 4, 5]
2025-02-04 23:59:18,587 - res_dict: {'trx1_lock_row_ids': [2, 3], 'trx2_lock_row_ids': [1, 3, 4, 5], 'intersection_row_ids': [3]}
2025-02-04 23:59:18,587 - lock_same_resource: True
2025-02-04 23:59:18,587 - 
2025-02-04 23:59:18,587 - intersection phase1
2025-02-04 23:59:18,590 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-04 23:59:18,591 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:18,591 - params: {'v1': '2', 'v2': '3', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:59:18,595 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:59:18,596 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:59:18,596 - params: {'cond': "(col_0 = 16) AND (col_2 = 'opfuu')", 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:18,597 - intersection phase1 end
2025-02-04 23:59:18,597 - 
2025-02-04 23:59:18,597 - intersection phase2
2025-02-04 23:59:18,597 - 事务1在第二阶段自己加的锁: X
2025-02-04 23:59:18,597 - 事务2在第二阶段自己加的锁: X
2025-02-04 23:59:18,597 - 事务1在第三阶段请求对方资源的锁: II
2025-02-04 23:59:18,597 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-04 23:59:18,602 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:59:18,603 - needed_params: {'cond', 'table'}
2025-02-04 23:59:18,604 - params: {'cond': '(id = 2)', 'table': 'table_0'}
2025-02-04 23:59:18,607 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:59:18,609 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:18,609 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'col_0, col_1, col_2'}
2025-02-04 23:59:18,611 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:59:18,613 - needed_params: {'cond', 'table'}
2025-02-04 23:59:18,613 - params: {'cond': '(id = 4)', 'table': 'table_0'}
2025-02-04 23:59:18,617 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:59:18,618 - needed_params: {'cond', 'table'}
2025-02-04 23:59:18,619 - params: {'cond': "(col_1 = 'ytzbg')", 'table': 'table_0'}
2025-02-04 23:59:18,619 - intersection phase2 end
2025-02-04 23:59:18,619 - 
2025-02-04 23:59:18,619 - intersection phase3
2025-02-04 23:59:18,622 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:59:18,624 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:59:18,625 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 47, 'QbdmH', 'TdzJu'", 'table': 'table_0'}
2025-02-04 23:59:18,629 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:59:18,630 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:59:18,631 - params: {'set_expr': "col_1 = 'nsSqB'", 'table': 'table_0', 'cond': '(id = 2)'}
2025-02-04 23:59:18,631 - intersection phase3 end
2025-02-04 23:59:18,631 - 
2025-02-04 23:59:18,631 - 生成死锁事务序列成功如下
2025-02-04 23:59:18,631 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE'), (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE"), (2, 'SELECT col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (2, 'DELETE FROM table_0 WHERE (id = 4)'), (2, "DELETE FROM table_0 WHERE (col_1 = 'ytzbg')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 47, 'QbdmH', 'TdzJu')"), (2, "UPDATE table_0 SET col_1 = 'nsSqB' WHERE (id = 2)"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:59:20,230 - 创建事务1连接成功
2025-02-04 23:59:20,232 - 执行事务1语句: BEGIN
2025-02-04 23:59:20,233 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-04 23:59:20,234 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-04 23:59:20,234 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 47, 'QbdmH', 'TdzJu')
2025-02-04 23:59:20,236 - 执行事务1语句: COMMIT;
2025-02-04 23:59:20,241 - 执行事务1成功
2025-02-04 23:59:22,852 - 恢复初始状态成功
2025-02-04 23:59:23,630 - 创建事务2连接成功
2025-02-04 23:59:23,632 - 执行事务2语句: BEGIN
2025-02-04 23:59:23,634 - 执行事务2语句: SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE
2025-02-04 23:59:23,634 - 执行事务2语句: SELECT col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:59:23,635 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 4)
2025-02-04 23:59:23,636 - 执行事务2语句: DELETE FROM table_0 WHERE (col_1 = 'ytzbg')
2025-02-04 23:59:23,636 - 执行事务2语句: UPDATE table_0 SET col_1 = 'nsSqB' WHERE (id = 2)
2025-02-04 23:59:23,638 - 执行事务2语句: COMMIT;
2025-02-04 23:59:23,643 - 执行事务2成功
2025-02-04 23:59:28,582 - 
2025-02-04 23:59:28,582 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-262, started 29504)>, 1738684768.5822098)}
2025-02-04 23:59:28,686 - stmt_idx: 2, status: success, result: None
2025-02-04 23:59:28,686 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-04 23:59:28,686 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:59:28,686 - 
2025-02-04 23:59:28,794 - 
2025-02-04 23:59:28,794 - 执行前idx: 4, pending_stmts: {3: (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE", <Thread(Thread-263, started 32088)>, 1738684768.7946572)}
2025-02-04 23:59:28,901 - wait for lock, trx_id: 2, stmt: SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE
2025-02-04 23:59:28,901 - 执行后idx: 4, pending_stmts: {3: (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE", <Thread(Thread-263, started 32088)>, 1738684768.7946572)}
2025-02-04 23:59:28,901 - 
2025-02-04 23:59:29,011 - 
2025-02-04 23:59:29,011 - 执行前idx: 6, pending_stmts: {3: (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE", <Thread(Thread-263, started 32088)>, 1738684768.7946572), 5: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-264, started 38968)>, 1738684769.011307)}
2025-02-04 23:59:29,117 - wait for lock, trx_id: 2, stmt: SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE
2025-02-04 23:59:29,225 - stmt_idx: 5, status: success, result: None
2025-02-04 23:59:29,225 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-04 23:59:29,225 - 执行后idx: 6, pending_stmts: {3: (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE", <Thread(Thread-263, started 32088)>, 1738684768.7946572)}
2025-02-04 23:59:29,225 - 
2025-02-04 23:59:29,333 - 
2025-02-04 23:59:29,334 - 执行前idx: 9, pending_stmts: {3: (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE", <Thread(Thread-263, started 32088)>, 1738684768.7946572), 8: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 47, 'QbdmH', 'TdzJu')", <Thread(Thread-265, started 37600)>, 1738684769.3333473)}
2025-02-04 23:59:29,440 - wait for lock, trx_id: 2, stmt: SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE
2025-02-04 23:59:29,547 - stmt_idx: 8, status: success, result: None
2025-02-04 23:59:29,547 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 47, 'QbdmH', 'TdzJu')
2025-02-04 23:59:29,547 - 执行后idx: 9, pending_stmts: {3: (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE", <Thread(Thread-263, started 32088)>, 1738684768.7946572)}
2025-02-04 23:59:29,547 - 
2025-02-04 23:59:29,656 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE", <Thread(Thread-263, started 32088)>, 1738684768.7946572)}
2025-02-04 23:59:29,656 - 
2025-02-04 23:59:29,657 - 执行前idx: 12, pending_stmts: {3: (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE", <Thread(Thread-263, stopped 32088)>, 1738684768.7946572)}
2025-02-04 23:59:29,758 - stmt_idx: 3, status: success, result: None
2025-02-04 23:59:29,759 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE
2025-02-04 23:59:29,759 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE
2025-02-04 23:59:29,760 - 执行后idx: 12, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-266, started 6872)>, 1738684769.759506), 6: (2, 'DELETE FROM table_0 WHERE (id = 4)', <Thread(Thread-267, started 39272)>, 1738684769.759506), 7: (2, "DELETE FROM table_0 WHERE (col_1 = 'ytzbg')", <Thread(Thread-268, started 40472)>, 1738684769.7604816), 9: (2, "UPDATE table_0 SET col_1 = 'nsSqB' WHERE (id = 2)", <Thread(Thread-269, started 2648)>, 1738684769.7604816), 10: (2, 'COMMIT', <Thread(Thread-270, started 40816)>, 1738684769.760986)}
2025-02-04 23:59:29,761 - 
2025-02-04 23:59:29,865 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'SELECT col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-266, stopped 6872)>, 1738684769.759506), 6: (2, 'DELETE FROM table_0 WHERE (id = 4)', <Thread(Thread-267, stopped 39272)>, 1738684769.759506), 7: (2, "DELETE FROM table_0 WHERE (col_1 = 'ytzbg')", <Thread(Thread-268, stopped 40472)>, 1738684769.7604816), 9: (2, "UPDATE table_0 SET col_1 = 'nsSqB' WHERE (id = 2)", <Thread(Thread-269, stopped 2648)>, 1738684769.7604816), 10: (2, 'COMMIT', <Thread(Thread-270, stopped 40816)>, 1738684769.760986)}
2025-02-04 23:59:29,865 - 
2025-02-04 23:59:29,865 - 执行前idx: 12, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-266, stopped 6872)>, 1738684769.759506), 6: (2, 'DELETE FROM table_0 WHERE (id = 4)', <Thread(Thread-267, stopped 39272)>, 1738684769.759506), 7: (2, "DELETE FROM table_0 WHERE (col_1 = 'ytzbg')", <Thread(Thread-268, stopped 40472)>, 1738684769.7604816), 9: (2, "UPDATE table_0 SET col_1 = 'nsSqB' WHERE (id = 2)", <Thread(Thread-269, stopped 2648)>, 1738684769.7604816), 10: (2, 'COMMIT', <Thread(Thread-270, stopped 40816)>, 1738684769.760986)}
2025-02-04 23:59:29,972 - stmt_idx: 4, status: success, result: None
2025-02-04 23:59:29,972 - 成功执行序列中事务2语句: SELECT col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-04 23:59:30,079 - stmt_idx: 6, status: success, result: None
2025-02-04 23:59:30,079 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 4)
2025-02-04 23:59:30,186 - stmt_idx: 7, status: success, result: None
2025-02-04 23:59:30,186 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_1 = 'ytzbg')
2025-02-04 23:59:30,296 - stmt_idx: 9, status: success, result: None
2025-02-04 23:59:30,296 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'nsSqB' WHERE (id = 2)
2025-02-04 23:59:30,404 - stmt_idx: 10, status: success, result: None
2025-02-04 23:59:30,404 - 成功执行序列中事务2语句: COMMIT
2025-02-04 23:59:30,404 - 执行后idx: 12, pending_stmts: {}
2025-02-04 23:59:30,404 - 
2025-02-04 23:59:30,512 - 执行序列成功
2025-02-04 23:59:31,288 - is_atomic: True
2025-02-04 23:59:31,288 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-04 23:59:31,288 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 47, 'QbdmH', 'TdzJu')"), (1, 'COMMIT'), (2, "SELECT id FROM table_0 WHERE (col_0 = 16) AND (col_2 = 'opfuu') LOCK IN SHARE MODE"), (2, 'SELECT col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 4)'), (2, "DELETE FROM table_0 WHERE (col_1 = 'ytzbg')"), (2, "UPDATE table_0 SET col_1 = 'nsSqB' WHERE (id = 2)"), (2, 'COMMIT')]
2025-02-04 23:59:31,288 - snapshots: {'before': {'table_0': [(1, 13, 'qbnok', 'ijami'), (2, 13, 'rykng', 'emlfs'), (3, 16, 'qewuy', 'opfuu'), (4, 3, 'cddje', 'klosl'), (5, 80, 'ytzbg', 'grzuw'), (6, 35, 'yefin', 'rvdya')]}, 'trx1': {'table_0': [(1, 13, 'qbnok', 'ijami'), (3, 16, 'qewuy', 'opfuu'), (4, 3, 'cddje', 'klosl'), (5, 80, 'ytzbg', 'grzuw'), (6, 35, 'yefin', 'rvdya'), (7, 47, 'QbdmH', 'TdzJu')]}, 'trx2': {'table_0': [(1, 13, 'qbnok', 'ijami'), (2, 13, 'nsSqB', 'emlfs'), (3, 16, 'qewuy', 'opfuu'), (6, 35, 'yefin', 'rvdya')]}, 'serial': {'table_0': [(1, 13, 'qbnok', 'ijami'), (3, 16, 'qewuy', 'opfuu'), (6, 35, 'yefin', 'rvdya'), (8, 47, 'QbdmH', 'TdzJu')]}}
2025-02-04 23:59:31,288 - 
2025-02-04 23:59:31,300 - iter: 36
2025-02-04 23:59:32,815 - table table_0 has 8 rows
2025-02-04 23:59:32,815 - res_dict: {'trx1_lock_row_ids': [2, 6, 8], 'trx2_lock_row_ids': [3, 4], 'intersection_row_ids': []}
2025-02-04 23:59:32,815 - lock_same_resource: False
2025-02-04 23:59:32,815 - 
2025-02-04 23:59:32,816 - non intersection phase1
2025-02-04 23:59:32,816 - 事务1在第一阶段自己加的锁: II
2025-02-04 23:59:32,816 - 事务2在第一阶段自己加的锁: II
2025-02-04 23:59:32,816 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-04 23:59:32,816 - 事务2在第二阶段请求对方资源的锁: X
2025-02-04 23:59:32,819 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-04 23:59:32,821 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:59:32,821 - params: {'v1': '2', 'set_expr': 'col_0 = 95.76', 'table': 'table_0', 'v2': '2'}
2025-02-04 23:59:32,824 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:59:32,826 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:59:32,826 - params: {'v1': '6', 'set_expr': "col_1 = 'flXuD', col_2 = 'CawBy'", 'table': 'table_0', 'v2': '6'}
2025-02-04 23:59:32,829 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:59:32,830 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:59:32,830 - params: {'v1': '8', 'set_expr': "col_4 = 'tVFCK'", 'table': 'table_0', 'v2': '8'}
2025-02-04 23:59:32,834 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=3, is_continuous=True, range_end_idx=4
2025-02-04 23:59:32,835 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-04 23:59:32,835 - params: {'v1': '3', 'set_expr': 'col_0 = 59.04', 'table': 'table_0', 'v2': '4'}
2025-02-04 23:59:32,835 - non intersection phase1 end
2025-02-04 23:59:32,835 - 
2025-02-04 23:59:32,836 - non intersection phase2
2025-02-04 23:59:32,838 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=True, range_end_idx=4
2025-02-04 23:59:32,841 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:32,841 - params: {'v1': '3', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_4'}
2025-02-04 23:59:32,844 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:59:32,846 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:32,846 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:32,846 - non intersection phase2 end
2025-02-04 23:59:32,846 - 
2025-02-04 23:59:32,846 - 生成死锁事务序列成功如下
2025-02-04 23:59:32,846 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_0 = 95.76 WHERE id BETWEEN 2 AND 2'), (1, "UPDATE table_0 SET col_1 = 'flXuD', col_2 = 'CawBy' WHERE id BETWEEN 6 AND 6"), (1, "UPDATE table_0 SET col_4 = 'tVFCK' WHERE id BETWEEN 8 AND 8"), (2, 'UPDATE table_0 SET col_0 = 59.04 WHERE id BETWEEN 3 AND 4'), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:59:34,395 - 创建事务1连接成功
2025-02-04 23:59:34,396 - 执行事务1语句: BEGIN
2025-02-04 23:59:34,398 - 执行事务1语句: UPDATE table_0 SET col_0 = 95.76 WHERE id BETWEEN 2 AND 2
2025-02-04 23:59:34,399 - 执行事务1语句: UPDATE table_0 SET col_1 = 'flXuD', col_2 = 'CawBy' WHERE id BETWEEN 6 AND 6
2025-02-04 23:59:34,399 - 执行事务1语句: UPDATE table_0 SET col_4 = 'tVFCK' WHERE id BETWEEN 8 AND 8
2025-02-04 23:59:34,400 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE
2025-02-04 23:59:34,402 - 执行事务1语句: COMMIT;
2025-02-04 23:59:34,407 - 执行事务1成功
2025-02-04 23:59:37,046 - 恢复初始状态成功
2025-02-04 23:59:37,831 - 创建事务2连接成功
2025-02-04 23:59:37,833 - 执行事务2语句: BEGIN
2025-02-04 23:59:37,834 - 执行事务2语句: UPDATE table_0 SET col_0 = 59.04 WHERE id BETWEEN 3 AND 4
2025-02-04 23:59:37,835 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:59:37,837 - 执行事务2语句: COMMIT;
2025-02-04 23:59:37,842 - 执行事务2成功
2025-02-04 23:59:42,782 - 
2025-02-04 23:59:42,782 - 执行前idx: 3, pending_stmts: {2: (1, 'UPDATE table_0 SET col_0 = 95.76 WHERE id BETWEEN 2 AND 2', <Thread(Thread-271, started 39692)>, 1738684782.7828631)}
2025-02-04 23:59:42,892 - stmt_idx: 2, status: success, result: None
2025-02-04 23:59:42,892 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 95.76 WHERE id BETWEEN 2 AND 2
2025-02-04 23:59:42,892 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:59:42,892 - 
2025-02-04 23:59:42,998 - 
2025-02-04 23:59:42,999 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'flXuD', col_2 = 'CawBy' WHERE id BETWEEN 6 AND 6", <Thread(Thread-272, started 34832)>, 1738684782.9988868)}
2025-02-04 23:59:43,103 - stmt_idx: 3, status: success, result: None
2025-02-04 23:59:43,103 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'flXuD', col_2 = 'CawBy' WHERE id BETWEEN 6 AND 6
2025-02-04 23:59:43,103 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:59:43,103 - 
2025-02-04 23:59:43,210 - 
2025-02-04 23:59:43,211 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_4 = 'tVFCK' WHERE id BETWEEN 8 AND 8", <Thread(Thread-273, started 40488)>, 1738684783.210503)}
2025-02-04 23:59:43,317 - stmt_idx: 4, status: success, result: None
2025-02-04 23:59:43,317 - 成功执行序列中事务1语句: UPDATE table_0 SET col_4 = 'tVFCK' WHERE id BETWEEN 8 AND 8
2025-02-04 23:59:43,317 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:59:43,317 - 
2025-02-04 23:59:43,425 - 
2025-02-04 23:59:43,425 - 执行前idx: 6, pending_stmts: {5: (2, 'UPDATE table_0 SET col_0 = 59.04 WHERE id BETWEEN 3 AND 4', <Thread(Thread-274, started 33932)>, 1738684783.4251666)}
2025-02-04 23:59:43,532 - stmt_idx: 5, status: success, result: None
2025-02-04 23:59:43,532 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 59.04 WHERE id BETWEEN 3 AND 4
2025-02-04 23:59:43,532 - 执行后idx: 6, pending_stmts: {}
2025-02-04 23:59:43,532 - 
2025-02-04 23:59:43,640 - 
2025-02-04 23:59:43,641 - 执行前idx: 7, pending_stmts: {6: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE', <Thread(Thread-275, started 36212)>, 1738684783.6401296)}
2025-02-04 23:59:43,749 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE
2025-02-04 23:59:43,749 - 执行后idx: 7, pending_stmts: {6: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE', <Thread(Thread-275, started 36212)>, 1738684783.6401296)}
2025-02-04 23:59:43,749 - 
2025-02-04 23:59:43,856 - 
2025-02-04 23:59:43,857 - 执行前idx: 8, pending_stmts: {6: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE', <Thread(Thread-275, started 36212)>, 1738684783.6401296), 7: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-276, started 31420)>, 1738684783.8563783)}
2025-02-04 23:59:43,860 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:59:43,965 - stmt_idx: 6, status: success, result: None
2025-02-04 23:59:43,965 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE
2025-02-04 23:59:43,965 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE
2025-02-04 23:59:44,074 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-04 23:59:44,074 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-04 23:59:44,074 - 错误: dictionary changed size during iteration
2025-02-04 23:59:44,078 - 执行序列成功
2025-02-04 23:59:44,846 - is_atomic: True
2025-02-04 23:59:44,846 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-04 23:59:44,846 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_0 = 95.76 WHERE id BETWEEN 2 AND 2'), (1, "UPDATE table_0 SET col_1 = 'flXuD', col_2 = 'CawBy' WHERE id BETWEEN 6 AND 6"), (1, "UPDATE table_0 SET col_4 = 'tVFCK' WHERE id BETWEEN 8 AND 8"), (2, 'UPDATE table_0 SET col_0 = 59.04 WHERE id BETWEEN 3 AND 4'), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id >= 3 AND id <= 4 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-04 23:59:44,847 - snapshots: {'before': {'table_0': [(1, 93.19, 'ybrbm', 'nianq', 'eomcj'), (2, 54.8, 'liewt', 'jycjc', 'ehvqx'), (3, 34.98, 'vkcnw', 'xyqdk', 'ydclr'), (4, 19.67, 'hyteb', 'xfjzx', 'qpcxu'), (5, 61.08, 'irlep', 'rludr', 'tqula'), (6, 84.63, 'fweyh', 'mxthb', 'yybmw'), (7, 64.34, 'kkwfr', 'jbuiu', 'affuo'), (8, 28.68, 'vrrvo', 'sdnmz', 'odlzf')]}, 'trx1': {'table_0': [(1, 93.19, 'ybrbm', 'nianq', 'eomcj'), (2, 95.76, 'liewt', 'jycjc', 'ehvqx'), (3, 34.98, 'vkcnw', 'xyqdk', 'ydclr'), (4, 19.67, 'hyteb', 'xfjzx', 'qpcxu'), (5, 61.08, 'irlep', 'rludr', 'tqula'), (6, 84.63, 'flXuD', 'CawBy', 'yybmw'), (7, 64.34, 'kkwfr', 'jbuiu', 'affuo'), (8, 28.68, 'vrrvo', 'sdnmz', 'tVFCK')]}, 'trx2': {'table_0': [(1, 93.19, 'ybrbm', 'nianq', 'eomcj'), (2, 54.8, 'liewt', 'jycjc', 'ehvqx'), (3, 59.04, 'vkcnw', 'xyqdk', 'ydclr'), (4, 59.04, 'hyteb', 'xfjzx', 'qpcxu'), (5, 61.08, 'irlep', 'rludr', 'tqula'), (6, 84.63, 'fweyh', 'mxthb', 'yybmw'), (7, 64.34, 'kkwfr', 'jbuiu', 'affuo'), (8, 28.68, 'vrrvo', 'sdnmz', 'odlzf')]}, 'serial': {'table_0': [(1, 93.19, 'ybrbm', 'nianq', 'eomcj'), (2, 95.76, 'liewt', 'jycjc', 'ehvqx'), (3, 34.98, 'vkcnw', 'xyqdk', 'ydclr'), (4, 19.67, 'hyteb', 'xfjzx', 'qpcxu'), (5, 61.08, 'irlep', 'rludr', 'tqula'), (6, 84.63, 'flXuD', 'CawBy', 'yybmw'), (7, 64.34, 'kkwfr', 'jbuiu', 'affuo'), (8, 28.68, 'vrrvo', 'sdnmz', 'tVFCK')]}}
2025-02-04 23:59:44,847 - 
2025-02-04 23:59:44,859 - iter: 37
2025-02-04 23:59:46,423 - table table_0 has 13 rows
2025-02-04 23:59:46,423 - trx1_lock_row_ids: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-04 23:59:46,423 - trx2_lock_row_ids: [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-04 23:59:46,423 - intersection_row_ids: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-04 23:59:46,423 - trx1_exclusive_ids: []
2025-02-04 23:59:46,423 - trx2_exclusive_ids: [1]
2025-02-04 23:59:46,423 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'trx2_lock_row_ids': [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'intersection_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]}
2025-02-04 23:59:46,423 - lock_same_resource: True
2025-02-04 23:59:46,423 - 
2025-02-04 23:59:46,423 - intersection phase1
2025-02-04 23:59:46,428 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=True, range_end_idx=13
2025-02-04 23:59:46,429 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:46,429 - params: {'v1': '3', 'v2': '13', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:46,432 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,434 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:46,434 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:46,437 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,439 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:59:46,439 - params: {'insert_cols': 'id', 'vals': 'NULL', 'table': 'table_0'}
2025-02-04 23:59:46,443 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,445 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:59:46,445 - params: {'insert_cols': 'id', 'vals': 'NULL', 'table': 'table_0'}
2025-02-04 23:59:46,448 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,450 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:46,450 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:46,455 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,457 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:46,457 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': '*'}
2025-02-04 23:59:46,461 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,463 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:59:46,463 - params: {'insert_cols': 'id', 'vals': 'NULL', 'table': 'table_0'}
2025-02-04 23:59:46,467 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,469 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:59:46,469 - params: {'insert_cols': 'id', 'vals': 'NULL', 'table': 'table_0'}
2025-02-04 23:59:46,473 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,475 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:59:46,475 - params: {'insert_cols': 'id', 'vals': 'NULL', 'table': 'table_0'}
2025-02-04 23:59:46,480 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,481 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:59:46,481 - params: {'insert_cols': 'id', 'vals': 'NULL', 'table': 'table_0'}
2025-02-04 23:59:46,486 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,488 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:46,488 - params: {'v1': '12', 'v2': '12', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:46,494 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,496 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-04 23:59:46,496 - params: {'v1': '13', 'v2': '13', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:46,496 - intersection phase1 end
2025-02-04 23:59:46,496 - 
2025-02-04 23:59:46,496 - intersection phase2
2025-02-04 23:59:46,497 - 事务1在第二阶段自己加的锁: NK
2025-02-04 23:59:46,497 - 事务2在第二阶段自己加的锁: NK
2025-02-04 23:59:46,497 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-04 23:59:46,497 - 事务2在第三阶段请求对方资源的锁: S
2025-02-04 23:59:46,501 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,503 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-04 23:59:46,503 - params: {'set_expr': '', 'table': 'table_0', 'cond': '1=1'}
2025-02-04 23:59:46,503 - intersection phase2 end
2025-02-04 23:59:46,503 - 
2025-02-04 23:59:46,503 - intersection phase3
2025-02-04 23:59:46,508 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,510 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-04 23:59:46,510 - params: {'insert_cols': 'id', 'vals': 'NULL', 'table': 'table_0'}
2025-02-04 23:59:46,513 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-04 23:59:46,514 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-04 23:59:46,514 - params: {'cond': '(id = 7)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-04 23:59:46,515 - intersection phase3 end
2025-02-04 23:59:46,515 - 
2025-02-04 23:59:46,515 - 生成死锁事务序列成功如下
2025-02-04 23:59:46,515 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, 'UPDATE table_0 SET  WHERE 1=1'), (1, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-04 23:59:48,061 - 创建事务1连接成功
2025-02-04 23:59:48,063 - 执行事务1语句: BEGIN
2025-02-04 23:59:48,064 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:48,064 - 执行事务1语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:48,067 - 执行事务1语句: COMMIT;
2025-02-04 23:59:48,072 - 执行事务1成功
2025-02-04 23:59:50,705 - 恢复初始状态成功
2025-02-04 23:59:51,483 - 创建事务2连接成功
2025-02-04 23:59:51,485 - 执行事务2语句: BEGIN
2025-02-04 23:59:51,486 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:59:51,486 - 执行事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:51,487 - 执行事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:51,488 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-04 23:59:51,488 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-04 23:59:51,489 - 执行事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:51,490 - 执行事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:51,491 - 执行事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:51,492 - 执行事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:51,492 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-04 23:59:51,493 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-04 23:59:51,495 - 执行SQL失败: UPDATE table_0 SET  WHERE 1=1
2025-02-04 23:59:51,495 - 错误详情: 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE 1=1' at line 1
2025-02-04 23:59:51,499 - 执行事务2失败
2025-02-04 23:59:56,510 - 
2025-02-04 23:59:56,510 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-277, started 35784)>, 1738684796.5109277)}
2025-02-04 23:59:56,621 - stmt_idx: 2, status: success, result: None
2025-02-04 23:59:56,621 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-04 23:59:56,621 - 执行后idx: 3, pending_stmts: {}
2025-02-04 23:59:56,621 - 
2025-02-04 23:59:56,728 - 
2025-02-04 23:59:56,728 - 执行前idx: 4, pending_stmts: {3: (2, 'INSERT INTO table_0 (id) VALUES (NULL)', <Thread(Thread-278, started 32348)>, 1738684796.7288733)}
2025-02-04 23:59:56,837 - stmt_idx: 3, status: success, result: None
2025-02-04 23:59:56,837 - 成功执行序列中事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:56,837 - 执行后idx: 4, pending_stmts: {}
2025-02-04 23:59:56,837 - 
2025-02-04 23:59:56,947 - 
2025-02-04 23:59:56,948 - 执行前idx: 5, pending_stmts: {4: (2, 'INSERT INTO table_0 (id) VALUES (NULL)', <Thread(Thread-279, started 22116)>, 1738684796.9473228)}
2025-02-04 23:59:57,054 - stmt_idx: 4, status: success, result: None
2025-02-04 23:59:57,054 - 成功执行序列中事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:57,054 - 执行后idx: 5, pending_stmts: {}
2025-02-04 23:59:57,054 - 
2025-02-04 23:59:57,163 - 
2025-02-04 23:59:57,163 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:57,272 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:57,272 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:57,272 - 
2025-02-04 23:59:57,380 - 
2025-02-04 23:59:57,381 - 执行前idx: 7, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 6: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-281, started 14816)>, 1738684797.3805993)}
2025-02-04 23:59:57,487 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:57,595 - stmt_idx: 6, status: success, result: None
2025-02-04 23:59:57,596 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-04 23:59:57,596 - 执行后idx: 7, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:57,596 - 
2025-02-04 23:59:57,705 - 
2025-02-04 23:59:57,705 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-282, started 39120)>, 1738684797.70531)}
2025-02-04 23:59:57,811 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:57,916 - stmt_idx: 7, status: success, result: None
2025-02-04 23:59:57,916 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-04 23:59:57,916 - 执行后idx: 8, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:57,916 - 
2025-02-04 23:59:58,024 - 
2025-02-04 23:59:58,025 - 执行前idx: 9, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 8: (2, 'INSERT INTO table_0 (id) VALUES (NULL)', <Thread(Thread-283, started 36740)>, 1738684798.0244975)}
2025-02-04 23:59:58,129 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:58,239 - stmt_idx: 8, status: success, result: None
2025-02-04 23:59:58,239 - 成功执行序列中事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:58,239 - 执行后idx: 9, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:58,239 - 
2025-02-04 23:59:58,346 - 
2025-02-04 23:59:58,347 - 执行前idx: 10, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 9: (2, 'INSERT INTO table_0 (id) VALUES (NULL)', <Thread(Thread-284, started 5276)>, 1738684798.346802)}
2025-02-04 23:59:58,453 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:58,562 - stmt_idx: 9, status: success, result: None
2025-02-04 23:59:58,562 - 成功执行序列中事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:58,562 - 执行后idx: 10, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:58,562 - 
2025-02-04 23:59:58,667 - 
2025-02-04 23:59:58,668 - 执行前idx: 11, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 10: (2, 'INSERT INTO table_0 (id) VALUES (NULL)', <Thread(Thread-285, started 33564)>, 1738684798.667951)}
2025-02-04 23:59:58,775 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:58,884 - stmt_idx: 10, status: success, result: None
2025-02-04 23:59:58,884 - 成功执行序列中事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:58,884 - 执行后idx: 11, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:58,884 - 
2025-02-04 23:59:58,990 - 
2025-02-04 23:59:58,990 - 执行前idx: 12, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 11: (2, 'INSERT INTO table_0 (id) VALUES (NULL)', <Thread(Thread-286, started 34644)>, 1738684798.9905849)}
2025-02-04 23:59:59,096 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:59,202 - stmt_idx: 11, status: success, result: None
2025-02-04 23:59:59,202 - 成功执行序列中事务2语句: INSERT INTO table_0 (id) VALUES (NULL)
2025-02-04 23:59:59,202 - 执行后idx: 12, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:59,202 - 
2025-02-04 23:59:59,310 - 
2025-02-04 23:59:59,310 - 执行前idx: 13, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 12: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE', <Thread(Thread-287, started 38952)>, 1738684799.310769)}
2025-02-04 23:59:59,418 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:59,526 - stmt_idx: 12, status: success, result: None
2025-02-04 23:59:59,526 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-04 23:59:59,526 - 执行后idx: 13, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:59,526 - 
2025-02-04 23:59:59,632 - 
2025-02-04 23:59:59,633 - 执行前idx: 14, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 13: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-288, started 38192)>, 1738684799.6328015)}
2025-02-04 23:59:59,738 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-04 23:59:59,846 - stmt_idx: 13, status: success, result: None
2025-02-04 23:59:59,846 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-04 23:59:59,846 - 执行后idx: 14, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168)}
2025-02-04 23:59:59,846 - 
2025-02-04 23:59:59,956 - 
2025-02-04 23:59:59,956 - 执行前idx: 15, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-280, started 32252)>, 1738684797.1630168), 14: (2, 'UPDATE table_0 SET  WHERE 1=1', <Thread(Thread-289, started 41052)>, 1738684799.9563258)}
2025-02-04 23:59:59,958 - 执行语句错误: 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE 1=1' at line 1, stmt: UPDATE table_0 SET  WHERE 1=1
2025-02-05 00:00:00,064 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-05 00:00:00,170 - stmt_idx: 14, status: error, result: 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE 1=1' at line 1
2025-02-05 00:00:00,170 - 执行语句失败，非死锁错误: 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE 1=1' at line 1，事务2语句: UPDATE table_0 SET  WHERE 1=1
2025-02-05 00:00:00,171 - 执行语句错误: 2055: Lost connection to MySQL server at 'localhost:3308', system error: 10053 你的主机中的软件中止了一个已建立的连接。, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-05 00:00:00,172 - 执行序列成功
2025-02-05 00:00:01,940 - is_atomic: False
2025-02-05 00:00:01,940 - info: 死锁发生，事务2被回滚，但最终状态与事务1单独执行的结果不一致，不满足原子性
2025-02-05 00:00:01,940 - 重连执行成功, stmt: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-05 00:00:01,941 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, '-- Error: UPDATE table_0 SET  WHERE 1=1')]
2025-02-05 00:00:01,945 - snapshots: {'before': {'table_0': [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,)]}, 'trx1': {'table_0': [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,)]}, 'trx2': {'table_0': [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (15,), (16,), (17,), (18,), (19,), (20,)]}, 'serial': {'table_0': [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,)]}}
2025-02-05 00:00:01,945 - 
2025-02-05 00:00:06,192 - BUG FOUND: 死锁发生，事务2被回滚，但最终状态与事务1单独执行的结果不一致，不满足原子性
2025-02-05 00:00:06,192 - iter: 37
2025-02-05 00:00:06,192 - resource distribution: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'trx2_lock_row_ids': [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'intersection_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]}
2025-02-05 00:00:06,192 - lock same resource: True
2025-02-05 00:00:06,192 - T1是否连续：True
2025-02-05 00:00:06,192 - T2是否连续：False
2025-02-05 00:00:06,192 - 事务1锁定的行ID：[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 00:00:06,192 - 事务2锁定的行ID：[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 00:00:06,193 - 交集行ID：[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 00:00:06,193 - 事务1独占行：[]
2025-02-05 00:00:06,193 - 事务2独占行：[1]
2025-02-05 00:00:06,193 - 事务1：['BEGIN', 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', 'INSERT INTO table_0 (id) VALUES (NULL)', 'COMMIT;']
2025-02-05 00:00:06,193 - 事务2：['BEGIN', 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', 'INSERT INTO table_0 (id) VALUES (NULL)', 'INSERT INTO table_0 (id) VALUES (NULL)', 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', 'INSERT INTO table_0 (id) VALUES (NULL)', 'INSERT INTO table_0 (id) VALUES (NULL)', 'INSERT INTO table_0 (id) VALUES (NULL)', 'INSERT INTO table_0 (id) VALUES (NULL)', 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE', 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', 'UPDATE table_0 SET  WHERE 1=1', 'SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', 'COMMIT;']
2025-02-05 00:00:06,193 - 序列：[(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, 'UPDATE table_0 SET  WHERE 1=1'), (1, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:00:06,193 - 实际执行序列：[(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'INSERT INTO table_0 (id) VALUES (NULL)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, '-- Error: UPDATE table_0 SET  WHERE 1=1')]
2025-02-05 00:00:06,193 - 快照：{'before': {'table_0': [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,)]}, 'trx1': {'table_0': [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,)]}, 'trx2': {'table_0': [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (15,), (16,), (17,), (18,), (19,), (20,)]}, 'serial': {'table_0': [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,)]}}
2025-02-05 00:00:06,193 - 
2025-02-05 00:00:06,212 - iter: 38
2025-02-05 00:00:07,730 - table table_0 has 14 rows
2025-02-05 00:00:07,730 - res_dict: {'trx1_lock_row_ids': [6], 'trx2_lock_row_ids': [10, 11], 'intersection_row_ids': []}
2025-02-05 00:00:07,731 - lock_same_resource: False
2025-02-05 00:00:07,731 - 
2025-02-05 00:00:07,731 - non intersection phase1
2025-02-05 00:00:07,731 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:00:07,731 - 事务2在第一阶段自己加的锁: S
2025-02-05 00:00:07,731 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:00:07,731 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 00:00:07,735 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 00:00:07,736 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:07,737 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:00:07,740 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=10, is_continuous=True, range_end_idx=11
2025-02-05 00:00:07,742 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:07,742 - params: {'v1': '10', 'v2': '11', 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-05 00:00:07,742 - non intersection phase1 end
2025-02-05 00:00:07,743 - 
2025-02-05 00:00:07,743 - non intersection phase2
2025-02-05 00:00:07,746 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 00:00:07,749 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:07,749 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:00:07,753 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 00:00:07,755 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:07,755 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_0, col_2'}
2025-02-05 00:00:07,755 - non intersection phase2 end
2025-02-05 00:00:07,755 - 
2025-02-05 00:00:07,755 - 生成死锁事务序列成功如下
2025-02-05 00:00:07,755 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 10 AND id <= 10 FOR UPDATE'), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:00:09,318 - 创建事务1连接成功
2025-02-05 00:00:09,319 - 执行事务1语句: BEGIN
2025-02-05 00:00:09,320 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:00:09,321 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id >= 10 AND id <= 10 FOR UPDATE
2025-02-05 00:00:09,321 - 执行事务1语句: COMMIT;
2025-02-05 00:00:09,326 - 执行事务1成功
2025-02-05 00:00:11,968 - 恢复初始状态成功
2025-02-05 00:00:12,728 - 创建事务2连接成功
2025-02-05 00:00:12,730 - 执行事务2语句: BEGIN
2025-02-05 00:00:12,731 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE
2025-02-05 00:00:12,731 - 执行事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE
2025-02-05 00:00:12,732 - 执行事务2语句: COMMIT;
2025-02-05 00:00:12,737 - 执行事务2成功
2025-02-05 00:00:18,310 - 
2025-02-05 00:00:18,310 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE', <Thread(Thread-290, started 41020)>, 1738684818.3108294)}
2025-02-05 00:00:18,424 - stmt_idx: 2, status: success, result: None
2025-02-05 00:00:18,424 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE
2025-02-05 00:00:18,424 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:00:18,424 - 
2025-02-05 00:00:18,532 - 
2025-02-05 00:00:18,532 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-291, started 27712)>, 1738684818.53298)}
2025-02-05 00:00:18,640 - stmt_idx: 3, status: success, result: None
2025-02-05 00:00:18,640 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:00:18,640 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:00:18,640 - 
2025-02-05 00:00:18,749 - 
2025-02-05 00:00:18,749 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 10 AND id <= 10 FOR UPDATE', <Thread(Thread-292, started 30088)>, 1738684818.7491965)}
2025-02-05 00:00:18,854 - wait for lock, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id >= 10 AND id <= 10 FOR UPDATE
2025-02-05 00:00:18,854 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 10 AND id <= 10 FOR UPDATE', <Thread(Thread-292, started 30088)>, 1738684818.7491965)}
2025-02-05 00:00:18,854 - 
2025-02-05 00:00:18,962 - 
2025-02-05 00:00:18,962 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 10 AND id <= 10 FOR UPDATE', <Thread(Thread-292, started 30088)>, 1738684818.7491965), 5: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE', <Thread(Thread-293, started 41220)>, 1738684818.9621098)}
2025-02-05 00:00:18,965 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1 FROM table_0 WHERE id >= 10 AND id <= 10 FOR UPDATE
2025-02-05 00:00:19,069 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:00:19,069 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_1 FROM table_0 WHERE id >= 10 AND id <= 10 FOR UPDATE
2025-02-05 00:00:19,069 - 错误: dictionary changed size during iteration
2025-02-05 00:00:19,072 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE', <Thread(Thread-293, stopped 41220)>, 1738684818.9621098)}
2025-02-05 00:00:19,072 - 
2025-02-05 00:00:19,072 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE', <Thread(Thread-293, stopped 41220)>, 1738684818.9621098)}
2025-02-05 00:00:19,176 - stmt_idx: 5, status: success, result: None
2025-02-05 00:00:19,176 - 成功执行序列中事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE
2025-02-05 00:00:19,176 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:00:19,176 - 
2025-02-05 00:00:19,284 - 执行序列成功
2025-02-05 00:00:20,106 - is_atomic: True
2025-02-05 00:00:20,106 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:00:20,106 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE')]
2025-02-05 00:00:20,106 - snapshots: {'before': {'table_0': [(1, 31, 'ewssd', 'jvqtm'), (2, 61, 'gkqcp', 'jkcbv'), (3, 15, 'aczrj', 'sollo'), (4, 12, 'elwpm', 'lwlkb'), (5, 55, 'jpegb', 'rooic'), (6, 36, 'tsxbj', 'lrwiu'), (7, 56, 'zgsqc', 'pdvbl'), (8, 23, 'ywjxb', 'irbyp'), (9, 78, 'vsbob', 'qofbz'), (10, 90, 'ofysn', 'yxwvv'), (11, 54, 'mxmbh', 'mgadt'), (12, 47, 'eqnja', 'hzvqs'), (13, 87, 'etayw', 'pubju'), (14, 78, 'iwtfp', 'pbded')]}, 'trx1': {'table_0': [(1, 31, 'ewssd', 'jvqtm'), (2, 61, 'gkqcp', 'jkcbv'), (3, 15, 'aczrj', 'sollo'), (4, 12, 'elwpm', 'lwlkb'), (5, 55, 'jpegb', 'rooic'), (6, 36, 'tsxbj', 'lrwiu'), (7, 56, 'zgsqc', 'pdvbl'), (8, 23, 'ywjxb', 'irbyp'), (9, 78, 'vsbob', 'qofbz'), (10, 90, 'ofysn', 'yxwvv'), (11, 54, 'mxmbh', 'mgadt'), (12, 47, 'eqnja', 'hzvqs'), (13, 87, 'etayw', 'pubju'), (14, 78, 'iwtfp', 'pbded')]}, 'trx2': {'table_0': [(1, 31, 'ewssd', 'jvqtm'), (2, 61, 'gkqcp', 'jkcbv'), (3, 15, 'aczrj', 'sollo'), (4, 12, 'elwpm', 'lwlkb'), (5, 55, 'jpegb', 'rooic'), (6, 36, 'tsxbj', 'lrwiu'), (7, 56, 'zgsqc', 'pdvbl'), (8, 23, 'ywjxb', 'irbyp'), (9, 78, 'vsbob', 'qofbz'), (10, 90, 'ofysn', 'yxwvv'), (11, 54, 'mxmbh', 'mgadt'), (12, 47, 'eqnja', 'hzvqs'), (13, 87, 'etayw', 'pubju'), (14, 78, 'iwtfp', 'pbded')]}, 'serial': {'table_0': [(1, 31, 'ewssd', 'jvqtm'), (2, 61, 'gkqcp', 'jkcbv'), (3, 15, 'aczrj', 'sollo'), (4, 12, 'elwpm', 'lwlkb'), (5, 55, 'jpegb', 'rooic'), (6, 36, 'tsxbj', 'lrwiu'), (7, 56, 'zgsqc', 'pdvbl'), (8, 23, 'ywjxb', 'irbyp'), (9, 78, 'vsbob', 'qofbz'), (10, 90, 'ofysn', 'yxwvv'), (11, 54, 'mxmbh', 'mgadt'), (12, 47, 'eqnja', 'hzvqs'), (13, 87, 'etayw', 'pubju'), (14, 78, 'iwtfp', 'pbded')]}}
2025-02-05 00:00:20,106 - 
2025-02-05 00:00:20,119 - iter: 39
2025-02-05 00:00:21,679 - table table_0 has 9 rows
2025-02-05 00:00:21,679 - trx1_start_id: 1
2025-02-05 00:00:21,679 - trx1_end_id: 7
2025-02-05 00:00:21,679 - trx1_exclusive_start_id: 1
2025-02-05 00:00:21,679 - trx1_exclusive_end_id: 6
2025-02-05 00:00:21,679 - trx1_exclusive_ids: [1, 2, 3, 4, 5, 6]
2025-02-05 00:00:21,679 - trx2_start_id: 7
2025-02-05 00:00:21,679 - trx2_end_id: 9
2025-02-05 00:00:21,679 - trx2_exclusive_start_id: 8
2025-02-05 00:00:21,679 - trx2_exclusive_end_id: 9
2025-02-05 00:00:21,679 - trx2_exclusive_ids: [8, 9]
2025-02-05 00:00:21,679 - intersection_ids: [7]
2025-02-05 00:00:21,679 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [7, 8, 9], 'intersection_row_ids': [7]}
2025-02-05 00:00:21,679 - lock_same_resource: True
2025-02-05 00:00:21,679 - 
2025-02-05 00:00:21,679 - intersection phase1
2025-02-05 00:00:21,683 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=7
2025-02-05 00:00:21,684 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:21,684 - params: {'v1': '1', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-05 00:00:21,687 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=True, range_end_idx=9
2025-02-05 00:00:21,688 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:21,688 - params: {'v1': '7', 'v2': '9', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:00:21,688 - intersection phase1 end
2025-02-05 00:00:21,688 - 
2025-02-05 00:00:21,688 - intersection phase2
2025-02-05 00:00:21,689 - 事务1在第二阶段自己加的锁: II
2025-02-05 00:00:21,689 - 事务2在第二阶段自己加的锁: NK
2025-02-05 00:00:21,689 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:00:21,689 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 00:00:21,692 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=6
2025-02-05 00:00:21,693 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:00:21,694 - params: {'v1': '1', 'set_expr': "col_2 = 'xyEQF', col_1 = 'gunLm'", 'table': 'table_0', 'v2': '6'}
2025-02-05 00:00:21,697 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=8, is_continuous=True, range_end_idx=9
2025-02-05 00:00:21,698 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:21,699 - params: {'v1': '8', 'v2': '9', 'table': 'table_0', 'select_cols': 'col_1'}
2025-02-05 00:00:21,699 - intersection phase2 end
2025-02-05 00:00:21,699 - 
2025-02-05 00:00:21,699 - intersection phase3
2025-02-05 00:00:21,702 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 00:00:21,703 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:21,703 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:00:21,705 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:00:21,707 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:00:21,708 - params: {'cond': "(id = 1) AND (col_0 = 'vrxjs') AND (col_1 = 'uhnso') AND (col_2 = 'zfmmy')", 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:00:21,708 - intersection phase3 end
2025-02-05 00:00:21,708 - 
2025-02-05 00:00:21,708 - 生成死锁事务序列成功如下
2025-02-05 00:00:21,708 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE'), (2, 'SELECT col_1 FROM table_0 WHERE id >= 8 AND id <= 9 FOR UPDATE'), (1, "UPDATE table_0 SET col_2 = 'xyEQF', col_1 = 'gunLm' WHERE id BETWEEN 1 AND 6"), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 1) AND (col_0 = 'vrxjs') AND (col_1 = 'uhnso') AND (col_2 = 'zfmmy') FOR UPDATE"), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:00:23,273 - 创建事务1连接成功
2025-02-05 00:00:23,274 - 执行事务1语句: BEGIN
2025-02-05 00:00:23,275 - 执行事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 7 LOCK IN SHARE MODE
2025-02-05 00:00:23,290 - 执行事务1语句: UPDATE table_0 SET col_2 = 'xyEQF', col_1 = 'gunLm' WHERE id BETWEEN 1 AND 6
2025-02-05 00:00:23,291 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE
2025-02-05 00:00:23,294 - 执行事务1语句: COMMIT;
2025-02-05 00:00:23,299 - 执行事务1成功
2025-02-05 00:00:25,922 - 恢复初始状态成功
2025-02-05 00:00:26,703 - 创建事务2连接成功
2025-02-05 00:00:26,705 - 执行事务2语句: BEGIN
2025-02-05 00:00:26,706 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:00:26,707 - 执行事务2语句: SELECT col_1 FROM table_0 WHERE id >= 8 AND id <= 9 FOR UPDATE
2025-02-05 00:00:26,708 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 1) AND (col_0 = 'vrxjs') AND (col_1 = 'uhnso') AND (col_2 = 'zfmmy') FOR UPDATE
2025-02-05 00:00:26,709 - 执行事务2语句: COMMIT;
2025-02-05 00:00:26,713 - 执行事务2成功
2025-02-05 00:00:31,688 - 
2025-02-05 00:00:31,688 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 7 LOCK IN SHARE MODE', <Thread(Thread-294, started 29408)>, 1738684831.6885192)}
2025-02-05 00:00:31,798 - stmt_idx: 2, status: success, result: None
2025-02-05 00:00:31,798 - 成功执行序列中事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 7 LOCK IN SHARE MODE
2025-02-05 00:00:31,798 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:00:31,798 - 
2025-02-05 00:00:31,907 - 
2025-02-05 00:00:31,907 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-295, started 5992)>, 1738684831.9072888)}
2025-02-05 00:00:32,015 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:00:32,015 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-295, started 5992)>, 1738684831.9072888)}
2025-02-05 00:00:32,015 - 
2025-02-05 00:00:32,124 - 
2025-02-05 00:00:32,125 - 执行前idx: 6, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-295, started 5992)>, 1738684831.9072888), 5: (1, "UPDATE table_0 SET col_2 = 'xyEQF', col_1 = 'gunLm' WHERE id BETWEEN 1 AND 6", <Thread(Thread-296, started 31032)>, 1738684832.1247606)}
2025-02-05 00:00:32,234 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:00:32,343 - stmt_idx: 5, status: success, result: None
2025-02-05 00:00:32,343 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'xyEQF', col_1 = 'gunLm' WHERE id BETWEEN 1 AND 6
2025-02-05 00:00:32,343 - 执行后idx: 6, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-295, started 5992)>, 1738684831.9072888)}
2025-02-05 00:00:32,343 - 
2025-02-05 00:00:32,450 - 
2025-02-05 00:00:32,451 - 执行前idx: 8, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-295, started 5992)>, 1738684831.9072888), 7: (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE', <Thread(Thread-297, started 38844)>, 1738684832.4505115)}
2025-02-05 00:00:32,559 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:00:32,667 - stmt_idx: 7, status: success, result: None
2025-02-05 00:00:32,667 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE
2025-02-05 00:00:32,667 - 执行后idx: 8, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-295, started 5992)>, 1738684831.9072888)}
2025-02-05 00:00:32,667 - 
2025-02-05 00:00:32,780 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-295, started 5992)>, 1738684831.9072888)}
2025-02-05 00:00:32,780 - 
2025-02-05 00:00:32,780 - 执行前idx: 10, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-295, stopped 5992)>, 1738684831.9072888)}
2025-02-05 00:00:32,885 - stmt_idx: 3, status: success, result: None
2025-02-05 00:00:32,885 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:00:32,885 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:00:32,886 - 执行后idx: 10, pending_stmts: {4: (2, 'SELECT col_1 FROM table_0 WHERE id >= 8 AND id <= 9 FOR UPDATE', <Thread(Thread-298, started 36108)>, 1738684832.8861132), 6: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 1) AND (col_0 = 'vrxjs') AND (col_1 = 'uhnso') AND (col_2 = 'zfmmy') FOR UPDATE", <Thread(Thread-299, started 37992)>, 1738684832.8864443), 8: (2, 'COMMIT', <Thread(Thread-300, started 19936)>, 1738684832.8864443)}
2025-02-05 00:00:32,886 - 
2025-02-05 00:00:32,992 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'SELECT col_1 FROM table_0 WHERE id >= 8 AND id <= 9 FOR UPDATE', <Thread(Thread-298, stopped 36108)>, 1738684832.8861132), 6: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 1) AND (col_0 = 'vrxjs') AND (col_1 = 'uhnso') AND (col_2 = 'zfmmy') FOR UPDATE", <Thread(Thread-299, stopped 37992)>, 1738684832.8864443), 8: (2, 'COMMIT', <Thread(Thread-300, stopped 19936)>, 1738684832.8864443)}
2025-02-05 00:00:32,992 - 
2025-02-05 00:00:32,992 - 执行前idx: 10, pending_stmts: {4: (2, 'SELECT col_1 FROM table_0 WHERE id >= 8 AND id <= 9 FOR UPDATE', <Thread(Thread-298, stopped 36108)>, 1738684832.8861132), 6: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 1) AND (col_0 = 'vrxjs') AND (col_1 = 'uhnso') AND (col_2 = 'zfmmy') FOR UPDATE", <Thread(Thread-299, stopped 37992)>, 1738684832.8864443), 8: (2, 'COMMIT', <Thread(Thread-300, stopped 19936)>, 1738684832.8864443)}
2025-02-05 00:00:33,099 - stmt_idx: 4, status: success, result: None
2025-02-05 00:00:33,099 - 成功执行序列中事务2语句: SELECT col_1 FROM table_0 WHERE id >= 8 AND id <= 9 FOR UPDATE
2025-02-05 00:00:33,206 - stmt_idx: 6, status: success, result: None
2025-02-05 00:00:33,206 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 1) AND (col_0 = 'vrxjs') AND (col_1 = 'uhnso') AND (col_2 = 'zfmmy') FOR UPDATE
2025-02-05 00:00:33,315 - stmt_idx: 8, status: success, result: None
2025-02-05 00:00:33,315 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:00:33,315 - 执行后idx: 10, pending_stmts: {}
2025-02-05 00:00:33,315 - 
2025-02-05 00:00:33,425 - 执行序列成功
2025-02-05 00:00:34,211 - is_atomic: True
2025-02-05 00:00:34,211 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:00:34,211 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 7 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 'xyEQF', col_1 = 'gunLm' WHERE id BETWEEN 1 AND 6"), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE'), (1, 'COMMIT'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE'), (2, 'SELECT col_1 FROM table_0 WHERE id >= 8 AND id <= 9 FOR UPDATE'), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 1) AND (col_0 = 'vrxjs') AND (col_1 = 'uhnso') AND (col_2 = 'zfmmy') FOR UPDATE"), (2, 'COMMIT')]
2025-02-05 00:00:34,211 - snapshots: {'before': {'table_0': [(1, 'vrxjs', 'uhnso', 'zfmmy'), (2, 'bsgbj', 'hmuvu', 'bjzdv'), (3, 'kqdjh', 'vbdif', 'iejuz'), (4, 'srrvb', 'fnxbq', 'eitbl'), (5, 'fdqon', 'szent', 'mshjr'), (6, 'blbhl', 'zvjmk', 'mblvb'), (7, 'aerhs', 'cdzzm', 'ewwzv'), (8, 'sncwo', 'xhilt', 'nhncj'), (9, 'ktvcy', 'pqflf', 'ukwze')]}, 'trx1': {'table_0': [(1, 'vrxjs', 'gunLm', 'xyEQF'), (2, 'bsgbj', 'gunLm', 'xyEQF'), (3, 'kqdjh', 'gunLm', 'xyEQF'), (4, 'srrvb', 'gunLm', 'xyEQF'), (5, 'fdqon', 'gunLm', 'xyEQF'), (6, 'blbhl', 'gunLm', 'xyEQF'), (7, 'aerhs', 'cdzzm', 'ewwzv'), (8, 'sncwo', 'xhilt', 'nhncj'), (9, 'ktvcy', 'pqflf', 'ukwze')]}, 'trx2': {'table_0': [(1, 'vrxjs', 'uhnso', 'zfmmy'), (2, 'bsgbj', 'hmuvu', 'bjzdv'), (3, 'kqdjh', 'vbdif', 'iejuz'), (4, 'srrvb', 'fnxbq', 'eitbl'), (5, 'fdqon', 'szent', 'mshjr'), (6, 'blbhl', 'zvjmk', 'mblvb'), (7, 'aerhs', 'cdzzm', 'ewwzv'), (8, 'sncwo', 'xhilt', 'nhncj'), (9, 'ktvcy', 'pqflf', 'ukwze')]}, 'serial': {'table_0': [(1, 'vrxjs', 'gunLm', 'xyEQF'), (2, 'bsgbj', 'gunLm', 'xyEQF'), (3, 'kqdjh', 'gunLm', 'xyEQF'), (4, 'srrvb', 'gunLm', 'xyEQF'), (5, 'fdqon', 'gunLm', 'xyEQF'), (6, 'blbhl', 'gunLm', 'xyEQF'), (7, 'aerhs', 'cdzzm', 'ewwzv'), (8, 'sncwo', 'xhilt', 'nhncj'), (9, 'ktvcy', 'pqflf', 'ukwze')]}}
2025-02-05 00:00:34,211 - 
2025-02-05 00:00:34,224 - iter: 40
2025-02-05 00:00:35,724 - table table_0 has 12 rows
2025-02-05 00:00:35,724 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
2025-02-05 00:00:35,724 - trx2_lock_row_ids: [1, 4, 5, 6, 7, 9, 10, 11, 12]
2025-02-05 00:00:35,724 - intersection_row_ids: [1, 4, 5, 6, 7, 9, 10, 11, 12]
2025-02-05 00:00:35,724 - trx1_exclusive_ids: [2, 3, 8]
2025-02-05 00:00:35,724 - trx2_exclusive_ids: []
2025-02-05 00:00:35,725 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [1, 4, 5, 6, 7, 9, 10, 11, 12], 'intersection_row_ids': [1, 4, 5, 6, 7, 9, 10, 11, 12]}
2025-02-05 00:00:35,725 - lock_same_resource: True
2025-02-05 00:00:35,725 - 
2025-02-05 00:00:35,725 - intersection phase1
2025-02-05 00:00:35,728 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,729 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,729 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:00:35,732 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,733 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,734 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-05 00:00:35,737 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,738 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,738 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:00:35,741 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,743 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,743 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:00:35,747 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,749 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,749 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:00:35,753 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,755 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:00:35,755 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'OIZSE', 19.98, 2", 'table': 'table_0'}
2025-02-05 00:00:35,759 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,761 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,761 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-05 00:00:35,765 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,767 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:00:35,768 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'bgxWV', 4.9, 25", 'table': 'table_0'}
2025-02-05 00:00:35,770 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,772 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:00:35,772 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'dZSzG', 21.2, 72", 'table': 'table_0'}
2025-02-05 00:00:35,776 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,778 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:00:35,778 - params: {'cond': '(id = 1) AND (col_1 = 44.77)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:00:35,782 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,784 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,785 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:00:35,788 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,789 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:00:35,789 - params: {'set_expr': "col_0 = 'JFIze', col_2 = 15, col_1 = 65.88", 'table': 'table_0', 'cond': '(id = 5)'}
2025-02-05 00:00:35,793 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,795 - needed_params: {'cond', 'table'}
2025-02-05 00:00:35,795 - params: {'cond': "(col_1 = 89.29) AND (col_0 = 'byyfs')", 'table': 'table_0'}
2025-02-05 00:00:35,799 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,800 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:00:35,800 - params: {'cond': "(id = 7) AND (col_1 = 72.51) AND (col_0 = 'abrrs')", 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:00:35,803 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,804 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:00:35,804 - params: {'cond': "(col_0 = 'fxdbk')", 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:00:35,807 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,809 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:00:35,809 - params: {'set_expr': "col_2 = 57, col_1 = 34.88, col_0 = 'YfRWp'", 'table': 'table_0', 'cond': "(col_2 = 66) AND (col_0 = 'xkmxc')"}
2025-02-05 00:00:35,812 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,813 - needed_params: {'cond', 'table'}
2025-02-05 00:00:35,813 - params: {'cond': "(col_0 = 'nqffg')", 'table': 'table_0'}
2025-02-05 00:00:35,816 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,818 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,818 - params: {'v1': '12', 'v2': '12', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:00:35,818 - intersection phase1 end
2025-02-05 00:00:35,818 - 
2025-02-05 00:00:35,819 - intersection phase2
2025-02-05 00:00:35,819 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:00:35,819 - 事务2在第二阶段自己加的锁: II
2025-02-05 00:00:35,819 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:00:35,819 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:00:35,822 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,823 - needed_params: {'cond', 'table'}
2025-02-05 00:00:35,823 - params: {'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 00:00:35,827 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,828 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:00:35,828 - params: {'set_expr': 'col_1 = 76.88', 'table': 'table_0', 'cond': "(col_0 = 'kyvhu') AND (col_1 = 50.91)"}
2025-02-05 00:00:35,831 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,833 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:35,833 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:00:35,834 - intersection phase2 end
2025-02-05 00:00:35,834 - 
2025-02-05 00:00:35,834 - intersection phase3
2025-02-05 00:00:35,837 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:00:35,838 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:00:35,838 - params: {'set_expr': "col_1 = 47.14, col_0 = 'oYrfB', col_2 = 81", 'table': 'table_0', 'cond': "(id = 12) AND (col_0 = 'kqlpl') AND (col_1 = 64.03) AND (col_2 = 90)"}
2025-02-05 00:00:35,838 - intersection phase3 end
2025-02-05 00:00:35,838 - 
2025-02-05 00:00:35,838 - 生成死锁事务序列成功如下
2025-02-05 00:00:35,838 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE (id = 1) AND (col_1 = 44.77) FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'JFIze', col_2 = 15, col_1 = 65.88 WHERE (id = 5)"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, "DELETE FROM table_0 WHERE (col_1 = 89.29) AND (col_0 = 'byyfs')"), (2, "SELECT id FROM table_0 WHERE (id = 7) AND (col_1 = 72.51) AND (col_0 = 'abrrs') FOR UPDATE"), (2, "SELECT id, col_0 FROM table_0 WHERE (col_0 = 'fxdbk') FOR UPDATE"), (2, "UPDATE table_0 SET col_2 = 57, col_1 = 34.88, col_0 = 'YfRWp' WHERE (col_2 = 66) AND (col_0 = 'xkmxc')"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, "DELETE FROM table_0 WHERE (col_0 = 'nqffg')"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'OIZSE', 19.98, 2)"), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'bgxWV', 4.9, 25)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'dZSzG', 21.2, 72)"), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (1, "UPDATE table_0 SET col_1 = 76.88 WHERE (col_0 = 'kyvhu') AND (col_1 = 50.91)"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 47.14, col_0 = 'oYrfB', col_2 = 81 WHERE (id = 12) AND (col_0 = 'kqlpl') AND (col_1 = 64.03) AND (col_2 = 90)"), (2, None), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:00:37,389 - 创建事务1连接成功
2025-02-05 00:00:37,391 - 执行事务1语句: BEGIN
2025-02-05 00:00:37,393 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:37,393 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:00:37,394 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:00:37,395 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:00:37,395 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:00:37,396 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'OIZSE', 19.98, 2)
2025-02-05 00:00:37,397 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:00:37,397 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'bgxWV', 4.9, 25)
2025-02-05 00:00:37,398 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'dZSzG', 21.2, 72)
2025-02-05 00:00:37,398 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 00:00:37,399 - 执行事务1语句: UPDATE table_0 SET col_1 = 76.88 WHERE (col_0 = 'kyvhu') AND (col_1 = 50.91)
2025-02-05 00:00:37,400 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 00:00:37,400 - 执行事务1语句: UPDATE table_0 SET col_1 = 47.14, col_0 = 'oYrfB', col_2 = 81 WHERE (id = 12) AND (col_0 = 'kqlpl') AND (col_1 = 64.03) AND (col_2 = 90)
2025-02-05 00:00:37,403 - 执行事务1语句: COMMIT;
2025-02-05 00:00:37,407 - 执行事务1成功
2025-02-05 00:00:40,032 - 恢复初始状态成功
2025-02-05 00:00:40,816 - 创建事务2连接成功
2025-02-05 00:00:40,818 - 执行事务2语句: BEGIN
2025-02-05 00:00:40,819 - 执行事务2语句: SELECT id FROM table_0 WHERE (id = 1) AND (col_1 = 44.77) FOR UPDATE
2025-02-05 00:00:40,820 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:00:40,821 - 执行事务2语句: UPDATE table_0 SET col_0 = 'JFIze', col_2 = 15, col_1 = 65.88 WHERE (id = 5)
2025-02-05 00:00:40,822 - 执行事务2语句: DELETE FROM table_0 WHERE (col_1 = 89.29) AND (col_0 = 'byyfs')
2025-02-05 00:00:40,823 - 执行事务2语句: SELECT id FROM table_0 WHERE (id = 7) AND (col_1 = 72.51) AND (col_0 = 'abrrs') FOR UPDATE
2025-02-05 00:00:40,824 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_0 = 'fxdbk') FOR UPDATE
2025-02-05 00:00:40,824 - 执行事务2语句: UPDATE table_0 SET col_2 = 57, col_1 = 34.88, col_0 = 'YfRWp' WHERE (col_2 = 66) AND (col_0 = 'xkmxc')
2025-02-05 00:00:40,826 - 执行事务2语句: DELETE FROM table_0 WHERE (col_0 = 'nqffg')
2025-02-05 00:00:40,826 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-05 00:00:40,828 - 执行事务2语句: COMMIT;
2025-02-05 00:00:40,834 - 执行事务2成功
2025-02-05 00:00:45,803 - 
2025-02-05 00:00:45,804 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id FROM table_0 WHERE (id = 1) AND (col_1 = 44.77) FOR UPDATE', <Thread(Thread-301, started 21452)>, 1738684845.8038416)}
2025-02-05 00:00:45,906 - stmt_idx: 2, status: success, result: None
2025-02-05 00:00:45,906 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (id = 1) AND (col_1 = 44.77) FOR UPDATE
2025-02-05 00:00:45,906 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:00:45,906 - 
2025-02-05 00:00:46,013 - 
2025-02-05 00:00:46,013 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-302, started 40616)>, 1738684846.0132635)}
2025-02-05 00:00:46,121 - stmt_idx: 3, status: success, result: None
2025-02-05 00:00:46,121 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:00:46,121 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:00:46,121 - 
2025-02-05 00:00:46,227 - 
2025-02-05 00:00:46,227 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 'JFIze', col_2 = 15, col_1 = 65.88 WHERE (id = 5)", <Thread(Thread-303, started 20948)>, 1738684846.2276974)}
2025-02-05 00:00:46,336 - stmt_idx: 4, status: success, result: None
2025-02-05 00:00:46,336 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'JFIze', col_2 = 15, col_1 = 65.88 WHERE (id = 5)
2025-02-05 00:00:46,336 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:00:46,336 - 
2025-02-05 00:00:46,446 - 
2025-02-05 00:00:46,447 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:46,553 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:46,553 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:46,553 - 
2025-02-05 00:00:46,661 - 
2025-02-05 00:00:46,661 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308), 7: (2, "DELETE FROM table_0 WHERE (col_1 = 89.29) AND (col_0 = 'byyfs')", <Thread(Thread-305, started 35892)>, 1738684846.6615634)}
2025-02-05 00:00:46,768 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:46,874 - stmt_idx: 7, status: success, result: None
2025-02-05 00:00:46,874 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_1 = 89.29) AND (col_0 = 'byyfs')
2025-02-05 00:00:46,874 - 执行后idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:46,874 - 
2025-02-05 00:00:46,983 - 
2025-02-05 00:00:46,984 - 执行前idx: 9, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308), 8: (2, "SELECT id FROM table_0 WHERE (id = 7) AND (col_1 = 72.51) AND (col_0 = 'abrrs') FOR UPDATE", <Thread(Thread-306, started 41180)>, 1738684846.9837031)}
2025-02-05 00:00:47,092 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:47,200 - stmt_idx: 8, status: success, result: None
2025-02-05 00:00:47,200 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (id = 7) AND (col_1 = 72.51) AND (col_0 = 'abrrs') FOR UPDATE
2025-02-05 00:00:47,200 - 执行后idx: 9, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:47,200 - 
2025-02-05 00:00:47,310 - 
2025-02-05 00:00:47,310 - 执行前idx: 10, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308), 9: (2, "SELECT id, col_0 FROM table_0 WHERE (col_0 = 'fxdbk') FOR UPDATE", <Thread(Thread-307, started 16444)>, 1738684847.3101048)}
2025-02-05 00:00:47,416 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:47,524 - stmt_idx: 9, status: success, result: None
2025-02-05 00:00:47,524 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_0 = 'fxdbk') FOR UPDATE
2025-02-05 00:00:47,524 - 执行后idx: 10, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:47,524 - 
2025-02-05 00:00:47,631 - 
2025-02-05 00:00:47,631 - 执行前idx: 11, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308), 10: (2, "UPDATE table_0 SET col_2 = 57, col_1 = 34.88, col_0 = 'YfRWp' WHERE (col_2 = 66) AND (col_0 = 'xkmxc')", <Thread(Thread-308, started 32048)>, 1738684847.6312466)}
2025-02-05 00:00:47,738 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:47,846 - stmt_idx: 10, status: success, result: None
2025-02-05 00:00:47,846 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 57, col_1 = 34.88, col_0 = 'YfRWp' WHERE (col_2 = 66) AND (col_0 = 'xkmxc')
2025-02-05 00:00:47,846 - 执行后idx: 11, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:47,846 - 
2025-02-05 00:00:47,955 - 
2025-02-05 00:00:47,956 - 执行前idx: 13, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308), 12: (2, "DELETE FROM table_0 WHERE (col_0 = 'nqffg')", <Thread(Thread-309, started 5244)>, 1738684847.95518)}
2025-02-05 00:00:48,064 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:48,172 - stmt_idx: 12, status: success, result: None
2025-02-05 00:00:48,172 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_0 = 'nqffg')
2025-02-05 00:00:48,172 - 执行后idx: 13, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:48,172 - 
2025-02-05 00:00:48,279 - 
2025-02-05 00:00:48,279 - 执行前idx: 15, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308), 14: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE', <Thread(Thread-310, started 33128)>, 1738684848.2796922)}
2025-02-05 00:00:48,385 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:48,493 - stmt_idx: 14, status: success, result: None
2025-02-05 00:00:48,493 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-05 00:00:48,493 - 执行后idx: 15, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:48,493 - 
2025-02-05 00:00:48,603 - stmt为None, trx_id: 2, stmt: None
2025-02-05 00:00:48,607 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, started 34684)>, 1738684846.4463308)}
2025-02-05 00:00:48,607 - 
2025-02-05 00:00:48,607 - 执行前idx: 27, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-304, stopped 34684)>, 1738684846.4463308)}
2025-02-05 00:00:48,709 - stmt_idx: 5, status: success, result: None
2025-02-05 00:00:48,709 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:48,709 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:48,712 - 执行后idx: 27, pending_stmts: {6: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-311, started 38352)>, 1738684848.7104049), 11: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-312, started 31800)>, 1738684848.7106805), 13: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-313, started 36768)>, 1738684848.7106805), 15: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-314, started 31716)>, 1738684848.7106805), 16: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'OIZSE', 19.98, 2)", <Thread(Thread-315, started 30948)>, 1738684848.7111852), 17: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-316, started 39824)>, 1738684848.7111852), 18: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'bgxWV', 4.9, 25)", <Thread(Thread-317, started 4284)>, 1738684848.711488), 19: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'dZSzG', 21.2, 72)", <Thread(Thread-318, started 29024)>, 1738684848.711488), 20: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-319, started 41484)>, 1738684848.711488), 21: (1, "UPDATE table_0 SET col_1 = 76.88 WHERE (col_0 = 'kyvhu') AND (col_1 = 50.91)", <Thread(Thread-320, started 30816)>, 1738684848.7119923), 22: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-321, started 41572)>, 1738684848.7119923), 23: (1, "UPDATE table_0 SET col_1 = 47.14, col_0 = 'oYrfB', col_2 = 81 WHERE (id = 12) AND (col_0 = 'kqlpl') AND (col_1 = 64.03) AND (col_2 = 90)", <Thread(Thread-322, started 11752)>, 1738684848.7119923), 25: (1, 'COMMIT', <Thread(Thread-323, started 38532)>, 1738684848.7125156)}
2025-02-05 00:00:48,712 - 
2025-02-05 00:00:48,815 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-311, stopped 38352)>, 1738684848.7104049), 11: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-312, stopped 31800)>, 1738684848.7106805), 13: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-313, stopped 36768)>, 1738684848.7106805), 15: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-314, stopped 31716)>, 1738684848.7106805), 16: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'OIZSE', 19.98, 2)", <Thread(Thread-315, stopped 30948)>, 1738684848.7111852), 17: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-316, stopped 39824)>, 1738684848.7111852), 18: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'bgxWV', 4.9, 25)", <Thread(Thread-317, stopped 4284)>, 1738684848.711488), 19: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'dZSzG', 21.2, 72)", <Thread(Thread-318, stopped 29024)>, 1738684848.711488), 20: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-319, stopped 41484)>, 1738684848.711488), 21: (1, "UPDATE table_0 SET col_1 = 76.88 WHERE (col_0 = 'kyvhu') AND (col_1 = 50.91)", <Thread(Thread-320, stopped 30816)>, 1738684848.7119923), 22: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-321, stopped 41572)>, 1738684848.7119923), 23: (1, "UPDATE table_0 SET col_1 = 47.14, col_0 = 'oYrfB', col_2 = 81 WHERE (id = 12) AND (col_0 = 'kqlpl') AND (col_1 = 64.03) AND (col_2 = 90)", <Thread(Thread-322, stopped 11752)>, 1738684848.7119923), 25: (1, 'COMMIT', <Thread(Thread-323, stopped 38532)>, 1738684848.7125156)}
2025-02-05 00:00:48,815 - 
2025-02-05 00:00:48,815 - 执行前idx: 27, pending_stmts: {6: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-311, stopped 38352)>, 1738684848.7104049), 11: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-312, stopped 31800)>, 1738684848.7106805), 13: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-313, stopped 36768)>, 1738684848.7106805), 15: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-314, stopped 31716)>, 1738684848.7106805), 16: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'OIZSE', 19.98, 2)", <Thread(Thread-315, stopped 30948)>, 1738684848.7111852), 17: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-316, stopped 39824)>, 1738684848.7111852), 18: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'bgxWV', 4.9, 25)", <Thread(Thread-317, stopped 4284)>, 1738684848.711488), 19: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'dZSzG', 21.2, 72)", <Thread(Thread-318, stopped 29024)>, 1738684848.711488), 20: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-319, stopped 41484)>, 1738684848.711488), 21: (1, "UPDATE table_0 SET col_1 = 76.88 WHERE (col_0 = 'kyvhu') AND (col_1 = 50.91)", <Thread(Thread-320, stopped 30816)>, 1738684848.7119923), 22: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-321, stopped 41572)>, 1738684848.7119923), 23: (1, "UPDATE table_0 SET col_1 = 47.14, col_0 = 'oYrfB', col_2 = 81 WHERE (id = 12) AND (col_0 = 'kqlpl') AND (col_1 = 64.03) AND (col_2 = 90)", <Thread(Thread-322, stopped 11752)>, 1738684848.7119923), 25: (1, 'COMMIT', <Thread(Thread-323, stopped 38532)>, 1738684848.7125156)}
2025-02-05 00:00:48,923 - stmt_idx: 6, status: success, result: None
2025-02-05 00:00:48,923 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:00:49,030 - stmt_idx: 11, status: success, result: None
2025-02-05 00:00:49,030 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:00:49,140 - stmt_idx: 13, status: success, result: None
2025-02-05 00:00:49,140 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:00:49,249 - stmt_idx: 15, status: success, result: None
2025-02-05 00:00:49,249 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:00:49,360 - stmt_idx: 16, status: success, result: None
2025-02-05 00:00:49,360 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'OIZSE', 19.98, 2)
2025-02-05 00:00:49,467 - stmt_idx: 17, status: success, result: None
2025-02-05 00:00:49,467 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:00:49,574 - stmt_idx: 18, status: success, result: None
2025-02-05 00:00:49,574 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'bgxWV', 4.9, 25)
2025-02-05 00:00:49,680 - stmt_idx: 19, status: success, result: None
2025-02-05 00:00:49,680 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'dZSzG', 21.2, 72)
2025-02-05 00:00:49,786 - stmt_idx: 20, status: success, result: None
2025-02-05 00:00:49,786 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 00:00:49,894 - stmt_idx: 21, status: success, result: None
2025-02-05 00:00:49,894 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 76.88 WHERE (col_0 = 'kyvhu') AND (col_1 = 50.91)
2025-02-05 00:00:50,002 - stmt_idx: 22, status: success, result: None
2025-02-05 00:00:50,002 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 00:00:50,113 - stmt_idx: 23, status: success, result: None
2025-02-05 00:00:50,113 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 47.14, col_0 = 'oYrfB', col_2 = 81 WHERE (id = 12) AND (col_0 = 'kqlpl') AND (col_1 = 64.03) AND (col_2 = 90)
2025-02-05 00:00:50,222 - stmt_idx: 25, status: success, result: None
2025-02-05 00:00:50,222 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:00:50,222 - 执行后idx: 27, pending_stmts: {}
2025-02-05 00:00:50,222 - 
2025-02-05 00:00:50,328 - 执行序列成功
2025-02-05 00:00:51,102 - is_atomic: True
2025-02-05 00:00:51,102 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:00:51,102 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE (id = 1) AND (col_1 = 44.77) FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'JFIze', col_2 = 15, col_1 = 65.88 WHERE (id = 5)"), (2, "DELETE FROM table_0 WHERE (col_1 = 89.29) AND (col_0 = 'byyfs')"), (2, "SELECT id FROM table_0 WHERE (id = 7) AND (col_1 = 72.51) AND (col_0 = 'abrrs') FOR UPDATE"), (2, "SELECT id, col_0 FROM table_0 WHERE (col_0 = 'fxdbk') FOR UPDATE"), (2, "UPDATE table_0 SET col_2 = 57, col_1 = 34.88, col_0 = 'YfRWp' WHERE (col_2 = 66) AND (col_0 = 'xkmxc')"), (2, "DELETE FROM table_0 WHERE (col_0 = 'nqffg')"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'OIZSE', 19.98, 2)"), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'bgxWV', 4.9, 25)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'dZSzG', 21.2, 72)"), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (1, "UPDATE table_0 SET col_1 = 76.88 WHERE (col_0 = 'kyvhu') AND (col_1 = 50.91)"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 47.14, col_0 = 'oYrfB', col_2 = 81 WHERE (id = 12) AND (col_0 = 'kqlpl') AND (col_1 = 64.03) AND (col_2 = 90)"), (1, 'COMMIT')]
2025-02-05 00:00:51,102 - snapshots: {'before': {'table_0': [(1, 'kehem', 44.77, 35), (2, 'jkzyy', 29.25, 31), (3, 'kyvhu', 50.91, 68), (4, 'eowhh', 66.7, 52), (5, 'oidqw', 6.05, 30), (6, 'byyfs', 89.29, 30), (7, 'abrrs', 72.51, 8), (8, 'mmhxh', 47.11, 82), (9, 'fxdbk', 25.69, 13), (10, 'xkmxc', 56.1, 66), (11, 'nqffg', 33.34, 13), (12, 'kqlpl', 64.03, 90)]}, 'trx1': {'table_0': [(1, 'kehem', 44.77, 35), (3, 'kyvhu', 76.88, 68), (4, 'eowhh', 66.7, 52), (5, 'oidqw', 6.05, 30), (6, 'byyfs', 89.29, 30), (7, 'abrrs', 72.51, 8), (8, 'mmhxh', 47.11, 82), (9, 'fxdbk', 25.69, 13), (10, 'xkmxc', 56.1, 66), (11, 'nqffg', 33.34, 13), (12, 'oYrfB', 47.14, 81), (13, 'OIZSE', 19.98, 2), (14, 'bgxWV', 4.9, 25), (15, 'dZSzG', 21.2, 72)]}, 'trx2': {'table_0': [(1, 'kehem', 44.77, 35), (2, 'jkzyy', 29.25, 31), (3, 'kyvhu', 50.91, 68), (4, 'eowhh', 66.7, 52), (5, 'JFIze', 65.88, 15), (7, 'abrrs', 72.51, 8), (8, 'mmhxh', 47.11, 82), (9, 'fxdbk', 25.69, 13), (10, 'YfRWp', 34.88, 57), (12, 'kqlpl', 64.03, 90)]}, 'serial': {'table_0': [(1, 'kehem', 44.77, 35), (3, 'kyvhu', 76.88, 68), (4, 'eowhh', 66.7, 52), (5, 'JFIze', 65.88, 15), (7, 'abrrs', 72.51, 8), (8, 'mmhxh', 47.11, 82), (9, 'fxdbk', 25.69, 13), (10, 'YfRWp', 34.88, 57), (12, 'oYrfB', 47.14, 81), (16, 'OIZSE', 19.98, 2), (17, 'bgxWV', 4.9, 25), (18, 'dZSzG', 21.2, 72)]}}
2025-02-05 00:00:51,102 - 
2025-02-05 00:00:51,114 - iter: 41
2025-02-05 00:00:52,622 - table table_0 has 10 rows
2025-02-05 00:00:52,623 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [9, 10], 'intersection_row_ids': []}
2025-02-05 00:00:52,623 - lock_same_resource: False
2025-02-05 00:00:52,623 - 
2025-02-05 00:00:52,623 - non intersection phase1
2025-02-05 00:00:52,623 - 事务1在第一阶段自己加的锁: II
2025-02-05 00:00:52,623 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:00:52,623 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:00:52,623 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:00:52,628 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:00:52,629 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:00:52,629 - params: {'v1': '1', 'set_expr': "col_1 = 22.06, col_4 = 5, col_3 = 83.17, col_2 = 17, col_0 = 'OKyUh'", 'table': 'table_0', 'v2': '1'}
2025-02-05 00:00:52,633 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=9, is_continuous=True, range_end_idx=10
2025-02-05 00:00:52,635 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:52,635 - params: {'v1': '9', 'v2': '10', 'table': 'table_0', 'select_cols': 'col_1'}
2025-02-05 00:00:52,635 - non intersection phase1 end
2025-02-05 00:00:52,635 - 
2025-02-05 00:00:52,636 - non intersection phase2
2025-02-05 00:00:52,638 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 00:00:52,639 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:52,640 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'col_0'}
2025-02-05 00:00:52,643 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:00:52,645 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:00:52,645 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3'}
2025-02-05 00:00:52,646 - non intersection phase2 end
2025-02-05 00:00:52,646 - 
2025-02-05 00:00:52,646 - 生成死锁事务序列成功如下
2025-02-05 00:00:52,646 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 22.06, col_4 = 5, col_3 = 83.17, col_2 = 17, col_0 = 'OKyUh' WHERE id BETWEEN 1 AND 1"), (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:00:54,189 - 创建事务1连接成功
2025-02-05 00:00:54,191 - 执行事务1语句: BEGIN
2025-02-05 00:00:54,194 - 执行事务1语句: UPDATE table_0 SET col_1 = 22.06, col_4 = 5, col_3 = 83.17, col_2 = 17, col_0 = 'OKyUh' WHERE id BETWEEN 1 AND 1
2025-02-05 00:00:54,194 - 执行事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:00:54,196 - 执行事务1语句: COMMIT;
2025-02-05 00:00:54,201 - 执行事务1成功
2025-02-05 00:00:56,802 - 恢复初始状态成功
2025-02-05 00:00:57,565 - 创建事务2连接成功
2025-02-05 00:00:57,566 - 执行事务2语句: BEGIN
2025-02-05 00:00:57,568 - 执行事务2语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 FOR UPDATE
2025-02-05 00:00:57,569 - 执行事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:00:57,569 - 执行事务2语句: COMMIT;
2025-02-05 00:00:57,574 - 执行事务2成功
2025-02-05 00:01:02,500 - 
2025-02-05 00:01:02,501 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 FOR UPDATE', <Thread(Thread-324, started 39696)>, 1738684862.5008705)}
2025-02-05 00:01:02,609 - stmt_idx: 2, status: success, result: None
2025-02-05 00:01:02,609 - 成功执行序列中事务2语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 FOR UPDATE
2025-02-05 00:01:02,609 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:01:02,609 - 
2025-02-05 00:01:02,716 - 
2025-02-05 00:01:02,717 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 22.06, col_4 = 5, col_3 = 83.17, col_2 = 17, col_0 = 'OKyUh' WHERE id BETWEEN 1 AND 1", <Thread(Thread-325, started 16268)>, 1738684862.7166812)}
2025-02-05 00:01:02,824 - stmt_idx: 3, status: success, result: None
2025-02-05 00:01:02,824 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 22.06, col_4 = 5, col_3 = 83.17, col_2 = 17, col_0 = 'OKyUh' WHERE id BETWEEN 1 AND 1
2025-02-05 00:01:02,824 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:01:02,824 - 
2025-02-05 00:01:02,932 - 
2025-02-05 00:01:02,932 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-326, started 35228)>, 1738684862.9325032)}
2025-02-05 00:01:03,039 - wait for lock, trx_id: 1, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:01:03,039 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-326, started 35228)>, 1738684862.9325032)}
2025-02-05 00:01:03,039 - 
2025-02-05 00:01:03,147 - 
2025-02-05 00:01:03,148 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-326, started 35228)>, 1738684862.9325032), 5: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-327, started 40264)>, 1738684863.1478183)}
2025-02-05 00:01:03,150 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:01:03,257 - stmt_idx: 4, status: success, result: None
2025-02-05 00:01:03,258 - 成功执行序列中事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:01:03,258 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:01:03,363 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:01:03,363 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:01:03,363 - 错误: dictionary changed size during iteration
2025-02-05 00:01:03,367 - 执行序列成功
2025-02-05 00:01:04,160 - is_atomic: True
2025-02-05 00:01:04,160 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:01:04,160 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 22.06, col_4 = 5, col_3 = 83.17, col_2 = 17, col_0 = 'OKyUh' WHERE id BETWEEN 1 AND 1"), (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 00:01:04,160 - snapshots: {'before': {'table_0': [(1, 'xsdru', 84.33, 19, 58.74, 84), (2, 'udjwx', 14.6, 91, 47.45, 83), (3, 'jahii', 20.51, 13, 21.97, 32), (4, 'kpluj', 91.1, 95, 36.33, 59), (5, 'yzkmj', 20.11, 35, 81.51, 2), (6, 'mpbyh', 47.17, 76, 96.69, 64), (7, 'grxpr', 58.26, 97, 11.91, 14), (8, 'qfanf', 19.32, 96, 43.75, 61), (9, 'dlqyd', 87.48, 9, 45.9, 66), (10, 'ucjeb', 45.57, 85, 11.43, 79)]}, 'trx1': {'table_0': [(1, 'OKyUh', 22.06, 17, 83.17, 5), (2, 'udjwx', 14.6, 91, 47.45, 83), (3, 'jahii', 20.51, 13, 21.97, 32), (4, 'kpluj', 91.1, 95, 36.33, 59), (5, 'yzkmj', 20.11, 35, 81.51, 2), (6, 'mpbyh', 47.17, 76, 96.69, 64), (7, 'grxpr', 58.26, 97, 11.91, 14), (8, 'qfanf', 19.32, 96, 43.75, 61), (9, 'dlqyd', 87.48, 9, 45.9, 66), (10, 'ucjeb', 45.57, 85, 11.43, 79)]}, 'trx2': {'table_0': [(1, 'xsdru', 84.33, 19, 58.74, 84), (2, 'udjwx', 14.6, 91, 47.45, 83), (3, 'jahii', 20.51, 13, 21.97, 32), (4, 'kpluj', 91.1, 95, 36.33, 59), (5, 'yzkmj', 20.11, 35, 81.51, 2), (6, 'mpbyh', 47.17, 76, 96.69, 64), (7, 'grxpr', 58.26, 97, 11.91, 14), (8, 'qfanf', 19.32, 96, 43.75, 61), (9, 'dlqyd', 87.48, 9, 45.9, 66), (10, 'ucjeb', 45.57, 85, 11.43, 79)]}, 'serial': {'table_0': [(1, 'OKyUh', 22.06, 17, 83.17, 5), (2, 'udjwx', 14.6, 91, 47.45, 83), (3, 'jahii', 20.51, 13, 21.97, 32), (4, 'kpluj', 91.1, 95, 36.33, 59), (5, 'yzkmj', 20.11, 35, 81.51, 2), (6, 'mpbyh', 47.17, 76, 96.69, 64), (7, 'grxpr', 58.26, 97, 11.91, 14), (8, 'qfanf', 19.32, 96, 43.75, 61), (9, 'dlqyd', 87.48, 9, 45.9, 66), (10, 'ucjeb', 45.57, 85, 11.43, 79)]}}
2025-02-05 00:01:04,160 - 
2025-02-05 00:01:04,171 - iter: 42
2025-02-05 00:01:05,684 - table table_0 has 6 rows
2025-02-05 00:01:05,684 - res_dict: {'trx1_lock_row_ids': [6], 'trx2_lock_row_ids': [1, 2, 3, 4, 5], 'intersection_row_ids': []}
2025-02-05 00:01:05,684 - lock_same_resource: False
2025-02-05 00:01:05,685 - 
2025-02-05 00:01:05,685 - non intersection phase1
2025-02-05 00:01:05,685 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:01:05,685 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:01:05,685 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 00:01:05,685 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 00:01:05,689 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:01:05,691 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:01:05,691 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 45, 64.41, 'tpOMz'", 'table': 'table_0'}
2025-02-05 00:01:05,694 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 00:01:05,695 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:05,695 - params: {'v1': '1', 'v2': '5', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:01:05,696 - non intersection phase1 end
2025-02-05 00:01:05,696 - 
2025-02-05 00:01:05,696 - non intersection phase2
2025-02-05 00:01:05,700 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 00:01:05,702 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:01:05,702 - params: {'v1': '2', 'set_expr': 'col_0 = 71', 'table': 'table_0', 'v2': '2'}
2025-02-05 00:01:05,705 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:01:05,707 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:01:05,707 - params: {'set_expr': "col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65", 'table': 'table_0', 'cond': "(col_2 = 'xllof') AND (col_1 = 76.16)"}
2025-02-05 00:01:05,707 - non intersection phase2 end
2025-02-05 00:01:05,707 - 
2025-02-05 00:01:05,707 - 生成死锁事务序列成功如下
2025-02-05 00:01:05,708 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 45, 64.41, 'tpOMz')"), (2, "UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)"), (1, 'UPDATE table_0 SET col_0 = 71 WHERE id BETWEEN 2 AND 2'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:01:07,273 - 创建事务1连接成功
2025-02-05 00:01:07,275 - 执行事务1语句: BEGIN
2025-02-05 00:01:07,276 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 45, 64.41, 'tpOMz')
2025-02-05 00:01:07,276 - 执行事务1语句: UPDATE table_0 SET col_0 = 71 WHERE id BETWEEN 2 AND 2
2025-02-05 00:01:07,280 - 执行事务1语句: COMMIT;
2025-02-05 00:01:07,285 - 执行事务1成功
2025-02-05 00:01:09,872 - 恢复初始状态成功
2025-02-05 00:01:10,662 - 创建事务2连接成功
2025-02-05 00:01:10,663 - 执行事务2语句: BEGIN
2025-02-05 00:01:10,664 - 执行事务2语句: SELECT * FROM table_0 WHERE id >= 1 AND id <= 5 FOR UPDATE
2025-02-05 00:01:10,665 - 执行事务2语句: UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)
2025-02-05 00:01:10,667 - 执行事务2语句: COMMIT;
2025-02-05 00:01:10,671 - 执行事务2成功
2025-02-05 00:01:15,587 - 
2025-02-05 00:01:15,587 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 5 FOR UPDATE', <Thread(Thread-328, started 41452)>, 1738684875.5875716)}
2025-02-05 00:01:15,697 - stmt_idx: 2, status: success, result: None
2025-02-05 00:01:15,698 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id >= 1 AND id <= 5 FOR UPDATE
2025-02-05 00:01:15,698 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:01:15,698 - 
2025-02-05 00:01:15,808 - 
2025-02-05 00:01:15,809 - 执行前idx: 4, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 45, 64.41, 'tpOMz')", <Thread(Thread-329, started 41024)>, 1738684875.8085964)}
2025-02-05 00:01:15,917 - stmt_idx: 3, status: success, result: None
2025-02-05 00:01:15,917 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 45, 64.41, 'tpOMz')
2025-02-05 00:01:15,917 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:01:15,917 - 
2025-02-05 00:01:16,025 - 
2025-02-05 00:01:16,025 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)", <Thread(Thread-330, started 41184)>, 1738684876.0245664)}
2025-02-05 00:01:16,131 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)
2025-02-05 00:01:16,132 - 执行后idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)", <Thread(Thread-330, started 41184)>, 1738684876.0245664)}
2025-02-05 00:01:16,132 - 
2025-02-05 00:01:16,241 - 
2025-02-05 00:01:16,242 - 执行前idx: 6, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)", <Thread(Thread-330, started 41184)>, 1738684876.0245664), 5: (1, 'UPDATE table_0 SET col_0 = 71 WHERE id BETWEEN 2 AND 2', <Thread(Thread-331, started 37696)>, 1738684876.24186)}
2025-02-05 00:01:16,245 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_0 = 71 WHERE id BETWEEN 2 AND 2
2025-02-05 00:01:16,352 - stmt_idx: 4, status: success, result: None
2025-02-05 00:01:16,352 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)
2025-02-05 00:01:16,352 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)
2025-02-05 00:01:16,464 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:01:16,464 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_0 = 71 WHERE id BETWEEN 2 AND 2
2025-02-05 00:01:16,464 - 错误: dictionary changed size during iteration
2025-02-05 00:01:16,469 - 执行序列成功
2025-02-05 00:01:17,249 - is_atomic: True
2025-02-05 00:01:17,249 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:01:17,249 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 45, 64.41, 'tpOMz')"), (2, "UPDATE table_0 SET col_2 = 'LqfXL', col_0 = 53, col_1 = 75.65 WHERE (col_2 = 'xllof') AND (col_1 = 76.16)"), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-05 00:01:17,249 - snapshots: {'before': {'table_0': [(1, 79, 93.73, 'ycfxy'), (2, 26, 8.34, 'qdkoj'), (3, 60, 29.71, 'inzxw'), (4, 29, 23.1, 'apbbc'), (5, 19, 43.4, 'ndwma'), (6, 84, 76.16, 'xllof')]}, 'trx1': {'table_0': [(1, 79, 93.73, 'ycfxy'), (2, 71, 8.34, 'qdkoj'), (3, 60, 29.71, 'inzxw'), (4, 29, 23.1, 'apbbc'), (5, 19, 43.4, 'ndwma'), (6, 84, 76.16, 'xllof'), (7, 45, 64.41, 'tpOMz')]}, 'trx2': {'table_0': [(1, 79, 93.73, 'ycfxy'), (2, 26, 8.34, 'qdkoj'), (3, 60, 29.71, 'inzxw'), (4, 29, 23.1, 'apbbc'), (5, 19, 43.4, 'ndwma'), (6, 53, 75.65, 'LqfXL')]}, 'serial': {'table_0': [(1, 79, 93.73, 'ycfxy'), (2, 26, 8.34, 'qdkoj'), (3, 60, 29.71, 'inzxw'), (4, 29, 23.1, 'apbbc'), (5, 19, 43.4, 'ndwma'), (6, 53, 75.65, 'LqfXL')]}}
2025-02-05 00:01:17,249 - 
2025-02-05 00:01:17,261 - iter: 43
2025-02-05 00:01:18,824 - table table_0 has 14 rows
2025-02-05 00:01:18,824 - res_dict: {'trx1_lock_row_ids': [4], 'trx2_lock_row_ids': [13, 14], 'intersection_row_ids': []}
2025-02-05 00:01:18,824 - lock_same_resource: False
2025-02-05 00:01:18,824 - 
2025-02-05 00:01:18,824 - non intersection phase1
2025-02-05 00:01:18,825 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:01:18,825 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:01:18,825 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:01:18,825 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:01:18,828 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 00:01:18,830 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:18,830 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_3'}
2025-02-05 00:01:18,833 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=13, is_continuous=True, range_end_idx=14
2025-02-05 00:01:18,834 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:18,834 - params: {'v1': '13', 'v2': '14', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:01:18,834 - non intersection phase1 end
2025-02-05 00:01:18,835 - 
2025-02-05 00:01:18,835 - non intersection phase2
2025-02-05 00:01:18,838 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=14, is_continuous=True, range_end_idx=14
2025-02-05 00:01:18,839 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:18,839 - params: {'v1': '14', 'v2': '14', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:01:18,843 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 00:01:18,845 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:18,845 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-05 00:01:18,845 - non intersection phase2 end
2025-02-05 00:01:18,845 - 
2025-02-05 00:01:18,845 - 生成死锁事务序列成功如下
2025-02-05 00:01:18,845 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id >= 13 AND id <= 14 FOR UPDATE'), (1, 'SELECT id, col_0, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:01:20,398 - 创建事务1连接成功
2025-02-05 00:01:20,400 - 执行事务1语句: BEGIN
2025-02-05 00:01:20,401 - 执行事务1语句: SELECT id, col_0, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:01:20,401 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE
2025-02-05 00:01:20,402 - 执行事务1语句: COMMIT;
2025-02-05 00:01:20,406 - 执行事务1成功
2025-02-05 00:01:23,069 - 恢复初始状态成功
2025-02-05 00:01:23,833 - 创建事务2连接成功
2025-02-05 00:01:23,834 - 执行事务2语句: BEGIN
2025-02-05 00:01:23,835 - 执行事务2语句: SELECT * FROM table_0 WHERE id >= 13 AND id <= 14 FOR UPDATE
2025-02-05 00:01:23,836 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:01:23,837 - 执行事务2语句: COMMIT;
2025-02-05 00:01:23,841 - 执行事务2成功
2025-02-05 00:01:28,718 - 
2025-02-05 00:01:28,719 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id >= 13 AND id <= 14 FOR UPDATE', <Thread(Thread-332, started 35428)>, 1738684888.7186186)}
2025-02-05 00:01:28,822 - stmt_idx: 2, status: success, result: None
2025-02-05 00:01:28,822 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id >= 13 AND id <= 14 FOR UPDATE
2025-02-05 00:01:28,822 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:01:28,822 - 
2025-02-05 00:01:28,932 - 
2025-02-05 00:01:28,933 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-333, started 39700)>, 1738684888.932171)}
2025-02-05 00:01:29,039 - stmt_idx: 3, status: success, result: None
2025-02-05 00:01:29,040 - 成功执行序列中事务1语句: SELECT id, col_0, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:01:29,040 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:01:29,040 - 
2025-02-05 00:01:29,147 - 
2025-02-05 00:01:29,148 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE', <Thread(Thread-334, started 40416)>, 1738684889.147627)}
2025-02-05 00:01:29,255 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE
2025-02-05 00:01:29,255 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE', <Thread(Thread-334, started 40416)>, 1738684889.147627)}
2025-02-05 00:01:29,255 - 
2025-02-05 00:01:29,364 - 
2025-02-05 00:01:29,365 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE', <Thread(Thread-334, started 40416)>, 1738684889.147627), 5: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-335, started 39568)>, 1738684889.3641248)}
2025-02-05 00:01:29,367 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE
2025-02-05 00:01:29,470 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:01:29,470 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT * FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE
2025-02-05 00:01:29,470 - 错误: dictionary changed size during iteration
2025-02-05 00:01:29,474 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-335, stopped 39568)>, 1738684889.3641248)}
2025-02-05 00:01:29,474 - 
2025-02-05 00:01:29,474 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-335, stopped 39568)>, 1738684889.3641248)}
2025-02-05 00:01:29,578 - stmt_idx: 5, status: success, result: None
2025-02-05 00:01:29,578 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:01:29,578 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:01:29,578 - 
2025-02-05 00:01:29,686 - 执行序列成功
2025-02-05 00:01:30,489 - is_atomic: True
2025-02-05 00:01:30,489 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:01:30,489 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id >= 13 AND id <= 14 FOR UPDATE'), (1, 'SELECT id, col_0, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE')]
2025-02-05 00:01:30,489 - snapshots: {'before': {'table_0': [(1, 'xsjft', 'wugli', 'vxpaw', 'cgbid'), (2, 'mblhj', 'clzgo', 'olnvc', 'bsddh'), (3, 'wuhhj', 'pefto', 'xojur', 'bbomw'), (4, 'lsucq', 'gpsvv', 'hsnbe', 'vacpn'), (5, 'xuntp', 'xlfza', 'yzrvx', 'dlohi'), (6, 'ffekn', 'cckaz', 'vxyhi', 'qvpnp'), (7, 'vjrww', 'uukrr', 'mokuu', 'elmhr'), (8, 'iofox', 'vdvjq', 'rkegs', 'kjdae'), (9, 'bexgx', 'zvaxr', 'mjrxe', 'dmeme'), (10, 'ojeeo', 'oxbae', 'jajib', 'gfqok'), (11, 'rupsj', 'keksf', 'gesqu', 'wmrah'), (12, 'wzayf', 'yjuwp', 'ynugb', 'dknxe'), (13, 'oojbw', 'tasck', 'vrljo', 'zeukl'), (14, 'aidtc', 'uguev', 'gjpva', 'zekrs')]}, 'trx1': {'table_0': [(1, 'xsjft', 'wugli', 'vxpaw', 'cgbid'), (2, 'mblhj', 'clzgo', 'olnvc', 'bsddh'), (3, 'wuhhj', 'pefto', 'xojur', 'bbomw'), (4, 'lsucq', 'gpsvv', 'hsnbe', 'vacpn'), (5, 'xuntp', 'xlfza', 'yzrvx', 'dlohi'), (6, 'ffekn', 'cckaz', 'vxyhi', 'qvpnp'), (7, 'vjrww', 'uukrr', 'mokuu', 'elmhr'), (8, 'iofox', 'vdvjq', 'rkegs', 'kjdae'), (9, 'bexgx', 'zvaxr', 'mjrxe', 'dmeme'), (10, 'ojeeo', 'oxbae', 'jajib', 'gfqok'), (11, 'rupsj', 'keksf', 'gesqu', 'wmrah'), (12, 'wzayf', 'yjuwp', 'ynugb', 'dknxe'), (13, 'oojbw', 'tasck', 'vrljo', 'zeukl'), (14, 'aidtc', 'uguev', 'gjpva', 'zekrs')]}, 'trx2': {'table_0': [(1, 'xsjft', 'wugli', 'vxpaw', 'cgbid'), (2, 'mblhj', 'clzgo', 'olnvc', 'bsddh'), (3, 'wuhhj', 'pefto', 'xojur', 'bbomw'), (4, 'lsucq', 'gpsvv', 'hsnbe', 'vacpn'), (5, 'xuntp', 'xlfza', 'yzrvx', 'dlohi'), (6, 'ffekn', 'cckaz', 'vxyhi', 'qvpnp'), (7, 'vjrww', 'uukrr', 'mokuu', 'elmhr'), (8, 'iofox', 'vdvjq', 'rkegs', 'kjdae'), (9, 'bexgx', 'zvaxr', 'mjrxe', 'dmeme'), (10, 'ojeeo', 'oxbae', 'jajib', 'gfqok'), (11, 'rupsj', 'keksf', 'gesqu', 'wmrah'), (12, 'wzayf', 'yjuwp', 'ynugb', 'dknxe'), (13, 'oojbw', 'tasck', 'vrljo', 'zeukl'), (14, 'aidtc', 'uguev', 'gjpva', 'zekrs')]}, 'serial': {'table_0': [(1, 'xsjft', 'wugli', 'vxpaw', 'cgbid'), (2, 'mblhj', 'clzgo', 'olnvc', 'bsddh'), (3, 'wuhhj', 'pefto', 'xojur', 'bbomw'), (4, 'lsucq', 'gpsvv', 'hsnbe', 'vacpn'), (5, 'xuntp', 'xlfza', 'yzrvx', 'dlohi'), (6, 'ffekn', 'cckaz', 'vxyhi', 'qvpnp'), (7, 'vjrww', 'uukrr', 'mokuu', 'elmhr'), (8, 'iofox', 'vdvjq', 'rkegs', 'kjdae'), (9, 'bexgx', 'zvaxr', 'mjrxe', 'dmeme'), (10, 'ojeeo', 'oxbae', 'jajib', 'gfqok'), (11, 'rupsj', 'keksf', 'gesqu', 'wmrah'), (12, 'wzayf', 'yjuwp', 'ynugb', 'dknxe'), (13, 'oojbw', 'tasck', 'vrljo', 'zeukl'), (14, 'aidtc', 'uguev', 'gjpva', 'zekrs')]}}
2025-02-05 00:01:30,489 - 
2025-02-05 00:01:30,500 - iter: 44
2025-02-05 00:01:31,980 - table table_0 has 5 rows
2025-02-05 00:01:31,980 - trx1_start_id: 3
2025-02-05 00:01:31,980 - trx1_end_id: 4
2025-02-05 00:01:31,980 - trx1_exclusive_start_id: 3
2025-02-05 00:01:31,980 - trx1_exclusive_end_id: 2
2025-02-05 00:01:31,980 - trx1_exclusive_ids: []
2025-02-05 00:01:31,980 - trx2_start_id: 3
2025-02-05 00:01:31,980 - trx2_end_id: 5
2025-02-05 00:01:31,980 - trx2_exclusive_start_id: 5
2025-02-05 00:01:31,980 - trx2_exclusive_end_id: 5
2025-02-05 00:01:31,980 - trx2_exclusive_ids: [5]
2025-02-05 00:01:31,980 - intersection_ids: [3, 4]
2025-02-05 00:01:31,980 - res_dict: {'trx1_lock_row_ids': [3, 4], 'trx2_lock_row_ids': [3, 4, 5], 'intersection_row_ids': [3, 4]}
2025-02-05 00:01:31,980 - lock_same_resource: True
2025-02-05 00:01:31,980 - 
2025-02-05 00:01:31,981 - intersection phase1
2025-02-05 00:01:31,983 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=True, range_end_idx=4
2025-02-05 00:01:31,985 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:31,985 - params: {'v1': '3', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_4'}
2025-02-05 00:01:31,987 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=True, range_end_idx=5
2025-02-05 00:01:31,988 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:31,988 - params: {'v1': '3', 'v2': '5', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:01:31,988 - intersection phase1 end
2025-02-05 00:01:31,988 - 
2025-02-05 00:01:31,988 - intersection phase2
2025-02-05 00:01:31,989 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:01:31,989 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:01:31,989 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:01:31,989 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:01:31,992 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=2
2025-02-05 00:01:31,993 - 生成连续锁定SQL失败: 找不到从3到2的行
2025-02-05 00:01:31,993 - 生成锁SQL失败: 找不到从3到2的行
2025-02-05 00:01:31,993 - 生成死锁事务序列失败: 找不到从3到2的行
2025-02-05 00:01:31,993 - 
2025-02-05 00:01:31,994 - Error in iteration 44: 找不到从3到2的行
2025-02-05 00:01:31,994 - 
2025-02-05 00:01:31,999 - iter: 45
2025-02-05 00:01:33,513 - table table_0 has 12 rows
2025-02-05 00:01:33,513 - trx1_lock_row_ids: [1, 3, 7, 8, 11, 12]
2025-02-05 00:01:33,513 - trx2_lock_row_ids: [1, 8, 11]
2025-02-05 00:01:33,513 - intersection_row_ids: [1, 8, 11]
2025-02-05 00:01:33,513 - trx1_exclusive_ids: [3, 7, 12]
2025-02-05 00:01:33,514 - trx2_exclusive_ids: []
2025-02-05 00:01:33,514 - res_dict: {'trx1_lock_row_ids': [1, 3, 7, 8, 11, 12], 'trx2_lock_row_ids': [1, 8, 11], 'intersection_row_ids': [1, 8, 11]}
2025-02-05 00:01:33,514 - lock_same_resource: True
2025-02-05 00:01:33,514 - 
2025-02-05 00:01:33,514 - intersection phase1
2025-02-05 00:01:33,517 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,518 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:33,519 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:01:33,522 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,523 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:01:33,523 - params: {'insert_cols': 'id, col_1, col_2, col_3, col_4', 'vals': "NULL, 'HBzOF', 'BylKH', 'nXpzQ', 87.53", 'table': 'table_0'}
2025-02-05 00:01:33,527 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,528 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:01:33,528 - params: {'insert_cols': 'id, col_1, col_2, col_3, col_4', 'vals': "NULL, 'kFlxv', 'gsfoN', 'NSFQs', 88.22", 'table': 'table_0'}
2025-02-05 00:01:33,531 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,532 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:33,532 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:01:33,536 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,537 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:01:33,537 - params: {'set_expr': 'col_4 = 79.52', 'table': 'table_0', 'cond': "(col_4 = 66.36) AND (col_3 = 'jaopt')"}
2025-02-05 00:01:33,540 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,541 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:01:33,542 - params: {'insert_cols': 'id, col_1, col_2, col_3, col_4', 'vals': "NULL, 'ABZAF', 'NtjUr', 'uqqTa', 47.92", 'table': 'table_0'}
2025-02-05 00:01:33,542 - intersection phase1 end
2025-02-05 00:01:33,542 - 
2025-02-05 00:01:33,542 - intersection phase2
2025-02-05 00:01:33,543 - 事务1在第二阶段自己加的锁: S
2025-02-05 00:01:33,543 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:01:33,543 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:01:33,543 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 00:01:33,547 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,548 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:33,549 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3, col_4'}
2025-02-05 00:01:33,552 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,553 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:01:33,553 - params: {'cond': "(col_3 = 'jqdlh')", 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-05 00:01:33,556 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,558 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:33,558 - params: {'v1': '12', 'v2': '12', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-05 00:01:33,558 - intersection phase2 end
2025-02-05 00:01:33,558 - 
2025-02-05 00:01:33,558 - intersection phase3
2025-02-05 00:01:33,561 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:01:33,563 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:33,563 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-05 00:01:33,564 - intersection phase3 end
2025-02-05 00:01:33,564 - 
2025-02-05 00:01:33,564 - 生成死锁事务序列成功如下
2025-02-05 00:01:33,564 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (2, "UPDATE table_0 SET col_4 = 79.52 WHERE (col_4 = 66.36) AND (col_3 = 'jaopt')"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'ABZAF', 'NtjUr', 'uqqTa', 47.92)"), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'HBzOF', 'BylKH', 'nXpzQ', 87.53)"), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)"), (1, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_3 = 'jqdlh') LOCK IN SHARE MODE"), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, 'SELECT id, col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (2, None), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:01:35,137 - 创建事务1连接成功
2025-02-05 00:01:35,139 - 执行事务1语句: BEGIN
2025-02-05 00:01:35,140 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:01:35,141 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'HBzOF', 'BylKH', 'nXpzQ', 87.53)
2025-02-05 00:01:35,142 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)
2025-02-05 00:01:35,143 - 执行事务1语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:01:35,143 - 执行事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE (col_3 = 'jqdlh') LOCK IN SHARE MODE
2025-02-05 00:01:35,144 - 执行事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 00:01:35,145 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:01:35,147 - 执行事务1语句: COMMIT;
2025-02-05 00:01:35,152 - 执行事务1成功
2025-02-05 00:01:37,731 - 恢复初始状态成功
2025-02-05 00:01:38,487 - 创建事务2连接成功
2025-02-05 00:01:38,489 - 执行事务2语句: BEGIN
2025-02-05 00:01:38,490 - 执行事务2语句: SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:01:38,490 - 执行事务2语句: UPDATE table_0 SET col_4 = 79.52 WHERE (col_4 = 66.36) AND (col_3 = 'jaopt')
2025-02-05 00:01:38,491 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'ABZAF', 'NtjUr', 'uqqTa', 47.92)
2025-02-05 00:01:38,493 - 执行事务2语句: COMMIT;
2025-02-05 00:01:38,498 - 执行事务2成功
2025-02-05 00:01:43,411 - 
2025-02-05 00:01:43,411 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-336, started 40664)>, 1738684903.4112108)}
2025-02-05 00:01:43,517 - stmt_idx: 2, status: success, result: None
2025-02-05 00:01:43,517 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:01:43,517 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:01:43,517 - 
2025-02-05 00:01:43,625 - 
2025-02-05 00:01:43,625 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_4 = 79.52 WHERE (col_4 = 66.36) AND (col_3 = 'jaopt')", <Thread(Thread-337, started 38308)>, 1738684903.625031)}
2025-02-05 00:01:43,734 - stmt_idx: 3, status: success, result: None
2025-02-05 00:01:43,734 - 成功执行序列中事务2语句: UPDATE table_0 SET col_4 = 79.52 WHERE (col_4 = 66.36) AND (col_3 = 'jaopt')
2025-02-05 00:01:43,734 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:01:43,734 - 
2025-02-05 00:01:43,845 - 
2025-02-05 00:01:43,845 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-338, started 14256)>, 1738684903.8440716)}
2025-02-05 00:01:43,953 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:01:43,953 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-338, started 14256)>, 1738684903.8440716)}
2025-02-05 00:01:43,954 - 
2025-02-05 00:01:44,062 - 
2025-02-05 00:01:44,063 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-338, started 14256)>, 1738684903.8440716), 5: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'ABZAF', 'NtjUr', 'uqqTa', 47.92)", <Thread(Thread-339, started 31676)>, 1738684904.0629997)}
2025-02-05 00:01:44,170 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:01:44,278 - stmt_idx: 5, status: success, result: None
2025-02-05 00:01:44,278 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'ABZAF', 'NtjUr', 'uqqTa', 47.92)
2025-02-05 00:01:44,278 - 执行后idx: 6, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-338, started 14256)>, 1738684903.8440716)}
2025-02-05 00:01:44,278 - 
2025-02-05 00:01:44,386 - stmt为None, trx_id: 2, stmt: None
2025-02-05 00:01:44,390 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-338, started 14256)>, 1738684903.8440716)}
2025-02-05 00:01:44,390 - 
2025-02-05 00:01:44,390 - 执行前idx: 15, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-338, started 14256)>, 1738684903.8440716)}
2025-02-05 00:01:44,492 - stmt_idx: 4, status: success, result: None
2025-02-05 00:01:44,492 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:01:44,492 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:01:44,494 - 执行后idx: 15, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'HBzOF', 'BylKH', 'nXpzQ', 87.53)", <Thread(Thread-340, started 39920)>, 1738684904.4932365), 7: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)", <Thread(Thread-341, started 37816)>, 1738684904.4937844), 8: (1, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-342, started 4028)>, 1738684904.4937844), 9: (1, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_3 = 'jqdlh') LOCK IN SHARE MODE", <Thread(Thread-343, started 30456)>, 1738684904.49429), 10: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-344, started 30200)>, 1738684904.49429), 11: (1, 'SELECT id, col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-345, started 40596)>, 1738684904.49429), 13: (1, 'COMMIT', <Thread(Thread-346, started 35068)>, 1738684904.4947822)}
2025-02-05 00:01:44,494 - 
2025-02-05 00:01:44,601 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'HBzOF', 'BylKH', 'nXpzQ', 87.53)", <Thread(Thread-340, stopped 39920)>, 1738684904.4932365), 7: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)", <Thread(Thread-341, stopped 37816)>, 1738684904.4937844), 8: (1, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-342, stopped 4028)>, 1738684904.4937844), 9: (1, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_3 = 'jqdlh') LOCK IN SHARE MODE", <Thread(Thread-343, stopped 30456)>, 1738684904.49429), 10: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-344, stopped 30200)>, 1738684904.49429), 11: (1, 'SELECT id, col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-345, stopped 40596)>, 1738684904.49429), 13: (1, 'COMMIT', <Thread(Thread-346, stopped 35068)>, 1738684904.4947822)}
2025-02-05 00:01:44,601 - 
2025-02-05 00:01:44,601 - 执行前idx: 15, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'HBzOF', 'BylKH', 'nXpzQ', 87.53)", <Thread(Thread-340, stopped 39920)>, 1738684904.4932365), 7: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)", <Thread(Thread-341, stopped 37816)>, 1738684904.4937844), 8: (1, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-342, stopped 4028)>, 1738684904.4937844), 9: (1, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_3 = 'jqdlh') LOCK IN SHARE MODE", <Thread(Thread-343, stopped 30456)>, 1738684904.49429), 10: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-344, stopped 30200)>, 1738684904.49429), 11: (1, 'SELECT id, col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-345, stopped 40596)>, 1738684904.49429), 13: (1, 'COMMIT', <Thread(Thread-346, stopped 35068)>, 1738684904.4947822)}
2025-02-05 00:01:44,710 - stmt_idx: 6, status: success, result: None
2025-02-05 00:01:44,710 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'HBzOF', 'BylKH', 'nXpzQ', 87.53)
2025-02-05 00:01:44,818 - stmt_idx: 7, status: success, result: None
2025-02-05 00:01:44,818 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)
2025-02-05 00:01:44,924 - stmt_idx: 8, status: success, result: None
2025-02-05 00:01:44,925 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:01:45,033 - stmt_idx: 9, status: success, result: None
2025-02-05 00:01:45,033 - 成功执行序列中事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE (col_3 = 'jqdlh') LOCK IN SHARE MODE
2025-02-05 00:01:45,139 - stmt_idx: 10, status: success, result: None
2025-02-05 00:01:45,139 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 00:01:45,246 - stmt_idx: 11, status: success, result: None
2025-02-05 00:01:45,246 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:01:45,354 - stmt_idx: 13, status: success, result: None
2025-02-05 00:01:45,354 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:01:45,354 - 执行后idx: 15, pending_stmts: {}
2025-02-05 00:01:45,354 - 
2025-02-05 00:01:45,462 - 执行序列成功
2025-02-05 00:01:46,245 - is_atomic: True
2025-02-05 00:01:46,245 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:01:46,245 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (2, "UPDATE table_0 SET col_4 = 79.52 WHERE (col_4 = 66.36) AND (col_3 = 'jaopt')"), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'ABZAF', 'NtjUr', 'uqqTa', 47.92)"), (2, 'COMMIT'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'HBzOF', 'BylKH', 'nXpzQ', 87.53)"), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)"), (1, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, "SELECT id, col_1, col_2 FROM table_0 WHERE (col_3 = 'jqdlh') LOCK IN SHARE MODE"), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, 'SELECT id, col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 00:01:46,245 - snapshots: {'before': {'table_0': [(1, 'hhuxu', 'rjegt', 'rfnbg', 86.35), (2, 'rulhq', 'snowm', 'uuipi', 78.56), (3, 'wszrg', 'mmjzj', 'vcruz', 65.14), (4, 'mdgue', 'rxxwg', 'ynsgb', 48.8), (5, 'rycmi', 'mozhi', 'uhcie', 9.1), (6, 'jvrhf', 'fsapr', 'ncsyo', 40.72), (7, 'srpyf', 'tnpyi', 'jqdlh', 26.53), (8, 'rcotz', 'opxij', 'jaopt', 66.36), (9, 'wqgdi', 'tttxy', 'metpt', 88.33), (10, 'loevc', 'sunan', 'bdmvg', 67.66), (11, 'qurgb', 'rzbns', 'slluu', 36.88), (12, 'enuds', 'cxaqu', 'immik', 9.07)]}, 'trx1': {'table_0': [(1, 'hhuxu', 'rjegt', 'rfnbg', 86.35), (2, 'rulhq', 'snowm', 'uuipi', 78.56), (3, 'wszrg', 'mmjzj', 'vcruz', 65.14), (4, 'mdgue', 'rxxwg', 'ynsgb', 48.8), (5, 'rycmi', 'mozhi', 'uhcie', 9.1), (6, 'jvrhf', 'fsapr', 'ncsyo', 40.72), (7, 'srpyf', 'tnpyi', 'jqdlh', 26.53), (8, 'rcotz', 'opxij', 'jaopt', 66.36), (9, 'wqgdi', 'tttxy', 'metpt', 88.33), (10, 'loevc', 'sunan', 'bdmvg', 67.66), (11, 'qurgb', 'rzbns', 'slluu', 36.88), (12, 'enuds', 'cxaqu', 'immik', 9.07), (13, 'HBzOF', 'BylKH', 'nXpzQ', 87.53), (14, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)]}, 'trx2': {'table_0': [(1, 'hhuxu', 'rjegt', 'rfnbg', 86.35), (2, 'rulhq', 'snowm', 'uuipi', 78.56), (3, 'wszrg', 'mmjzj', 'vcruz', 65.14), (4, 'mdgue', 'rxxwg', 'ynsgb', 48.8), (5, 'rycmi', 'mozhi', 'uhcie', 9.1), (6, 'jvrhf', 'fsapr', 'ncsyo', 40.72), (7, 'srpyf', 'tnpyi', 'jqdlh', 26.53), (8, 'rcotz', 'opxij', 'jaopt', 66.36), (9, 'wqgdi', 'tttxy', 'metpt', 88.33), (10, 'loevc', 'sunan', 'bdmvg', 67.66), (11, 'qurgb', 'rzbns', 'slluu', 36.88), (12, 'enuds', 'cxaqu', 'immik', 9.07), (15, 'ABZAF', 'NtjUr', 'uqqTa', 47.92)]}, 'serial': {'table_0': [(1, 'hhuxu', 'rjegt', 'rfnbg', 86.35), (2, 'rulhq', 'snowm', 'uuipi', 78.56), (3, 'wszrg', 'mmjzj', 'vcruz', 65.14), (4, 'mdgue', 'rxxwg', 'ynsgb', 48.8), (5, 'rycmi', 'mozhi', 'uhcie', 9.1), (6, 'jvrhf', 'fsapr', 'ncsyo', 40.72), (7, 'srpyf', 'tnpyi', 'jqdlh', 26.53), (8, 'rcotz', 'opxij', 'jaopt', 66.36), (9, 'wqgdi', 'tttxy', 'metpt', 88.33), (10, 'loevc', 'sunan', 'bdmvg', 67.66), (11, 'qurgb', 'rzbns', 'slluu', 36.88), (12, 'enuds', 'cxaqu', 'immik', 9.07), (16, 'ABZAF', 'NtjUr', 'uqqTa', 47.92), (17, 'HBzOF', 'BylKH', 'nXpzQ', 87.53), (18, 'kFlxv', 'gsfoN', 'NSFQs', 88.22)]}}
2025-02-05 00:01:46,245 - 
2025-02-05 00:01:46,255 - iter: 46
2025-02-05 00:01:47,742 - table table_0 has 12 rows
2025-02-05 00:01:47,742 - trx1_lock_row_ids: [1, 6]
2025-02-05 00:01:47,742 - trx2_lock_row_ids: [5, 6]
2025-02-05 00:01:47,742 - intersection_row_ids: [6]
2025-02-05 00:01:47,742 - trx1_exclusive_ids: [1]
2025-02-05 00:01:47,742 - trx2_exclusive_ids: [5]
2025-02-05 00:01:47,742 - res_dict: {'trx1_lock_row_ids': [1, 6], 'trx2_lock_row_ids': [5, 6], 'intersection_row_ids': [6]}
2025-02-05 00:01:47,742 - lock_same_resource: True
2025-02-05 00:01:47,742 - 
2025-02-05 00:01:47,742 - intersection phase1
2025-02-05 00:01:47,745 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-05 00:01:47,746 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:47,746 - params: {'v1': '5', 'v2': '6', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:01:47,748 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:01:47,749 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:01:47,749 - params: {'insert_cols': 'id, col_0', 'vals': "NULL, 'ALdFs'", 'table': 'table_0'}
2025-02-05 00:01:47,750 - intersection phase1 end
2025-02-05 00:01:47,750 - 
2025-02-05 00:01:47,750 - intersection phase2
2025-02-05 00:01:47,750 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:01:47,750 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:01:47,750 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:01:47,750 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 00:01:47,754 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:01:47,756 - needed_params: {'cond', 'table'}
2025-02-05 00:01:47,756 - params: {'cond': "(col_0 = 'ftemx')", 'table': 'table_0'}
2025-02-05 00:01:47,759 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:01:47,760 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:47,760 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:01:47,761 - intersection phase2 end
2025-02-05 00:01:47,761 - 
2025-02-05 00:01:47,761 - intersection phase3
2025-02-05 00:01:47,764 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:01:47,765 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:01:47,765 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:01:47,765 - intersection phase3 end
2025-02-05 00:01:47,765 - 
2025-02-05 00:01:47,765 - 生成死锁事务序列成功如下
2025-02-05 00:01:47,765 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0) VALUES (NULL, 'ALdFs')"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (col_0 = 'ftemx')"), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (2, None), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:01:49,329 - 创建事务1连接成功
2025-02-05 00:01:49,330 - 执行事务1语句: BEGIN
2025-02-05 00:01:49,331 - 执行事务1语句: INSERT INTO table_0 (id, col_0) VALUES (NULL, 'ALdFs')
2025-02-05 00:01:49,332 - 执行事务1语句: DELETE FROM table_0 WHERE (col_0 = 'ftemx')
2025-02-05 00:01:49,333 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:01:49,335 - 执行事务1语句: COMMIT;
2025-02-05 00:01:49,339 - 执行事务1成功
2025-02-05 00:01:51,934 - 恢复初始状态成功
2025-02-05 00:01:52,704 - 创建事务2连接成功
2025-02-05 00:01:52,706 - 执行事务2语句: BEGIN
2025-02-05 00:01:52,707 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-05 00:01:52,707 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:01:52,708 - 执行事务2语句: COMMIT;
2025-02-05 00:01:52,712 - 执行事务2成功
2025-02-05 00:01:57,662 - 
2025-02-05 00:01:57,662 - 执行前idx: 3, pending_stmts: {2: (1, "INSERT INTO table_0 (id, col_0) VALUES (NULL, 'ALdFs')", <Thread(Thread-347, started 33528)>, 1738684917.6624417)}
2025-02-05 00:01:57,767 - stmt_idx: 2, status: success, result: None
2025-02-05 00:01:57,767 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0) VALUES (NULL, 'ALdFs')
2025-02-05 00:01:57,767 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:01:57,767 - 
2025-02-05 00:01:57,877 - 
2025-02-05 00:01:57,878 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE', <Thread(Thread-348, started 14880)>, 1738684917.8774817)}
2025-02-05 00:01:57,983 - stmt_idx: 3, status: success, result: None
2025-02-05 00:01:57,983 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-05 00:01:57,983 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:01:57,983 - 
2025-02-05 00:01:58,092 - 
2025-02-05 00:01:58,092 - 执行前idx: 5, pending_stmts: {4: (1, "DELETE FROM table_0 WHERE (col_0 = 'ftemx')", <Thread(Thread-349, started 30208)>, 1738684918.0920055)}
2025-02-05 00:01:58,199 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 'ftemx')
2025-02-05 00:01:58,199 - 执行后idx: 5, pending_stmts: {4: (1, "DELETE FROM table_0 WHERE (col_0 = 'ftemx')", <Thread(Thread-349, started 30208)>, 1738684918.0920055)}
2025-02-05 00:01:58,199 - 
2025-02-05 00:01:58,304 - 
2025-02-05 00:01:58,305 - 执行前idx: 6, pending_stmts: {4: (1, "DELETE FROM table_0 WHERE (col_0 = 'ftemx')", <Thread(Thread-349, started 30208)>, 1738684918.0920055), 5: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-350, started 8436)>, 1738684918.3045778)}
2025-02-05 00:01:58,413 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 'ftemx')
2025-02-05 00:01:58,522 - stmt_idx: 5, status: success, result: None
2025-02-05 00:01:58,522 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:01:58,522 - 执行后idx: 6, pending_stmts: {4: (1, "DELETE FROM table_0 WHERE (col_0 = 'ftemx')", <Thread(Thread-349, started 30208)>, 1738684918.0920055)}
2025-02-05 00:01:58,522 - 
2025-02-05 00:01:58,630 - stmt为None, trx_id: 2, stmt: None
2025-02-05 00:01:58,633 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "DELETE FROM table_0 WHERE (col_0 = 'ftemx')", <Thread(Thread-349, started 30208)>, 1738684918.0920055)}
2025-02-05 00:01:58,633 - 
2025-02-05 00:01:58,633 - 执行前idx: 10, pending_stmts: {4: (1, "DELETE FROM table_0 WHERE (col_0 = 'ftemx')", <Thread(Thread-349, stopped 30208)>, 1738684918.0920055)}
2025-02-05 00:01:58,738 - stmt_idx: 4, status: success, result: None
2025-02-05 00:01:58,738 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_0 = 'ftemx')
2025-02-05 00:01:58,738 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 'ftemx')
2025-02-05 00:01:58,739 - 执行后idx: 10, pending_stmts: {6: (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-351, started 35880)>, 1738684918.7390752), 8: (1, 'COMMIT', <Thread(Thread-352, started 1560)>, 1738684918.7393768)}
2025-02-05 00:01:58,739 - 
2025-02-05 00:01:58,846 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-351, stopped 35880)>, 1738684918.7390752), 8: (1, 'COMMIT', <Thread(Thread-352, stopped 1560)>, 1738684918.7393768)}
2025-02-05 00:01:58,846 - 
2025-02-05 00:01:58,846 - 执行前idx: 10, pending_stmts: {6: (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-351, stopped 35880)>, 1738684918.7390752), 8: (1, 'COMMIT', <Thread(Thread-352, stopped 1560)>, 1738684918.7393768)}
2025-02-05 00:01:58,955 - stmt_idx: 6, status: success, result: None
2025-02-05 00:01:58,955 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:01:59,065 - stmt_idx: 8, status: success, result: None
2025-02-05 00:01:59,065 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:01:59,065 - 执行后idx: 10, pending_stmts: {}
2025-02-05 00:01:59,065 - 
2025-02-05 00:01:59,173 - 执行序列成功
2025-02-05 00:01:59,943 - is_atomic: True
2025-02-05 00:01:59,943 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:01:59,943 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0) VALUES (NULL, 'ALdFs')"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'COMMIT'), (1, "DELETE FROM table_0 WHERE (col_0 = 'ftemx')"), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 00:01:59,943 - snapshots: {'before': {'table_0': [(1, 'ftemx'), (2, 'dgzaw'), (3, 'aopha'), (4, 'ycmwr'), (5, 'peiba'), (6, 'eypna'), (7, 'jgwmv'), (8, 'tzryg'), (9, 'ilnmb'), (10, 'xmqok'), (11, 'sgwlq'), (12, 'ouxsm')]}, 'trx1': {'table_0': [(2, 'dgzaw'), (3, 'aopha'), (4, 'ycmwr'), (5, 'peiba'), (6, 'eypna'), (7, 'jgwmv'), (8, 'tzryg'), (9, 'ilnmb'), (10, 'xmqok'), (11, 'sgwlq'), (12, 'ouxsm'), (13, 'ALdFs')]}, 'trx2': {'table_0': [(1, 'ftemx'), (2, 'dgzaw'), (3, 'aopha'), (4, 'ycmwr'), (5, 'peiba'), (6, 'eypna'), (7, 'jgwmv'), (8, 'tzryg'), (9, 'ilnmb'), (10, 'xmqok'), (11, 'sgwlq'), (12, 'ouxsm')]}, 'serial': {'table_0': [(2, 'dgzaw'), (3, 'aopha'), (4, 'ycmwr'), (5, 'peiba'), (6, 'eypna'), (7, 'jgwmv'), (8, 'tzryg'), (9, 'ilnmb'), (10, 'xmqok'), (11, 'sgwlq'), (12, 'ouxsm'), (14, 'ALdFs')]}}
2025-02-05 00:01:59,943 - 
2025-02-05 00:01:59,955 - iter: 47
2025-02-05 00:02:01,503 - table table_0 has 14 rows
2025-02-05 00:02:01,503 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 6, 7, 14], 'trx2_lock_row_ids': [5, 9, 10, 11, 13], 'intersection_row_ids': []}
2025-02-05 00:02:01,503 - lock_same_resource: False
2025-02-05 00:02:01,503 - 
2025-02-05 00:02:01,503 - non intersection phase1
2025-02-05 00:02:01,504 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:02:01,504 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:02:01,504 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:02:01,504 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:02:01,507 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,508 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:01,508 - params: {'set_expr': "col_716 = 59, col_1 = 'AJdGQ'", 'table': 'table_0', 'cond': '(id = 1)'}
2025-02-05 00:02:01,510 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,511 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:01,511 - params: {'set_expr': "col_716 = 81, col_1 = 'UqALE', col_0 = 18.56", 'table': 'table_0', 'cond': "(col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)"}
2025-02-05 00:02:01,514 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,515 - needed_params: {'cond', 'table'}
2025-02-05 00:02:01,515 - params: {'cond': "(id = 3) AND (col_716 IS NULL) AND (col_2 = 'gwawe')", 'table': 'table_0'}
2025-02-05 00:02:01,518 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,520 - needed_params: {'cond', 'table'}
2025-02-05 00:02:01,520 - params: {'cond': '(id = 4)', 'table': 'table_0'}
2025-02-05 00:02:01,523 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,524 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:02:01,524 - params: {'cond': "(col_2 = 'xarjy') AND (col_0 = 96.65) AND (col_1 = 'ubiha')", 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3'}
2025-02-05 00:02:01,528 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,529 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:01,529 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:02:01,533 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,534 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:02:01,534 - params: {'cond': "(col_3 = 'lqitd') AND (col_2 = 'dcspc') AND (col_0 = 30.57)", 'table': 'table_0', 'select_cols': 'col_0, col_1, col_3, col_716'}
2025-02-05 00:02:01,538 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,539 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:02:01,539 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_716', 'vals': "NULL, 41.71, 'pzWNt', 'Ghoxg', 'MHEEv', 60", 'table': 'table_0'}
2025-02-05 00:02:01,543 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,544 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:01,544 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_3, col_716'}
2025-02-05 00:02:01,547 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,548 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:01,548 - params: {'set_expr': "col_1 = 'iLEDB'", 'table': 'table_0', 'cond': '(id = 10)'}
2025-02-05 00:02:01,552 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,554 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:01,554 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:02:01,556 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,558 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:02:01,558 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_716', 'vals': "NULL, 14.79, 'xoNHW', 'tIPbb', 'vqlof', 33", 'table': 'table_0'}
2025-02-05 00:02:01,558 - non intersection phase1 end
2025-02-05 00:02:01,558 - 
2025-02-05 00:02:01,558 - non intersection phase2
2025-02-05 00:02:01,563 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,564 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:01,564 - params: {'set_expr': 'col_716 = 7', 'table': 'table_0', 'cond': '(id = 5)'}
2025-02-05 00:02:01,567 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:02:01,569 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:01,569 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:02:01,569 - non intersection phase2 end
2025-02-05 00:02:01,569 - 
2025-02-05 00:02:01,569 - 生成死锁事务序列成功如下
2025-02-05 00:02:01,569 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 41.71, 'pzWNt', 'Ghoxg', 'MHEEv', 60)"), (2, 'SELECT id, col_0, col_1, col_3, col_716 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE'), (2, "UPDATE table_0 SET col_1 = 'iLEDB' WHERE (id = 10)"), (1, "UPDATE table_0 SET col_716 = 59, col_1 = 'AJdGQ' WHERE (id = 1)"), (2, 'SELECT * FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 14.79, 'xoNHW', 'tIPbb', 'vqlof', 33)"), (1, "UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)"), (1, "DELETE FROM table_0 WHERE (id = 3) AND (col_716 IS NULL) AND (col_2 = 'gwawe')"), (1, 'DELETE FROM table_0 WHERE (id = 4)'), (1, "SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 'xarjy') AND (col_0 = 96.65) AND (col_1 = 'ubiha') FOR UPDATE"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "SELECT col_0, col_1, col_3, col_716 FROM table_0 WHERE (col_3 = 'lqitd') AND (col_2 = 'dcspc') AND (col_0 = 30.57) FOR UPDATE"), (1, 'UPDATE table_0 SET col_716 = 7 WHERE (id = 5)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:02:03,126 - 创建事务1连接成功
2025-02-05 00:02:03,128 - 执行事务1语句: BEGIN
2025-02-05 00:02:03,129 - 执行事务1语句: UPDATE table_0 SET col_716 = 59, col_1 = 'AJdGQ' WHERE (id = 1)
2025-02-05 00:02:03,129 - 执行事务1语句: UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)
2025-02-05 00:02:03,130 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 3) AND (col_716 IS NULL) AND (col_2 = 'gwawe')
2025-02-05 00:02:03,131 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 4)
2025-02-05 00:02:03,132 - 执行事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 'xarjy') AND (col_0 = 96.65) AND (col_1 = 'ubiha') FOR UPDATE
2025-02-05 00:02:03,133 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:02:03,133 - 执行事务1语句: SELECT col_0, col_1, col_3, col_716 FROM table_0 WHERE (col_3 = 'lqitd') AND (col_2 = 'dcspc') AND (col_0 = 30.57) FOR UPDATE
2025-02-05 00:02:03,134 - 执行事务1语句: UPDATE table_0 SET col_716 = 7 WHERE (id = 5)
2025-02-05 00:02:03,137 - 执行事务1语句: COMMIT;
2025-02-05 00:02:03,141 - 执行事务1成功
2025-02-05 00:02:05,738 - 恢复初始状态成功
2025-02-05 00:02:06,512 - 创建事务2连接成功
2025-02-05 00:02:06,514 - 执行事务2语句: BEGIN
2025-02-05 00:02:06,514 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 41.71, 'pzWNt', 'Ghoxg', 'MHEEv', 60)
2025-02-05 00:02:06,516 - 执行事务2语句: SELECT id, col_0, col_1, col_3, col_716 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE
2025-02-05 00:02:06,516 - 执行事务2语句: UPDATE table_0 SET col_1 = 'iLEDB' WHERE (id = 10)
2025-02-05 00:02:06,517 - 执行事务2语句: SELECT * FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE
2025-02-05 00:02:06,518 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 14.79, 'xoNHW', 'tIPbb', 'vqlof', 33)
2025-02-05 00:02:06,518 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:02:06,521 - 执行事务2语句: COMMIT;
2025-02-05 00:02:06,525 - 执行事务2成功
2025-02-05 00:02:11,408 - 
2025-02-05 00:02:11,408 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 41.71, 'pzWNt', 'Ghoxg', 'MHEEv', 60)", <Thread(Thread-353, started 41856)>, 1738684931.4082372)}
2025-02-05 00:02:11,518 - stmt_idx: 2, status: success, result: None
2025-02-05 00:02:11,518 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 41.71, 'pzWNt', 'Ghoxg', 'MHEEv', 60)
2025-02-05 00:02:11,518 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:02:11,518 - 
2025-02-05 00:02:11,628 - 
2025-02-05 00:02:11,628 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_3, col_716 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE', <Thread(Thread-354, started 37664)>, 1738684931.6286802)}
2025-02-05 00:02:11,735 - stmt_idx: 3, status: success, result: None
2025-02-05 00:02:11,735 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_3, col_716 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE
2025-02-05 00:02:11,735 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:02:11,735 - 
2025-02-05 00:02:11,843 - 
2025-02-05 00:02:11,844 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'iLEDB' WHERE (id = 10)", <Thread(Thread-355, started 15924)>, 1738684931.8431187)}
2025-02-05 00:02:11,949 - stmt_idx: 4, status: success, result: None
2025-02-05 00:02:11,949 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'iLEDB' WHERE (id = 10)
2025-02-05 00:02:11,949 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:02:11,949 - 
2025-02-05 00:02:12,059 - 
2025-02-05 00:02:12,059 - 执行前idx: 6, pending_stmts: {5: (1, "UPDATE table_0 SET col_716 = 59, col_1 = 'AJdGQ' WHERE (id = 1)", <Thread(Thread-356, started 13900)>, 1738684932.0593207)}
2025-02-05 00:02:12,167 - stmt_idx: 5, status: success, result: None
2025-02-05 00:02:12,167 - 成功执行序列中事务1语句: UPDATE table_0 SET col_716 = 59, col_1 = 'AJdGQ' WHERE (id = 1)
2025-02-05 00:02:12,167 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:02:12,167 - 
2025-02-05 00:02:12,276 - 
2025-02-05 00:02:12,277 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE', <Thread(Thread-357, started 39496)>, 1738684932.2765353)}
2025-02-05 00:02:12,384 - stmt_idx: 6, status: success, result: None
2025-02-05 00:02:12,384 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE
2025-02-05 00:02:12,385 - 执行后idx: 7, pending_stmts: {}
2025-02-05 00:02:12,385 - 
2025-02-05 00:02:12,494 - 
2025-02-05 00:02:12,495 - 执行前idx: 8, pending_stmts: {7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 14.79, 'xoNHW', 'tIPbb', 'vqlof', 33)", <Thread(Thread-358, started 35152)>, 1738684932.4945464)}
2025-02-05 00:02:12,602 - stmt_idx: 7, status: success, result: None
2025-02-05 00:02:12,602 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 14.79, 'xoNHW', 'tIPbb', 'vqlof', 33)
2025-02-05 00:02:12,602 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:02:12,602 - 
2025-02-05 00:02:12,712 - 
2025-02-05 00:02:12,713 - 执行前idx: 9, pending_stmts: {8: (1, "UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)", <Thread(Thread-359, started 37620)>, 1738684932.7125146)}
2025-02-05 00:02:12,820 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)
2025-02-05 00:02:12,820 - 执行后idx: 9, pending_stmts: {8: (1, "UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)", <Thread(Thread-359, started 37620)>, 1738684932.7125146)}
2025-02-05 00:02:12,820 - 
2025-02-05 00:02:12,930 - 
2025-02-05 00:02:12,931 - 执行前idx: 16, pending_stmts: {8: (1, "UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)", <Thread(Thread-359, started 37620)>, 1738684932.7125146), 15: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-360, started 31948)>, 1738684932.9303226)}
2025-02-05 00:02:12,934 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:02:13,036 - stmt_idx: 8, status: success, result: None
2025-02-05 00:02:13,036 - 成功执行序列中事务1语句: UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)
2025-02-05 00:02:13,036 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)
2025-02-05 00:02:13,144 - stmt_idx: 15, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:02:13,144 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:02:13,144 - 错误: dictionary changed size during iteration
2025-02-05 00:02:13,149 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (1, "DELETE FROM table_0 WHERE (id = 3) AND (col_716 IS NULL) AND (col_2 = 'gwawe')", <Thread(Thread-361, stopped 3900)>, 1738684933.0370812), 10: (1, 'DELETE FROM table_0 WHERE (id = 4)', <Thread(Thread-362, stopped 25216)>, 1738684933.0377367), 11: (1, "SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 'xarjy') AND (col_0 = 96.65) AND (col_1 = 'ubiha') FOR UPDATE", <Thread(Thread-363, stopped 36288)>, 1738684933.0377367), 12: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-364, stopped 41900)>, 1738684933.0382414), 13: (1, "SELECT col_0, col_1, col_3, col_716 FROM table_0 WHERE (col_3 = 'lqitd') AND (col_2 = 'dcspc') AND (col_0 = 30.57) FOR UPDATE", <Thread(Thread-365, stopped 39260)>, 1738684933.0382414), 14: (1, 'UPDATE table_0 SET col_716 = 7 WHERE (id = 5)', <Thread(Thread-366, stopped 39984)>, 1738684933.0387232)}
2025-02-05 00:02:13,149 - 
2025-02-05 00:02:13,149 - 执行前idx: 18, pending_stmts: {9: (1, "DELETE FROM table_0 WHERE (id = 3) AND (col_716 IS NULL) AND (col_2 = 'gwawe')", <Thread(Thread-361, stopped 3900)>, 1738684933.0370812), 10: (1, 'DELETE FROM table_0 WHERE (id = 4)', <Thread(Thread-362, stopped 25216)>, 1738684933.0377367), 11: (1, "SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 'xarjy') AND (col_0 = 96.65) AND (col_1 = 'ubiha') FOR UPDATE", <Thread(Thread-363, stopped 36288)>, 1738684933.0377367), 12: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-364, stopped 41900)>, 1738684933.0382414), 13: (1, "SELECT col_0, col_1, col_3, col_716 FROM table_0 WHERE (col_3 = 'lqitd') AND (col_2 = 'dcspc') AND (col_0 = 30.57) FOR UPDATE", <Thread(Thread-365, stopped 39260)>, 1738684933.0382414), 14: (1, 'UPDATE table_0 SET col_716 = 7 WHERE (id = 5)', <Thread(Thread-366, stopped 39984)>, 1738684933.0387232)}
2025-02-05 00:02:13,251 - stmt_idx: 9, status: success, result: None
2025-02-05 00:02:13,251 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 3) AND (col_716 IS NULL) AND (col_2 = 'gwawe')
2025-02-05 00:02:13,361 - stmt_idx: 10, status: success, result: None
2025-02-05 00:02:13,361 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 4)
2025-02-05 00:02:13,468 - stmt_idx: 11, status: success, result: None
2025-02-05 00:02:13,468 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 'xarjy') AND (col_0 = 96.65) AND (col_1 = 'ubiha') FOR UPDATE
2025-02-05 00:02:13,575 - stmt_idx: 12, status: success, result: None
2025-02-05 00:02:13,575 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:02:13,682 - stmt_idx: 13, status: success, result: None
2025-02-05 00:02:13,682 - 成功执行序列中事务1语句: SELECT col_0, col_1, col_3, col_716 FROM table_0 WHERE (col_3 = 'lqitd') AND (col_2 = 'dcspc') AND (col_0 = 30.57) FOR UPDATE
2025-02-05 00:02:13,791 - stmt_idx: 14, status: success, result: None
2025-02-05 00:02:13,791 - 成功执行序列中事务1语句: UPDATE table_0 SET col_716 = 7 WHERE (id = 5)
2025-02-05 00:02:13,791 - 执行后idx: 18, pending_stmts: {}
2025-02-05 00:02:13,791 - 
2025-02-05 00:02:13,901 - 执行序列成功
2025-02-05 00:02:14,660 - is_atomic: True
2025-02-05 00:02:14,660 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:02:14,660 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 41.71, 'pzWNt', 'Ghoxg', 'MHEEv', 60)"), (2, 'SELECT id, col_0, col_1, col_3, col_716 FROM table_0 WHERE id >= 9 AND id <= 9 FOR UPDATE'), (2, "UPDATE table_0 SET col_1 = 'iLEDB' WHERE (id = 10)"), (1, "UPDATE table_0 SET col_716 = 59, col_1 = 'AJdGQ' WHERE (id = 1)"), (2, 'SELECT * FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_716) VALUES (NULL, 14.79, 'xoNHW', 'tIPbb', 'vqlof', 33)"), (1, "UPDATE table_0 SET col_716 = 81, col_1 = 'UqALE', col_0 = 18.56 WHERE (col_2 = 'vhedi') AND (col_3 = 'frhpj') AND (col_0 = 98.49)"), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, "DELETE FROM table_0 WHERE (id = 3) AND (col_716 IS NULL) AND (col_2 = 'gwawe')"), (1, 'DELETE FROM table_0 WHERE (id = 4)'), (1, "SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 'xarjy') AND (col_0 = 96.65) AND (col_1 = 'ubiha') FOR UPDATE"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "SELECT col_0, col_1, col_3, col_716 FROM table_0 WHERE (col_3 = 'lqitd') AND (col_2 = 'dcspc') AND (col_0 = 30.57) FOR UPDATE"), (1, 'UPDATE table_0 SET col_716 = 7 WHERE (id = 5)')]
2025-02-05 00:02:14,660 - snapshots: {'before': {'table_0': [(1, 57.24, 'npuuz', 'mahvf', 'vmesj', None), (2, 98.49, 'naykc', 'vhedi', 'frhpj', None), (3, 94.93, 'fjflx', 'gwawe', 'qywaw', None), (4, 97.12, 'hjlkn', 'uftjq', 'fklmb', None), (5, 7.54, 'kjmjc', 'ubaqh', 'rougu', None), (6, 96.65, 'ubiha', 'xarjy', 'ssocs', None), (7, 11.21, 'nacsq', 'mhohg', 'apmdw', None), (8, 99.13, 'wahfa', 'znfvt', 'lgdwe', None), (9, 42.05, 'uxtdw', 'temzm', 'qkduc', None), (10, 57.12, 'phseo', 'jawkb', 'hgbwl', None), (11, 37.1, 'reamz', 'nyuck', 'cqlgn', None), (12, 73.56, 'bcswo', 'mnwho', 'xgkaj', None), (13, 52.47, 'phbjp', 'lnuaj', 'vwncm', None), (14, 30.57, 'jssuj', 'dcspc', 'lqitd', None)]}, 'trx1': {'table_0': [(1, 57.24, 'AJdGQ', 'mahvf', 'vmesj', 59), (2, 18.56, 'UqALE', 'vhedi', 'frhpj', 81), (5, 7.54, 'kjmjc', 'ubaqh', 'rougu', 7), (6, 96.65, 'ubiha', 'xarjy', 'ssocs', None), (7, 11.21, 'nacsq', 'mhohg', 'apmdw', None), (8, 99.13, 'wahfa', 'znfvt', 'lgdwe', None), (9, 42.05, 'uxtdw', 'temzm', 'qkduc', None), (10, 57.12, 'phseo', 'jawkb', 'hgbwl', None), (11, 37.1, 'reamz', 'nyuck', 'cqlgn', None), (12, 73.56, 'bcswo', 'mnwho', 'xgkaj', None), (13, 52.47, 'phbjp', 'lnuaj', 'vwncm', None), (14, 30.57, 'jssuj', 'dcspc', 'lqitd', None)]}, 'trx2': {'table_0': [(1, 57.24, 'npuuz', 'mahvf', 'vmesj', None), (2, 98.49, 'naykc', 'vhedi', 'frhpj', None), (3, 94.93, 'fjflx', 'gwawe', 'qywaw', None), (4, 97.12, 'hjlkn', 'uftjq', 'fklmb', None), (5, 7.54, 'kjmjc', 'ubaqh', 'rougu', None), (6, 96.65, 'ubiha', 'xarjy', 'ssocs', None), (7, 11.21, 'nacsq', 'mhohg', 'apmdw', None), (8, 99.13, 'wahfa', 'znfvt', 'lgdwe', None), (9, 42.05, 'uxtdw', 'temzm', 'qkduc', None), (10, 57.12, 'iLEDB', 'jawkb', 'hgbwl', None), (11, 37.1, 'reamz', 'nyuck', 'cqlgn', None), (12, 73.56, 'bcswo', 'mnwho', 'xgkaj', None), (13, 52.47, 'phbjp', 'lnuaj', 'vwncm', None), (14, 30.57, 'jssuj', 'dcspc', 'lqitd', None), (15, 41.71, 'pzWNt', 'Ghoxg', 'MHEEv', 60), (16, 14.79, 'xoNHW', 'tIPbb', 'vqlof', 33)]}, 'serial': {'table_0': [(1, 57.24, 'AJdGQ', 'mahvf', 'vmesj', 59), (2, 18.56, 'UqALE', 'vhedi', 'frhpj', 81), (5, 7.54, 'kjmjc', 'ubaqh', 'rougu', 7), (6, 96.65, 'ubiha', 'xarjy', 'ssocs', None), (7, 11.21, 'nacsq', 'mhohg', 'apmdw', None), (8, 99.13, 'wahfa', 'znfvt', 'lgdwe', None), (9, 42.05, 'uxtdw', 'temzm', 'qkduc', None), (10, 57.12, 'phseo', 'jawkb', 'hgbwl', None), (11, 37.1, 'reamz', 'nyuck', 'cqlgn', None), (12, 73.56, 'bcswo', 'mnwho', 'xgkaj', None), (13, 52.47, 'phbjp', 'lnuaj', 'vwncm', None), (14, 30.57, 'jssuj', 'dcspc', 'lqitd', None)]}}
2025-02-05 00:02:14,660 - 
2025-02-05 00:02:14,671 - iter: 48
2025-02-05 00:02:16,166 - table table_0 has 11 rows
2025-02-05 00:02:16,166 - res_dict: {'trx1_lock_row_ids': [8], 'trx2_lock_row_ids': [5, 6, 7], 'intersection_row_ids': []}
2025-02-05 00:02:16,166 - lock_same_resource: False
2025-02-05 00:02:16,166 - 
2025-02-05 00:02:16,166 - non intersection phase1
2025-02-05 00:02:16,166 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:02:16,166 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:02:16,166 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:02:16,167 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:02:16,170 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:02:16,172 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:16,172 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:02:16,175 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=7
2025-02-05 00:02:16,176 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:16,176 - params: {'v1': '5', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:02:16,176 - non intersection phase1 end
2025-02-05 00:02:16,176 - 
2025-02-05 00:02:16,177 - non intersection phase2
2025-02-05 00:02:16,180 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 00:02:16,181 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:16,182 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:02:16,184 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:02:16,186 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:02:16,186 - params: {'cond': '(col_0 = 55.71)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:02:16,186 - non intersection phase2 end
2025-02-05 00:02:16,186 - 
2025-02-05 00:02:16,186 - 生成死锁事务序列成功如下
2025-02-05 00:02:16,186 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE (col_0 = 55.71) LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:02:17,721 - 创建事务1连接成功
2025-02-05 00:02:17,723 - 执行事务1语句: BEGIN
2025-02-05 00:02:17,724 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-05 00:02:17,724 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:02:17,725 - 执行事务1语句: COMMIT;
2025-02-05 00:02:17,729 - 执行事务1成功
2025-02-05 00:02:20,324 - 恢复初始状态成功
2025-02-05 00:02:21,095 - 创建事务2连接成功
2025-02-05 00:02:21,097 - 执行事务2语句: BEGIN
2025-02-05 00:02:21,098 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE
2025-02-05 00:02:21,099 - 执行事务2语句: SELECT id FROM table_0 WHERE (col_0 = 55.71) LOCK IN SHARE MODE
2025-02-05 00:02:21,099 - 执行事务2语句: COMMIT;
2025-02-05 00:02:21,104 - 执行事务2成功
2025-02-05 00:02:26,047 - 
2025-02-05 00:02:26,047 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE', <Thread(Thread-367, started 41284)>, 1738684946.0479462)}
2025-02-05 00:02:26,153 - stmt_idx: 2, status: success, result: None
2025-02-05 00:02:26,153 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE
2025-02-05 00:02:26,153 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:02:26,153 - 
2025-02-05 00:02:26,261 - 
2025-02-05 00:02:26,261 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE', <Thread(Thread-368, started 34412)>, 1738684946.2610176)}
2025-02-05 00:02:26,369 - stmt_idx: 3, status: success, result: None
2025-02-05 00:02:26,369 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-05 00:02:26,369 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:02:26,369 - 
2025-02-05 00:02:26,477 - 
2025-02-05 00:02:26,478 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE', <Thread(Thread-369, started 37424)>, 1738684946.477805)}
2025-02-05 00:02:26,587 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:02:26,587 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE', <Thread(Thread-369, started 37424)>, 1738684946.477805)}
2025-02-05 00:02:26,587 - 
2025-02-05 00:02:26,695 - 
2025-02-05 00:02:26,695 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE', <Thread(Thread-369, started 37424)>, 1738684946.477805), 5: (2, 'SELECT id FROM table_0 WHERE (col_0 = 55.71) LOCK IN SHARE MODE', <Thread(Thread-370, started 22188)>, 1738684946.6945794)}
2025-02-05 00:02:26,698 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:02:26,803 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:02:26,803 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:02:26,803 - 错误: dictionary changed size during iteration
2025-02-05 00:02:26,806 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id FROM table_0 WHERE (col_0 = 55.71) LOCK IN SHARE MODE', <Thread(Thread-370, stopped 22188)>, 1738684946.6945794)}
2025-02-05 00:02:26,806 - 
2025-02-05 00:02:26,806 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id FROM table_0 WHERE (col_0 = 55.71) LOCK IN SHARE MODE', <Thread(Thread-370, stopped 22188)>, 1738684946.6945794)}
2025-02-05 00:02:26,911 - stmt_idx: 5, status: success, result: None
2025-02-05 00:02:26,911 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (col_0 = 55.71) LOCK IN SHARE MODE
2025-02-05 00:02:26,911 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:02:26,912 - 
2025-02-05 00:02:27,021 - 执行序列成功
2025-02-05 00:02:27,786 - is_atomic: True
2025-02-05 00:02:27,786 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:02:27,786 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'SELECT id FROM table_0 WHERE (col_0 = 55.71) LOCK IN SHARE MODE')]
2025-02-05 00:02:27,786 - snapshots: {'before': {'table_0': [(1, 23.9, 23), (2, 27.51, 72), (3, 20.55, 79), (4, 80.45, 95), (5, 90.95, 95), (6, 49.85, 72), (7, 57.74, 72), (8, 55.71, 91), (9, 59.06, 11), (10, 60.9, 17), (11, 43.29, 79)]}, 'trx1': {'table_0': [(1, 23.9, 23), (2, 27.51, 72), (3, 20.55, 79), (4, 80.45, 95), (5, 90.95, 95), (6, 49.85, 72), (7, 57.74, 72), (8, 55.71, 91), (9, 59.06, 11), (10, 60.9, 17), (11, 43.29, 79)]}, 'trx2': {'table_0': [(1, 23.9, 23), (2, 27.51, 72), (3, 20.55, 79), (4, 80.45, 95), (5, 90.95, 95), (6, 49.85, 72), (7, 57.74, 72), (8, 55.71, 91), (9, 59.06, 11), (10, 60.9, 17), (11, 43.29, 79)]}, 'serial': {'table_0': [(1, 23.9, 23), (2, 27.51, 72), (3, 20.55, 79), (4, 80.45, 95), (5, 90.95, 95), (6, 49.85, 72), (7, 57.74, 72), (8, 55.71, 91), (9, 59.06, 11), (10, 60.9, 17), (11, 43.29, 79)]}}
2025-02-05 00:02:27,786 - 
2025-02-05 00:02:27,800 - iter: 49
2025-02-05 00:02:29,292 - table table_0 has 15 rows
2025-02-05 00:02:29,292 - res_dict: {'trx1_lock_row_ids': [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'trx2_lock_row_ids': [1, 2, 3, 4], 'intersection_row_ids': []}
2025-02-05 00:02:29,293 - lock_same_resource: False
2025-02-05 00:02:29,293 - 
2025-02-05 00:02:29,293 - non intersection phase1
2025-02-05 00:02:29,293 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:02:29,293 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:02:29,293 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:02:29,293 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:02:29,296 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=15
2025-02-05 00:02:29,297 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:29,298 - params: {'v1': '5', 'v2': '15', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:02:29,300 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:02:29,302 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:29,302 - params: {'set_expr': 'col_1 = 74, col_0 = 67.34', 'table': 'table_0', 'cond': '(col_1 = 65) AND (col_0 = 81.32)'}
2025-02-05 00:02:29,305 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:02:29,306 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:29,306 - params: {'set_expr': 'col_0 = 48.81, col_1 = 70', 'table': 'table_0', 'cond': '(col_0 = 9.22) AND (col_1 = 71)'}
2025-02-05 00:02:29,308 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:02:29,309 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:29,309 - params: {'set_expr': 'col_0 = 33.03, col_1 = 44', 'table': 'table_0', 'cond': '(id = 3) AND (col_1 = 84)'}
2025-02-05 00:02:29,312 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:02:29,313 - needed_params: {'cond', 'table'}
2025-02-05 00:02:29,314 - params: {'cond': '(col_0 = 20.23)', 'table': 'table_0'}
2025-02-05 00:02:29,314 - non intersection phase1 end
2025-02-05 00:02:29,314 - 
2025-02-05 00:02:29,314 - non intersection phase2
2025-02-05 00:02:29,318 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:02:29,319 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:29,319 - params: {'set_expr': 'col_0 = 46.18, col_1 = 47', 'table': 'table_0', 'cond': '(col_0 = 9.22) AND (col_1 = 71)'}
2025-02-05 00:02:29,322 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=8
2025-02-05 00:02:29,323 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:29,323 - params: {'v1': '6', 'v2': '8', 'table': 'table_0', 'select_cols': 'col_1'}
2025-02-05 00:02:29,323 - non intersection phase2 end
2025-02-05 00:02:29,323 - 
2025-02-05 00:02:29,323 - 生成死锁事务序列成功如下
2025-02-05 00:02:29,323 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_1 = 74, col_0 = 67.34 WHERE (col_1 = 65) AND (col_0 = 81.32)'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 48.81, col_1 = 70 WHERE (col_0 = 9.22) AND (col_1 = 71)'), (2, 'UPDATE table_0 SET col_0 = 33.03, col_1 = 44 WHERE (id = 3) AND (col_1 = 84)'), (2, 'DELETE FROM table_0 WHERE (col_0 = 20.23)'), (1, 'UPDATE table_0 SET col_0 = 46.18, col_1 = 47 WHERE (col_0 = 9.22) AND (col_1 = 71)'), (2, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:02:30,861 - 创建事务1连接成功
2025-02-05 00:02:30,862 - 执行事务1语句: BEGIN
2025-02-05 00:02:30,863 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE
2025-02-05 00:02:30,864 - 执行事务1语句: UPDATE table_0 SET col_0 = 46.18, col_1 = 47 WHERE (col_0 = 9.22) AND (col_1 = 71)
2025-02-05 00:02:30,867 - 执行事务1语句: COMMIT;
2025-02-05 00:02:30,871 - 执行事务1成功
2025-02-05 00:02:33,477 - 恢复初始状态成功
2025-02-05 00:02:34,237 - 创建事务2连接成功
2025-02-05 00:02:34,238 - 执行事务2语句: BEGIN
2025-02-05 00:02:34,240 - 执行事务2语句: UPDATE table_0 SET col_1 = 74, col_0 = 67.34 WHERE (col_1 = 65) AND (col_0 = 81.32)
2025-02-05 00:02:34,240 - 执行事务2语句: UPDATE table_0 SET col_0 = 48.81, col_1 = 70 WHERE (col_0 = 9.22) AND (col_1 = 71)
2025-02-05 00:02:34,241 - 执行事务2语句: UPDATE table_0 SET col_0 = 33.03, col_1 = 44 WHERE (id = 3) AND (col_1 = 84)
2025-02-05 00:02:34,241 - 执行事务2语句: DELETE FROM table_0 WHERE (col_0 = 20.23)
2025-02-05 00:02:34,242 - 执行事务2语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE
2025-02-05 00:02:34,245 - 执行事务2语句: COMMIT;
2025-02-05 00:02:34,249 - 执行事务2成功
2025-02-05 00:02:39,176 - 
2025-02-05 00:02:39,176 - 执行前idx: 3, pending_stmts: {2: (2, 'UPDATE table_0 SET col_1 = 74, col_0 = 67.34 WHERE (col_1 = 65) AND (col_0 = 81.32)', <Thread(Thread-371, started 38312)>, 1738684959.1764598)}
2025-02-05 00:02:39,278 - stmt_idx: 2, status: success, result: None
2025-02-05 00:02:39,278 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 74, col_0 = 67.34 WHERE (col_1 = 65) AND (col_0 = 81.32)
2025-02-05 00:02:39,278 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:02:39,278 - 
2025-02-05 00:02:39,383 - 
2025-02-05 00:02:39,384 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695)}
2025-02-05 00:02:39,491 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE
2025-02-05 00:02:39,491 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695)}
2025-02-05 00:02:39,492 - 
2025-02-05 00:02:39,597 - 
2025-02-05 00:02:39,598 - 执行前idx: 5, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695), 4: (2, 'UPDATE table_0 SET col_0 = 48.81, col_1 = 70 WHERE (col_0 = 9.22) AND (col_1 = 71)', <Thread(Thread-373, started 20008)>, 1738684959.597403)}
2025-02-05 00:02:39,705 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE
2025-02-05 00:02:39,814 - stmt_idx: 4, status: success, result: None
2025-02-05 00:02:39,814 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 48.81, col_1 = 70 WHERE (col_0 = 9.22) AND (col_1 = 71)
2025-02-05 00:02:39,814 - 执行后idx: 5, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695)}
2025-02-05 00:02:39,814 - 
2025-02-05 00:02:39,921 - 
2025-02-05 00:02:39,922 - 执行前idx: 6, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695), 5: (2, 'UPDATE table_0 SET col_0 = 33.03, col_1 = 44 WHERE (id = 3) AND (col_1 = 84)', <Thread(Thread-374, started 32320)>, 1738684959.9217222)}
2025-02-05 00:02:40,029 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE
2025-02-05 00:02:40,138 - stmt_idx: 5, status: success, result: None
2025-02-05 00:02:40,138 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 33.03, col_1 = 44 WHERE (id = 3) AND (col_1 = 84)
2025-02-05 00:02:40,138 - 执行后idx: 6, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695)}
2025-02-05 00:02:40,138 - 
2025-02-05 00:02:40,248 - 
2025-02-05 00:02:40,248 - 执行前idx: 7, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695), 6: (2, 'DELETE FROM table_0 WHERE (col_0 = 20.23)', <Thread(Thread-375, started 11904)>, 1738684960.2481942)}
2025-02-05 00:02:40,357 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE
2025-02-05 00:02:40,464 - stmt_idx: 6, status: success, result: None
2025-02-05 00:02:40,464 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_0 = 20.23)
2025-02-05 00:02:40,464 - 执行后idx: 7, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695)}
2025-02-05 00:02:40,464 - 
2025-02-05 00:02:40,574 - 
2025-02-05 00:02:40,575 - 执行前idx: 9, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695), 8: (2, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE', <Thread(Thread-376, started 14424)>, 1738684960.574698)}
2025-02-05 00:02:40,679 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE
2025-02-05 00:02:40,788 - stmt_idx: 8, status: success, result: None
2025-02-05 00:02:40,788 - 成功执行序列中事务2语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE
2025-02-05 00:02:40,788 - 执行后idx: 9, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695)}
2025-02-05 00:02:40,788 - 
2025-02-05 00:02:40,901 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, started 41740)>, 1738684959.3837695)}
2025-02-05 00:02:40,901 - 
2025-02-05 00:02:40,902 - 执行前idx: 11, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE', <Thread(Thread-372, stopped 41740)>, 1738684959.3837695)}
2025-02-05 00:02:41,003 - stmt_idx: 3, status: success, result: None
2025-02-05 00:02:41,003 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE
2025-02-05 00:02:41,003 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE
2025-02-05 00:02:41,005 - 执行后idx: 11, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 46.18, col_1 = 47 WHERE (col_0 = 9.22) AND (col_1 = 71)', <Thread(Thread-377, started 30740)>, 1738684961.004589), 9: (1, 'COMMIT', <Thread(Thread-378, started 39612)>, 1738684961.0052955)}
2025-02-05 00:02:41,005 - 
2025-02-05 00:02:41,111 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'UPDATE table_0 SET col_0 = 46.18, col_1 = 47 WHERE (col_0 = 9.22) AND (col_1 = 71)', <Thread(Thread-377, stopped 30740)>, 1738684961.004589), 9: (1, 'COMMIT', <Thread(Thread-378, stopped 39612)>, 1738684961.0052955)}
2025-02-05 00:02:41,111 - 
2025-02-05 00:02:41,112 - 执行前idx: 11, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 46.18, col_1 = 47 WHERE (col_0 = 9.22) AND (col_1 = 71)', <Thread(Thread-377, stopped 30740)>, 1738684961.004589), 9: (1, 'COMMIT', <Thread(Thread-378, stopped 39612)>, 1738684961.0052955)}
2025-02-05 00:02:41,220 - stmt_idx: 7, status: success, result: None
2025-02-05 00:02:41,220 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 46.18, col_1 = 47 WHERE (col_0 = 9.22) AND (col_1 = 71)
2025-02-05 00:02:41,330 - stmt_idx: 9, status: success, result: None
2025-02-05 00:02:41,330 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:02:41,330 - 执行后idx: 11, pending_stmts: {}
2025-02-05 00:02:41,330 - 
2025-02-05 00:02:41,439 - 执行序列成功
2025-02-05 00:02:42,208 - is_atomic: True
2025-02-05 00:02:42,208 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:02:42,208 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_1 = 74, col_0 = 67.34 WHERE (col_1 = 65) AND (col_0 = 81.32)'), (2, 'UPDATE table_0 SET col_0 = 48.81, col_1 = 70 WHERE (col_0 = 9.22) AND (col_1 = 71)'), (2, 'UPDATE table_0 SET col_0 = 33.03, col_1 = 44 WHERE (id = 3) AND (col_1 = 84)'), (2, 'DELETE FROM table_0 WHERE (col_0 = 20.23)'), (2, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 15 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 46.18, col_1 = 47 WHERE (col_0 = 9.22) AND (col_1 = 71)'), (1, 'COMMIT')]
2025-02-05 00:02:42,208 - snapshots: {'before': {'table_0': [(1, 81.32, 65), (2, 9.22, 71), (3, 62.3, 84), (4, 20.23, 56), (5, 47.53, 27), (6, 40.65, 13), (7, 9.01, 78), (8, 62.86, 46), (9, 2.6, 5), (10, 96.29, 85), (11, 20.41, 11), (12, 21.33, 92), (13, 92.63, 85), (14, 81.74, 48), (15, 28.63, 79)]}, 'trx1': {'table_0': [(1, 81.32, 65), (2, 46.18, 47), (3, 62.3, 84), (4, 20.23, 56), (5, 47.53, 27), (6, 40.65, 13), (7, 9.01, 78), (8, 62.86, 46), (9, 2.6, 5), (10, 96.29, 85), (11, 20.41, 11), (12, 21.33, 92), (13, 92.63, 85), (14, 81.74, 48), (15, 28.63, 79)]}, 'trx2': {'table_0': [(1, 67.34, 74), (2, 48.81, 70), (3, 33.03, 44), (5, 47.53, 27), (6, 40.65, 13), (7, 9.01, 78), (8, 62.86, 46), (9, 2.6, 5), (10, 96.29, 85), (11, 20.41, 11), (12, 21.33, 92), (13, 92.63, 85), (14, 81.74, 48), (15, 28.63, 79)]}, 'serial': {'table_0': [(1, 67.34, 74), (2, 48.81, 70), (3, 33.03, 44), (5, 47.53, 27), (6, 40.65, 13), (7, 9.01, 78), (8, 62.86, 46), (9, 2.6, 5), (10, 96.29, 85), (11, 20.41, 11), (12, 21.33, 92), (13, 92.63, 85), (14, 81.74, 48), (15, 28.63, 79)]}}
2025-02-05 00:02:42,209 - 
2025-02-05 00:02:42,220 - iter: 50
2025-02-05 00:02:43,710 - table table_0 has 13 rows
2025-02-05 00:02:43,711 - trx1_start_id: 9
2025-02-05 00:02:43,711 - trx1_end_id: 9
2025-02-05 00:02:43,711 - trx1_exclusive_start_id: 9
2025-02-05 00:02:43,711 - trx1_exclusive_end_id: 8
2025-02-05 00:02:43,711 - trx1_exclusive_ids: []
2025-02-05 00:02:43,711 - trx2_start_id: 9
2025-02-05 00:02:43,711 - trx2_end_id: 11
2025-02-05 00:02:43,711 - trx2_exclusive_start_id: 10
2025-02-05 00:02:43,711 - trx2_exclusive_end_id: 11
2025-02-05 00:02:43,711 - trx2_exclusive_ids: [10, 11]
2025-02-05 00:02:43,711 - intersection_ids: [9]
2025-02-05 00:02:43,711 - res_dict: {'trx1_lock_row_ids': [9], 'trx2_lock_row_ids': [9, 10, 11], 'intersection_row_ids': [9]}
2025-02-05 00:02:43,711 - lock_same_resource: True
2025-02-05 00:02:43,711 - 
2025-02-05 00:02:43,711 - intersection phase1
2025-02-05 00:02:43,715 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 00:02:43,716 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:02:43,716 - params: {'v1': '9', 'set_expr': "col_0 = 1, col_1 = 'ceqRk'", 'table': 'table_0', 'v2': '9'}
2025-02-05 00:02:43,719 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=9, is_continuous=True, range_end_idx=11
2025-02-05 00:02:43,720 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:43,720 - params: {'v1': '9', 'v2': '11', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:02:43,720 - intersection phase1 end
2025-02-05 00:02:43,720 - 
2025-02-05 00:02:43,720 - intersection phase2
2025-02-05 00:02:43,721 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:02:43,721 - 事务2在第二阶段自己加的锁: S
2025-02-05 00:02:43,721 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:02:43,721 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 00:02:43,725 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=9, is_continuous=True, range_end_idx=8
2025-02-05 00:02:43,726 - 生成连续锁定SQL失败: 找不到从9到8的行
2025-02-05 00:02:43,726 - 生成锁SQL失败: 找不到从9到8的行
2025-02-05 00:02:43,726 - 生成死锁事务序列失败: 找不到从9到8的行
2025-02-05 00:02:43,726 - 
2025-02-05 00:02:43,726 - Error in iteration 50: 找不到从9到8的行
2025-02-05 00:02:43,726 - 
2025-02-05 00:02:43,732 - iter: 51
2025-02-05 00:02:45,231 - table table_0 has 14 rows
2025-02-05 00:02:45,231 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
2025-02-05 00:02:45,232 - trx2_lock_row_ids: [4, 5, 6, 9, 10, 11, 12]
2025-02-05 00:02:45,232 - intersection_row_ids: [4, 5, 6, 9, 10, 11, 12]
2025-02-05 00:02:45,232 - trx1_exclusive_ids: [1, 2, 3, 7, 8]
2025-02-05 00:02:45,232 - trx2_exclusive_ids: []
2025-02-05 00:02:45,232 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [4, 5, 6, 9, 10, 11, 12], 'intersection_row_ids': [4, 5, 6, 9, 10, 11, 12]}
2025-02-05 00:02:45,232 - lock_same_resource: True
2025-02-05 00:02:45,232 - 
2025-02-05 00:02:45,232 - intersection phase1
2025-02-05 00:02:45,235 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=12
2025-02-05 00:02:45,236 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:02:45,236 - params: {'v1': '1', 'set_expr': 'col_3 = 67.26', 'table': 'table_0', 'v2': '12'}
2025-02-05 00:02:45,239 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,240 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:02:45,240 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': 'NULL, 76.26, 55, 54, 16.54', 'table': 'table_0'}
2025-02-05 00:02:45,243 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,245 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,245 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'col_0, col_1, col_2, col_3'}
2025-02-05 00:02:45,248 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,250 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:02:45,250 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': 'NULL, 14.68, 39, 9, 88.26', 'table': 'table_0'}
2025-02-05 00:02:45,254 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,255 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,255 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-05 00:02:45,258 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,259 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,259 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_2, col_3'}
2025-02-05 00:02:45,263 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,265 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,265 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3'}
2025-02-05 00:02:45,268 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,270 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,270 - params: {'v1': '12', 'v2': '12', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:02:45,270 - intersection phase1 end
2025-02-05 00:02:45,270 - 
2025-02-05 00:02:45,270 - intersection phase2
2025-02-05 00:02:45,271 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:02:45,271 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:02:45,271 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:02:45,271 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 00:02:45,274 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,275 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,275 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'col_2'}
2025-02-05 00:02:45,278 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,280 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,280 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:02:45,283 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,284 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:02:45,284 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': 'NULL, 87.4, 7, 23, 7.59', 'table': 'table_0'}
2025-02-05 00:02:45,286 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,287 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,288 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:02:45,291 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,292 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:45,292 - params: {'set_expr': 'col_0 = 72.52', 'table': 'table_0', 'cond': '(col_3 = 74.29)'}
2025-02-05 00:02:45,292 - intersection phase2 end
2025-02-05 00:02:45,292 - 
2025-02-05 00:02:45,293 - intersection phase3
2025-02-05 00:02:45,295 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,297 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:45,297 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:02:45,300 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:02:45,300 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:02:45,301 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': 'NULL, 80.14, 26, 20, 36.38', 'table': 'table_0'}
2025-02-05 00:02:45,301 - intersection phase3 end
2025-02-05 00:02:45,301 - 
2025-02-05 00:02:45,301 - 生成死锁事务序列成功如下
2025-02-05 00:02:45,301 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_3 = 67.26 WHERE id BETWEEN 1 AND 12'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76.26, 55, 54, 16.54)'), (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 14.68, 39, 9, 88.26)'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (1, 'SELECT col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 87.4, 7, 23, 7.59)'), (1, 'SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 72.52 WHERE (col_3 = 74.29)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 80.14, 26, 20, 36.38)'), (1, 'SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:02:46,839 - 创建事务1连接成功
2025-02-05 00:02:46,840 - 执行事务1语句: BEGIN
2025-02-05 00:02:46,841 - 执行事务1语句: UPDATE table_0 SET col_3 = 67.26 WHERE id BETWEEN 1 AND 12
2025-02-05 00:02:46,842 - 执行事务1语句: SELECT col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:02:46,843 - 执行事务1语句: SELECT id FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-05 00:02:46,844 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 87.4, 7, 23, 7.59)
2025-02-05 00:02:46,844 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:02:46,845 - 执行事务1语句: UPDATE table_0 SET col_0 = 72.52 WHERE (col_3 = 74.29)
2025-02-05 00:02:46,846 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:02:46,848 - 执行事务1语句: COMMIT;
2025-02-05 00:02:46,853 - 执行事务1成功
2025-02-05 00:02:49,467 - 恢复初始状态成功
2025-02-05 00:02:50,255 - 创建事务2连接成功
2025-02-05 00:02:50,257 - 执行事务2语句: BEGIN
2025-02-05 00:02:50,258 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76.26, 55, 54, 16.54)
2025-02-05 00:02:50,259 - 执行事务2语句: SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:02:50,260 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 14.68, 39, 9, 88.26)
2025-02-05 00:02:50,260 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 00:02:50,261 - 执行事务2语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:02:50,261 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 00:02:50,262 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-05 00:02:50,263 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 80.14, 26, 20, 36.38)
2025-02-05 00:02:50,265 - 执行事务2语句: COMMIT;
2025-02-05 00:02:50,269 - 执行事务2成功
2025-02-05 00:02:55,182 - 
2025-02-05 00:02:55,182 - 执行前idx: 3, pending_stmts: {2: (1, 'UPDATE table_0 SET col_3 = 67.26 WHERE id BETWEEN 1 AND 12', <Thread(Thread-379, started 33936)>, 1738684975.182884)}
2025-02-05 00:02:55,295 - stmt_idx: 2, status: success, result: None
2025-02-05 00:02:55,295 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 67.26 WHERE id BETWEEN 1 AND 12
2025-02-05 00:02:55,295 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:02:55,295 - 
2025-02-05 00:02:55,404 - 
2025-02-05 00:02:55,405 - 执行前idx: 4, pending_stmts: {3: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76.26, 55, 54, 16.54)', <Thread(Thread-380, started 40756)>, 1738684975.4041338)}
2025-02-05 00:02:55,509 - stmt_idx: 3, status: success, result: None
2025-02-05 00:02:55,509 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76.26, 55, 54, 16.54)
2025-02-05 00:02:55,509 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:02:55,509 - 
2025-02-05 00:02:55,617 - 
2025-02-05 00:02:55,617 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905)}
2025-02-05 00:02:55,722 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:02:55,722 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905)}
2025-02-05 00:02:55,722 - 
2025-02-05 00:02:55,827 - 
2025-02-05 00:02:55,827 - 执行前idx: 11, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905), 10: (1, 'SELECT col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-382, started 35384)>, 1738684975.8275545)}
2025-02-05 00:02:55,934 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:02:56,041 - stmt_idx: 10, status: success, result: None
2025-02-05 00:02:56,041 - 成功执行序列中事务1语句: SELECT col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:02:56,041 - 执行后idx: 11, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905)}
2025-02-05 00:02:56,041 - 
2025-02-05 00:02:56,148 - 
2025-02-05 00:02:56,149 - 执行前idx: 12, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905), 11: (1, 'SELECT id FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE', <Thread(Thread-383, started 20356)>, 1738684976.148591)}
2025-02-05 00:02:56,254 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:02:56,361 - stmt_idx: 11, status: success, result: None
2025-02-05 00:02:56,361 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-05 00:02:56,361 - 执行后idx: 12, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905)}
2025-02-05 00:02:56,361 - 
2025-02-05 00:02:56,467 - 
2025-02-05 00:02:56,467 - 执行前idx: 13, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905), 12: (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 87.4, 7, 23, 7.59)', <Thread(Thread-384, started 5204)>, 1738684976.4670792)}
2025-02-05 00:02:56,575 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:02:56,684 - stmt_idx: 12, status: success, result: None
2025-02-05 00:02:56,684 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 87.4, 7, 23, 7.59)
2025-02-05 00:02:56,684 - 执行后idx: 13, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905)}
2025-02-05 00:02:56,684 - 
2025-02-05 00:02:56,792 - 
2025-02-05 00:02:56,792 - 执行前idx: 14, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905), 13: (1, 'SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE', <Thread(Thread-385, started 18260)>, 1738684976.79199)}
2025-02-05 00:02:56,897 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:02:57,003 - stmt_idx: 13, status: success, result: None
2025-02-05 00:02:57,003 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:02:57,003 - 执行后idx: 14, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905)}
2025-02-05 00:02:57,003 - 
2025-02-05 00:02:57,113 - 
2025-02-05 00:02:57,113 - 执行前idx: 15, pending_stmts: {4: (2, 'SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-381, started 18192)>, 1738684975.6172905), 14: (1, 'UPDATE table_0 SET col_0 = 72.52 WHERE (col_3 = 74.29)', <Thread(Thread-386, started 36340)>, 1738684977.1131516)}
2025-02-05 00:02:57,116 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:02:57,222 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:02:57,222 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:02:57,222 - 错误: dictionary changed size during iteration
2025-02-05 00:02:57,223 - 
2025-02-05 00:02:57,223 - 执行前idx: 17, pending_stmts: {14: (1, 'UPDATE table_0 SET col_0 = 72.52 WHERE (col_3 = 74.29)', <Thread(Thread-386, stopped 36340)>, 1738684977.1131516), 16: (1, 'SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-387, started 41848)>, 1738684977.223209)}
2025-02-05 00:02:57,328 - stmt_idx: 14, status: success, result: None
2025-02-05 00:02:57,328 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 72.52 WHERE (col_3 = 74.29)
2025-02-05 00:02:57,437 - stmt_idx: 16, status: success, result: None
2025-02-05 00:02:57,437 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:02:57,437 - 执行后idx: 17, pending_stmts: {}
2025-02-05 00:02:57,437 - 
2025-02-05 00:02:57,547 - 执行序列成功
2025-02-05 00:02:58,320 - is_atomic: True
2025-02-05 00:02:58,320 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:02:58,320 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_3 = 67.26 WHERE id BETWEEN 1 AND 12'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76.26, 55, 54, 16.54)'), (1, 'SELECT col_2 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 87.4, 7, 23, 7.59)'), (1, 'SELECT * FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 80.14, 26, 20, 36.38)'), (1, 'UPDATE table_0 SET col_0 = 72.52 WHERE (col_3 = 74.29)'), (1, 'SELECT * FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 00:02:58,321 - snapshots: {'before': {'table_0': [(1, 36.17, 50, 45, 99.27), (2, 90.64, 34, 7, 9.16), (3, 75.16, 43, 66, 85.49), (4, 67.53, 24, 58, 49.24), (5, 4.05, 97, 99, 2.83), (6, 68.49, 87, 1, 80.1), (7, 96.12, 22, 69, 62.77), (8, 71.31, 61, 9, 74.29), (9, 2.82, 91, 10, 78.81), (10, 12.05, 45, 9, 79.45), (11, 98.72, 80, 60, 79.43), (12, 47.3, 30, 19, 9.83), (13, 85.59, 29, 37, 77.54), (14, 26.94, 13, 48, 70.74)]}, 'trx1': {'table_0': [(1, 36.17, 50, 45, 67.26), (2, 90.64, 34, 7, 67.26), (3, 75.16, 43, 66, 67.26), (4, 67.53, 24, 58, 67.26), (5, 4.05, 97, 99, 67.26), (6, 68.49, 87, 1, 67.26), (7, 96.12, 22, 69, 67.26), (8, 71.31, 61, 9, 67.26), (9, 2.82, 91, 10, 67.26), (10, 12.05, 45, 9, 67.26), (11, 98.72, 80, 60, 67.26), (12, 47.3, 30, 19, 67.26), (13, 85.59, 29, 37, 77.54), (14, 26.94, 13, 48, 70.74), (15, 87.4, 7, 23, 7.59)]}, 'trx2': {'table_0': [(1, 36.17, 50, 45, 99.27), (2, 90.64, 34, 7, 9.16), (3, 75.16, 43, 66, 85.49), (4, 67.53, 24, 58, 49.24), (5, 4.05, 97, 99, 2.83), (6, 68.49, 87, 1, 80.1), (7, 96.12, 22, 69, 62.77), (8, 71.31, 61, 9, 74.29), (9, 2.82, 91, 10, 78.81), (10, 12.05, 45, 9, 79.45), (11, 98.72, 80, 60, 79.43), (12, 47.3, 30, 19, 9.83), (13, 85.59, 29, 37, 77.54), (14, 26.94, 13, 48, 70.74), (16, 76.26, 55, 54, 16.54), (17, 14.68, 39, 9, 88.26), (18, 80.14, 26, 20, 36.38)]}, 'serial': {'table_0': [(1, 36.17, 50, 45, 67.26), (2, 90.64, 34, 7, 67.26), (3, 75.16, 43, 66, 67.26), (4, 67.53, 24, 58, 67.26), (5, 4.05, 97, 99, 67.26), (6, 68.49, 87, 1, 67.26), (7, 96.12, 22, 69, 67.26), (8, 71.31, 61, 9, 67.26), (9, 2.82, 91, 10, 67.26), (10, 12.05, 45, 9, 67.26), (11, 98.72, 80, 60, 67.26), (12, 47.3, 30, 19, 67.26), (13, 85.59, 29, 37, 77.54), (14, 26.94, 13, 48, 70.74), (20, 87.4, 7, 23, 7.59)]}}
2025-02-05 00:02:58,321 - 
2025-02-05 00:02:58,333 - iter: 52
2025-02-05 00:02:59,876 - table table_0 has 12 rows
2025-02-05 00:02:59,876 - res_dict: {'trx1_lock_row_ids': [2, 3, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [11, 12], 'intersection_row_ids': []}
2025-02-05 00:02:59,876 - lock_same_resource: False
2025-02-05 00:02:59,876 - 
2025-02-05 00:02:59,876 - non intersection phase1
2025-02-05 00:02:59,877 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:02:59,877 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:02:59,877 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 00:02:59,877 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:02:59,881 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:02:59,882 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:02:59,882 - params: {'cond': '(id = 2)', 'table': 'table_0', 'select_cols': 'id, col_3, col_370'}
2025-02-05 00:02:59,885 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:02:59,886 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:02:59,886 - params: {'cond': "(id = 3) AND (col_370 IS NULL) AND (col_0 = 'dittd')", 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-05 00:02:59,890 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:02:59,891 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:59,891 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_1, col_370'}
2025-02-05 00:02:59,893 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:02:59,895 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:02:59,895 - params: {'set_expr': 'col_370 = 92.42, col_2 = 9', 'table': 'table_0', 'cond': '(id = 7)'}
2025-02-05 00:02:59,899 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:02:59,900 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:02:59,900 - params: {'cond': "(col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL)", 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:02:59,904 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:02:59,905 - needed_params: {'cond', 'table'}
2025-02-05 00:02:59,906 - params: {'cond': '(id = 9) AND (col_370 IS NULL)', 'table': 'table_0'}
2025-02-05 00:02:59,909 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:02:59,910 - needed_params: {'cond', 'table'}
2025-02-05 00:02:59,910 - params: {'cond': '(col_370 IS NULL)', 'table': 'table_0'}
2025-02-05 00:02:59,913 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=11, is_continuous=True, range_end_idx=12
2025-02-05 00:02:59,915 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:59,915 - params: {'v1': '11', 'v2': '12', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_370'}
2025-02-05 00:02:59,915 - non intersection phase1 end
2025-02-05 00:02:59,915 - 
2025-02-05 00:02:59,916 - non intersection phase2
2025-02-05 00:02:59,918 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=12, is_continuous=True, range_end_idx=12
2025-02-05 00:02:59,920 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:02:59,920 - params: {'v1': '12', 'v2': '12', 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3'}
2025-02-05 00:02:59,925 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:02:59,926 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:02:59,926 - params: {'cond': '(id = 3)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_370'}
2025-02-05 00:02:59,927 - non intersection phase2 end
2025-02-05 00:02:59,927 - 
2025-02-05 00:02:59,927 - 生成死锁事务序列成功如下
2025-02-05 00:02:59,927 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_3, col_370 FROM table_0 WHERE (id = 2) FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE id >= 11 AND id <= 12 FOR UPDATE'), (1, "SELECT id, col_2 FROM table_0 WHERE (id = 3) AND (col_370 IS NULL) AND (col_0 = 'dittd') FOR UPDATE"), (1, 'SELECT id, col_1, col_370 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'UPDATE table_0 SET col_370 = 92.42, col_2 = 9 WHERE (id = 7)'), (1, "SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE"), (1, 'DELETE FROM table_0 WHERE (id = 9) AND (col_370 IS NULL)'), (1, 'DELETE FROM table_0 WHERE (col_370 IS NULL)'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE (id = 3) FOR UPDATE'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:03:01,453 - 创建事务1连接成功
2025-02-05 00:03:01,455 - 执行事务1语句: BEGIN
2025-02-05 00:03:01,456 - 执行事务1语句: SELECT id, col_3, col_370 FROM table_0 WHERE (id = 2) FOR UPDATE
2025-02-05 00:03:01,457 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE (id = 3) AND (col_370 IS NULL) AND (col_0 = 'dittd') FOR UPDATE
2025-02-05 00:03:01,458 - 执行事务1语句: SELECT id, col_1, col_370 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:03:01,458 - 执行事务1语句: UPDATE table_0 SET col_370 = 92.42, col_2 = 9 WHERE (id = 7)
2025-02-05 00:03:01,459 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE
2025-02-05 00:03:01,459 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 9) AND (col_370 IS NULL)
2025-02-05 00:03:01,460 - 执行事务1语句: DELETE FROM table_0 WHERE (col_370 IS NULL)
2025-02-05 00:03:01,461 - 执行事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 00:03:01,463 - 执行事务1语句: COMMIT;
2025-02-05 00:03:01,467 - 执行事务1成功
2025-02-05 00:03:04,061 - 恢复初始状态成功
2025-02-05 00:03:04,822 - 创建事务2连接成功
2025-02-05 00:03:04,824 - 执行事务2语句: BEGIN
2025-02-05 00:03:04,825 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE id >= 11 AND id <= 12 FOR UPDATE
2025-02-05 00:03:04,826 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 00:03:04,827 - 执行事务2语句: COMMIT;
2025-02-05 00:03:04,831 - 执行事务2成功
2025-02-05 00:03:09,728 - 
2025-02-05 00:03:09,728 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_3, col_370 FROM table_0 WHERE (id = 2) FOR UPDATE', <Thread(Thread-388, started 31280)>, 1738684989.7284405)}
2025-02-05 00:03:09,833 - stmt_idx: 2, status: success, result: None
2025-02-05 00:03:09,833 - 成功执行序列中事务1语句: SELECT id, col_3, col_370 FROM table_0 WHERE (id = 2) FOR UPDATE
2025-02-05 00:03:09,833 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:03:09,833 - 
2025-02-05 00:03:09,940 - 
2025-02-05 00:03:09,941 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE id >= 11 AND id <= 12 FOR UPDATE', <Thread(Thread-389, started 41568)>, 1738684989.9404604)}
2025-02-05 00:03:10,047 - stmt_idx: 3, status: success, result: None
2025-02-05 00:03:10,047 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE id >= 11 AND id <= 12 FOR UPDATE
2025-02-05 00:03:10,047 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:03:10,047 - 
2025-02-05 00:03:10,155 - 
2025-02-05 00:03:10,155 - 执行前idx: 5, pending_stmts: {4: (1, "SELECT id, col_2 FROM table_0 WHERE (id = 3) AND (col_370 IS NULL) AND (col_0 = 'dittd') FOR UPDATE", <Thread(Thread-390, started 10824)>, 1738684990.1556785)}
2025-02-05 00:03:10,261 - stmt_idx: 4, status: success, result: None
2025-02-05 00:03:10,261 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE (id = 3) AND (col_370 IS NULL) AND (col_0 = 'dittd') FOR UPDATE
2025-02-05 00:03:10,261 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:03:10,261 - 
2025-02-05 00:03:10,368 - 
2025-02-05 00:03:10,369 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_1, col_370 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-391, started 41516)>, 1738684990.3688693)}
2025-02-05 00:03:10,474 - stmt_idx: 5, status: success, result: None
2025-02-05 00:03:10,474 - 成功执行序列中事务1语句: SELECT id, col_1, col_370 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:03:10,474 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:03:10,474 - 
2025-02-05 00:03:10,580 - 
2025-02-05 00:03:10,581 - 执行前idx: 7, pending_stmts: {6: (1, 'UPDATE table_0 SET col_370 = 92.42, col_2 = 9 WHERE (id = 7)', <Thread(Thread-392, started 20240)>, 1738684990.580853)}
2025-02-05 00:03:10,687 - stmt_idx: 6, status: success, result: None
2025-02-05 00:03:10,687 - 成功执行序列中事务1语句: UPDATE table_0 SET col_370 = 92.42, col_2 = 9 WHERE (id = 7)
2025-02-05 00:03:10,687 - 执行后idx: 7, pending_stmts: {}
2025-02-05 00:03:10,687 - 
2025-02-05 00:03:10,795 - 
2025-02-05 00:03:10,796 - 执行前idx: 8, pending_stmts: {7: (1, "SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE", <Thread(Thread-393, started 33492)>, 1738684990.7951643)}
2025-02-05 00:03:10,904 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE
2025-02-05 00:03:10,904 - 执行后idx: 8, pending_stmts: {7: (1, "SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE", <Thread(Thread-393, started 33492)>, 1738684990.7951643)}
2025-02-05 00:03:10,905 - 
2025-02-05 00:03:11,010 - 
2025-02-05 00:03:11,011 - 执行前idx: 11, pending_stmts: {7: (1, "SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE", <Thread(Thread-393, started 33492)>, 1738684990.7951643), 10: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE (id = 3) FOR UPDATE', <Thread(Thread-394, started 38856)>, 1738684991.010452)}
2025-02-05 00:03:11,013 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 00:03:11,117 - stmt_idx: 7, status: success, result: None
2025-02-05 00:03:11,117 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE
2025-02-05 00:03:11,117 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE
2025-02-05 00:03:11,223 - stmt_idx: 10, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:03:11,223 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 00:03:11,223 - 错误: dictionary changed size during iteration
2025-02-05 00:03:11,224 - 
2025-02-05 00:03:11,224 - 执行前idx: 12, pending_stmts: {8: (1, 'DELETE FROM table_0 WHERE (id = 9) AND (col_370 IS NULL)', <Thread(Thread-395, stopped 41964)>, 1738684991.1181822), 9: (1, 'DELETE FROM table_0 WHERE (col_370 IS NULL)', <Thread(Thread-396, stopped 40328)>, 1738684991.1185315), 11: (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-397, started 3568)>, 1738684991.2244568)}
2025-02-05 00:03:11,331 - stmt_idx: 8, status: success, result: None
2025-02-05 00:03:11,331 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 9) AND (col_370 IS NULL)
2025-02-05 00:03:11,439 - stmt_idx: 9, status: success, result: None
2025-02-05 00:03:11,439 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_370 IS NULL)
2025-02-05 00:03:11,548 - stmt_idx: 11, status: success, result: None
2025-02-05 00:03:11,548 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 00:03:11,548 - 执行后idx: 12, pending_stmts: {}
2025-02-05 00:03:11,548 - 
2025-02-05 00:03:11,660 - 执行序列成功
2025-02-05 00:03:12,431 - is_atomic: True
2025-02-05 00:03:12,431 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:03:12,431 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_3, col_370 FROM table_0 WHERE (id = 2) FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_370 FROM table_0 WHERE id >= 11 AND id <= 12 FOR UPDATE'), (1, "SELECT id, col_2 FROM table_0 WHERE (id = 3) AND (col_370 IS NULL) AND (col_0 = 'dittd') FOR UPDATE"), (1, 'SELECT id, col_1, col_370 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'UPDATE table_0 SET col_370 = 92.42, col_2 = 9 WHERE (id = 7)'), (1, "SELECT * FROM table_0 WHERE (col_3 = 'inmfl') AND (col_2 = 75) AND (col_370 IS NULL) FOR UPDATE"), (2, 'ROLLBACK'), (1, 'DELETE FROM table_0 WHERE (id = 9) AND (col_370 IS NULL)'), (1, 'DELETE FROM table_0 WHERE (col_370 IS NULL)'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 00:03:12,431 - snapshots: {'before': {'table_0': [(1, 'gzxsd', 63.9, 40, 'rpbjt', None), (2, 'tiwwc', 2.59, 45, 'vmwih', None), (3, 'dittd', 11.22, 90, 'zrjiz', None), (4, 'fbuoq', 28.55, 10, 'kfykf', None), (5, 'romai', 36.47, 58, 'wweqb', None), (6, 'qxvtg', 37.6, 41, 'ihihj', None), (7, 'cuzbx', 30.03, 2, 'nxslv', None), (8, 'pfkwp', 67.1, 75, 'inmfl', None), (9, 'vzubc', 98.48, 7, 'mpqlm', None), (10, 'cerdl', 40.8, 86, 'efwhh', None), (11, 'cdpbe', 78.18, 23, 'getca', None), (12, 'ucbne', 96.33, 42, 'vtlzq', None)]}, 'trx1': {'table_0': [(7, 'cuzbx', 30.03, 9, 'nxslv', 92.42)]}, 'trx2': {'table_0': [(1, 'gzxsd', 63.9, 40, 'rpbjt', None), (2, 'tiwwc', 2.59, 45, 'vmwih', None), (3, 'dittd', 11.22, 90, 'zrjiz', None), (4, 'fbuoq', 28.55, 10, 'kfykf', None), (5, 'romai', 36.47, 58, 'wweqb', None), (6, 'qxvtg', 37.6, 41, 'ihihj', None), (7, 'cuzbx', 30.03, 2, 'nxslv', None), (8, 'pfkwp', 67.1, 75, 'inmfl', None), (9, 'vzubc', 98.48, 7, 'mpqlm', None), (10, 'cerdl', 40.8, 86, 'efwhh', None), (11, 'cdpbe', 78.18, 23, 'getca', None), (12, 'ucbne', 96.33, 42, 'vtlzq', None)]}, 'serial': {'table_0': [(7, 'cuzbx', 30.03, 9, 'nxslv', 92.42)]}}
2025-02-05 00:03:12,431 - 
2025-02-05 00:03:12,443 - iter: 53
2025-02-05 00:03:13,929 - table table_0 has 8 rows
2025-02-05 00:03:13,930 - trx1_start_id: 3
2025-02-05 00:03:13,930 - trx1_end_id: 7
2025-02-05 00:03:13,930 - trx1_exclusive_start_id: 3
2025-02-05 00:03:13,930 - trx1_exclusive_end_id: 2
2025-02-05 00:03:13,930 - trx1_exclusive_ids: []
2025-02-05 00:03:13,930 - trx2_start_id: 3
2025-02-05 00:03:13,930 - trx2_end_id: 8
2025-02-05 00:03:13,930 - trx2_exclusive_start_id: 8
2025-02-05 00:03:13,930 - trx2_exclusive_end_id: 8
2025-02-05 00:03:13,930 - trx2_exclusive_ids: [8]
2025-02-05 00:03:13,930 - intersection_ids: [3, 4, 5, 6, 7]
2025-02-05 00:03:13,930 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8], 'intersection_row_ids': [3, 4, 5, 6, 7]}
2025-02-05 00:03:13,930 - lock_same_resource: True
2025-02-05 00:03:13,930 - 
2025-02-05 00:03:13,930 - intersection phase1
2025-02-05 00:03:13,933 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=True, range_end_idx=7
2025-02-05 00:03:13,935 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:13,935 - params: {'v1': '3', 'v2': '7', 'table': 'table_0', 'select_cols': 'col_0, col_1'}
2025-02-05 00:03:13,938 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=True, range_end_idx=8
2025-02-05 00:03:13,939 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:13,939 - params: {'v1': '3', 'v2': '8', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:03:13,939 - intersection phase1 end
2025-02-05 00:03:13,939 - 
2025-02-05 00:03:13,939 - intersection phase2
2025-02-05 00:03:13,939 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:03:13,940 - 事务2在第二阶段自己加的锁: II
2025-02-05 00:03:13,940 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:03:13,940 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:03:13,942 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=True, range_end_idx=2
2025-02-05 00:03:13,943 - 生成连续锁定SQL失败: 找不到从3到2的行
2025-02-05 00:03:13,943 - 生成锁SQL失败: 找不到从3到2的行
2025-02-05 00:03:13,943 - 生成死锁事务序列失败: 找不到从3到2的行
2025-02-05 00:03:13,943 - 
2025-02-05 00:03:13,943 - Error in iteration 53: 找不到从3到2的行
2025-02-05 00:03:13,943 - 
2025-02-05 00:03:13,951 - iter: 54
2025-02-05 00:03:15,482 - table table_0 has 11 rows
2025-02-05 00:03:15,482 - trx1_lock_row_ids: [1, 3, 6, 7, 8, 9, 10]
2025-02-05 00:03:15,482 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 00:03:15,482 - intersection_row_ids: [1, 3, 6, 7, 8, 9, 10]
2025-02-05 00:03:15,482 - trx1_exclusive_ids: []
2025-02-05 00:03:15,482 - trx2_exclusive_ids: [2, 4, 5, 11]
2025-02-05 00:03:15,482 - res_dict: {'trx1_lock_row_ids': [1, 3, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'intersection_row_ids': [1, 3, 6, 7, 8, 9, 10]}
2025-02-05 00:03:15,482 - lock_same_resource: True
2025-02-05 00:03:15,482 - 
2025-02-05 00:03:15,482 - intersection phase1
2025-02-05 00:03:15,486 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,487 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,487 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'col_1, col_3'}
2025-02-05 00:03:15,489 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,490 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:03:15,490 - params: {'cond': '(id = 3)', 'table': 'table_0', 'select_cols': 'id, col_1, col_3'}
2025-02-05 00:03:15,493 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,494 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:03:15,495 - params: {'cond': "(col_3 = 1.7) AND (col_2 = 1) AND (col_1 = 'uttfg')", 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:03:15,498 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,499 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:03:15,499 - params: {'cond': '(id = 7)', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:03:15,502 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,503 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,503 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:03:15,505 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,507 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,507 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:03:15,509 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,510 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,510 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_2, col_3'}
2025-02-05 00:03:15,514 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,515 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,516 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-05 00:03:15,518 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,519 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:03:15,519 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'howRV', 89, 68.25", 'table': 'table_0'}
2025-02-05 00:03:15,523 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,524 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,524 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:03:15,527 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,529 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:03:15,529 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'YJkFM', 29, 84.67", 'table': 'table_0'}
2025-02-05 00:03:15,532 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,533 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:03:15,533 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'wiKvP', 21, 32.08", 'table': 'table_0'}
2025-02-05 00:03:15,536 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,538 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,538 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_2, col_3'}
2025-02-05 00:03:15,541 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,542 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,542 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-05 00:03:15,543 - intersection phase1 end
2025-02-05 00:03:15,543 - 
2025-02-05 00:03:15,543 - intersection phase2
2025-02-05 00:03:15,543 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:03:15,543 - 事务2在第二阶段自己加的锁: NK
2025-02-05 00:03:15,543 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:03:15,543 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:03:15,547 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,548 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:03:15,548 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'eHzZP', 16, 76.79", 'table': 'table_0'}
2025-02-05 00:03:15,551 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,552 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:03:15,552 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'BjWgL', 28, 21.32", 'table': 'table_0'}
2025-02-05 00:03:15,557 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,558 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:03:15,558 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'qcJhF', 45, 79.42", 'table': 'table_0'}
2025-02-05 00:03:15,561 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,562 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,562 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:03:15,562 - intersection phase2 end
2025-02-05 00:03:15,562 - 
2025-02-05 00:03:15,563 - intersection phase3
2025-02-05 00:03:15,565 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,566 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:15,566 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:03:15,570 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:03:15,571 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:03:15,572 - params: {'set_expr': 'col_3 = 86.67', 'table': 'table_0', 'cond': '(id = 1)'}
2025-02-05 00:03:15,572 - intersection phase3 end
2025-02-05 00:03:15,572 - 
2025-02-05 00:03:15,572 - 生成死锁事务序列成功如下
2025-02-05 00:03:15,572 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_1, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_1, col_3 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'howRV', 89, 68.25)"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, "SELECT * FROM table_0 WHERE (col_3 = 1.7) AND (col_2 = 1) AND (col_1 = 'uttfg') LOCK IN SHARE MODE"), (1, 'SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'YJkFM', 29, 84.67)"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'wiKvP', 21, 32.08)"), (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eHzZP', 16, 76.79)"), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'BjWgL', 28, 21.32)"), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'qcJhF', 45, 79.42)"), (2, 'SELECT id FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (2, 'UPDATE table_0 SET col_3 = 86.67 WHERE (id = 1)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:03:17,120 - 创建事务1连接成功
2025-02-05 00:03:17,121 - 执行事务1语句: BEGIN
2025-02-05 00:03:17,122 - 执行事务1语句: SELECT col_1, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:03:17,123 - 执行事务1语句: SELECT id, col_1, col_3 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 00:03:17,124 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_3 = 1.7) AND (col_2 = 1) AND (col_1 = 'uttfg') LOCK IN SHARE MODE
2025-02-05 00:03:17,124 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 00:03:17,125 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 00:03:17,126 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 00:03:17,127 - 执行事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 00:03:17,128 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-05 00:03:17,128 - 执行事务1语句: COMMIT;
2025-02-05 00:03:17,133 - 执行事务1成功
2025-02-05 00:03:19,740 - 恢复初始状态成功
2025-02-05 00:03:20,518 - 创建事务2连接成功
2025-02-05 00:03:20,519 - 执行事务2语句: BEGIN
2025-02-05 00:03:20,520 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:20,521 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'howRV', 89, 68.25)
2025-02-05 00:03:20,522 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:03:20,523 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'YJkFM', 29, 84.67)
2025-02-05 00:03:20,524 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'wiKvP', 21, 32.08)
2025-02-05 00:03:20,524 - 执行事务2语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 00:03:20,525 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:03:20,526 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eHzZP', 16, 76.79)
2025-02-05 00:03:20,526 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'BjWgL', 28, 21.32)
2025-02-05 00:03:20,527 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'qcJhF', 45, 79.42)
2025-02-05 00:03:20,528 - 执行事务2语句: SELECT id FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE
2025-02-05 00:03:20,528 - 执行事务2语句: UPDATE table_0 SET col_3 = 86.67 WHERE (id = 1)
2025-02-05 00:03:20,531 - 执行事务2语句: COMMIT;
2025-02-05 00:03:20,535 - 执行事务2成功
2025-02-05 00:03:25,450 - 
2025-02-05 00:03:25,450 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT col_1, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-398, started 40008)>, 1738685005.4503767)}
2025-02-05 00:03:25,552 - stmt_idx: 2, status: success, result: None
2025-02-05 00:03:25,552 - 成功执行序列中事务1语句: SELECT col_1, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:03:25,552 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:03:25,552 - 
2025-02-05 00:03:25,660 - 
2025-02-05 00:03:25,661 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:25,765 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:25,765 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:25,766 - 
2025-02-05 00:03:25,875 - 
2025-02-05 00:03:25,876 - 执行前idx: 5, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953), 4: (1, 'SELECT id, col_1, col_3 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-400, started 41400)>, 1738685005.8750365)}
2025-02-05 00:03:25,981 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:26,089 - stmt_idx: 4, status: success, result: None
2025-02-05 00:03:26,089 - 成功执行序列中事务1语句: SELECT id, col_1, col_3 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 00:03:26,089 - 执行后idx: 5, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:26,089 - 
2025-02-05 00:03:26,198 - 
2025-02-05 00:03:26,198 - 执行前idx: 8, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953), 7: (1, "SELECT * FROM table_0 WHERE (col_3 = 1.7) AND (col_2 = 1) AND (col_1 = 'uttfg') LOCK IN SHARE MODE", <Thread(Thread-401, started 5108)>, 1738685006.1980174)}
2025-02-05 00:03:26,304 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:26,410 - stmt_idx: 7, status: success, result: None
2025-02-05 00:03:26,410 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_3 = 1.7) AND (col_2 = 1) AND (col_1 = 'uttfg') LOCK IN SHARE MODE
2025-02-05 00:03:26,410 - 执行后idx: 8, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:26,410 - 
2025-02-05 00:03:26,518 - 
2025-02-05 00:03:26,519 - 执行前idx: 9, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953), 8: (1, 'SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', <Thread(Thread-402, started 37040)>, 1738685006.5186334)}
2025-02-05 00:03:26,625 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:26,732 - stmt_idx: 8, status: success, result: None
2025-02-05 00:03:26,732 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 00:03:26,732 - 执行后idx: 9, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:26,732 - 
2025-02-05 00:03:26,839 - 
2025-02-05 00:03:26,840 - 执行前idx: 11, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953), 10: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-403, started 34404)>, 1738685006.839895)}
2025-02-05 00:03:26,949 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:27,057 - stmt_idx: 10, status: success, result: None
2025-02-05 00:03:27,057 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 00:03:27,057 - 执行后idx: 11, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:27,057 - 
2025-02-05 00:03:27,162 - 
2025-02-05 00:03:27,163 - 执行前idx: 14, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953), 13: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-404, started 26184)>, 1738685007.1623645)}
2025-02-05 00:03:27,269 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:27,375 - stmt_idx: 13, status: success, result: None
2025-02-05 00:03:27,375 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 00:03:27,375 - 执行后idx: 14, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:27,375 - 
2025-02-05 00:03:27,481 - 
2025-02-05 00:03:27,482 - 执行前idx: 15, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953), 14: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-405, started 35588)>, 1738685007.4813418)}
2025-02-05 00:03:27,588 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:27,695 - stmt_idx: 14, status: success, result: None
2025-02-05 00:03:27,695 - 成功执行序列中事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 00:03:27,695 - 执行后idx: 15, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:27,695 - 
2025-02-05 00:03:27,801 - 
2025-02-05 00:03:27,802 - 执行前idx: 21, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953), 20: (1, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE', <Thread(Thread-406, started 39692)>, 1738685007.8019202)}
2025-02-05 00:03:27,908 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:28,015 - stmt_idx: 20, status: success, result: None
2025-02-05 00:03:28,015 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-05 00:03:28,015 - 执行后idx: 21, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:28,015 - 
2025-02-05 00:03:28,123 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, started 41464)>, 1738685005.6606953)}
2025-02-05 00:03:28,123 - 
2025-02-05 00:03:28,123 - 执行前idx: 24, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-399, stopped 41464)>, 1738685005.6606953)}
2025-02-05 00:03:28,226 - stmt_idx: 3, status: success, result: None
2025-02-05 00:03:28,226 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:28,226 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:03:28,229 - 执行后idx: 24, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'howRV', 89, 68.25)", <Thread(Thread-407, started 34832)>, 1738685008.2278628), 6: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-408, started 40488)>, 1738685008.2281606), 9: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'YJkFM', 29, 84.67)", <Thread(Thread-409, started 33932)>, 1738685008.2281606), 11: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'wiKvP', 21, 32.08)", <Thread(Thread-410, started 36212)>, 1738685008.228667), 12: (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-411, started 31420)>, 1738685008.228667), 15: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-412, started 33928)>, 1738685008.228667), 16: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eHzZP', 16, 76.79)", <Thread(Thread-413, started 31992)>, 1738685008.2290957), 17: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'BjWgL', 28, 21.32)", <Thread(Thread-414, started 35292)>, 1738685008.2290957), 18: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'qcJhF', 45, 79.42)", <Thread(Thread-415, started 41936)>, 1738685008.2290957), 19: (2, 'SELECT id FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE', <Thread(Thread-416, started 40976)>, 1738685008.2295995), 21: (2, 'UPDATE table_0 SET col_3 = 86.67 WHERE (id = 1)', <Thread(Thread-417, started 29960)>, 1738685008.2295995), 22: (2, 'COMMIT', <Thread(Thread-418, started 27812)>, 1738685008.2295995)}
2025-02-05 00:03:28,230 - 
2025-02-05 00:03:28,333 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'howRV', 89, 68.25)", <Thread(Thread-407, stopped 34832)>, 1738685008.2278628), 6: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-408, stopped 40488)>, 1738685008.2281606), 9: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'YJkFM', 29, 84.67)", <Thread(Thread-409, stopped 33932)>, 1738685008.2281606), 11: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'wiKvP', 21, 32.08)", <Thread(Thread-410, stopped 36212)>, 1738685008.228667), 12: (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-411, stopped 31420)>, 1738685008.228667), 15: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-412, stopped 33928)>, 1738685008.228667), 16: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eHzZP', 16, 76.79)", <Thread(Thread-413, stopped 31992)>, 1738685008.2290957), 17: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'BjWgL', 28, 21.32)", <Thread(Thread-414, stopped 35292)>, 1738685008.2290957), 18: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'qcJhF', 45, 79.42)", <Thread(Thread-415, stopped 41936)>, 1738685008.2290957), 19: (2, 'SELECT id FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE', <Thread(Thread-416, stopped 40976)>, 1738685008.2295995), 21: (2, 'UPDATE table_0 SET col_3 = 86.67 WHERE (id = 1)', <Thread(Thread-417, stopped 29960)>, 1738685008.2295995), 22: (2, 'COMMIT', <Thread(Thread-418, stopped 27812)>, 1738685008.2295995)}
2025-02-05 00:03:28,333 - 
2025-02-05 00:03:28,333 - 执行前idx: 24, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'howRV', 89, 68.25)", <Thread(Thread-407, stopped 34832)>, 1738685008.2278628), 6: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-408, stopped 40488)>, 1738685008.2281606), 9: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'YJkFM', 29, 84.67)", <Thread(Thread-409, stopped 33932)>, 1738685008.2281606), 11: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'wiKvP', 21, 32.08)", <Thread(Thread-410, stopped 36212)>, 1738685008.228667), 12: (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-411, stopped 31420)>, 1738685008.228667), 15: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-412, stopped 33928)>, 1738685008.228667), 16: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eHzZP', 16, 76.79)", <Thread(Thread-413, stopped 31992)>, 1738685008.2290957), 17: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'BjWgL', 28, 21.32)", <Thread(Thread-414, stopped 35292)>, 1738685008.2290957), 18: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'qcJhF', 45, 79.42)", <Thread(Thread-415, stopped 41936)>, 1738685008.2290957), 19: (2, 'SELECT id FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE', <Thread(Thread-416, stopped 40976)>, 1738685008.2295995), 21: (2, 'UPDATE table_0 SET col_3 = 86.67 WHERE (id = 1)', <Thread(Thread-417, stopped 29960)>, 1738685008.2295995), 22: (2, 'COMMIT', <Thread(Thread-418, stopped 27812)>, 1738685008.2295995)}
2025-02-05 00:03:28,439 - stmt_idx: 5, status: success, result: None
2025-02-05 00:03:28,439 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'howRV', 89, 68.25)
2025-02-05 00:03:28,546 - stmt_idx: 6, status: success, result: None
2025-02-05 00:03:28,546 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 00:03:28,654 - stmt_idx: 9, status: success, result: None
2025-02-05 00:03:28,654 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'YJkFM', 29, 84.67)
2025-02-05 00:03:28,761 - stmt_idx: 11, status: success, result: None
2025-02-05 00:03:28,761 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'wiKvP', 21, 32.08)
2025-02-05 00:03:28,869 - stmt_idx: 12, status: success, result: None
2025-02-05 00:03:28,869 - 成功执行序列中事务2语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 00:03:28,978 - stmt_idx: 15, status: success, result: None
2025-02-05 00:03:28,978 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:03:29,084 - stmt_idx: 16, status: success, result: None
2025-02-05 00:03:29,084 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eHzZP', 16, 76.79)
2025-02-05 00:03:29,193 - stmt_idx: 17, status: success, result: None
2025-02-05 00:03:29,193 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'BjWgL', 28, 21.32)
2025-02-05 00:03:29,299 - stmt_idx: 18, status: success, result: None
2025-02-05 00:03:29,299 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'qcJhF', 45, 79.42)
2025-02-05 00:03:29,409 - stmt_idx: 19, status: success, result: None
2025-02-05 00:03:29,409 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE
2025-02-05 00:03:29,516 - stmt_idx: 21, status: success, result: None
2025-02-05 00:03:29,517 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 86.67 WHERE (id = 1)
2025-02-05 00:03:29,624 - stmt_idx: 22, status: success, result: None
2025-02-05 00:03:29,624 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:03:29,624 - 执行后idx: 24, pending_stmts: {}
2025-02-05 00:03:29,624 - 
2025-02-05 00:03:29,736 - 执行序列成功
2025-02-05 00:03:30,507 - is_atomic: True
2025-02-05 00:03:30,507 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:03:30,507 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_1, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_3 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_3 = 1.7) AND (col_2 = 1) AND (col_1 = 'uttfg') LOCK IN SHARE MODE"), (1, 'SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (1, 'COMMIT'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'howRV', 89, 68.25)"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'YJkFM', 29, 84.67)"), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'wiKvP', 21, 32.08)"), (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eHzZP', 16, 76.79)"), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'BjWgL', 28, 21.32)"), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'qcJhF', 45, 79.42)"), (2, 'SELECT id FROM table_0 WHERE id >= 11 AND id <= 11 FOR UPDATE'), (2, 'UPDATE table_0 SET col_3 = 86.67 WHERE (id = 1)'), (2, 'COMMIT')]
2025-02-05 00:03:30,507 - snapshots: {'before': {'table_0': [(1, 'mwefw', 81, 97.8), (2, 'eelyt', 61, 31.28), (3, 'qiidh', 30, 20.24), (4, 'bfbie', 35, 41.32), (5, 'euioz', 39, 23.42), (6, 'uttfg', 1, 1.7), (7, 'hclfz', 67, 55.84), (8, 'kkcvn', 85, 28.19), (9, 'bjadq', 85, 89.98), (10, 'knwlg', 96, 96.42), (11, 'eurol', 1, 85.16)]}, 'trx1': {'table_0': [(1, 'mwefw', 81, 97.8), (2, 'eelyt', 61, 31.28), (3, 'qiidh', 30, 20.24), (4, 'bfbie', 35, 41.32), (5, 'euioz', 39, 23.42), (6, 'uttfg', 1, 1.7), (7, 'hclfz', 67, 55.84), (8, 'kkcvn', 85, 28.19), (9, 'bjadq', 85, 89.98), (10, 'knwlg', 96, 96.42), (11, 'eurol', 1, 85.16)]}, 'trx2': {'table_0': [(1, 'mwefw', 81, 86.67), (2, 'eelyt', 61, 31.28), (3, 'qiidh', 30, 20.24), (4, 'bfbie', 35, 41.32), (5, 'euioz', 39, 23.42), (6, 'uttfg', 1, 1.7), (7, 'hclfz', 67, 55.84), (8, 'kkcvn', 85, 28.19), (9, 'bjadq', 85, 89.98), (10, 'knwlg', 96, 96.42), (11, 'eurol', 1, 85.16), (12, 'howRV', 89, 68.25), (13, 'YJkFM', 29, 84.67), (14, 'wiKvP', 21, 32.08), (15, 'eHzZP', 16, 76.79), (16, 'BjWgL', 28, 21.32), (17, 'qcJhF', 45, 79.42)]}, 'serial': {'table_0': [(1, 'mwefw', 81, 86.67), (2, 'eelyt', 61, 31.28), (3, 'qiidh', 30, 20.24), (4, 'bfbie', 35, 41.32), (5, 'euioz', 39, 23.42), (6, 'uttfg', 1, 1.7), (7, 'hclfz', 67, 55.84), (8, 'kkcvn', 85, 28.19), (9, 'bjadq', 85, 89.98), (10, 'knwlg', 96, 96.42), (11, 'eurol', 1, 85.16), (18, 'howRV', 89, 68.25), (19, 'YJkFM', 29, 84.67), (20, 'wiKvP', 21, 32.08), (21, 'eHzZP', 16, 76.79), (22, 'BjWgL', 28, 21.32), (23, 'qcJhF', 45, 79.42)]}}
2025-02-05 00:03:30,507 - 
2025-02-05 00:03:30,518 - iter: 55
2025-02-05 00:03:32,029 - table table_0 has 15 rows
2025-02-05 00:03:32,030 - res_dict: {'trx1_lock_row_ids': [15], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'intersection_row_ids': []}
2025-02-05 00:03:32,030 - lock_same_resource: False
2025-02-05 00:03:32,030 - 
2025-02-05 00:03:32,030 - non intersection phase1
2025-02-05 00:03:32,030 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:03:32,030 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:03:32,030 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:03:32,030 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:03:32,033 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 00:03:32,034 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:03:32,034 - params: {'set_expr': 'col_0 = 86.51', 'table': 'table_0', 'cond': "(col_1 = 'dvupx') AND (col_0 = 8.49)"}
2025-02-05 00:03:32,036 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=14
2025-02-05 00:03:32,037 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:32,038 - params: {'v1': '1', 'v2': '14', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:03:32,038 - non intersection phase1 end
2025-02-05 00:03:32,038 - 
2025-02-05 00:03:32,038 - non intersection phase2
2025-02-05 00:03:32,041 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=True, range_end_idx=11
2025-02-05 00:03:32,042 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:32,042 - params: {'v1': '4', 'v2': '11', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:03:32,046 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 00:03:32,047 - needed_params: {'cond', 'table'}
2025-02-05 00:03:32,047 - params: {'cond': '(id = 15)', 'table': 'table_0'}
2025-02-05 00:03:32,047 - non intersection phase2 end
2025-02-05 00:03:32,048 - 
2025-02-05 00:03:32,048 - 生成死锁事务序列成功如下
2025-02-05 00:03:32,048 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 86.51 WHERE (col_1 = 'dvupx') AND (col_0 = 8.49)"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 11 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 15)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:03:33,600 - 创建事务1连接成功
2025-02-05 00:03:33,601 - 执行事务1语句: BEGIN
2025-02-05 00:03:33,602 - 执行事务1语句: UPDATE table_0 SET col_0 = 86.51 WHERE (col_1 = 'dvupx') AND (col_0 = 8.49)
2025-02-05 00:03:33,603 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 11 FOR UPDATE
2025-02-05 00:03:33,603 - 执行事务1语句: COMMIT;
2025-02-05 00:03:33,608 - 执行事务1成功
2025-02-05 00:03:36,214 - 恢复初始状态成功
2025-02-05 00:03:36,977 - 创建事务2连接成功
2025-02-05 00:03:36,978 - 执行事务2语句: BEGIN
2025-02-05 00:03:36,980 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE
2025-02-05 00:03:36,980 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 15)
2025-02-05 00:03:36,983 - 执行事务2语句: COMMIT;
2025-02-05 00:03:36,987 - 执行事务2成功
2025-02-05 00:03:41,860 - 
2025-02-05 00:03:41,860 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_0 = 86.51 WHERE (col_1 = 'dvupx') AND (col_0 = 8.49)", <Thread(Thread-419, started 11792)>, 1738685021.860154)}
2025-02-05 00:03:41,974 - stmt_idx: 2, status: success, result: None
2025-02-05 00:03:41,974 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 86.51 WHERE (col_1 = 'dvupx') AND (col_0 = 8.49)
2025-02-05 00:03:41,974 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:03:41,974 - 
2025-02-05 00:03:42,082 - 
2025-02-05 00:03:42,083 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE', <Thread(Thread-420, started 38412)>, 1738685022.0828898)}
2025-02-05 00:03:42,190 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE
2025-02-05 00:03:42,190 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE', <Thread(Thread-420, started 38412)>, 1738685022.0828898)}
2025-02-05 00:03:42,190 - 
2025-02-05 00:03:42,295 - 
2025-02-05 00:03:42,296 - 执行前idx: 5, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE', <Thread(Thread-420, started 38412)>, 1738685022.0828898), 4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 11 FOR UPDATE', <Thread(Thread-421, started 35784)>, 1738685022.2954547)}
2025-02-05 00:03:42,403 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE
2025-02-05 00:03:42,511 - stmt_idx: 4, status: success, result: None
2025-02-05 00:03:42,511 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 11 FOR UPDATE
2025-02-05 00:03:42,512 - 执行后idx: 5, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE', <Thread(Thread-420, started 38412)>, 1738685022.0828898)}
2025-02-05 00:03:42,512 - 
2025-02-05 00:03:42,623 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE', <Thread(Thread-420, started 38412)>, 1738685022.0828898)}
2025-02-05 00:03:42,623 - 
2025-02-05 00:03:42,623 - 执行前idx: 8, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE', <Thread(Thread-420, stopped 38412)>, 1738685022.0828898)}
2025-02-05 00:03:42,728 - stmt_idx: 3, status: success, result: None
2025-02-05 00:03:42,728 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE
2025-02-05 00:03:42,728 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE
2025-02-05 00:03:42,729 - 执行后idx: 8, pending_stmts: {5: (2, 'DELETE FROM table_0 WHERE (id = 15)', <Thread(Thread-422, started 22116)>, 1738685022.7290263), 7: (2, 'COMMIT', <Thread(Thread-423, started 14816)>, 1738685022.729669)}
2025-02-05 00:03:42,729 - 
2025-02-05 00:03:42,835 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'DELETE FROM table_0 WHERE (id = 15)', <Thread(Thread-422, stopped 22116)>, 1738685022.7290263), 7: (2, 'COMMIT', <Thread(Thread-423, stopped 14816)>, 1738685022.729669)}
2025-02-05 00:03:42,835 - 
2025-02-05 00:03:42,835 - 执行前idx: 8, pending_stmts: {5: (2, 'DELETE FROM table_0 WHERE (id = 15)', <Thread(Thread-422, stopped 22116)>, 1738685022.7290263), 7: (2, 'COMMIT', <Thread(Thread-423, stopped 14816)>, 1738685022.729669)}
2025-02-05 00:03:42,944 - stmt_idx: 5, status: success, result: None
2025-02-05 00:03:42,944 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 15)
2025-02-05 00:03:43,052 - stmt_idx: 7, status: success, result: None
2025-02-05 00:03:43,052 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:03:43,052 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:03:43,052 - 
2025-02-05 00:03:43,161 - 执行序列成功
2025-02-05 00:03:43,940 - is_atomic: True
2025-02-05 00:03:43,940 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:03:43,940 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 86.51 WHERE (col_1 = 'dvupx') AND (col_0 = 8.49)"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 11 FOR UPDATE'), (1, 'COMMIT'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 14 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 15)'), (2, 'COMMIT')]
2025-02-05 00:03:43,941 - snapshots: {'before': {'table_0': [(1, 33.71, 'hbqzu', 31), (2, 5.15, 'okhdu', 12), (3, 95.38, 'pjtve', 46), (4, 40.59, 'qceht', 33), (5, 56.8, 'chkzn', 40), (6, 1.27, 'kseaw', 3), (7, 6.69, 'uecyc', 29), (8, 23.1, 'jtnel', 47), (9, 61.29, 'zrqoz', 22), (10, 38.1, 'vahkm', 70), (11, 13.67, 'eazvq', 50), (12, 73.62, 'ioiyf', 65), (13, 50.39, 'kuujb', 69), (14, 55.85, 'rwxli', 89), (15, 8.49, 'dvupx', 51)]}, 'trx1': {'table_0': [(1, 33.71, 'hbqzu', 31), (2, 5.15, 'okhdu', 12), (3, 95.38, 'pjtve', 46), (4, 40.59, 'qceht', 33), (5, 56.8, 'chkzn', 40), (6, 1.27, 'kseaw', 3), (7, 6.69, 'uecyc', 29), (8, 23.1, 'jtnel', 47), (9, 61.29, 'zrqoz', 22), (10, 38.1, 'vahkm', 70), (11, 13.67, 'eazvq', 50), (12, 73.62, 'ioiyf', 65), (13, 50.39, 'kuujb', 69), (14, 55.85, 'rwxli', 89), (15, 8.49, 'dvupx', 51)]}, 'trx2': {'table_0': [(1, 33.71, 'hbqzu', 31), (2, 5.15, 'okhdu', 12), (3, 95.38, 'pjtve', 46), (4, 40.59, 'qceht', 33), (5, 56.8, 'chkzn', 40), (6, 1.27, 'kseaw', 3), (7, 6.69, 'uecyc', 29), (8, 23.1, 'jtnel', 47), (9, 61.29, 'zrqoz', 22), (10, 38.1, 'vahkm', 70), (11, 13.67, 'eazvq', 50), (12, 73.62, 'ioiyf', 65), (13, 50.39, 'kuujb', 69), (14, 55.85, 'rwxli', 89)]}, 'serial': {'table_0': [(1, 33.71, 'hbqzu', 31), (2, 5.15, 'okhdu', 12), (3, 95.38, 'pjtve', 46), (4, 40.59, 'qceht', 33), (5, 56.8, 'chkzn', 40), (6, 1.27, 'kseaw', 3), (7, 6.69, 'uecyc', 29), (8, 23.1, 'jtnel', 47), (9, 61.29, 'zrqoz', 22), (10, 38.1, 'vahkm', 70), (11, 13.67, 'eazvq', 50), (12, 73.62, 'ioiyf', 65), (13, 50.39, 'kuujb', 69), (14, 55.85, 'rwxli', 89)]}}
2025-02-05 00:03:43,941 - 
2025-02-05 00:03:43,952 - iter: 56
2025-02-05 00:03:45,447 - table table_0 has 14 rows
2025-02-05 00:03:45,447 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7], 'trx2_lock_row_ids': [14], 'intersection_row_ids': []}
2025-02-05 00:03:45,447 - lock_same_resource: False
2025-02-05 00:03:45,448 - 
2025-02-05 00:03:45,448 - non intersection phase1
2025-02-05 00:03:45,448 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:03:45,448 - 事务2在第一阶段自己加的锁: II
2025-02-05 00:03:45,448 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 00:03:45,448 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:03:45,451 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=7
2025-02-05 00:03:45,452 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:45,452 - params: {'v1': '4', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-05 00:03:45,455 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=14, is_continuous=True, range_end_idx=14
2025-02-05 00:03:45,456 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:03:45,456 - params: {'v1': '14', 'set_expr': 'col_0 = 87.94, col_149 = 91', 'table': 'table_0', 'v2': '14'}
2025-02-05 00:03:45,456 - non intersection phase1 end
2025-02-05 00:03:45,457 - 
2025-02-05 00:03:45,457 - non intersection phase2
2025-02-05 00:03:45,459 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=14, is_continuous=True, range_end_idx=14
2025-02-05 00:03:45,460 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:45,460 - params: {'v1': '14', 'v2': '14', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_149'}
2025-02-05 00:03:45,462 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 00:03:45,463 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:45,463 - params: {'v1': '4', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_149'}
2025-02-05 00:03:45,464 - non intersection phase2 end
2025-02-05 00:03:45,464 - 
2025-02-05 00:03:45,464 - 生成死锁事务序列成功如下
2025-02-05 00:03:45,464 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_0 = 87.94, col_149 = 91 WHERE id BETWEEN 14 AND 14'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:03:47,027 - 创建事务1连接成功
2025-02-05 00:03:47,029 - 执行事务1语句: BEGIN
2025-02-05 00:03:47,030 - 执行事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE
2025-02-05 00:03:47,031 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE
2025-02-05 00:03:47,032 - 执行事务1语句: COMMIT;
2025-02-05 00:03:47,035 - 执行事务1成功
2025-02-05 00:03:49,629 - 恢复初始状态成功
2025-02-05 00:03:50,408 - 创建事务2连接成功
2025-02-05 00:03:50,409 - 执行事务2语句: BEGIN
2025-02-05 00:03:50,410 - 执行事务2语句: UPDATE table_0 SET col_0 = 87.94, col_149 = 91 WHERE id BETWEEN 14 AND 14
2025-02-05 00:03:50,411 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 00:03:50,413 - 执行事务2语句: COMMIT;
2025-02-05 00:03:50,418 - 执行事务2成功
2025-02-05 00:03:55,323 - 
2025-02-05 00:03:55,323 - 执行前idx: 3, pending_stmts: {2: (2, 'UPDATE table_0 SET col_0 = 87.94, col_149 = 91 WHERE id BETWEEN 14 AND 14', <Thread(Thread-424, started 36392)>, 1738685035.3235815)}
2025-02-05 00:03:55,432 - stmt_idx: 2, status: success, result: None
2025-02-05 00:03:55,432 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 87.94, col_149 = 91 WHERE id BETWEEN 14 AND 14
2025-02-05 00:03:55,432 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:03:55,432 - 
2025-02-05 00:03:55,542 - 
2025-02-05 00:03:55,543 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE', <Thread(Thread-425, started 37268)>, 1738685035.5426984)}
2025-02-05 00:03:55,647 - stmt_idx: 3, status: success, result: None
2025-02-05 00:03:55,647 - 成功执行序列中事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE
2025-02-05 00:03:55,647 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:03:55,647 - 
2025-02-05 00:03:55,755 - 
2025-02-05 00:03:55,756 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE', <Thread(Thread-426, started 37368)>, 1738685035.7552726)}
2025-02-05 00:03:55,862 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE
2025-02-05 00:03:55,862 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE', <Thread(Thread-426, started 37368)>, 1738685035.7552726)}
2025-02-05 00:03:55,862 - 
2025-02-05 00:03:55,969 - 
2025-02-05 00:03:55,970 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE', <Thread(Thread-426, started 37368)>, 1738685035.7552726), 5: (2, 'SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-427, started 11716)>, 1738685035.9695435)}
2025-02-05 00:03:55,973 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 00:03:56,077 - stmt_idx: 4, status: success, result: None
2025-02-05 00:03:56,077 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE
2025-02-05 00:03:56,077 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE
2025-02-05 00:03:56,185 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:03:56,185 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 00:03:56,185 - 错误: dictionary changed size during iteration
2025-02-05 00:03:56,188 - 执行序列成功
2025-02-05 00:03:56,997 - is_atomic: True
2025-02-05 00:03:56,997 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:03:56,997 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_0 = 87.94, col_149 = 91 WHERE id BETWEEN 14 AND 14'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_149 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 00:03:56,997 - snapshots: {'before': {'table_0': [(1, 17.69, 'ovbzh', 17, None), (2, 28.14, 'oedbf', 44, None), (3, 99.54, 'qfbkc', 19, None), (4, 5.89, 'nlzqe', 64, None), (5, 31.49, 'piajw', 87, None), (6, 93.31, 'dpsdq', 42, None), (7, 6.02, 'ayraq', 70, None), (8, 24.57, 'hezpa', 34, None), (9, 55.81, 'maujl', 41, None), (10, 89.32, 'jcrpr', 3, None), (11, 46.6, 'xacxz', 66, None), (12, 26.81, 'apwsh', 8, None), (13, 14.99, 'picgn', 35, None), (14, 35.92, 'qeaub', 76, None)]}, 'trx1': {'table_0': [(1, 17.69, 'ovbzh', 17, None), (2, 28.14, 'oedbf', 44, None), (3, 99.54, 'qfbkc', 19, None), (4, 5.89, 'nlzqe', 64, None), (5, 31.49, 'piajw', 87, None), (6, 93.31, 'dpsdq', 42, None), (7, 6.02, 'ayraq', 70, None), (8, 24.57, 'hezpa', 34, None), (9, 55.81, 'maujl', 41, None), (10, 89.32, 'jcrpr', 3, None), (11, 46.6, 'xacxz', 66, None), (12, 26.81, 'apwsh', 8, None), (13, 14.99, 'picgn', 35, None), (14, 35.92, 'qeaub', 76, None)]}, 'trx2': {'table_0': [(1, 17.69, 'ovbzh', 17, None), (2, 28.14, 'oedbf', 44, None), (3, 99.54, 'qfbkc', 19, None), (4, 5.89, 'nlzqe', 64, None), (5, 31.49, 'piajw', 87, None), (6, 93.31, 'dpsdq', 42, None), (7, 6.02, 'ayraq', 70, None), (8, 24.57, 'hezpa', 34, None), (9, 55.81, 'maujl', 41, None), (10, 89.32, 'jcrpr', 3, None), (11, 46.6, 'xacxz', 66, None), (12, 26.81, 'apwsh', 8, None), (13, 14.99, 'picgn', 35, None), (14, 87.94, 'qeaub', 76, 91)]}, 'serial': {'table_0': [(1, 17.69, 'ovbzh', 17, None), (2, 28.14, 'oedbf', 44, None), (3, 99.54, 'qfbkc', 19, None), (4, 5.89, 'nlzqe', 64, None), (5, 31.49, 'piajw', 87, None), (6, 93.31, 'dpsdq', 42, None), (7, 6.02, 'ayraq', 70, None), (8, 24.57, 'hezpa', 34, None), (9, 55.81, 'maujl', 41, None), (10, 89.32, 'jcrpr', 3, None), (11, 46.6, 'xacxz', 66, None), (12, 26.81, 'apwsh', 8, None), (13, 14.99, 'picgn', 35, None), (14, 35.92, 'qeaub', 76, None)]}}
2025-02-05 00:03:56,997 - 
2025-02-05 00:03:57,008 - iter: 57
2025-02-05 00:03:58,503 - table table_0 has 8 rows
2025-02-05 00:03:58,504 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6], 'trx2_lock_row_ids': [1, 7, 8], 'intersection_row_ids': []}
2025-02-05 00:03:58,504 - lock_same_resource: False
2025-02-05 00:03:58,504 - 
2025-02-05 00:03:58,504 - non intersection phase1
2025-02-05 00:03:58,504 - 事务1在第一阶段自己加的锁: II
2025-02-05 00:03:58,504 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:03:58,504 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:03:58,504 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:03:58,507 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 00:03:58,509 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:03:58,509 - params: {'v1': '2', 'set_expr': 'col_3 = 6.92, col_0 = 92, col_1 = 8.39', 'table': 'table_0', 'v2': '6'}
2025-02-05 00:03:58,512 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:03:58,514 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:03:58,514 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_506', 'vals': "NULL, 22, 46.38, 'Nwkez', 49.41, 'ZvjkB'", 'table': 'table_0'}
2025-02-05 00:03:58,518 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:03:58,520 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:03:58,520 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_506', 'vals': "NULL, 29, 15.0, 'FZodl', 43.25, 'GZwxx'", 'table': 'table_0'}
2025-02-05 00:03:58,523 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:03:58,524 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:03:58,524 - params: {'set_expr': "col_0 = 84, col_506 = 'NQEmf', col_1 = 32.14, col_2 = 'NhGPn', col_3 = 86.28", 'table': 'table_0', 'cond': '(id = 8)'}
2025-02-05 00:03:58,524 - non intersection phase1 end
2025-02-05 00:03:58,524 - 
2025-02-05 00:03:58,525 - non intersection phase2
2025-02-05 00:03:58,528 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:03:58,529 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:03:58,529 - params: {'set_expr': "col_1 = 40.15, col_2 = 'Ggquy', col_3 = 22.91", 'table': 'table_0', 'cond': '(col_0 = 31) AND (col_3 = 93.63)'}
2025-02-05 00:03:58,532 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:03:58,533 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:03:58,533 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:03:58,533 - non intersection phase2 end
2025-02-05 00:03:58,533 - 
2025-02-05 00:03:58,533 - 生成死锁事务序列成功如下
2025-02-05 00:03:58,533 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 22, 46.38, 'Nwkez', 49.41, 'ZvjkB')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 29, 15.0, 'FZodl', 43.25, 'GZwxx')"), (2, "UPDATE table_0 SET col_0 = 84, col_506 = 'NQEmf', col_1 = 32.14, col_2 = 'NhGPn', col_3 = 86.28 WHERE (id = 8)"), (1, 'UPDATE table_0 SET col_3 = 6.92, col_0 = 92, col_1 = 8.39 WHERE id BETWEEN 2 AND 6'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 40.15, col_2 = 'Ggquy', col_3 = 22.91 WHERE (col_0 = 31) AND (col_3 = 93.63)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:04:00,066 - 创建事务1连接成功
2025-02-05 00:04:00,067 - 执行事务1语句: BEGIN
2025-02-05 00:04:00,068 - 执行事务1语句: UPDATE table_0 SET col_3 = 6.92, col_0 = 92, col_1 = 8.39 WHERE id BETWEEN 2 AND 6
2025-02-05 00:04:00,069 - 执行事务1语句: UPDATE table_0 SET col_1 = 40.15, col_2 = 'Ggquy', col_3 = 22.91 WHERE (col_0 = 31) AND (col_3 = 93.63)
2025-02-05 00:04:00,071 - 执行事务1语句: COMMIT;
2025-02-05 00:04:00,076 - 执行事务1成功
2025-02-05 00:04:02,695 - 恢复初始状态成功
2025-02-05 00:04:03,469 - 创建事务2连接成功
2025-02-05 00:04:03,471 - 执行事务2语句: BEGIN
2025-02-05 00:04:03,472 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 22, 46.38, 'Nwkez', 49.41, 'ZvjkB')
2025-02-05 00:04:03,472 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 29, 15.0, 'FZodl', 43.25, 'GZwxx')
2025-02-05 00:04:03,473 - 执行事务2语句: UPDATE table_0 SET col_0 = 84, col_506 = 'NQEmf', col_1 = 32.14, col_2 = 'NhGPn', col_3 = 86.28 WHERE (id = 8)
2025-02-05 00:04:03,474 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:04:03,476 - 执行事务2语句: COMMIT;
2025-02-05 00:04:03,480 - 执行事务2成功
2025-02-05 00:04:08,422 - 
2025-02-05 00:04:08,422 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 22, 46.38, 'Nwkez', 49.41, 'ZvjkB')", <Thread(Thread-428, started 29384)>, 1738685048.422384)}
2025-02-05 00:04:08,524 - stmt_idx: 2, status: success, result: None
2025-02-05 00:04:08,524 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 22, 46.38, 'Nwkez', 49.41, 'ZvjkB')
2025-02-05 00:04:08,524 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:04:08,524 - 
2025-02-05 00:04:08,631 - 
2025-02-05 00:04:08,632 - 执行前idx: 4, pending_stmts: {3: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 29, 15.0, 'FZodl', 43.25, 'GZwxx')", <Thread(Thread-429, started 40944)>, 1738685048.631841)}
2025-02-05 00:04:08,738 - stmt_idx: 3, status: success, result: None
2025-02-05 00:04:08,738 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 29, 15.0, 'FZodl', 43.25, 'GZwxx')
2025-02-05 00:04:08,738 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:04:08,738 - 
2025-02-05 00:04:08,845 - 
2025-02-05 00:04:08,846 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 84, col_506 = 'NQEmf', col_1 = 32.14, col_2 = 'NhGPn', col_3 = 86.28 WHERE (id = 8)", <Thread(Thread-430, started 41384)>, 1738685048.8459764)}
2025-02-05 00:04:08,953 - stmt_idx: 4, status: success, result: None
2025-02-05 00:04:08,953 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 84, col_506 = 'NQEmf', col_1 = 32.14, col_2 = 'NhGPn', col_3 = 86.28 WHERE (id = 8)
2025-02-05 00:04:08,953 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:04:08,953 - 
2025-02-05 00:04:09,061 - 
2025-02-05 00:04:09,061 - 执行前idx: 6, pending_stmts: {5: (1, 'UPDATE table_0 SET col_3 = 6.92, col_0 = 92, col_1 = 8.39 WHERE id BETWEEN 2 AND 6', <Thread(Thread-431, started 31344)>, 1738685049.0610375)}
2025-02-05 00:04:09,167 - stmt_idx: 5, status: success, result: None
2025-02-05 00:04:09,167 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 6.92, col_0 = 92, col_1 = 8.39 WHERE id BETWEEN 2 AND 6
2025-02-05 00:04:09,167 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:04:09,167 - 
2025-02-05 00:04:09,274 - 
2025-02-05 00:04:09,275 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-432, started 2704)>, 1738685049.274695)}
2025-02-05 00:04:09,380 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:04:09,380 - 执行后idx: 7, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-432, started 2704)>, 1738685049.274695)}
2025-02-05 00:04:09,381 - 
2025-02-05 00:04:09,486 - 
2025-02-05 00:04:09,487 - 执行前idx: 8, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-432, started 2704)>, 1738685049.274695), 7: (1, "UPDATE table_0 SET col_1 = 40.15, col_2 = 'Ggquy', col_3 = 22.91 WHERE (col_0 = 31) AND (col_3 = 93.63)", <Thread(Thread-433, started 39580)>, 1738685049.4865162)}
2025-02-05 00:04:09,490 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:04:09,593 - stmt_idx: 6, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:04:09,593 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:04:09,593 - 错误: dictionary changed size during iteration
2025-02-05 00:04:09,598 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, "UPDATE table_0 SET col_1 = 40.15, col_2 = 'Ggquy', col_3 = 22.91 WHERE (col_0 = 31) AND (col_3 = 93.63)", <Thread(Thread-433, stopped 39580)>, 1738685049.4865162)}
2025-02-05 00:04:09,598 - 
2025-02-05 00:04:09,598 - 执行前idx: 10, pending_stmts: {7: (1, "UPDATE table_0 SET col_1 = 40.15, col_2 = 'Ggquy', col_3 = 22.91 WHERE (col_0 = 31) AND (col_3 = 93.63)", <Thread(Thread-433, stopped 39580)>, 1738685049.4865162)}
2025-02-05 00:04:09,700 - stmt_idx: 7, status: success, result: None
2025-02-05 00:04:09,700 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 40.15, col_2 = 'Ggquy', col_3 = 22.91 WHERE (col_0 = 31) AND (col_3 = 93.63)
2025-02-05 00:04:09,700 - 执行后idx: 10, pending_stmts: {}
2025-02-05 00:04:09,700 - 
2025-02-05 00:04:09,809 - 执行序列成功
2025-02-05 00:04:10,576 - is_atomic: True
2025-02-05 00:04:10,577 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:04:10,577 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 22, 46.38, 'Nwkez', 49.41, 'ZvjkB')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_506) VALUES (NULL, 29, 15.0, 'FZodl', 43.25, 'GZwxx')"), (2, "UPDATE table_0 SET col_0 = 84, col_506 = 'NQEmf', col_1 = 32.14, col_2 = 'NhGPn', col_3 = 86.28 WHERE (id = 8)"), (1, 'UPDATE table_0 SET col_3 = 6.92, col_0 = 92, col_1 = 8.39 WHERE id BETWEEN 2 AND 6'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, "UPDATE table_0 SET col_1 = 40.15, col_2 = 'Ggquy', col_3 = 22.91 WHERE (col_0 = 31) AND (col_3 = 93.63)")]
2025-02-05 00:04:10,577 - snapshots: {'before': {'table_0': [(1, 31, 96.84, 'oqcre', 93.63, None), (2, 18, 37.8, 'zfuqk', 81.18, None), (3, 88, 26.1, 'yimiu', 12.28, None), (4, 21, 17.03, 'osnqo', 21.99, None), (5, 79, 24.37, 'pvxkh', 9.33, None), (6, 99, 63.61, 'krhqt', 97.41, None), (7, 80, 97.52, 'acunk', 68.19, None), (8, 11, 75.21, 'qyzvo', 71.84, None)]}, 'trx1': {'table_0': [(1, 31, 96.84, 'oqcre', 93.63, None), (2, 92, 8.39, 'zfuqk', 6.92, None), (3, 92, 8.39, 'yimiu', 6.92, None), (4, 92, 8.39, 'osnqo', 6.92, None), (5, 92, 8.39, 'pvxkh', 6.92, None), (6, 92, 8.39, 'krhqt', 6.92, None), (7, 80, 97.52, 'acunk', 68.19, None), (8, 11, 75.21, 'qyzvo', 71.84, None)]}, 'trx2': {'table_0': [(1, 31, 96.84, 'oqcre', 93.63, None), (2, 18, 37.8, 'zfuqk', 81.18, None), (3, 88, 26.1, 'yimiu', 12.28, None), (4, 21, 17.03, 'osnqo', 21.99, None), (5, 79, 24.37, 'pvxkh', 9.33, None), (6, 99, 63.61, 'krhqt', 97.41, None), (7, 80, 97.52, 'acunk', 68.19, None), (8, 84, 32.14, 'NhGPn', 86.28, 'NQEmf'), (9, 22, 46.38, 'Nwkez', 49.41, 'ZvjkB'), (10, 29, 15.0, 'FZodl', 43.25, 'GZwxx')]}, 'serial': {'table_0': [(1, 31, 96.84, 'oqcre', 93.63, None), (2, 92, 8.39, 'zfuqk', 6.92, None), (3, 92, 8.39, 'yimiu', 6.92, None), (4, 92, 8.39, 'osnqo', 6.92, None), (5, 92, 8.39, 'pvxkh', 6.92, None), (6, 92, 8.39, 'krhqt', 6.92, None), (7, 80, 97.52, 'acunk', 68.19, None), (8, 11, 75.21, 'qyzvo', 71.84, None)]}}
2025-02-05 00:04:10,577 - 
2025-02-05 00:04:10,587 - iter: 58
2025-02-05 00:04:12,071 - table table_0 has 8 rows
2025-02-05 00:04:12,071 - trx1_start_id: 2
2025-02-05 00:04:12,071 - trx1_end_id: 6
2025-02-05 00:04:12,071 - trx1_exclusive_start_id: 2
2025-02-05 00:04:12,071 - trx1_exclusive_end_id: 1
2025-02-05 00:04:12,072 - trx1_exclusive_ids: []
2025-02-05 00:04:12,072 - trx2_start_id: 2
2025-02-05 00:04:12,072 - trx2_end_id: 6
2025-02-05 00:04:12,072 - trx2_exclusive_start_id: 7
2025-02-05 00:04:12,072 - trx2_exclusive_end_id: 6
2025-02-05 00:04:12,072 - trx2_exclusive_ids: []
2025-02-05 00:04:12,072 - intersection_ids: [2, 3, 4, 5, 6]
2025-02-05 00:04:12,072 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6], 'trx2_lock_row_ids': [2, 3, 4, 5, 6], 'intersection_row_ids': [2, 3, 4, 5, 6]}
2025-02-05 00:04:12,072 - lock_same_resource: True
2025-02-05 00:04:12,072 - 
2025-02-05 00:04:12,072 - intersection phase1
2025-02-05 00:04:12,075 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 00:04:12,076 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:12,076 - params: {'v1': '2', 'v2': '6', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:04:12,080 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 00:04:12,081 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:12,081 - params: {'v1': '2', 'v2': '6', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:04:12,081 - intersection phase1 end
2025-02-05 00:04:12,081 - 
2025-02-05 00:04:12,081 - intersection phase2
2025-02-05 00:04:12,081 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:04:12,082 - 事务2在第二阶段自己加的锁: II
2025-02-05 00:04:12,082 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:04:12,082 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:04:12,085 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=1
2025-02-05 00:04:12,086 - 生成连续锁定SQL失败: 找不到从2到1的行
2025-02-05 00:04:12,086 - 生成锁SQL失败: 找不到从2到1的行
2025-02-05 00:04:12,086 - 生成死锁事务序列失败: 找不到从2到1的行
2025-02-05 00:04:12,086 - 
2025-02-05 00:04:12,087 - Error in iteration 58: 找不到从2到1的行
2025-02-05 00:04:12,087 - 
2025-02-05 00:04:12,092 - iter: 59
2025-02-05 00:04:13,568 - table table_0 has 10 rows
2025-02-05 00:04:13,569 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [10], 'intersection_row_ids': []}
2025-02-05 00:04:13,569 - lock_same_resource: False
2025-02-05 00:04:13,569 - 
2025-02-05 00:04:13,569 - non intersection phase1
2025-02-05 00:04:13,569 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:04:13,569 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:04:13,569 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:04:13,569 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:04:13,573 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=True, range_end_idx=9
2025-02-05 00:04:13,574 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:13,574 - params: {'v1': '1', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:04:13,576 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 00:04:13,577 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:13,578 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:04:13,578 - non intersection phase1 end
2025-02-05 00:04:13,578 - 
2025-02-05 00:04:13,578 - non intersection phase2
2025-02-05 00:04:13,580 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 00:04:13,583 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:13,583 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:04:13,586 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 00:04:13,587 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:13,587 - params: {'v1': '1', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:04:13,588 - non intersection phase2 end
2025-02-05 00:04:13,588 - 
2025-02-05 00:04:13,588 - 生成死锁事务序列成功如下
2025-02-05 00:04:13,588 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 9 FOR UPDATE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:04:15,127 - 创建事务1连接成功
2025-02-05 00:04:15,128 - 执行事务1语句: BEGIN
2025-02-05 00:04:15,129 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 9 FOR UPDATE
2025-02-05 00:04:15,130 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:04:15,130 - 执行事务1语句: COMMIT;
2025-02-05 00:04:15,135 - 执行事务1成功
2025-02-05 00:04:17,745 - 恢复初始状态成功
2025-02-05 00:04:18,555 - 创建事务2连接成功
2025-02-05 00:04:18,556 - 执行事务2语句: BEGIN
2025-02-05 00:04:18,557 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:04:18,558 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE
2025-02-05 00:04:18,560 - 执行事务2语句: COMMIT;
2025-02-05 00:04:18,565 - 执行事务2成功
2025-02-05 00:04:23,597 - 
2025-02-05 00:04:23,597 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 9 FOR UPDATE', <Thread(Thread-434, started 31048)>, 1738685063.5973742)}
2025-02-05 00:04:23,707 - stmt_idx: 2, status: success, result: None
2025-02-05 00:04:23,707 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 9 FOR UPDATE
2025-02-05 00:04:23,707 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:04:23,707 - 
2025-02-05 00:04:23,812 - 
2025-02-05 00:04:23,813 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-435, started 30340)>, 1738685063.8127682)}
2025-02-05 00:04:23,920 - stmt_idx: 3, status: success, result: None
2025-02-05 00:04:23,920 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:04:23,920 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:04:23,920 - 
2025-02-05 00:04:24,027 - 
2025-02-05 00:04:24,028 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE', <Thread(Thread-436, started 14108)>, 1738685064.0274565)}
2025-02-05 00:04:24,136 - wait for lock, trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE
2025-02-05 00:04:24,136 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE', <Thread(Thread-436, started 14108)>, 1738685064.0274565)}
2025-02-05 00:04:24,136 - 
2025-02-05 00:04:24,245 - 
2025-02-05 00:04:24,246 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE', <Thread(Thread-436, started 14108)>, 1738685064.0274565), 5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-437, started 7284)>, 1738685064.2458725)}
2025-02-05 00:04:24,248 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE
2025-02-05 00:04:24,352 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:04:24,352 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE
2025-02-05 00:04:24,352 - 错误: dictionary changed size during iteration
2025-02-05 00:04:24,355 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-437, stopped 7284)>, 1738685064.2458725)}
2025-02-05 00:04:24,355 - 
2025-02-05 00:04:24,355 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-437, stopped 7284)>, 1738685064.2458725)}
2025-02-05 00:04:24,460 - stmt_idx: 5, status: success, result: None
2025-02-05 00:04:24,460 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:04:24,460 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:04:24,460 - 
2025-02-05 00:04:24,568 - 执行序列成功
2025-02-05 00:04:25,369 - is_atomic: True
2025-02-05 00:04:25,369 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:04:25,369 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 9 FOR UPDATE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE')]
2025-02-05 00:04:25,369 - snapshots: {'before': {'table_0': [(1, 55.31, 93.08), (2, 4.1, 5.42), (3, 65.25, 79.73), (4, 98.49, 48.52), (5, 35.11, 89.6), (6, 39.23, 23.49), (7, 32.91, 16.65), (8, 30.31, 11.33), (9, 35.81, 70.87), (10, 43.22, 17.29)]}, 'trx1': {'table_0': [(1, 55.31, 93.08), (2, 4.1, 5.42), (3, 65.25, 79.73), (4, 98.49, 48.52), (5, 35.11, 89.6), (6, 39.23, 23.49), (7, 32.91, 16.65), (8, 30.31, 11.33), (9, 35.81, 70.87), (10, 43.22, 17.29)]}, 'trx2': {'table_0': [(1, 55.31, 93.08), (2, 4.1, 5.42), (3, 65.25, 79.73), (4, 98.49, 48.52), (5, 35.11, 89.6), (6, 39.23, 23.49), (7, 32.91, 16.65), (8, 30.31, 11.33), (9, 35.81, 70.87), (10, 43.22, 17.29)]}, 'serial': {'table_0': [(1, 55.31, 93.08), (2, 4.1, 5.42), (3, 65.25, 79.73), (4, 98.49, 48.52), (5, 35.11, 89.6), (6, 39.23, 23.49), (7, 32.91, 16.65), (8, 30.31, 11.33), (9, 35.81, 70.87), (10, 43.22, 17.29)]}}
2025-02-05 00:04:25,369 - 
2025-02-05 00:04:25,383 - iter: 60
2025-02-05 00:04:26,905 - table table_0 has 7 rows
2025-02-05 00:04:26,905 - trx1_start_id: 1
2025-02-05 00:04:26,905 - trx1_end_id: 7
2025-02-05 00:04:26,905 - trx1_exclusive_start_id: 1
2025-02-05 00:04:26,905 - trx1_exclusive_end_id: 6
2025-02-05 00:04:26,905 - trx1_exclusive_ids: [1, 2, 3, 4, 5, 6]
2025-02-05 00:04:26,905 - trx2_start_id: 7
2025-02-05 00:04:26,905 - trx2_end_id: 7
2025-02-05 00:04:26,905 - trx2_exclusive_start_id: 8
2025-02-05 00:04:26,905 - trx2_exclusive_end_id: 7
2025-02-05 00:04:26,905 - trx2_exclusive_ids: []
2025-02-05 00:04:26,905 - intersection_ids: [7]
2025-02-05 00:04:26,905 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [7], 'intersection_row_ids': [7]}
2025-02-05 00:04:26,906 - lock_same_resource: True
2025-02-05 00:04:26,906 - 
2025-02-05 00:04:26,906 - intersection phase1
2025-02-05 00:04:26,909 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=True, range_end_idx=7
2025-02-05 00:04:26,910 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:26,910 - params: {'v1': '1', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_390'}
2025-02-05 00:04:26,913 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 00:04:26,914 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:26,914 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_390'}
2025-02-05 00:04:26,914 - intersection phase1 end
2025-02-05 00:04:26,914 - 
2025-02-05 00:04:26,914 - intersection phase2
2025-02-05 00:04:26,914 - 事务1在第二阶段自己加的锁: II
2025-02-05 00:04:26,914 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:04:26,914 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:04:26,915 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 00:04:26,918 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=6
2025-02-05 00:04:26,919 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:04:26,919 - params: {'v1': '1', 'set_expr': "col_390 = 'CHtRr'", 'table': 'table_0', 'v2': '6'}
2025-02-05 00:04:26,922 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=8, is_continuous=True, range_end_idx=7
2025-02-05 00:04:26,923 - 生成连续锁定SQL失败: 找不到从8到7的行
2025-02-05 00:04:26,923 - 生成锁SQL失败: 找不到从8到7的行
2025-02-05 00:04:26,923 - 生成死锁事务序列失败: 找不到从8到7的行
2025-02-05 00:04:26,923 - 
2025-02-05 00:04:26,923 - Error in iteration 60: 找不到从8到7的行
2025-02-05 00:04:26,924 - 
2025-02-05 00:04:26,929 - iter: 61
2025-02-05 00:04:28,440 - table table_0 has 13 rows
2025-02-05 00:04:28,441 - trx1_lock_row_ids: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 00:04:28,441 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 00:04:28,441 - intersection_row_ids: [3, 4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 00:04:28,441 - trx1_exclusive_ids: [12, 13]
2025-02-05 00:04:28,441 - trx2_exclusive_ids: [1, 2]
2025-02-05 00:04:28,441 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'intersection_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11]}
2025-02-05 00:04:28,441 - lock_same_resource: True
2025-02-05 00:04:28,441 - 
2025-02-05 00:04:28,441 - intersection phase1
2025-02-05 00:04:28,444 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=3, is_continuous=True, range_end_idx=13
2025-02-05 00:04:28,446 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:04:28,446 - params: {'v1': '3', 'set_expr': 'col_2 = 96, col_0 = 23.03', 'table': 'table_0', 'v2': '13'}
2025-02-05 00:04:28,450 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,451 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:28,451 - params: {'cond': '(col_0 = 24.87)', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:04:28,453 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,454 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:28,455 - params: {'cond': '(id = 4) AND (col_0 = 50.09) AND (col_2 = 92) AND (col_1 = 63.0)', 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-05 00:04:28,457 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,458 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:28,459 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:04:28,461 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,462 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:28,463 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-05 00:04:28,467 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,469 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:28,469 - params: {'cond': '(id = 7)', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:04:28,471 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,472 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:28,472 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:04:28,476 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,477 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:28,477 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:04:28,480 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,482 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:28,482 - params: {'cond': '(id = 10)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:04:28,486 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,487 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:28,487 - params: {'cond': '(col_2 = 91)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:04:28,488 - intersection phase1 end
2025-02-05 00:04:28,488 - 
2025-02-05 00:04:28,488 - intersection phase2
2025-02-05 00:04:28,488 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:04:28,488 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:04:28,488 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 00:04:28,488 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 00:04:28,491 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,493 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:04:28,493 - params: {'set_expr': 'col_1 = 21.15, col_0 = 2.72, col_2 = 68', 'table': 'table_0', 'cond': '(col_2 = 93) AND (col_0 = 46.94) AND (col_1 = 85.87)'}
2025-02-05 00:04:28,496 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,497 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:04:28,498 - params: {'set_expr': 'col_0 = 32.49', 'table': 'table_0', 'cond': '(id = 13)'}
2025-02-05 00:04:28,501 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,502 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:04:28,502 - params: {'set_expr': 'col_2 = 17, col_0 = 91.89', 'table': 'table_0', 'cond': '(col_0 = 7.4)'}
2025-02-05 00:04:28,506 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,507 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:04:28,507 - params: {'set_expr': 'col_0 = 68.8', 'table': 'table_0', 'cond': '(col_1 = 63.96) AND (col_2 = 41)'}
2025-02-05 00:04:28,507 - intersection phase2 end
2025-02-05 00:04:28,507 - 
2025-02-05 00:04:28,508 - intersection phase3
2025-02-05 00:04:28,512 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,513 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:04:28,513 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': 'NULL, 32.76, 66.21, 76', 'table': 'table_0'}
2025-02-05 00:04:28,516 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:04:28,518 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:04:28,518 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': 'NULL, 38.51, 67.46, 74', 'table': 'table_0'}
2025-02-05 00:04:28,518 - intersection phase3 end
2025-02-05 00:04:28,518 - 
2025-02-05 00:04:28,518 - 生成死锁事务序列成功如下
2025-02-05 00:04:28,518 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE (col_0 = 24.87) LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13'), (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 4) AND (col_0 = 50.09) AND (col_2 = 92) AND (col_1 = 63.0) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 91) LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_2 = 17, col_0 = 91.89 WHERE (col_0 = 7.4)'), (2, 'UPDATE table_0 SET col_0 = 68.8 WHERE (col_1 = 63.96) AND (col_2 = 41)'), (1, 'UPDATE table_0 SET col_1 = 21.15, col_0 = 2.72, col_2 = 68 WHERE (col_2 = 93) AND (col_0 = 46.94) AND (col_1 = 85.87)'), (1, 'UPDATE table_0 SET col_0 = 32.49 WHERE (id = 13)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 38.51, 67.46, 74)'), (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 32.76, 66.21, 76)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:04:30,072 - 创建事务1连接成功
2025-02-05 00:04:30,073 - 执行事务1语句: BEGIN
2025-02-05 00:04:30,074 - 执行事务1语句: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:30,075 - 执行事务1语句: UPDATE table_0 SET col_1 = 21.15, col_0 = 2.72, col_2 = 68 WHERE (col_2 = 93) AND (col_0 = 46.94) AND (col_1 = 85.87)
2025-02-05 00:04:30,076 - 执行事务1语句: UPDATE table_0 SET col_0 = 32.49 WHERE (id = 13)
2025-02-05 00:04:30,077 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 32.76, 66.21, 76)
2025-02-05 00:04:30,078 - 执行事务1语句: COMMIT;
2025-02-05 00:04:30,083 - 执行事务1成功
2025-02-05 00:04:32,687 - 恢复初始状态成功
2025-02-05 00:04:33,466 - 创建事务2连接成功
2025-02-05 00:04:33,467 - 执行事务2语句: BEGIN
2025-02-05 00:04:33,468 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_0 = 24.87) LOCK IN SHARE MODE
2025-02-05 00:04:33,469 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE (id = 4) AND (col_0 = 50.09) AND (col_2 = 92) AND (col_1 = 63.0) LOCK IN SHARE MODE
2025-02-05 00:04:33,470 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:04:33,470 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 00:04:33,471 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 00:04:33,472 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 00:04:33,472 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 00:04:33,473 - 执行事务2语句: SELECT id FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE
2025-02-05 00:04:33,474 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 91) LOCK IN SHARE MODE
2025-02-05 00:04:33,475 - 执行事务2语句: UPDATE table_0 SET col_2 = 17, col_0 = 91.89 WHERE (col_0 = 7.4)
2025-02-05 00:04:33,475 - 执行事务2语句: UPDATE table_0 SET col_0 = 68.8 WHERE (col_1 = 63.96) AND (col_2 = 41)
2025-02-05 00:04:33,476 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 38.51, 67.46, 74)
2025-02-05 00:04:33,478 - 执行事务2语句: COMMIT;
2025-02-05 00:04:33,483 - 执行事务2成功
2025-02-05 00:04:38,410 - 
2025-02-05 00:04:38,410 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0 FROM table_0 WHERE (col_0 = 24.87) LOCK IN SHARE MODE', <Thread(Thread-438, started 32364)>, 1738685078.410864)}
2025-02-05 00:04:38,512 - stmt_idx: 2, status: success, result: None
2025-02-05 00:04:38,512 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_0 = 24.87) LOCK IN SHARE MODE
2025-02-05 00:04:38,512 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:04:38,512 - 
2025-02-05 00:04:38,618 - 
2025-02-05 00:04:38,618 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:38,726 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:38,726 - 执行后idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:38,726 - 
2025-02-05 00:04:38,834 - 
2025-02-05 00:04:38,835 - 执行前idx: 5, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 4: (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 4) AND (col_0 = 50.09) AND (col_2 = 92) AND (col_1 = 63.0) LOCK IN SHARE MODE', <Thread(Thread-440, started 29784)>, 1738685078.8346763)}
2025-02-05 00:04:38,945 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:39,054 - stmt_idx: 4, status: success, result: None
2025-02-05 00:04:39,054 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE (id = 4) AND (col_0 = 50.09) AND (col_2 = 92) AND (col_1 = 63.0) LOCK IN SHARE MODE
2025-02-05 00:04:39,054 - 执行后idx: 5, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:39,054 - 
2025-02-05 00:04:39,161 - 
2025-02-05 00:04:39,162 - 执行前idx: 6, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 5: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-441, started 39604)>, 1738685079.1617293)}
2025-02-05 00:04:39,270 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:39,378 - stmt_idx: 5, status: success, result: None
2025-02-05 00:04:39,378 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:04:39,378 - 执行后idx: 6, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:39,378 - 
2025-02-05 00:04:39,486 - 
2025-02-05 00:04:39,486 - 执行前idx: 7, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 6: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-442, started 11348)>, 1738685079.486001)}
2025-02-05 00:04:39,593 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:39,701 - stmt_idx: 6, status: success, result: None
2025-02-05 00:04:39,701 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 00:04:39,701 - 执行后idx: 7, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:39,701 - 
2025-02-05 00:04:39,809 - 
2025-02-05 00:04:39,810 - 执行前idx: 8, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 7: (2, 'SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', <Thread(Thread-443, started 41564)>, 1738685079.8098648)}
2025-02-05 00:04:39,916 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:40,024 - stmt_idx: 7, status: success, result: None
2025-02-05 00:04:40,024 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 00:04:40,024 - 执行后idx: 8, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:40,024 - 
2025-02-05 00:04:40,132 - 
2025-02-05 00:04:40,133 - 执行前idx: 9, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 8: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-444, started 37056)>, 1738685080.1324015)}
2025-02-05 00:04:40,241 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:40,350 - stmt_idx: 8, status: success, result: None
2025-02-05 00:04:40,350 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 00:04:40,350 - 执行后idx: 9, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:40,350 - 
2025-02-05 00:04:40,459 - 
2025-02-05 00:04:40,459 - 执行前idx: 10, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 9: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-445, started 26248)>, 1738685080.459587)}
2025-02-05 00:04:40,564 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:40,672 - stmt_idx: 9, status: success, result: None
2025-02-05 00:04:40,672 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 00:04:40,672 - 执行后idx: 10, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:40,672 - 
2025-02-05 00:04:40,780 - 
2025-02-05 00:04:40,780 - 执行前idx: 11, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 10: (2, 'SELECT id FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE', <Thread(Thread-446, started 33016)>, 1738685080.780767)}
2025-02-05 00:04:40,889 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:40,997 - stmt_idx: 10, status: success, result: None
2025-02-05 00:04:40,997 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE
2025-02-05 00:04:40,997 - 执行后idx: 11, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:40,997 - 
2025-02-05 00:04:41,107 - 
2025-02-05 00:04:41,108 - 执行前idx: 12, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 11: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 91) LOCK IN SHARE MODE', <Thread(Thread-447, started 21452)>, 1738685081.1079297)}
2025-02-05 00:04:41,216 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:41,323 - stmt_idx: 11, status: success, result: None
2025-02-05 00:04:41,323 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 91) LOCK IN SHARE MODE
2025-02-05 00:04:41,323 - 执行后idx: 12, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:41,323 - 
2025-02-05 00:04:41,432 - 
2025-02-05 00:04:41,433 - 执行前idx: 13, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 12: (2, 'UPDATE table_0 SET col_2 = 17, col_0 = 91.89 WHERE (col_0 = 7.4)', <Thread(Thread-448, started 19440)>, 1738685081.4327977)}
2025-02-05 00:04:41,540 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:41,646 - stmt_idx: 12, status: success, result: None
2025-02-05 00:04:41,646 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 17, col_0 = 91.89 WHERE (col_0 = 7.4)
2025-02-05 00:04:41,646 - 执行后idx: 13, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:41,646 - 
2025-02-05 00:04:41,756 - 
2025-02-05 00:04:41,756 - 执行前idx: 14, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 13: (2, 'UPDATE table_0 SET col_0 = 68.8 WHERE (col_1 = 63.96) AND (col_2 = 41)', <Thread(Thread-449, started 40616)>, 1738685081.756452)}
2025-02-05 00:04:41,864 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:41,972 - stmt_idx: 13, status: success, result: None
2025-02-05 00:04:41,972 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 68.8 WHERE (col_1 = 63.96) AND (col_2 = 41)
2025-02-05 00:04:41,972 - 执行后idx: 14, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:41,972 - 
2025-02-05 00:04:42,078 - 
2025-02-05 00:04:42,079 - 执行前idx: 17, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628), 16: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 38.51, 67.46, 74)', <Thread(Thread-450, started 20948)>, 1738685082.078496)}
2025-02-05 00:04:42,185 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:42,294 - stmt_idx: 16, status: success, result: None
2025-02-05 00:04:42,294 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 38.51, 67.46, 74)
2025-02-05 00:04:42,294 - 执行后idx: 17, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:42,294 - 
2025-02-05 00:04:42,404 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, started 41016)>, 1738685078.6182628)}
2025-02-05 00:04:42,405 - 
2025-02-05 00:04:42,405 - 执行前idx: 20, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13', <Thread(Thread-439, stopped 41016)>, 1738685078.6182628)}
2025-02-05 00:04:42,509 - stmt_idx: 3, status: success, result: None
2025-02-05 00:04:42,509 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:42,509 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13
2025-02-05 00:04:42,511 - 执行后idx: 20, pending_stmts: {14: (1, 'UPDATE table_0 SET col_1 = 21.15, col_0 = 2.72, col_2 = 68 WHERE (col_2 = 93) AND (col_0 = 46.94) AND (col_1 = 85.87)', <Thread(Thread-451, started 32860)>, 1738685082.510719), 15: (1, 'UPDATE table_0 SET col_0 = 32.49 WHERE (id = 13)', <Thread(Thread-452, started 35892)>, 1738685082.510719), 17: (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 32.76, 66.21, 76)', <Thread(Thread-453, started 41180)>, 1738685082.5115874), 18: (1, 'COMMIT', <Thread(Thread-454, started 16444)>, 1738685082.5115874)}
2025-02-05 00:04:42,511 - 
2025-02-05 00:04:42,616 - 序列遍历完成，开始查看剩余阻塞的语句：{14: (1, 'UPDATE table_0 SET col_1 = 21.15, col_0 = 2.72, col_2 = 68 WHERE (col_2 = 93) AND (col_0 = 46.94) AND (col_1 = 85.87)', <Thread(Thread-451, stopped 32860)>, 1738685082.510719), 15: (1, 'UPDATE table_0 SET col_0 = 32.49 WHERE (id = 13)', <Thread(Thread-452, stopped 35892)>, 1738685082.510719), 17: (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 32.76, 66.21, 76)', <Thread(Thread-453, stopped 41180)>, 1738685082.5115874), 18: (1, 'COMMIT', <Thread(Thread-454, stopped 16444)>, 1738685082.5115874)}
2025-02-05 00:04:42,616 - 
2025-02-05 00:04:42,617 - 执行前idx: 20, pending_stmts: {14: (1, 'UPDATE table_0 SET col_1 = 21.15, col_0 = 2.72, col_2 = 68 WHERE (col_2 = 93) AND (col_0 = 46.94) AND (col_1 = 85.87)', <Thread(Thread-451, stopped 32860)>, 1738685082.510719), 15: (1, 'UPDATE table_0 SET col_0 = 32.49 WHERE (id = 13)', <Thread(Thread-452, stopped 35892)>, 1738685082.510719), 17: (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 32.76, 66.21, 76)', <Thread(Thread-453, stopped 41180)>, 1738685082.5115874), 18: (1, 'COMMIT', <Thread(Thread-454, stopped 16444)>, 1738685082.5115874)}
2025-02-05 00:04:42,724 - stmt_idx: 14, status: success, result: None
2025-02-05 00:04:42,724 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 21.15, col_0 = 2.72, col_2 = 68 WHERE (col_2 = 93) AND (col_0 = 46.94) AND (col_1 = 85.87)
2025-02-05 00:04:42,832 - stmt_idx: 15, status: success, result: None
2025-02-05 00:04:42,832 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 32.49 WHERE (id = 13)
2025-02-05 00:04:42,941 - stmt_idx: 17, status: success, result: None
2025-02-05 00:04:42,941 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 32.76, 66.21, 76)
2025-02-05 00:04:43,050 - stmt_idx: 18, status: success, result: None
2025-02-05 00:04:43,050 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:04:43,050 - 执行后idx: 20, pending_stmts: {}
2025-02-05 00:04:43,050 - 
2025-02-05 00:04:43,160 - 执行序列成功
2025-02-05 00:04:43,932 - is_atomic: True
2025-02-05 00:04:43,932 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:04:43,932 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE (col_0 = 24.87) LOCK IN SHARE MODE'), (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 4) AND (col_0 = 50.09) AND (col_2 = 92) AND (col_1 = 63.0) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 91) LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_2 = 17, col_0 = 91.89 WHERE (col_0 = 7.4)'), (2, 'UPDATE table_0 SET col_0 = 68.8 WHERE (col_1 = 63.96) AND (col_2 = 41)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 38.51, 67.46, 74)'), (2, 'COMMIT'), (1, 'UPDATE table_0 SET col_2 = 96, col_0 = 23.03 WHERE id BETWEEN 3 AND 13'), (1, 'UPDATE table_0 SET col_1 = 21.15, col_0 = 2.72, col_2 = 68 WHERE (col_2 = 93) AND (col_0 = 46.94) AND (col_1 = 85.87)'), (1, 'UPDATE table_0 SET col_0 = 32.49 WHERE (id = 13)'), (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 32.76, 66.21, 76)'), (1, 'COMMIT')]
2025-02-05 00:04:43,932 - snapshots: {'before': {'table_0': [(1, 7.4, 99.41, 58), (2, 62.97, 63.96, 41), (3, 24.87, 41.56, 62), (4, 50.09, 63.0, 92), (5, 78.05, 53.05, 10), (6, 50.74, 93.41, 39), (7, 86.74, 35.71, 86), (8, 25.0, 9.58, 42), (9, 80.62, 49.04, 100), (10, 15.02, 61.68, 42), (11, 87.7, 83.29, 91), (12, 46.94, 85.87, 93), (13, 19.14, 7.67, 94)]}, 'trx1': {'table_0': [(1, 7.4, 99.41, 58), (2, 62.97, 63.96, 41), (3, 23.03, 41.56, 96), (4, 23.03, 63.0, 96), (5, 23.03, 53.05, 96), (6, 23.03, 93.41, 96), (7, 23.03, 35.71, 96), (8, 23.03, 9.58, 96), (9, 23.03, 49.04, 96), (10, 23.03, 61.68, 96), (11, 23.03, 83.29, 96), (12, 23.03, 85.87, 96), (13, 32.49, 7.67, 96), (14, 32.76, 66.21, 76)]}, 'trx2': {'table_0': [(1, 91.89, 99.41, 17), (2, 68.8, 63.96, 41), (3, 24.87, 41.56, 62), (4, 50.09, 63.0, 92), (5, 78.05, 53.05, 10), (6, 50.74, 93.41, 39), (7, 86.74, 35.71, 86), (8, 25.0, 9.58, 42), (9, 80.62, 49.04, 100), (10, 15.02, 61.68, 42), (11, 87.7, 83.29, 91), (12, 46.94, 85.87, 93), (13, 19.14, 7.67, 94), (15, 38.51, 67.46, 74)]}, 'serial': {'table_0': [(1, 91.89, 99.41, 17), (2, 68.8, 63.96, 41), (3, 23.03, 41.56, 96), (4, 23.03, 63.0, 96), (5, 23.03, 53.05, 96), (6, 23.03, 93.41, 96), (7, 23.03, 35.71, 96), (8, 23.03, 9.58, 96), (9, 23.03, 49.04, 96), (10, 23.03, 61.68, 96), (11, 23.03, 83.29, 96), (12, 23.03, 85.87, 96), (13, 32.49, 7.67, 96), (16, 38.51, 67.46, 74), (17, 32.76, 66.21, 76)]}}
2025-02-05 00:04:43,932 - 
2025-02-05 00:04:43,943 - iter: 62
2025-02-05 00:04:45,431 - table table_0 has 14 rows
2025-02-05 00:04:45,431 - trx1_lock_row_ids: [3, 5, 7, 14]
2025-02-05 00:04:45,431 - trx2_lock_row_ids: [5, 6, 7, 10, 11, 12, 13]
2025-02-05 00:04:45,431 - intersection_row_ids: [5, 7]
2025-02-05 00:04:45,431 - trx1_exclusive_ids: [3, 14]
2025-02-05 00:04:45,431 - trx2_exclusive_ids: [6, 10, 11, 12, 13]
2025-02-05 00:04:45,432 - res_dict: {'trx1_lock_row_ids': [3, 5, 7, 14], 'trx2_lock_row_ids': [5, 6, 7, 10, 11, 12, 13], 'intersection_row_ids': [5, 7]}
2025-02-05 00:04:45,432 - lock_same_resource: True
2025-02-05 00:04:45,432 - 
2025-02-05 00:04:45,432 - intersection phase1
2025-02-05 00:04:45,435 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,436 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:04:45,437 - params: {'set_expr': "col_1 = 15, col_4 = 31, col_2 = 'vUVtl'", 'table': 'table_0', 'cond': '(id = 5)'}
2025-02-05 00:04:45,439 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,440 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:04:45,440 - params: {'v1': '7', 'set_expr': "col_3 = 29, col_2 = 'aWhzb', col_1 = 93, col_0 = 1.8, col_4 = 49", 'table': 'table_0', 'v2': '7'}
2025-02-05 00:04:45,444 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,445 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:45,445 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_4'}
2025-02-05 00:04:45,448 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,449 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:45,449 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'col_4'}
2025-02-05 00:04:45,449 - intersection phase1 end
2025-02-05 00:04:45,449 - 
2025-02-05 00:04:45,449 - intersection phase2
2025-02-05 00:04:45,449 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:04:45,449 - 事务2在第二阶段自己加的锁: S
2025-02-05 00:04:45,450 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:04:45,450 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:04:45,452 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,453 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:45,453 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_4'}
2025-02-05 00:04:45,456 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,457 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:45,457 - params: {'v1': '14', 'v2': '14', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:04:45,460 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,462 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:45,462 - params: {'cond': "(col_2 = 'fosma') AND (col_0 = 15.1)", 'table': 'table_0', 'select_cols': 'id, col_0, col_2'}
2025-02-05 00:04:45,465 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,466 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:45,466 - params: {'cond': '(col_4 = 69) AND (col_0 = 23.79)', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3, col_4'}
2025-02-05 00:04:45,469 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,470 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:45,470 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:04:45,473 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,474 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:45,474 - params: {'cond': '(col_0 = 76.08) AND (col_1 = 9) AND (col_4 = 72)', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3, col_4'}
2025-02-05 00:04:45,477 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,478 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:04:45,479 - params: {'cond': "(col_1 = 1) AND (col_2 = 'ovffs')", 'table': 'table_0', 'select_cols': 'col_0, col_1, col_3, col_4'}
2025-02-05 00:04:45,479 - intersection phase2 end
2025-02-05 00:04:45,479 - 
2025-02-05 00:04:45,479 - intersection phase3
2025-02-05 00:04:45,482 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:04:45,483 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:04:45,483 - params: {'v1': '13', 'v2': '13', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:04:45,483 - intersection phase3 end
2025-02-05 00:04:45,483 - 
2025-02-05 00:04:45,483 - 生成死锁事务序列成功如下
2025-02-05 00:04:45,483 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)"), (1, "UPDATE table_0 SET col_3 = 29, col_2 = 'aWhzb', col_1 = 93, col_0 = 1.8, col_4 = 49 WHERE id BETWEEN 7 AND 7"), (2, "SELECT id, col_0, col_2 FROM table_0 WHERE (col_2 = 'fosma') AND (col_0 = 15.1) LOCK IN SHARE MODE"), (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_4 = 69) AND (col_0 = 23.79) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_0 = 76.08) AND (col_1 = 9) AND (col_4 = 72) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE'), (2, "SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE (col_1 = 1) AND (col_2 = 'ovffs') LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, None), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:04:47,028 - 创建事务1连接成功
2025-02-05 00:04:47,030 - 执行事务1语句: BEGIN
2025-02-05 00:04:47,032 - 执行事务1语句: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:47,032 - 执行事务1语句: UPDATE table_0 SET col_3 = 29, col_2 = 'aWhzb', col_1 = 93, col_0 = 1.8, col_4 = 49 WHERE id BETWEEN 7 AND 7
2025-02-05 00:04:47,033 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 00:04:47,034 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE
2025-02-05 00:04:47,035 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 00:04:47,037 - 执行事务1语句: COMMIT;
2025-02-05 00:04:47,041 - 执行事务1成功
2025-02-05 00:04:49,665 - 恢复初始状态成功
2025-02-05 00:04:50,445 - 创建事务2连接成功
2025-02-05 00:04:50,446 - 执行事务2语句: BEGIN
2025-02-05 00:04:50,447 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:04:50,448 - 执行事务2语句: SELECT col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:04:50,449 - 执行事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE (col_2 = 'fosma') AND (col_0 = 15.1) LOCK IN SHARE MODE
2025-02-05 00:04:50,450 - 执行事务2语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_4 = 69) AND (col_0 = 23.79) LOCK IN SHARE MODE
2025-02-05 00:04:50,450 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 00:04:50,451 - 执行事务2语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_0 = 76.08) AND (col_1 = 9) AND (col_4 = 72) LOCK IN SHARE MODE
2025-02-05 00:04:50,452 - 执行事务2语句: SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE (col_1 = 1) AND (col_2 = 'ovffs') LOCK IN SHARE MODE
2025-02-05 00:04:50,453 - 执行事务2语句: COMMIT;
2025-02-05 00:04:50,457 - 执行事务2成功
2025-02-05 00:04:55,370 - 
2025-02-05 00:04:55,370 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-455, started 5208)>, 1738685095.370539)}
2025-02-05 00:04:55,483 - stmt_idx: 2, status: success, result: None
2025-02-05 00:04:55,483 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:04:55,483 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:04:55,483 - 
2025-02-05 00:04:55,592 - 
2025-02-05 00:04:55,592 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-456, started 35372)>, 1738685095.5922687)}
2025-02-05 00:04:55,698 - stmt_idx: 3, status: success, result: None
2025-02-05 00:04:55,698 - 成功执行序列中事务2语句: SELECT col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:04:55,698 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:04:55,698 - 
2025-02-05 00:04:55,806 - 
2025-02-05 00:04:55,807 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302)}
2025-02-05 00:04:55,916 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:55,916 - 执行后idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302)}
2025-02-05 00:04:55,916 - 
2025-02-05 00:04:56,025 - 
2025-02-05 00:04:56,026 - 执行前idx: 7, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302), 6: (2, "SELECT id, col_0, col_2 FROM table_0 WHERE (col_2 = 'fosma') AND (col_0 = 15.1) LOCK IN SHARE MODE", <Thread(Thread-458, started 41272)>, 1738685096.025815)}
2025-02-05 00:04:56,135 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:56,245 - stmt_idx: 6, status: success, result: None
2025-02-05 00:04:56,245 - 成功执行序列中事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE (col_2 = 'fosma') AND (col_0 = 15.1) LOCK IN SHARE MODE
2025-02-05 00:04:56,245 - 执行后idx: 7, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302)}
2025-02-05 00:04:56,245 - 
2025-02-05 00:04:56,354 - 
2025-02-05 00:04:56,355 - 执行前idx: 8, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302), 7: (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_4 = 69) AND (col_0 = 23.79) LOCK IN SHARE MODE', <Thread(Thread-459, started 38712)>, 1738685096.3540418)}
2025-02-05 00:04:56,461 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:56,566 - stmt_idx: 7, status: success, result: None
2025-02-05 00:04:56,566 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_4 = 69) AND (col_0 = 23.79) LOCK IN SHARE MODE
2025-02-05 00:04:56,566 - 执行后idx: 8, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302)}
2025-02-05 00:04:56,566 - 
2025-02-05 00:04:56,674 - 
2025-02-05 00:04:56,675 - 执行前idx: 10, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302), 9: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-460, started 40820)>, 1738685096.6746826)}
2025-02-05 00:04:56,782 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:56,890 - stmt_idx: 9, status: success, result: None
2025-02-05 00:04:56,890 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 00:04:56,890 - 执行后idx: 10, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302)}
2025-02-05 00:04:56,890 - 
2025-02-05 00:04:57,000 - 
2025-02-05 00:04:57,001 - 执行前idx: 11, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302), 10: (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_0 = 76.08) AND (col_1 = 9) AND (col_4 = 72) LOCK IN SHARE MODE', <Thread(Thread-461, started 40684)>, 1738685097.0000534)}
2025-02-05 00:04:57,109 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:57,220 - stmt_idx: 10, status: success, result: None
2025-02-05 00:04:57,220 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_0 = 76.08) AND (col_1 = 9) AND (col_4 = 72) LOCK IN SHARE MODE
2025-02-05 00:04:57,220 - 执行后idx: 11, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302)}
2025-02-05 00:04:57,220 - 
2025-02-05 00:04:57,328 - 
2025-02-05 00:04:57,329 - 执行前idx: 13, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302), 12: (2, "SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE (col_1 = 1) AND (col_2 = 'ovffs') LOCK IN SHARE MODE", <Thread(Thread-462, started 37800)>, 1738685097.3280036)}
2025-02-05 00:04:57,435 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:57,540 - stmt_idx: 12, status: success, result: None
2025-02-05 00:04:57,540 - 成功执行序列中事务2语句: SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE (col_1 = 1) AND (col_2 = 'ovffs') LOCK IN SHARE MODE
2025-02-05 00:04:57,541 - 执行后idx: 13, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302)}
2025-02-05 00:04:57,541 - 
2025-02-05 00:04:57,646 - stmt为None, trx_id: 2, stmt: None
2025-02-05 00:04:57,649 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, started 14932)>, 1738685095.8063302)}
2025-02-05 00:04:57,649 - 
2025-02-05 00:04:57,649 - 执行前idx: 17, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)", <Thread(Thread-457, stopped 14932)>, 1738685095.8063302)}
2025-02-05 00:04:57,753 - stmt_idx: 4, status: success, result: None
2025-02-05 00:04:57,753 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:57,753 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)
2025-02-05 00:04:57,755 - 执行后idx: 17, pending_stmts: {5: (1, "UPDATE table_0 SET col_3 = 29, col_2 = 'aWhzb', col_1 = 93, col_0 = 1.8, col_4 = 49 WHERE id BETWEEN 7 AND 7", <Thread(Thread-463, started 28328)>, 1738685097.7540107), 8: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-464, started 39908)>, 1738685097.7540107), 11: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE', <Thread(Thread-465, started 36640)>, 1738685097.7545404), 13: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-466, started 39412)>, 1738685097.7545404), 15: (1, 'COMMIT', <Thread(Thread-467, started 30860)>, 1738685097.7545404)}
2025-02-05 00:04:57,755 - 
2025-02-05 00:04:57,862 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, "UPDATE table_0 SET col_3 = 29, col_2 = 'aWhzb', col_1 = 93, col_0 = 1.8, col_4 = 49 WHERE id BETWEEN 7 AND 7", <Thread(Thread-463, stopped 28328)>, 1738685097.7540107), 8: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-464, stopped 39908)>, 1738685097.7540107), 11: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE', <Thread(Thread-465, stopped 36640)>, 1738685097.7545404), 13: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-466, stopped 39412)>, 1738685097.7545404), 15: (1, 'COMMIT', <Thread(Thread-467, stopped 30860)>, 1738685097.7545404)}
2025-02-05 00:04:57,862 - 
2025-02-05 00:04:57,862 - 执行前idx: 17, pending_stmts: {5: (1, "UPDATE table_0 SET col_3 = 29, col_2 = 'aWhzb', col_1 = 93, col_0 = 1.8, col_4 = 49 WHERE id BETWEEN 7 AND 7", <Thread(Thread-463, stopped 28328)>, 1738685097.7540107), 8: (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-464, stopped 39908)>, 1738685097.7540107), 11: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE', <Thread(Thread-465, stopped 36640)>, 1738685097.7545404), 13: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-466, stopped 39412)>, 1738685097.7545404), 15: (1, 'COMMIT', <Thread(Thread-467, stopped 30860)>, 1738685097.7545404)}
2025-02-05 00:04:57,970 - stmt_idx: 5, status: success, result: None
2025-02-05 00:04:57,970 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 29, col_2 = 'aWhzb', col_1 = 93, col_0 = 1.8, col_4 = 49 WHERE id BETWEEN 7 AND 7
2025-02-05 00:04:58,080 - stmt_idx: 8, status: success, result: None
2025-02-05 00:04:58,080 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 00:04:58,185 - stmt_idx: 11, status: success, result: None
2025-02-05 00:04:58,185 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE
2025-02-05 00:04:58,291 - stmt_idx: 13, status: success, result: None
2025-02-05 00:04:58,291 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 00:04:58,402 - stmt_idx: 15, status: success, result: None
2025-02-05 00:04:58,402 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:04:58,402 - 执行后idx: 17, pending_stmts: {}
2025-02-05 00:04:58,402 - 
2025-02-05 00:04:58,511 - 执行序列成功
2025-02-05 00:04:59,300 - is_atomic: True
2025-02-05 00:04:59,300 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:04:59,300 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, "SELECT id, col_0, col_2 FROM table_0 WHERE (col_2 = 'fosma') AND (col_0 = 15.1) LOCK IN SHARE MODE"), (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_4 = 69) AND (col_0 = 23.79) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_0 = 76.08) AND (col_1 = 9) AND (col_4 = 72) LOCK IN SHARE MODE'), (2, "SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE (col_1 = 1) AND (col_2 = 'ovffs') LOCK IN SHARE MODE"), (2, 'COMMIT'), (1, "UPDATE table_0 SET col_1 = 15, col_4 = 31, col_2 = 'vUVtl' WHERE (id = 5)"), (1, "UPDATE table_0 SET col_3 = 29, col_2 = 'aWhzb', col_1 = 93, col_0 = 1.8, col_4 = 49 WHERE id BETWEEN 7 AND 7"), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 00:04:59,300 - snapshots: {'before': {'table_0': [(1, 86.33, 70, 'brgfx', 92, 36), (2, 61.03, 19, 'tblgb', 3, 63), (3, 85.88, 73, 'pdass', 82, 51), (4, 60.45, 1, 'jrhdw', 89, 93), (5, 31.71, 36, 'hvado', 1, 75), (6, 15.1, 93, 'fosma', 35, 94), (7, 19.37, 3, 'ivemg', 66, 94), (8, 57.97, 63, 'fgkcp', 42, 31), (9, 7.99, 32, 'ffmdc', 96, 22), (10, 23.79, 73, 'apqol', 100, 69), (11, 7.0, 5, 'incil', 19, 1), (12, 76.08, 9, 'rntha', 65, 72), (13, 83.64, 1, 'ovffs', 21, 94), (14, 97.06, 10, 'uhxgq', 14, 59)]}, 'trx1': {'table_0': [(1, 86.33, 70, 'brgfx', 92, 36), (2, 61.03, 19, 'tblgb', 3, 63), (3, 85.88, 73, 'pdass', 82, 51), (4, 60.45, 1, 'jrhdw', 89, 93), (5, 31.71, 15, 'vUVtl', 1, 31), (6, 15.1, 93, 'fosma', 35, 94), (7, 1.8, 93, 'aWhzb', 29, 49), (8, 57.97, 63, 'fgkcp', 42, 31), (9, 7.99, 32, 'ffmdc', 96, 22), (10, 23.79, 73, 'apqol', 100, 69), (11, 7.0, 5, 'incil', 19, 1), (12, 76.08, 9, 'rntha', 65, 72), (13, 83.64, 1, 'ovffs', 21, 94), (14, 97.06, 10, 'uhxgq', 14, 59)]}, 'trx2': {'table_0': [(1, 86.33, 70, 'brgfx', 92, 36), (2, 61.03, 19, 'tblgb', 3, 63), (3, 85.88, 73, 'pdass', 82, 51), (4, 60.45, 1, 'jrhdw', 89, 93), (5, 31.71, 36, 'hvado', 1, 75), (6, 15.1, 93, 'fosma', 35, 94), (7, 19.37, 3, 'ivemg', 66, 94), (8, 57.97, 63, 'fgkcp', 42, 31), (9, 7.99, 32, 'ffmdc', 96, 22), (10, 23.79, 73, 'apqol', 100, 69), (11, 7.0, 5, 'incil', 19, 1), (12, 76.08, 9, 'rntha', 65, 72), (13, 83.64, 1, 'ovffs', 21, 94), (14, 97.06, 10, 'uhxgq', 14, 59)]}, 'serial': {'table_0': [(1, 86.33, 70, 'brgfx', 92, 36), (2, 61.03, 19, 'tblgb', 3, 63), (3, 85.88, 73, 'pdass', 82, 51), (4, 60.45, 1, 'jrhdw', 89, 93), (5, 31.71, 15, 'vUVtl', 1, 31), (6, 15.1, 93, 'fosma', 35, 94), (7, 1.8, 93, 'aWhzb', 29, 49), (8, 57.97, 63, 'fgkcp', 42, 31), (9, 7.99, 32, 'ffmdc', 96, 22), (10, 23.79, 73, 'apqol', 100, 69), (11, 7.0, 5, 'incil', 19, 1), (12, 76.08, 9, 'rntha', 65, 72), (13, 83.64, 1, 'ovffs', 21, 94), (14, 97.06, 10, 'uhxgq', 14, 59)]}}
2025-02-05 00:04:59,300 - 
2025-02-05 00:04:59,312 - iter: 63
2025-02-05 00:05:00,846 - table table_0 has 7 rows
2025-02-05 00:05:00,846 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-05 00:05:00,846 - lock_same_resource: False
2025-02-05 00:05:00,846 - 
2025-02-05 00:05:00,846 - non intersection phase1
2025-02-05 00:05:00,846 - 事务1在第一阶段自己加的锁: II
2025-02-05 00:05:00,847 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:05:00,847 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:05:00,847 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:05:00,850 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:05:00,852 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:05:00,852 - params: {'set_expr': "col_0 = 81, col_1 = 'JFqet'", 'table': 'table_0', 'cond': '(id = 1)'}
2025-02-05 00:05:00,854 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=7
2025-02-05 00:05:00,856 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:00,856 - params: {'v1': '2', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:05:00,856 - non intersection phase1 end
2025-02-05 00:05:00,856 - 
2025-02-05 00:05:00,856 - non intersection phase2
2025-02-05 00:05:00,860 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=7
2025-02-05 00:05:00,861 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:00,861 - params: {'v1': '5', 'v2': '7', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:05:00,864 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:05:00,865 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:05:00,865 - params: {'cond': "(col_1 = 'nnsbb')", 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:05:00,865 - non intersection phase2 end
2025-02-05 00:05:00,865 - 
2025-02-05 00:05:00,865 - 生成死锁事务序列成功如下
2025-02-05 00:05:00,866 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 81, col_1 = 'JFqet' WHERE (id = 1)"), (2, "SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:05:02,394 - 创建事务1连接成功
2025-02-05 00:05:02,395 - 执行事务1语句: BEGIN
2025-02-05 00:05:02,397 - 执行事务1语句: UPDATE table_0 SET col_0 = 81, col_1 = 'JFqet' WHERE (id = 1)
2025-02-05 00:05:02,398 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE
2025-02-05 00:05:02,400 - 执行事务1语句: COMMIT;
2025-02-05 00:05:02,405 - 执行事务1成功
2025-02-05 00:05:05,014 - 恢复初始状态成功
2025-02-05 00:05:05,799 - 创建事务2连接成功
2025-02-05 00:05:05,801 - 执行事务2语句: BEGIN
2025-02-05 00:05:05,802 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:05:05,802 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE
2025-02-05 00:05:05,803 - 执行事务2语句: COMMIT;
2025-02-05 00:05:05,807 - 执行事务2成功
2025-02-05 00:05:10,728 - 
2025-02-05 00:05:10,728 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-468, started 26896)>, 1738685110.7281618)}
2025-02-05 00:05:10,836 - stmt_idx: 2, status: success, result: None
2025-02-05 00:05:10,836 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:05:10,836 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:05:10,836 - 
2025-02-05 00:05:10,943 - 
2025-02-05 00:05:10,944 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_0 = 81, col_1 = 'JFqet' WHERE (id = 1)", <Thread(Thread-469, started 37288)>, 1738685110.943689)}
2025-02-05 00:05:11,051 - stmt_idx: 3, status: success, result: None
2025-02-05 00:05:11,051 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 81, col_1 = 'JFqet' WHERE (id = 1)
2025-02-05 00:05:11,051 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:05:11,051 - 
2025-02-05 00:05:11,157 - 
2025-02-05 00:05:11,157 - 执行前idx: 5, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE", <Thread(Thread-470, started 32640)>, 1738685111.157205)}
2025-02-05 00:05:11,263 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE
2025-02-05 00:05:11,263 - 执行后idx: 5, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE", <Thread(Thread-470, started 32640)>, 1738685111.157205)}
2025-02-05 00:05:11,263 - 
2025-02-05 00:05:11,370 - 
2025-02-05 00:05:11,371 - 执行前idx: 6, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE", <Thread(Thread-470, started 32640)>, 1738685111.157205), 5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE', <Thread(Thread-471, started 39776)>, 1738685111.370441)}
2025-02-05 00:05:11,374 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE
2025-02-05 00:05:11,478 - stmt_idx: 4, status: success, result: None
2025-02-05 00:05:11,478 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE
2025-02-05 00:05:11,478 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE
2025-02-05 00:05:11,585 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:05:11,585 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 7 FOR UPDATE
2025-02-05 00:05:11,585 - 错误: dictionary changed size during iteration
2025-02-05 00:05:11,589 - 执行序列成功
2025-02-05 00:05:12,369 - is_atomic: True
2025-02-05 00:05:12,369 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:05:12,369 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 81, col_1 = 'JFqet' WHERE (id = 1)"), (2, "SELECT * FROM table_0 WHERE (col_1 = 'nnsbb') FOR UPDATE"), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 00:05:12,369 - snapshots: {'before': {'table_0': [(1, 53, 'nnsbb'), (2, 72, 'gwpsu'), (3, 54, 'zenip'), (4, 18, 'gknon'), (5, 53, 'vatxe'), (6, 40, 'ypaky'), (7, 31, 'wntxr')]}, 'trx1': {'table_0': [(1, 81, 'JFqet'), (2, 72, 'gwpsu'), (3, 54, 'zenip'), (4, 18, 'gknon'), (5, 53, 'vatxe'), (6, 40, 'ypaky'), (7, 31, 'wntxr')]}, 'trx2': {'table_0': [(1, 53, 'nnsbb'), (2, 72, 'gwpsu'), (3, 54, 'zenip'), (4, 18, 'gknon'), (5, 53, 'vatxe'), (6, 40, 'ypaky'), (7, 31, 'wntxr')]}, 'serial': {'table_0': [(1, 53, 'nnsbb'), (2, 72, 'gwpsu'), (3, 54, 'zenip'), (4, 18, 'gknon'), (5, 53, 'vatxe'), (6, 40, 'ypaky'), (7, 31, 'wntxr')]}}
2025-02-05 00:05:12,369 - 
2025-02-05 00:05:12,380 - iter: 64
2025-02-05 00:05:13,873 - table table_0 has 6 rows
2025-02-05 00:05:13,873 - res_dict: {'trx1_lock_row_ids': [5, 6], 'trx2_lock_row_ids': [1, 2, 3, 4], 'intersection_row_ids': []}
2025-02-05 00:05:13,873 - lock_same_resource: False
2025-02-05 00:05:13,873 - 
2025-02-05 00:05:13,873 - non intersection phase1
2025-02-05 00:05:13,873 - 事务1在第一阶段自己加的锁: S
2025-02-05 00:05:13,873 - 事务2在第一阶段自己加的锁: II
2025-02-05 00:05:13,873 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:05:13,873 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:05:13,876 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-05 00:05:13,878 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:13,878 - params: {'v1': '5', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:05:13,881 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:05:13,882 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:05:13,882 - params: {'v1': '1', 'set_expr': "col_2 = 'hraju', col_1 = 'lBSaL', col_0 = 'xzFqt'", 'table': 'table_0', 'v2': '1'}
2025-02-05 00:05:13,885 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:05:13,886 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:13,886 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'kJglv', 'gNhIg', 'ALByy'", 'table': 'table_0'}
2025-02-05 00:05:13,889 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:05:13,890 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:05:13,890 - params: {'v1': '3', 'set_expr': "col_2 = 'Igaob', col_1 = 'nFnpz'", 'table': 'table_0', 'v2': '3'}
2025-02-05 00:05:13,893 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:05:13,894 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:13,894 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'uArlT', 'QZvRu', 'hYVBz'", 'table': 'table_0'}
2025-02-05 00:05:13,894 - non intersection phase1 end
2025-02-05 00:05:13,894 - 
2025-02-05 00:05:13,894 - non intersection phase2
2025-02-05 00:05:13,897 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:05:13,898 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:05:13,898 - params: {'set_expr': "col_2 = 'AaGDA', col_0 = 'EHumb', col_1 = 'JYemR'", 'table': 'table_0', 'cond': '(id = 1)'}
2025-02-05 00:05:13,901 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-05 00:05:13,902 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:13,902 - params: {'v1': '5', 'v2': '6', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:05:13,903 - non intersection phase2 end
2025-02-05 00:05:13,903 - 
2025-02-05 00:05:13,903 - 生成死锁事务序列成功如下
2025-02-05 00:05:13,903 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_2 = 'hraju', col_1 = 'lBSaL', col_0 = 'xzFqt' WHERE id BETWEEN 1 AND 1"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kJglv', 'gNhIg', 'ALByy')"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_2 = 'Igaob', col_1 = 'nFnpz' WHERE id BETWEEN 3 AND 3"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'uArlT', 'QZvRu', 'hYVBz')"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE'), (1, "UPDATE table_0 SET col_2 = 'AaGDA', col_0 = 'EHumb', col_1 = 'JYemR' WHERE (id = 1)"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:05:15,419 - 创建事务1连接成功
2025-02-05 00:05:15,421 - 执行事务1语句: BEGIN
2025-02-05 00:05:15,422 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE
2025-02-05 00:05:15,423 - 执行事务1语句: UPDATE table_0 SET col_2 = 'AaGDA', col_0 = 'EHumb', col_1 = 'JYemR' WHERE (id = 1)
2025-02-05 00:05:15,425 - 执行事务1语句: COMMIT;
2025-02-05 00:05:15,429 - 执行事务1成功
2025-02-05 00:05:18,064 - 恢复初始状态成功
2025-02-05 00:05:18,834 - 创建事务2连接成功
2025-02-05 00:05:18,835 - 执行事务2语句: BEGIN
2025-02-05 00:05:18,836 - 执行事务2语句: UPDATE table_0 SET col_2 = 'hraju', col_1 = 'lBSaL', col_0 = 'xzFqt' WHERE id BETWEEN 1 AND 1
2025-02-05 00:05:18,837 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kJglv', 'gNhIg', 'ALByy')
2025-02-05 00:05:18,838 - 执行事务2语句: UPDATE table_0 SET col_2 = 'Igaob', col_1 = 'nFnpz' WHERE id BETWEEN 3 AND 3
2025-02-05 00:05:18,839 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'uArlT', 'QZvRu', 'hYVBz')
2025-02-05 00:05:18,840 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-05 00:05:18,842 - 执行事务2语句: COMMIT;
2025-02-05 00:05:18,846 - 执行事务2成功
2025-02-05 00:05:23,790 - 
2025-02-05 00:05:23,790 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_2 = 'hraju', col_1 = 'lBSaL', col_0 = 'xzFqt' WHERE id BETWEEN 1 AND 1", <Thread(Thread-472, started 35416)>, 1738685123.7904365)}
2025-02-05 00:05:23,904 - stmt_idx: 2, status: success, result: None
2025-02-05 00:05:23,904 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'hraju', col_1 = 'lBSaL', col_0 = 'xzFqt' WHERE id BETWEEN 1 AND 1
2025-02-05 00:05:23,904 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:05:23,904 - 
2025-02-05 00:05:24,010 - 
2025-02-05 00:05:24,011 - 执行前idx: 4, pending_stmts: {3: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kJglv', 'gNhIg', 'ALByy')", <Thread(Thread-473, started 20108)>, 1738685124.01073)}
2025-02-05 00:05:24,119 - stmt_idx: 3, status: success, result: None
2025-02-05 00:05:24,119 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kJglv', 'gNhIg', 'ALByy')
2025-02-05 00:05:24,119 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:05:24,119 - 
2025-02-05 00:05:24,226 - 
2025-02-05 00:05:24,228 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE', <Thread(Thread-474, started 36612)>, 1738685124.226925)}
2025-02-05 00:05:24,334 - stmt_idx: 4, status: success, result: None
2025-02-05 00:05:24,334 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE
2025-02-05 00:05:24,334 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:05:24,334 - 
2025-02-05 00:05:24,444 - 
2025-02-05 00:05:24,445 - 执行前idx: 6, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 'Igaob', col_1 = 'nFnpz' WHERE id BETWEEN 3 AND 3", <Thread(Thread-475, started 36004)>, 1738685124.444427)}
2025-02-05 00:05:24,553 - stmt_idx: 5, status: success, result: None
2025-02-05 00:05:24,553 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'Igaob', col_1 = 'nFnpz' WHERE id BETWEEN 3 AND 3
2025-02-05 00:05:24,553 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:05:24,553 - 
2025-02-05 00:05:24,661 - 
2025-02-05 00:05:24,662 - 执行前idx: 7, pending_stmts: {6: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'uArlT', 'QZvRu', 'hYVBz')", <Thread(Thread-476, started 41980)>, 1738685124.6618884)}
2025-02-05 00:05:24,768 - stmt_idx: 6, status: success, result: None
2025-02-05 00:05:24,768 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'uArlT', 'QZvRu', 'hYVBz')
2025-02-05 00:05:24,768 - 执行后idx: 7, pending_stmts: {}
2025-02-05 00:05:24,768 - 
2025-02-05 00:05:24,876 - 
2025-02-05 00:05:24,877 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE', <Thread(Thread-477, started 34760)>, 1738685124.876053)}
2025-02-05 00:05:24,985 - wait for lock, trx_id: 2, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-05 00:05:24,985 - 执行后idx: 8, pending_stmts: {7: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE', <Thread(Thread-477, started 34760)>, 1738685124.876053)}
2025-02-05 00:05:24,985 - 
2025-02-05 00:05:25,091 - 
2025-02-05 00:05:25,091 - 执行前idx: 9, pending_stmts: {7: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE', <Thread(Thread-477, started 34760)>, 1738685124.876053), 8: (1, "UPDATE table_0 SET col_2 = 'AaGDA', col_0 = 'EHumb', col_1 = 'JYemR' WHERE (id = 1)", <Thread(Thread-478, started 37044)>, 1738685125.0915287)}
2025-02-05 00:05:25,094 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_2 = 'AaGDA', col_0 = 'EHumb', col_1 = 'JYemR' WHERE (id = 1)
2025-02-05 00:05:25,199 - stmt_idx: 7, status: success, result: None
2025-02-05 00:05:25,200 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-05 00:05:25,200 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE
2025-02-05 00:05:25,307 - stmt_idx: 8, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:05:25,307 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_2 = 'AaGDA', col_0 = 'EHumb', col_1 = 'JYemR' WHERE (id = 1)
2025-02-05 00:05:25,307 - 错误: dictionary changed size during iteration
2025-02-05 00:05:25,313 - 执行序列成功
2025-02-05 00:05:26,087 - is_atomic: True
2025-02-05 00:05:26,087 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:05:26,087 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_2 = 'hraju', col_1 = 'lBSaL', col_0 = 'xzFqt' WHERE id BETWEEN 1 AND 1"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kJglv', 'gNhIg', 'ALByy')"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_2 = 'Igaob', col_1 = 'nFnpz' WHERE id BETWEEN 3 AND 3"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'uArlT', 'QZvRu', 'hYVBz')"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 6 FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-05 00:05:26,087 - snapshots: {'before': {'table_0': [(1, 'fsezo', 'vlbqz', 'ocqre'), (2, 'oslqf', 'dfhip', 'ornqc'), (3, 'nblwx', 'exqzg', 'bqjvh'), (4, 'njawq', 'mbhac', 'ejvti'), (5, 'fzobk', 'tlpit', 'lseci'), (6, 'ckhdn', 'dzxkh', 'ewfjo')]}, 'trx1': {'table_0': [(1, 'EHumb', 'JYemR', 'AaGDA'), (2, 'oslqf', 'dfhip', 'ornqc'), (3, 'nblwx', 'exqzg', 'bqjvh'), (4, 'njawq', 'mbhac', 'ejvti'), (5, 'fzobk', 'tlpit', 'lseci'), (6, 'ckhdn', 'dzxkh', 'ewfjo')]}, 'trx2': {'table_0': [(1, 'xzFqt', 'lBSaL', 'hraju'), (2, 'oslqf', 'dfhip', 'ornqc'), (3, 'nblwx', 'nFnpz', 'Igaob'), (4, 'njawq', 'mbhac', 'ejvti'), (5, 'fzobk', 'tlpit', 'lseci'), (6, 'ckhdn', 'dzxkh', 'ewfjo'), (7, 'kJglv', 'gNhIg', 'ALByy'), (8, 'uArlT', 'QZvRu', 'hYVBz')]}, 'serial': {'table_0': [(1, 'xzFqt', 'lBSaL', 'hraju'), (2, 'oslqf', 'dfhip', 'ornqc'), (3, 'nblwx', 'nFnpz', 'Igaob'), (4, 'njawq', 'mbhac', 'ejvti'), (5, 'fzobk', 'tlpit', 'lseci'), (6, 'ckhdn', 'dzxkh', 'ewfjo'), (9, 'kJglv', 'gNhIg', 'ALByy'), (10, 'uArlT', 'QZvRu', 'hYVBz')]}}
2025-02-05 00:05:26,087 - 
2025-02-05 00:05:26,099 - iter: 65
2025-02-05 00:05:27,584 - table table_0 has 11 rows
2025-02-05 00:05:27,584 - trx1_lock_row_ids: [2, 3]
2025-02-05 00:05:27,584 - trx2_lock_row_ids: [3, 11]
2025-02-05 00:05:27,584 - intersection_row_ids: [3]
2025-02-05 00:05:27,584 - trx1_exclusive_ids: [2]
2025-02-05 00:05:27,584 - trx2_exclusive_ids: [11]
2025-02-05 00:05:27,585 - res_dict: {'trx1_lock_row_ids': [2, 3], 'trx2_lock_row_ids': [3, 11], 'intersection_row_ids': [3]}
2025-02-05 00:05:27,585 - lock_same_resource: True
2025-02-05 00:05:27,585 - 
2025-02-05 00:05:27,585 - intersection phase1
2025-02-05 00:05:27,587 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-05 00:05:27,589 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:27,589 - params: {'v1': '2', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_714'}
2025-02-05 00:05:27,592 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:05:27,593 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:27,593 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_714', 'vals': "NULL, 63, 59, 'mojmW', 80.67", 'table': 'table_0'}
2025-02-05 00:05:27,593 - intersection phase1 end
2025-02-05 00:05:27,593 - 
2025-02-05 00:05:27,593 - intersection phase2
2025-02-05 00:05:27,593 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:05:27,593 - 事务2在第二阶段自己加的锁: II
2025-02-05 00:05:27,594 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:05:27,594 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:05:27,597 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:05:27,598 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:05:27,598 - params: {'set_expr': 'col_0 = 15, col_714 = 65.44, col_1 = 43', 'table': 'table_0', 'cond': "(col_2 = 'incjq')"}
2025-02-05 00:05:27,600 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:05:27,601 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:05:27,602 - params: {'set_expr': 'col_0 = 97, col_714 = 42.12', 'table': 'table_0', 'cond': '(id = 11)'}
2025-02-05 00:05:27,602 - intersection phase2 end
2025-02-05 00:05:27,602 - 
2025-02-05 00:05:27,602 - intersection phase3
2025-02-05 00:05:27,606 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:05:27,607 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:27,607 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_714', 'vals': "NULL, 71, 4, 'KpyST', 74.07", 'table': 'table_0'}
2025-02-05 00:05:27,610 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:05:27,611 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:27,611 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_714', 'vals': "NULL, 32, 32, 'yvtcx', 21.45", 'table': 'table_0'}
2025-02-05 00:05:27,612 - intersection phase3 end
2025-02-05 00:05:27,612 - 
2025-02-05 00:05:27,612 - 生成死锁事务序列成功如下
2025-02-05 00:05:27,612 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_714 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 63, 59, 'mojmW', 80.67)"), (1, "UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')"), (2, 'UPDATE table_0 SET col_0 = 97, col_714 = 42.12 WHERE (id = 11)'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 32, 32, 'yvtcx', 21.45)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 71, 4, 'KpyST', 74.07)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:05:29,145 - 创建事务1连接成功
2025-02-05 00:05:29,146 - 执行事务1语句: BEGIN
2025-02-05 00:05:29,148 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_714 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-05 00:05:29,148 - 执行事务1语句: UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')
2025-02-05 00:05:29,149 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 71, 4, 'KpyST', 74.07)
2025-02-05 00:05:29,151 - 执行事务1语句: COMMIT;
2025-02-05 00:05:29,156 - 执行事务1成功
2025-02-05 00:05:31,731 - 恢复初始状态成功
2025-02-05 00:05:32,516 - 创建事务2连接成功
2025-02-05 00:05:32,518 - 执行事务2语句: BEGIN
2025-02-05 00:05:32,519 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 63, 59, 'mojmW', 80.67)
2025-02-05 00:05:32,520 - 执行事务2语句: UPDATE table_0 SET col_0 = 97, col_714 = 42.12 WHERE (id = 11)
2025-02-05 00:05:32,521 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 32, 32, 'yvtcx', 21.45)
2025-02-05 00:05:32,523 - 执行事务2语句: COMMIT;
2025-02-05 00:05:32,528 - 执行事务2成功
2025-02-05 00:05:37,463 - 
2025-02-05 00:05:37,463 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_714 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-479, started 24972)>, 1738685137.4631543)}
2025-02-05 00:05:37,571 - stmt_idx: 2, status: success, result: None
2025-02-05 00:05:37,571 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_714 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-05 00:05:37,571 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:05:37,571 - 
2025-02-05 00:05:37,680 - 
2025-02-05 00:05:37,681 - 执行前idx: 4, pending_stmts: {3: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 63, 59, 'mojmW', 80.67)", <Thread(Thread-480, started 34360)>, 1738685137.6804938)}
2025-02-05 00:05:37,788 - stmt_idx: 3, status: success, result: None
2025-02-05 00:05:37,788 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 63, 59, 'mojmW', 80.67)
2025-02-05 00:05:37,788 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:05:37,788 - 
2025-02-05 00:05:37,897 - 
2025-02-05 00:05:37,898 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')", <Thread(Thread-481, started 41168)>, 1738685137.8973448)}
2025-02-05 00:05:38,004 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')
2025-02-05 00:05:38,004 - 执行后idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')", <Thread(Thread-481, started 41168)>, 1738685137.8973448)}
2025-02-05 00:05:38,004 - 
2025-02-05 00:05:38,114 - 
2025-02-05 00:05:38,115 - 执行前idx: 6, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')", <Thread(Thread-481, started 41168)>, 1738685137.8973448), 5: (2, 'UPDATE table_0 SET col_0 = 97, col_714 = 42.12 WHERE (id = 11)', <Thread(Thread-482, started 41640)>, 1738685138.1142125)}
2025-02-05 00:05:38,118 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_0 = 97, col_714 = 42.12 WHERE (id = 11)
2025-02-05 00:05:38,220 - stmt_idx: 4, status: success, result: None
2025-02-05 00:05:38,220 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')
2025-02-05 00:05:38,221 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')
2025-02-05 00:05:38,328 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:05:38,328 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: UPDATE table_0 SET col_0 = 97, col_714 = 42.12 WHERE (id = 11)
2025-02-05 00:05:38,328 - 错误: dictionary changed size during iteration
2025-02-05 00:05:38,329 - 
2025-02-05 00:05:38,329 - 执行前idx: 8, pending_stmts: {7: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 71, 4, 'KpyST', 74.07)", <Thread(Thread-483, started 28004)>, 1738685138.3296385)}
2025-02-05 00:05:38,438 - stmt_idx: 7, status: success, result: None
2025-02-05 00:05:38,438 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 71, 4, 'KpyST', 74.07)
2025-02-05 00:05:38,438 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:05:38,438 - 
2025-02-05 00:05:38,552 - 执行序列成功
2025-02-05 00:05:39,324 - is_atomic: True
2025-02-05 00:05:39,324 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:05:39,324 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_714 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 63, 59, 'mojmW', 80.67)"), (1, "UPDATE table_0 SET col_0 = 15, col_714 = 65.44, col_1 = 43 WHERE (col_2 = 'incjq')"), (2, 'ROLLBACK'), (2, "--Skipped, trx_id: 2, stmt: INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 32, 32, 'yvtcx', 21.45)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_714) VALUES (NULL, 71, 4, 'KpyST', 74.07)"), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 00:05:39,324 - snapshots: {'before': {'table_0': [(1, 72, 71, 'reffe', None), (2, 48, 51, 'incjq', None), (3, 27, 92, 'ujqpu', None), (4, 100, 67, 'exotv', None), (5, 15, 90, 'quzad', None), (6, 76, 62, 'pftdc', None), (7, 86, 84, 'tbxln', None), (8, 9, 17, 'jtcdo', None), (9, 25, 2, 'dxdwv', None), (10, 37, 23, 'zhodu', None), (11, 18, 23, 'rctqv', None)]}, 'trx1': {'table_0': [(1, 72, 71, 'reffe', None), (2, 15, 43, 'incjq', 65.44), (3, 27, 92, 'ujqpu', None), (4, 100, 67, 'exotv', None), (5, 15, 90, 'quzad', None), (6, 76, 62, 'pftdc', None), (7, 86, 84, 'tbxln', None), (8, 9, 17, 'jtcdo', None), (9, 25, 2, 'dxdwv', None), (10, 37, 23, 'zhodu', None), (11, 18, 23, 'rctqv', None), (12, 71, 4, 'KpyST', 74.07)]}, 'trx2': {'table_0': [(1, 72, 71, 'reffe', None), (2, 48, 51, 'incjq', None), (3, 27, 92, 'ujqpu', None), (4, 100, 67, 'exotv', None), (5, 15, 90, 'quzad', None), (6, 76, 62, 'pftdc', None), (7, 86, 84, 'tbxln', None), (8, 9, 17, 'jtcdo', None), (9, 25, 2, 'dxdwv', None), (10, 37, 23, 'zhodu', None), (11, 97, 23, 'rctqv', 42.12), (13, 63, 59, 'mojmW', 80.67), (14, 32, 32, 'yvtcx', 21.45)]}, 'serial': {'table_0': [(1, 72, 71, 'reffe', None), (2, 15, 43, 'incjq', 65.44), (3, 27, 92, 'ujqpu', None), (4, 100, 67, 'exotv', None), (5, 15, 90, 'quzad', None), (6, 76, 62, 'pftdc', None), (7, 86, 84, 'tbxln', None), (8, 9, 17, 'jtcdo', None), (9, 25, 2, 'dxdwv', None), (10, 37, 23, 'zhodu', None), (11, 18, 23, 'rctqv', None), (16, 71, 4, 'KpyST', 74.07)]}}
2025-02-05 00:05:39,324 - 
2025-02-05 00:05:39,334 - iter: 66
2025-02-05 00:05:40,834 - table table_0 has 13 rows
2025-02-05 00:05:40,834 - res_dict: {'trx1_lock_row_ids': [1, 11, 12, 13], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7, 8, 9, 10], 'intersection_row_ids': []}
2025-02-05 00:05:40,834 - lock_same_resource: False
2025-02-05 00:05:40,834 - 
2025-02-05 00:05:40,834 - non intersection phase1
2025-02-05 00:05:40,835 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:05:40,835 - 事务2在第一阶段自己加的锁: II
2025-02-05 00:05:40,835 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 00:05:40,835 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 00:05:40,838 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:05:40,839 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:40,839 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:05:40,842 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:05:40,843 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:40,844 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': "NULL, 'zQiAb', 89.07, 95.14, 'aNcPm'", 'table': 'table_0'}
2025-02-05 00:05:40,846 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:05:40,847 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:40,847 - params: {'v1': '12', 'v2': '12', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:05:40,850 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:05:40,851 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:40,851 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': "NULL, 'xNvVG', 15.12, 50.17, 'ayRuz'", 'table': 'table_0'}
2025-02-05 00:05:40,854 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=10
2025-02-05 00:05:40,855 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:05:40,855 - params: {'v1': '2', 'set_expr': "col_2 = 51.52, col_3 = 'BwLMN', col_1 = 46.15, col_0 = 'dmnaH'", 'table': 'table_0', 'v2': '10'}
2025-02-05 00:05:40,855 - non intersection phase1 end
2025-02-05 00:05:40,855 - 
2025-02-05 00:05:40,855 - non intersection phase2
2025-02-05 00:05:40,859 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=6, is_continuous=True, range_end_idx=10
2025-02-05 00:05:40,860 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:40,861 - params: {'v1': '6', 'v2': '10', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:05:40,863 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:05:40,864 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:40,864 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': "NULL, 'Iwdzx', 87.4, 50.45, 'TyfEV'", 'table': 'table_0'}
2025-02-05 00:05:40,864 - non intersection phase2 end
2025-02-05 00:05:40,864 - 
2025-02-05 00:05:40,864 - 生成死锁事务序列成功如下
2025-02-05 00:05:40,864 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_2 = 51.52, col_3 = 'BwLMN', col_1 = 46.15, col_0 = 'dmnaH' WHERE id BETWEEN 2 AND 10"), (1, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'zQiAb', 89.07, 95.14, 'aNcPm')"), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 12 AND id <= 12 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'xNvVG', 15.12, 50.17, 'ayRuz')"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'Iwdzx', 87.4, 50.45, 'TyfEV')"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:05:42,400 - 创建事务1连接成功
2025-02-05 00:05:42,401 - 执行事务1语句: BEGIN
2025-02-05 00:05:42,402 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:05:42,404 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'zQiAb', 89.07, 95.14, 'aNcPm')
2025-02-05 00:05:42,404 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 12 AND id <= 12 FOR UPDATE
2025-02-05 00:05:42,405 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'xNvVG', 15.12, 50.17, 'ayRuz')
2025-02-05 00:05:42,406 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE
2025-02-05 00:05:42,408 - 执行事务1语句: COMMIT;
2025-02-05 00:05:42,412 - 执行事务1成功
2025-02-05 00:05:45,043 - 恢复初始状态成功
2025-02-05 00:05:45,818 - 创建事务2连接成功
2025-02-05 00:05:45,819 - 执行事务2语句: BEGIN
2025-02-05 00:05:45,821 - 执行事务2语句: UPDATE table_0 SET col_2 = 51.52, col_3 = 'BwLMN', col_1 = 46.15, col_0 = 'dmnaH' WHERE id BETWEEN 2 AND 10
2025-02-05 00:05:45,822 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'Iwdzx', 87.4, 50.45, 'TyfEV')
2025-02-05 00:05:45,824 - 执行事务2语句: COMMIT;
2025-02-05 00:05:45,828 - 执行事务2成功
2025-02-05 00:05:50,771 - 
2025-02-05 00:05:50,771 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_2 = 51.52, col_3 = 'BwLMN', col_1 = 46.15, col_0 = 'dmnaH' WHERE id BETWEEN 2 AND 10", <Thread(Thread-484, started 36020)>, 1738685150.7716916)}
2025-02-05 00:05:50,875 - stmt_idx: 2, status: success, result: None
2025-02-05 00:05:50,875 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 51.52, col_3 = 'BwLMN', col_1 = 46.15, col_0 = 'dmnaH' WHERE id BETWEEN 2 AND 10
2025-02-05 00:05:50,875 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:05:50,875 - 
2025-02-05 00:05:50,986 - 
2025-02-05 00:05:50,986 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-485, started 39704)>, 1738685150.9864073)}
2025-02-05 00:05:51,094 - stmt_idx: 3, status: success, result: None
2025-02-05 00:05:51,094 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:05:51,094 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:05:51,094 - 
2025-02-05 00:05:51,204 - 
2025-02-05 00:05:51,204 - 执行前idx: 5, pending_stmts: {4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'zQiAb', 89.07, 95.14, 'aNcPm')", <Thread(Thread-486, started 38076)>, 1738685151.2046874)}
2025-02-05 00:05:51,313 - stmt_idx: 4, status: success, result: None
2025-02-05 00:05:51,313 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'zQiAb', 89.07, 95.14, 'aNcPm')
2025-02-05 00:05:51,313 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:05:51,313 - 
2025-02-05 00:05:51,421 - 
2025-02-05 00:05:51,422 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 12 AND id <= 12 FOR UPDATE', <Thread(Thread-487, started 34796)>, 1738685151.4216626)}
2025-02-05 00:05:51,528 - stmt_idx: 5, status: success, result: None
2025-02-05 00:05:51,528 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 12 AND id <= 12 FOR UPDATE
2025-02-05 00:05:51,528 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:05:51,528 - 
2025-02-05 00:05:51,635 - 
2025-02-05 00:05:51,635 - 执行前idx: 7, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'xNvVG', 15.12, 50.17, 'ayRuz')", <Thread(Thread-488, started 5284)>, 1738685151.635181)}
2025-02-05 00:05:51,742 - stmt_idx: 6, status: success, result: None
2025-02-05 00:05:51,742 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'xNvVG', 15.12, 50.17, 'ayRuz')
2025-02-05 00:05:51,742 - 执行后idx: 7, pending_stmts: {}
2025-02-05 00:05:51,742 - 
2025-02-05 00:05:51,848 - 
2025-02-05 00:05:51,849 - 执行前idx: 8, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE', <Thread(Thread-489, started 22604)>, 1738685151.8488297)}
2025-02-05 00:05:51,955 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE
2025-02-05 00:05:51,955 - 执行后idx: 8, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE', <Thread(Thread-489, started 22604)>, 1738685151.8488297)}
2025-02-05 00:05:51,955 - 
2025-02-05 00:05:52,063 - 
2025-02-05 00:05:52,064 - 执行前idx: 9, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE', <Thread(Thread-489, started 22604)>, 1738685151.8488297), 8: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'Iwdzx', 87.4, 50.45, 'TyfEV')", <Thread(Thread-490, started 35860)>, 1738685152.0628672)}
2025-02-05 00:05:52,171 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE
2025-02-05 00:05:52,282 - stmt_idx: 8, status: success, result: None
2025-02-05 00:05:52,282 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'Iwdzx', 87.4, 50.45, 'TyfEV')
2025-02-05 00:05:52,282 - 执行后idx: 9, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE', <Thread(Thread-489, started 22604)>, 1738685151.8488297)}
2025-02-05 00:05:52,282 - 
2025-02-05 00:05:52,395 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE', <Thread(Thread-489, started 22604)>, 1738685151.8488297)}
2025-02-05 00:05:52,395 - 
2025-02-05 00:05:52,395 - 执行前idx: 11, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE', <Thread(Thread-489, stopped 22604)>, 1738685151.8488297)}
2025-02-05 00:05:52,498 - stmt_idx: 7, status: success, result: None
2025-02-05 00:05:52,499 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE
2025-02-05 00:05:52,499 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE
2025-02-05 00:05:52,499 - 执行后idx: 11, pending_stmts: {10: (1, 'COMMIT', <Thread(Thread-491, started 28476)>, 1738685152.4995253)}
2025-02-05 00:05:52,499 - 
2025-02-05 00:05:52,608 - 序列遍历完成，开始查看剩余阻塞的语句：{10: (1, 'COMMIT', <Thread(Thread-491, stopped 28476)>, 1738685152.4995253)}
2025-02-05 00:05:52,608 - 
2025-02-05 00:05:52,608 - 执行前idx: 11, pending_stmts: {10: (1, 'COMMIT', <Thread(Thread-491, stopped 28476)>, 1738685152.4995253)}
2025-02-05 00:05:52,716 - stmt_idx: 10, status: success, result: None
2025-02-05 00:05:52,716 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:05:52,716 - 执行后idx: 11, pending_stmts: {}
2025-02-05 00:05:52,716 - 
2025-02-05 00:05:52,825 - 执行序列成功
2025-02-05 00:05:53,743 - is_atomic: True
2025-02-05 00:05:53,743 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:05:53,743 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_2 = 51.52, col_3 = 'BwLMN', col_1 = 46.15, col_0 = 'dmnaH' WHERE id BETWEEN 2 AND 10"), (1, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'zQiAb', 89.07, 95.14, 'aNcPm')"), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 12 AND id <= 12 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'xNvVG', 15.12, 50.17, 'ayRuz')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'Iwdzx', 87.4, 50.45, 'TyfEV')"), (2, 'COMMIT'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 10 LOCK IN SHARE MODE'), (1, 'COMMIT')]
2025-02-05 00:05:53,743 - snapshots: {'before': {'table_0': [(1, 'wkinq', 85.49, 69.64, 'iqlnd'), (2, 'lgldz', 55.76, 79.82, 'gckby'), (3, 'plebz', 82.95, 50.37, 'uvgwp'), (4, 'jpjvi', 9.34, 22.48, 'nxtsx'), (5, 'exwsk', 99.06, 9.35, 'oqxso'), (6, 'rupve', 49.95, 52.86, 'ipwqy'), (7, 'jpyby', 58.38, 46.07, 'oogdd'), (8, 'nhocp', 66.96, 48.15, 'ortyi'), (9, 'daxsq', 76.02, 96.21, 'dxapj'), (10, 'vopfp', 59.02, 36.03, 'tyydc'), (11, 'qmctq', 35.4, 17.3, 'wnzws'), (12, 'itatd', 21.61, 42.98, 'ehoyc'), (13, 'xcfwk', 5.05, 34.92, 'tideh')]}, 'trx1': {'table_0': [(1, 'wkinq', 85.49, 69.64, 'iqlnd'), (2, 'lgldz', 55.76, 79.82, 'gckby'), (3, 'plebz', 82.95, 50.37, 'uvgwp'), (4, 'jpjvi', 9.34, 22.48, 'nxtsx'), (5, 'exwsk', 99.06, 9.35, 'oqxso'), (6, 'rupve', 49.95, 52.86, 'ipwqy'), (7, 'jpyby', 58.38, 46.07, 'oogdd'), (8, 'nhocp', 66.96, 48.15, 'ortyi'), (9, 'daxsq', 76.02, 96.21, 'dxapj'), (10, 'vopfp', 59.02, 36.03, 'tyydc'), (11, 'qmctq', 35.4, 17.3, 'wnzws'), (12, 'itatd', 21.61, 42.98, 'ehoyc'), (13, 'xcfwk', 5.05, 34.92, 'tideh'), (14, 'zQiAb', 89.07, 95.14, 'aNcPm'), (15, 'xNvVG', 15.12, 50.17, 'ayRuz')]}, 'trx2': {'table_0': [(1, 'wkinq', 85.49, 69.64, 'iqlnd'), (2, 'dmnaH', 46.15, 51.52, 'BwLMN'), (3, 'dmnaH', 46.15, 51.52, 'BwLMN'), (4, 'dmnaH', 46.15, 51.52, 'BwLMN'), (5, 'dmnaH', 46.15, 51.52, 'BwLMN'), (6, 'dmnaH', 46.15, 51.52, 'BwLMN'), (7, 'dmnaH', 46.15, 51.52, 'BwLMN'), (8, 'dmnaH', 46.15, 51.52, 'BwLMN'), (9, 'dmnaH', 46.15, 51.52, 'BwLMN'), (10, 'dmnaH', 46.15, 51.52, 'BwLMN'), (11, 'qmctq', 35.4, 17.3, 'wnzws'), (12, 'itatd', 21.61, 42.98, 'ehoyc'), (13, 'xcfwk', 5.05, 34.92, 'tideh'), (16, 'Iwdzx', 87.4, 50.45, 'TyfEV')]}, 'serial': {'table_0': [(1, 'wkinq', 85.49, 69.64, 'iqlnd'), (2, 'dmnaH', 46.15, 51.52, 'BwLMN'), (3, 'dmnaH', 46.15, 51.52, 'BwLMN'), (4, 'dmnaH', 46.15, 51.52, 'BwLMN'), (5, 'dmnaH', 46.15, 51.52, 'BwLMN'), (6, 'dmnaH', 46.15, 51.52, 'BwLMN'), (7, 'dmnaH', 46.15, 51.52, 'BwLMN'), (8, 'dmnaH', 46.15, 51.52, 'BwLMN'), (9, 'dmnaH', 46.15, 51.52, 'BwLMN'), (10, 'dmnaH', 46.15, 51.52, 'BwLMN'), (11, 'qmctq', 35.4, 17.3, 'wnzws'), (12, 'itatd', 21.61, 42.98, 'ehoyc'), (13, 'xcfwk', 5.05, 34.92, 'tideh'), (17, 'zQiAb', 89.07, 95.14, 'aNcPm'), (18, 'xNvVG', 15.12, 50.17, 'ayRuz'), (19, 'Iwdzx', 87.4, 50.45, 'TyfEV')]}}
2025-02-05 00:05:53,743 - 
2025-02-05 00:05:53,759 - iter: 67
2025-02-05 00:05:55,345 - table table_0 has 12 rows
2025-02-05 00:05:55,345 - res_dict: {'trx1_lock_row_ids': [6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [1, 2, 3, 4, 5], 'intersection_row_ids': []}
2025-02-05 00:05:55,345 - lock_same_resource: False
2025-02-05 00:05:55,345 - 
2025-02-05 00:05:55,345 - non intersection phase1
2025-02-05 00:05:55,346 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:05:55,346 - 事务2在第一阶段自己加的锁: II
2025-02-05 00:05:55,346 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:05:55,346 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:05:55,349 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=6, is_continuous=True, range_end_idx=12
2025-02-05 00:05:55,350 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:55,350 - params: {'v1': '6', 'v2': '12', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:05:55,353 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:05:55,354 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:05:55,354 - params: {'set_expr': "col_0 = 74.32, col_2 = 'peLWC', col_959 = 'irSBK'", 'table': 'table_0', 'cond': '(id = 1)'}
2025-02-05 00:05:55,357 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:05:55,358 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:05:55,358 - params: {'set_expr': "col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45", 'table': 'table_0', 'cond': '(col_959 IS NULL)'}
2025-02-05 00:05:55,360 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:05:55,361 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:55,361 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_959', 'vals': "NULL, 79.85, 27.1, 'XvrxA', 'EDFxN'", 'table': 'table_0'}
2025-02-05 00:05:55,364 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:05:55,366 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:05:55,366 - params: {'set_expr': "col_0 = 44.24, col_959 = 'SfRlg', col_1 = 79.17, col_2 = 'rzVib'", 'table': 'table_0', 'cond': '(id = 4)'}
2025-02-05 00:05:55,369 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:05:55,371 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:05:55,371 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_959', 'vals': "NULL, 55.85, 71.5, 'NAbaq', 'moxxm'", 'table': 'table_0'}
2025-02-05 00:05:55,371 - non intersection phase1 end
2025-02-05 00:05:55,371 - 
2025-02-05 00:05:55,371 - non intersection phase2
2025-02-05 00:05:55,375 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:05:55,377 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:05:55,377 - params: {'cond': "(col_2 = 'ojifb')", 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_959'}
2025-02-05 00:05:55,380 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=10
2025-02-05 00:05:55,381 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:05:55,381 - params: {'v1': '6', 'v2': '10', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:05:55,382 - non intersection phase2 end
2025-02-05 00:05:55,382 - 
2025-02-05 00:05:55,382 - 生成死锁事务序列成功如下
2025-02-05 00:05:55,382 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id >= 6 AND id <= 12 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 74.32, col_2 = 'peLWC', col_959 = 'irSBK' WHERE (id = 1)"), (2, "UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 79.85, 27.1, 'XvrxA', 'EDFxN')"), (2, "UPDATE table_0 SET col_0 = 44.24, col_959 = 'SfRlg', col_1 = 79.17, col_2 = 'rzVib' WHERE (id = 4)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 55.85, 71.5, 'NAbaq', 'moxxm')"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE'), (1, "SELECT id, col_0, col_1, col_959 FROM table_0 WHERE (col_2 = 'ojifb') FOR UPDATE"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:05:56,984 - 创建事务1连接成功
2025-02-05 00:05:56,985 - 执行事务1语句: BEGIN
2025-02-05 00:05:56,987 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 6 AND id <= 12 FOR UPDATE
2025-02-05 00:05:56,987 - 执行事务1语句: SELECT id, col_0, col_1, col_959 FROM table_0 WHERE (col_2 = 'ojifb') FOR UPDATE
2025-02-05 00:05:56,988 - 执行事务1语句: COMMIT;
2025-02-05 00:05:56,994 - 执行事务1成功
2025-02-05 00:05:59,606 - 恢复初始状态成功
2025-02-05 00:06:00,385 - 创建事务2连接成功
2025-02-05 00:06:00,387 - 执行事务2语句: BEGIN
2025-02-05 00:06:00,388 - 执行事务2语句: UPDATE table_0 SET col_0 = 74.32, col_2 = 'peLWC', col_959 = 'irSBK' WHERE (id = 1)
2025-02-05 00:06:00,388 - 执行事务2语句: UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)
2025-02-05 00:06:00,389 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 79.85, 27.1, 'XvrxA', 'EDFxN')
2025-02-05 00:06:00,390 - 执行事务2语句: UPDATE table_0 SET col_0 = 44.24, col_959 = 'SfRlg', col_1 = 79.17, col_2 = 'rzVib' WHERE (id = 4)
2025-02-05 00:06:00,391 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 55.85, 71.5, 'NAbaq', 'moxxm')
2025-02-05 00:06:00,392 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE
2025-02-05 00:06:00,394 - 执行事务2语句: COMMIT;
2025-02-05 00:06:00,399 - 执行事务2成功
2025-02-05 00:06:05,344 - 
2025-02-05 00:06:05,344 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id >= 6 AND id <= 12 FOR UPDATE', <Thread(Thread-492, started 17292)>, 1738685165.3443499)}
2025-02-05 00:06:05,457 - stmt_idx: 2, status: success, result: None
2025-02-05 00:06:05,457 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 6 AND id <= 12 FOR UPDATE
2025-02-05 00:06:05,457 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:06:05,457 - 
2025-02-05 00:06:05,563 - 
2025-02-05 00:06:05,564 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 74.32, col_2 = 'peLWC', col_959 = 'irSBK' WHERE (id = 1)", <Thread(Thread-493, started 6748)>, 1738685165.563885)}
2025-02-05 00:06:05,670 - stmt_idx: 3, status: success, result: None
2025-02-05 00:06:05,670 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 74.32, col_2 = 'peLWC', col_959 = 'irSBK' WHERE (id = 1)
2025-02-05 00:06:05,670 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:06:05,670 - 
2025-02-05 00:06:05,778 - 
2025-02-05 00:06:05,779 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)", <Thread(Thread-494, started 16120)>, 1738685165.7785783)}
2025-02-05 00:06:05,888 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)
2025-02-05 00:06:05,888 - 执行后idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)", <Thread(Thread-494, started 16120)>, 1738685165.7785783)}
2025-02-05 00:06:05,888 - 
2025-02-05 00:06:05,994 - 
2025-02-05 00:06:05,994 - 执行前idx: 10, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)", <Thread(Thread-494, started 16120)>, 1738685165.7785783), 9: (1, "SELECT id, col_0, col_1, col_959 FROM table_0 WHERE (col_2 = 'ojifb') FOR UPDATE", <Thread(Thread-495, started 41892)>, 1738685165.993524)}
2025-02-05 00:06:05,996 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1, col_959 FROM table_0 WHERE (col_2 = 'ojifb') FOR UPDATE
2025-02-05 00:06:06,099 - stmt_idx: 4, status: success, result: None
2025-02-05 00:06:06,099 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)
2025-02-05 00:06:06,099 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)
2025-02-05 00:06:06,207 - stmt_idx: 9, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:06:06,207 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_1, col_959 FROM table_0 WHERE (col_2 = 'ojifb') FOR UPDATE
2025-02-05 00:06:06,207 - 错误: dictionary changed size during iteration
2025-02-05 00:06:06,211 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 79.85, 27.1, 'XvrxA', 'EDFxN')", <Thread(Thread-496, stopped 32540)>, 1738685166.1006885), 6: (2, "UPDATE table_0 SET col_0 = 44.24, col_959 = 'SfRlg', col_1 = 79.17, col_2 = 'rzVib' WHERE (id = 4)", <Thread(Thread-497, stopped 11536)>, 1738685166.1010396), 7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 55.85, 71.5, 'NAbaq', 'moxxm')", <Thread(Thread-498, stopped 38864)>, 1738685166.1010396), 8: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE', <Thread(Thread-499, stopped 37524)>, 1738685166.1010396)}
2025-02-05 00:06:06,211 - 
2025-02-05 00:06:06,211 - 执行前idx: 12, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 79.85, 27.1, 'XvrxA', 'EDFxN')", <Thread(Thread-496, stopped 32540)>, 1738685166.1006885), 6: (2, "UPDATE table_0 SET col_0 = 44.24, col_959 = 'SfRlg', col_1 = 79.17, col_2 = 'rzVib' WHERE (id = 4)", <Thread(Thread-497, stopped 11536)>, 1738685166.1010396), 7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 55.85, 71.5, 'NAbaq', 'moxxm')", <Thread(Thread-498, stopped 38864)>, 1738685166.1010396), 8: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE', <Thread(Thread-499, stopped 37524)>, 1738685166.1010396)}
2025-02-05 00:06:06,315 - stmt_idx: 5, status: success, result: None
2025-02-05 00:06:06,315 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 79.85, 27.1, 'XvrxA', 'EDFxN')
2025-02-05 00:06:06,421 - stmt_idx: 6, status: success, result: None
2025-02-05 00:06:06,421 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 44.24, col_959 = 'SfRlg', col_1 = 79.17, col_2 = 'rzVib' WHERE (id = 4)
2025-02-05 00:06:06,528 - stmt_idx: 7, status: success, result: None
2025-02-05 00:06:06,528 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 55.85, 71.5, 'NAbaq', 'moxxm')
2025-02-05 00:06:06,635 - stmt_idx: 8, status: success, result: None
2025-02-05 00:06:06,635 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE
2025-02-05 00:06:06,635 - 执行后idx: 12, pending_stmts: {}
2025-02-05 00:06:06,635 - 
2025-02-05 00:06:06,745 - 执行序列成功
2025-02-05 00:06:07,530 - is_atomic: True
2025-02-05 00:06:07,530 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:06:07,530 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id >= 6 AND id <= 12 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 74.32, col_2 = 'peLWC', col_959 = 'irSBK' WHERE (id = 1)"), (2, "UPDATE table_0 SET col_2 = 'HpTGQ', col_0 = 65.97, col_1 = 62.45 WHERE (col_959 IS NULL)"), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 79.85, 27.1, 'XvrxA', 'EDFxN')"), (2, "UPDATE table_0 SET col_0 = 44.24, col_959 = 'SfRlg', col_1 = 79.17, col_2 = 'rzVib' WHERE (id = 4)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 55.85, 71.5, 'NAbaq', 'moxxm')"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE')]
2025-02-05 00:06:07,530 - snapshots: {'before': {'table_0': [(1, 49.25, 35.66, 'iopke', None), (2, 1.46, 96.14, 'ufqma', None), (3, 82.46, 96.64, 'rqrpc', None), (4, 63.45, 33.12, 'ojifb', None), (5, 88.83, 54.66, 'mvjog', None), (6, 65.9, 58.11, 'ztdec', None), (7, 77.82, 79.23, 'uwttu', None), (8, 13.59, 2.92, 'ckejs', None), (9, 2.7, 31.75, 'yxvpv', None), (10, 33.22, 86.61, 'aqmrt', None), (11, 33.67, 7.0, 'modzf', None), (12, 1.02, 64.48, 'bnwdi', None)]}, 'trx1': {'table_0': [(1, 49.25, 35.66, 'iopke', None), (2, 1.46, 96.14, 'ufqma', None), (3, 82.46, 96.64, 'rqrpc', None), (4, 63.45, 33.12, 'ojifb', None), (5, 88.83, 54.66, 'mvjog', None), (6, 65.9, 58.11, 'ztdec', None), (7, 77.82, 79.23, 'uwttu', None), (8, 13.59, 2.92, 'ckejs', None), (9, 2.7, 31.75, 'yxvpv', None), (10, 33.22, 86.61, 'aqmrt', None), (11, 33.67, 7.0, 'modzf', None), (12, 1.02, 64.48, 'bnwdi', None)]}, 'trx2': {'table_0': [(1, 74.32, 35.66, 'peLWC', 'irSBK'), (2, 65.97, 62.45, 'HpTGQ', None), (3, 65.97, 62.45, 'HpTGQ', None), (4, 44.24, 79.17, 'rzVib', 'SfRlg'), (5, 65.97, 62.45, 'HpTGQ', None), (6, 65.97, 62.45, 'HpTGQ', None), (7, 65.97, 62.45, 'HpTGQ', None), (8, 65.97, 62.45, 'HpTGQ', None), (9, 65.97, 62.45, 'HpTGQ', None), (10, 65.97, 62.45, 'HpTGQ', None), (11, 65.97, 62.45, 'HpTGQ', None), (12, 65.97, 62.45, 'HpTGQ', None), (13, 79.85, 27.1, 'XvrxA', 'EDFxN'), (14, 55.85, 71.5, 'NAbaq', 'moxxm')]}, 'serial': {'table_0': [(1, 74.32, 35.66, 'peLWC', 'irSBK'), (2, 65.97, 62.45, 'HpTGQ', None), (3, 65.97, 62.45, 'HpTGQ', None), (4, 44.24, 79.17, 'rzVib', 'SfRlg'), (5, 65.97, 62.45, 'HpTGQ', None), (6, 65.97, 62.45, 'HpTGQ', None), (7, 65.97, 62.45, 'HpTGQ', None), (8, 65.97, 62.45, 'HpTGQ', None), (9, 65.97, 62.45, 'HpTGQ', None), (10, 65.97, 62.45, 'HpTGQ', None), (11, 65.97, 62.45, 'HpTGQ', None), (12, 65.97, 62.45, 'HpTGQ', None), (15, 79.85, 27.1, 'XvrxA', 'EDFxN'), (16, 55.85, 71.5, 'NAbaq', 'moxxm')]}}
2025-02-05 00:06:07,531 - 
2025-02-05 00:06:07,541 - iter: 68
2025-02-05 00:06:09,058 - table table_0 has 14 rows
2025-02-05 00:06:09,058 - trx1_lock_row_ids: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
2025-02-05 00:06:09,058 - trx2_lock_row_ids: [1, 7, 13, 14]
2025-02-05 00:06:09,058 - intersection_row_ids: [7]
2025-02-05 00:06:09,058 - trx1_exclusive_ids: [2, 3, 4, 5, 6, 8, 9, 10, 11, 12]
2025-02-05 00:06:09,058 - trx2_exclusive_ids: [1, 13, 14]
2025-02-05 00:06:09,058 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [1, 7, 13, 14], 'intersection_row_ids': [7]}
2025-02-05 00:06:09,059 - lock_same_resource: True
2025-02-05 00:06:09,059 - 
2025-02-05 00:06:09,059 - intersection phase1
2025-02-05 00:06:09,062 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=12
2025-02-05 00:06:09,064 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:09,064 - params: {'v1': '2', 'v2': '12', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:06:09,067 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,069 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:09,069 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'col_0'}
2025-02-05 00:06:09,069 - intersection phase1 end
2025-02-05 00:06:09,069 - 
2025-02-05 00:06:09,069 - intersection phase2
2025-02-05 00:06:09,070 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:06:09,070 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:06:09,070 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 00:06:09,070 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:06:09,074 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,076 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:06:09,076 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_909', 'vals': "NULL, 3, 76, 73.15, 'RXNUl', 40", 'table': 'table_0'}
2025-02-05 00:06:09,079 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,080 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:09,081 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'col_1, col_909'}
2025-02-05 00:06:09,084 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,085 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:09,086 - params: {'set_expr': "col_0 = 94, col_909 = 99, col_1 = 98, col_3 = 'wLLot', col_2 = 12.39", 'table': 'table_0', 'cond': "(col_3 = 'kfymn')"}
2025-02-05 00:06:09,089 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,091 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:09,091 - params: {'set_expr': "col_3 = 'abslE', col_1 = 72, col_0 = 35, col_909 = 13, col_2 = 82.71", 'table': 'table_0', 'cond': '(id = 5)'}
2025-02-05 00:06:09,094 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,095 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:09,096 - params: {'set_expr': 'col_1 = 35, col_0 = 46', 'table': 'table_0', 'cond': "(col_0 = 18) AND (col_3 = 'grbol')"}
2025-02-05 00:06:09,099 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,100 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:09,100 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_909'}
2025-02-05 00:06:09,104 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,105 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:06:09,106 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_909', 'vals': "NULL, 19, 93, 60.41, 'TAjYw', 10", 'table': 'table_0'}
2025-02-05 00:06:09,109 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,111 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:06:09,111 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_909', 'vals': "NULL, 57, 30, 62.06, 'MpYAs', 80", 'table': 'table_0'}
2025-02-05 00:06:09,114 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,115 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:09,116 - params: {'set_expr': "col_2 = 42.77, col_909 = 58, col_3 = 'rKLuG'", 'table': 'table_0', 'cond': '(id = 11)'}
2025-02-05 00:06:09,119 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,120 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:09,120 - params: {'set_expr': 'col_0 = 27, col_1 = 25, col_2 = 66.33, col_909 = 98', 'table': 'table_0', 'cond': '(col_0 = 58) AND (col_1 = 61) AND (col_2 = 87.45)'}
2025-02-05 00:06:09,124 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,124 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:09,126 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_2, col_3, col_909'}
2025-02-05 00:06:09,129 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,129 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:06:09,130 - params: {'cond': '(id = 13)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_909'}
2025-02-05 00:06:09,133 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,135 - needed_params: {'cond', 'table'}
2025-02-05 00:06:09,135 - params: {'cond': '(id = 14)', 'table': 'table_0'}
2025-02-05 00:06:09,135 - intersection phase2 end
2025-02-05 00:06:09,135 - 
2025-02-05 00:06:09,135 - intersection phase3
2025-02-05 00:06:09,138 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,140 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:09,140 - params: {'set_expr': "col_0 = 64, col_2 = 17.39, col_3 = 'QlKel', col_1 = 94, col_909 = 86", 'table': 'table_0', 'cond': '(col_909 IS NULL) AND (col_2 = 24.95) AND (col_1 = 87)'}
2025-02-05 00:06:09,143 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:06:09,145 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:09,145 - params: {'set_expr': "col_3 = 'UxOYO', col_0 = 63", 'table': 'table_0', 'cond': '(col_0 = 59)'}
2025-02-05 00:06:09,145 - intersection phase3 end
2025-02-05 00:06:09,145 - 
2025-02-05 00:06:09,145 - 生成死锁事务序列成功如下
2025-02-05 00:06:09,145 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 12 LOCK IN SHARE MODE'), (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'SELECT id, col_2, col_3, col_909 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE (id = 13) FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 14)'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 3, 76, 73.15, 'RXNUl', 40)"), (1, 'SELECT col_1, col_909 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 94, col_909 = 99, col_1 = 98, col_3 = 'wLLot', col_2 = 12.39 WHERE (col_3 = 'kfymn')"), (1, "UPDATE table_0 SET col_3 = 'abslE', col_1 = 72, col_0 = 35, col_909 = 13, col_2 = 82.71 WHERE (id = 5)"), (1, "UPDATE table_0 SET col_1 = 35, col_0 = 46 WHERE (col_0 = 18) AND (col_3 = 'grbol')"), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 19, 93, 60.41, 'TAjYw', 10)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 57, 30, 62.06, 'MpYAs', 80)"), (1, "UPDATE table_0 SET col_2 = 42.77, col_909 = 58, col_3 = 'rKLuG' WHERE (id = 11)"), (1, 'UPDATE table_0 SET col_0 = 27, col_1 = 25, col_2 = 66.33, col_909 = 98 WHERE (col_0 = 58) AND (col_1 = 61) AND (col_2 = 87.45)'), (2, "UPDATE table_0 SET col_3 = 'UxOYO', col_0 = 63 WHERE (col_0 = 59)"), (1, "UPDATE table_0 SET col_0 = 64, col_2 = 17.39, col_3 = 'QlKel', col_1 = 94, col_909 = 86 WHERE (col_909 IS NULL) AND (col_2 = 24.95) AND (col_1 = 87)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:06:10,678 - 创建事务1连接成功
2025-02-05 00:06:10,679 - 执行事务1语句: BEGIN
2025-02-05 00:06:10,680 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 12 LOCK IN SHARE MODE
2025-02-05 00:06:10,681 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 3, 76, 73.15, 'RXNUl', 40)
2025-02-05 00:06:10,682 - 执行事务1语句: SELECT col_1, col_909 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-05 00:06:10,683 - 执行事务1语句: UPDATE table_0 SET col_0 = 94, col_909 = 99, col_1 = 98, col_3 = 'wLLot', col_2 = 12.39 WHERE (col_3 = 'kfymn')
2025-02-05 00:06:10,684 - 执行事务1语句: UPDATE table_0 SET col_3 = 'abslE', col_1 = 72, col_0 = 35, col_909 = 13, col_2 = 82.71 WHERE (id = 5)
2025-02-05 00:06:10,684 - 执行事务1语句: UPDATE table_0 SET col_1 = 35, col_0 = 46 WHERE (col_0 = 18) AND (col_3 = 'grbol')
2025-02-05 00:06:10,685 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-05 00:06:10,686 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 19, 93, 60.41, 'TAjYw', 10)
2025-02-05 00:06:10,686 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 57, 30, 62.06, 'MpYAs', 80)
2025-02-05 00:06:10,687 - 执行事务1语句: UPDATE table_0 SET col_2 = 42.77, col_909 = 58, col_3 = 'rKLuG' WHERE (id = 11)
2025-02-05 00:06:10,688 - 执行事务1语句: UPDATE table_0 SET col_0 = 27, col_1 = 25, col_2 = 66.33, col_909 = 98 WHERE (col_0 = 58) AND (col_1 = 61) AND (col_2 = 87.45)
2025-02-05 00:06:10,688 - 执行事务1语句: UPDATE table_0 SET col_0 = 64, col_2 = 17.39, col_3 = 'QlKel', col_1 = 94, col_909 = 86 WHERE (col_909 IS NULL) AND (col_2 = 24.95) AND (col_1 = 87)
2025-02-05 00:06:10,691 - 执行事务1语句: COMMIT;
2025-02-05 00:06:10,695 - 执行事务1成功
2025-02-05 00:06:13,312 - 恢复初始状态成功
2025-02-05 00:06:14,076 - 创建事务2连接成功
2025-02-05 00:06:14,078 - 执行事务2语句: BEGIN
2025-02-05 00:06:14,079 - 执行事务2语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:14,080 - 执行事务2语句: SELECT id, col_2, col_3, col_909 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:14,081 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE (id = 13) FOR UPDATE
2025-02-05 00:06:14,082 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 14)
2025-02-05 00:06:14,083 - 执行事务2语句: UPDATE table_0 SET col_3 = 'UxOYO', col_0 = 63 WHERE (col_0 = 59)
2025-02-05 00:06:14,085 - 执行事务2语句: COMMIT;
2025-02-05 00:06:14,091 - 执行事务2成功
2025-02-05 00:06:19,054 - 
2025-02-05 00:06:19,054 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 12 LOCK IN SHARE MODE', <Thread(Thread-500, started 31224)>, 1738685179.0540628)}
2025-02-05 00:06:19,159 - stmt_idx: 2, status: success, result: None
2025-02-05 00:06:19,159 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 12 LOCK IN SHARE MODE
2025-02-05 00:06:19,159 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:06:19,159 - 
2025-02-05 00:06:19,270 - 
2025-02-05 00:06:19,271 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:19,378 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:19,378 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:19,378 - 
2025-02-05 00:06:19,487 - 
2025-02-05 00:06:19,487 - 执行前idx: 8, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 7: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 3, 76, 73.15, 'RXNUl', 40)", <Thread(Thread-502, started 8136)>, 1738685179.487107)}
2025-02-05 00:06:19,595 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:19,704 - stmt_idx: 7, status: success, result: None
2025-02-05 00:06:19,704 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 3, 76, 73.15, 'RXNUl', 40)
2025-02-05 00:06:19,704 - 执行后idx: 8, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:19,704 - 
2025-02-05 00:06:19,815 - 
2025-02-05 00:06:19,815 - 执行前idx: 9, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 8: (1, 'SELECT col_1, col_909 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE', <Thread(Thread-503, started 35916)>, 1738685179.815365)}
2025-02-05 00:06:19,921 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:20,029 - stmt_idx: 8, status: success, result: None
2025-02-05 00:06:20,029 - 成功执行序列中事务1语句: SELECT col_1, col_909 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-05 00:06:20,029 - 执行后idx: 9, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:20,029 - 
2025-02-05 00:06:20,135 - 
2025-02-05 00:06:20,136 - 执行前idx: 10, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 9: (1, "UPDATE table_0 SET col_0 = 94, col_909 = 99, col_1 = 98, col_3 = 'wLLot', col_2 = 12.39 WHERE (col_3 = 'kfymn')", <Thread(Thread-504, started 16276)>, 1738685180.1353319)}
2025-02-05 00:06:20,243 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:20,352 - stmt_idx: 9, status: success, result: None
2025-02-05 00:06:20,352 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 94, col_909 = 99, col_1 = 98, col_3 = 'wLLot', col_2 = 12.39 WHERE (col_3 = 'kfymn')
2025-02-05 00:06:20,352 - 执行后idx: 10, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:20,352 - 
2025-02-05 00:06:20,461 - 
2025-02-05 00:06:20,463 - 执行前idx: 11, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 10: (1, "UPDATE table_0 SET col_3 = 'abslE', col_1 = 72, col_0 = 35, col_909 = 13, col_2 = 82.71 WHERE (id = 5)", <Thread(Thread-505, started 26860)>, 1738685180.4619355)}
2025-02-05 00:06:20,570 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:20,677 - stmt_idx: 10, status: success, result: None
2025-02-05 00:06:20,677 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 'abslE', col_1 = 72, col_0 = 35, col_909 = 13, col_2 = 82.71 WHERE (id = 5)
2025-02-05 00:06:20,677 - 执行后idx: 11, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:20,677 - 
2025-02-05 00:06:20,788 - 
2025-02-05 00:06:20,788 - 执行前idx: 12, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 11: (1, "UPDATE table_0 SET col_1 = 35, col_0 = 46 WHERE (col_0 = 18) AND (col_3 = 'grbol')", <Thread(Thread-506, started 30408)>, 1738685180.7884417)}
2025-02-05 00:06:20,895 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:21,002 - stmt_idx: 11, status: success, result: None
2025-02-05 00:06:21,002 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 35, col_0 = 46 WHERE (col_0 = 18) AND (col_3 = 'grbol')
2025-02-05 00:06:21,002 - 执行后idx: 12, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:21,002 - 
2025-02-05 00:06:21,108 - 
2025-02-05 00:06:21,109 - 执行前idx: 13, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 12: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE', <Thread(Thread-507, started 37928)>, 1738685181.1082652)}
2025-02-05 00:06:21,215 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:21,322 - stmt_idx: 12, status: success, result: None
2025-02-05 00:06:21,322 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-05 00:06:21,322 - 执行后idx: 13, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:21,322 - 
2025-02-05 00:06:21,430 - 
2025-02-05 00:06:21,431 - 执行前idx: 14, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 13: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 19, 93, 60.41, 'TAjYw', 10)", <Thread(Thread-508, started 37072)>, 1738685181.4309912)}
2025-02-05 00:06:21,540 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:21,648 - stmt_idx: 13, status: success, result: None
2025-02-05 00:06:21,648 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 19, 93, 60.41, 'TAjYw', 10)
2025-02-05 00:06:21,648 - 执行后idx: 14, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:21,648 - 
2025-02-05 00:06:21,758 - 
2025-02-05 00:06:21,758 - 执行前idx: 15, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 14: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 57, 30, 62.06, 'MpYAs', 80)", <Thread(Thread-509, started 41192)>, 1738685181.758367)}
2025-02-05 00:06:21,866 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:21,976 - stmt_idx: 14, status: success, result: None
2025-02-05 00:06:21,976 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 57, 30, 62.06, 'MpYAs', 80)
2025-02-05 00:06:21,976 - 执行后idx: 15, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:21,976 - 
2025-02-05 00:06:22,086 - 
2025-02-05 00:06:22,086 - 执行前idx: 16, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 15: (1, "UPDATE table_0 SET col_2 = 42.77, col_909 = 58, col_3 = 'rKLuG' WHERE (id = 11)", <Thread(Thread-510, started 37788)>, 1738685182.0865922)}
2025-02-05 00:06:22,192 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:22,299 - stmt_idx: 15, status: success, result: None
2025-02-05 00:06:22,299 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 42.77, col_909 = 58, col_3 = 'rKLuG' WHERE (id = 11)
2025-02-05 00:06:22,300 - 执行后idx: 16, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:22,300 - 
2025-02-05 00:06:22,409 - 
2025-02-05 00:06:22,410 - 执行前idx: 17, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 16: (1, 'UPDATE table_0 SET col_0 = 27, col_1 = 25, col_2 = 66.33, col_909 = 98 WHERE (col_0 = 58) AND (col_1 = 61) AND (col_2 = 87.45)', <Thread(Thread-511, started 41856)>, 1738685182.4099827)}
2025-02-05 00:06:22,517 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:22,627 - stmt_idx: 16, status: success, result: None
2025-02-05 00:06:22,627 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 27, col_1 = 25, col_2 = 66.33, col_909 = 98 WHERE (col_0 = 58) AND (col_1 = 61) AND (col_2 = 87.45)
2025-02-05 00:06:22,627 - 执行后idx: 17, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:22,627 - 
2025-02-05 00:06:22,735 - 
2025-02-05 00:06:22,736 - 执行前idx: 19, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356), 18: (1, "UPDATE table_0 SET col_0 = 64, col_2 = 17.39, col_3 = 'QlKel', col_1 = 94, col_909 = 86 WHERE (col_909 IS NULL) AND (col_2 = 24.95) AND (col_1 = 87)", <Thread(Thread-512, started 37664)>, 1738685182.735082)}
2025-02-05 00:06:22,843 - wait for lock, trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:22,951 - stmt_idx: 18, status: success, result: None
2025-02-05 00:06:22,951 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 64, col_2 = 17.39, col_3 = 'QlKel', col_1 = 94, col_909 = 86 WHERE (col_909 IS NULL) AND (col_2 = 24.95) AND (col_1 = 87)
2025-02-05 00:06:22,951 - 执行后idx: 19, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:22,951 - 
2025-02-05 00:06:23,066 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, started 39196)>, 1738685179.2706356)}
2025-02-05 00:06:23,067 - 
2025-02-05 00:06:23,067 - 执行前idx: 21, pending_stmts: {3: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-501, stopped 39196)>, 1738685179.2706356)}
2025-02-05 00:06:23,172 - stmt_idx: 3, status: success, result: None
2025-02-05 00:06:23,172 - 成功执行序列中事务2语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:23,172 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:06:23,174 - 执行后idx: 21, pending_stmts: {4: (2, 'SELECT id, col_2, col_3, col_909 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-513, started 35152)>, 1738685183.1734946), 5: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE (id = 13) FOR UPDATE', <Thread(Thread-514, started 37620)>, 1738685183.1740713), 6: (2, 'DELETE FROM table_0 WHERE (id = 14)', <Thread(Thread-515, started 31948)>, 1738685183.1740713), 17: (2, "UPDATE table_0 SET col_3 = 'UxOYO', col_0 = 63 WHERE (col_0 = 59)", <Thread(Thread-516, started 3900)>, 1738685183.1740713), 20: (2, 'COMMIT', <Thread(Thread-517, started 25216)>, 1738685183.1745765)}
2025-02-05 00:06:23,174 - 
2025-02-05 00:06:23,280 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'SELECT id, col_2, col_3, col_909 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-513, stopped 35152)>, 1738685183.1734946), 5: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE (id = 13) FOR UPDATE', <Thread(Thread-514, stopped 37620)>, 1738685183.1740713), 6: (2, 'DELETE FROM table_0 WHERE (id = 14)', <Thread(Thread-515, stopped 31948)>, 1738685183.1740713), 17: (2, "UPDATE table_0 SET col_3 = 'UxOYO', col_0 = 63 WHERE (col_0 = 59)", <Thread(Thread-516, stopped 3900)>, 1738685183.1740713), 20: (2, 'COMMIT', <Thread(Thread-517, stopped 25216)>, 1738685183.1745765)}
2025-02-05 00:06:23,280 - 
2025-02-05 00:06:23,280 - 执行前idx: 21, pending_stmts: {4: (2, 'SELECT id, col_2, col_3, col_909 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-513, stopped 35152)>, 1738685183.1734946), 5: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE (id = 13) FOR UPDATE', <Thread(Thread-514, stopped 37620)>, 1738685183.1740713), 6: (2, 'DELETE FROM table_0 WHERE (id = 14)', <Thread(Thread-515, stopped 31948)>, 1738685183.1740713), 17: (2, "UPDATE table_0 SET col_3 = 'UxOYO', col_0 = 63 WHERE (col_0 = 59)", <Thread(Thread-516, stopped 3900)>, 1738685183.1740713), 20: (2, 'COMMIT', <Thread(Thread-517, stopped 25216)>, 1738685183.1745765)}
2025-02-05 00:06:23,387 - stmt_idx: 4, status: success, result: None
2025-02-05 00:06:23,387 - 成功执行序列中事务2语句: SELECT id, col_2, col_3, col_909 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:23,496 - stmt_idx: 5, status: success, result: None
2025-02-05 00:06:23,496 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE (id = 13) FOR UPDATE
2025-02-05 00:06:23,604 - stmt_idx: 6, status: success, result: None
2025-02-05 00:06:23,604 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 14)
2025-02-05 00:06:23,713 - stmt_idx: 17, status: success, result: None
2025-02-05 00:06:23,713 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 'UxOYO', col_0 = 63 WHERE (col_0 = 59)
2025-02-05 00:06:23,822 - stmt_idx: 20, status: success, result: None
2025-02-05 00:06:23,822 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:06:23,822 - 执行后idx: 21, pending_stmts: {}
2025-02-05 00:06:23,822 - 
2025-02-05 00:06:23,933 - 执行序列成功
2025-02-05 00:06:24,698 - is_atomic: True
2025-02-05 00:06:24,698 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:06:24,698 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 12 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 3, 76, 73.15, 'RXNUl', 40)"), (1, 'SELECT col_1, col_909 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 94, col_909 = 99, col_1 = 98, col_3 = 'wLLot', col_2 = 12.39 WHERE (col_3 = 'kfymn')"), (1, "UPDATE table_0 SET col_3 = 'abslE', col_1 = 72, col_0 = 35, col_909 = 13, col_2 = 82.71 WHERE (id = 5)"), (1, "UPDATE table_0 SET col_1 = 35, col_0 = 46 WHERE (col_0 = 18) AND (col_3 = 'grbol')"), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 19, 93, 60.41, 'TAjYw', 10)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_909) VALUES (NULL, 57, 30, 62.06, 'MpYAs', 80)"), (1, "UPDATE table_0 SET col_2 = 42.77, col_909 = 58, col_3 = 'rKLuG' WHERE (id = 11)"), (1, 'UPDATE table_0 SET col_0 = 27, col_1 = 25, col_2 = 66.33, col_909 = 98 WHERE (col_0 = 58) AND (col_1 = 61) AND (col_2 = 87.45)'), (1, "UPDATE table_0 SET col_0 = 64, col_2 = 17.39, col_3 = 'QlKel', col_1 = 94, col_909 = 86 WHERE (col_909 IS NULL) AND (col_2 = 24.95) AND (col_1 = 87)"), (1, 'COMMIT'), (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'SELECT id, col_2, col_3, col_909 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_909 FROM table_0 WHERE (id = 13) FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 14)'), (2, "UPDATE table_0 SET col_3 = 'UxOYO', col_0 = 63 WHERE (col_0 = 59)"), (2, 'COMMIT')]
2025-02-05 00:06:24,698 - snapshots: {'before': {'table_0': [(1, 62, 71, 32.65, 'ewkst', None), (2, 60, 95, 20.8, 'rzspy', None), (3, 59, 78, 57.97, 'dwmma', None), (4, 80, 5, 18.42, 'kfymn', None), (5, 54, 10, 58.2, 'zntae', None), (6, 18, 58, 41.95, 'grbol', None), (7, 92, 35, 21.51, 'vihol', None), (8, 26, 66, 8.42, 'toznb', None), (9, 90, 83, 75.38, 'xzrqs', None), (10, 99, 1, 92.0, 'fqbsm', None), (11, 25, 23, 95.27, 'dliql', None), (12, 58, 61, 87.45, 'oulhd', None), (13, 64, 86, 49.5, 'tsfla', None), (14, 99, 87, 24.95, 'rfyak', None)]}, 'trx1': {'table_0': [(1, 62, 71, 32.65, 'ewkst', None), (2, 60, 95, 20.8, 'rzspy', None), (3, 59, 78, 57.97, 'dwmma', None), (4, 94, 98, 12.39, 'wLLot', 99), (5, 35, 72, 82.71, 'abslE', 13), (6, 46, 35, 41.95, 'grbol', None), (7, 92, 35, 21.51, 'vihol', None), (8, 26, 66, 8.42, 'toznb', None), (9, 90, 83, 75.38, 'xzrqs', None), (10, 99, 1, 92.0, 'fqbsm', None), (11, 25, 23, 42.77, 'rKLuG', 58), (12, 58, 61, 87.45, 'oulhd', None), (13, 64, 86, 49.5, 'tsfla', None), (14, 99, 87, 24.95, 'rfyak', None), (15, 3, 76, 73.15, 'RXNUl', 40), (16, 19, 93, 60.41, 'TAjYw', 10), (17, 57, 30, 62.06, 'MpYAs', 80)]}, 'trx2': {'table_0': [(1, 62, 71, 32.65, 'ewkst', None), (2, 60, 95, 20.8, 'rzspy', None), (3, 63, 78, 57.97, 'UxOYO', None), (4, 80, 5, 18.42, 'kfymn', None), (5, 54, 10, 58.2, 'zntae', None), (6, 18, 58, 41.95, 'grbol', None), (7, 92, 35, 21.51, 'vihol', None), (8, 26, 66, 8.42, 'toznb', None), (9, 90, 83, 75.38, 'xzrqs', None), (10, 99, 1, 92.0, 'fqbsm', None), (11, 25, 23, 95.27, 'dliql', None), (12, 58, 61, 87.45, 'oulhd', None), (13, 64, 86, 49.5, 'tsfla', None)]}, 'serial': {'table_0': [(1, 62, 71, 32.65, 'ewkst', None), (2, 60, 95, 20.8, 'rzspy', None), (3, 63, 78, 57.97, 'UxOYO', None), (4, 94, 98, 12.39, 'wLLot', 99), (5, 35, 72, 82.71, 'abslE', 13), (6, 46, 35, 41.95, 'grbol', None), (7, 92, 35, 21.51, 'vihol', None), (8, 26, 66, 8.42, 'toznb', None), (9, 90, 83, 75.38, 'xzrqs', None), (10, 99, 1, 92.0, 'fqbsm', None), (11, 25, 23, 42.77, 'rKLuG', 58), (12, 58, 61, 87.45, 'oulhd', None), (13, 64, 86, 49.5, 'tsfla', None), (18, 3, 76, 73.15, 'RXNUl', 40), (19, 19, 93, 60.41, 'TAjYw', 10), (20, 57, 30, 62.06, 'MpYAs', 80)]}}
2025-02-05 00:06:24,698 - 
2025-02-05 00:06:24,710 - iter: 69
2025-02-05 00:06:26,194 - table table_0 has 8 rows
2025-02-05 00:06:26,194 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 00:06:26,194 - trx2_lock_row_ids: [1]
2025-02-05 00:06:26,194 - intersection_row_ids: [1]
2025-02-05 00:06:26,194 - trx1_exclusive_ids: [2, 3, 4, 5, 6, 7, 8]
2025-02-05 00:06:26,194 - trx2_exclusive_ids: []
2025-02-05 00:06:26,194 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'trx2_lock_row_ids': [1], 'intersection_row_ids': [1]}
2025-02-05 00:06:26,195 - lock_same_resource: True
2025-02-05 00:06:26,195 - 
2025-02-05 00:06:26,195 - intersection phase1
2025-02-05 00:06:26,198 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,199 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:06:26,199 - params: {'cond': '(col_0 = 44.32) AND (col_1 = 97.8)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:06:26,202 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,203 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:26,204 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:06:26,204 - intersection phase1 end
2025-02-05 00:06:26,204 - 
2025-02-05 00:06:26,204 - intersection phase2
2025-02-05 00:06:26,204 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:06:26,204 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:06:26,205 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:06:26,205 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:06:26,208 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,209 - needed_params: {'cond', 'table'}
2025-02-05 00:06:26,209 - params: {'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 00:06:26,212 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,213 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:26,213 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:06:26,216 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,217 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:06:26,217 - params: {'cond': '(id = 4) AND (col_0 = 73.61) AND (col_1 = 41.09)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:06:26,220 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,222 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:06:26,222 - params: {'cond': '(id = 5)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:06:26,226 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,227 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:26,228 - params: {'set_expr': 'col_1 = 93.58, col_0 = 40.13', 'table': 'table_0', 'cond': '(id = 6)'}
2025-02-05 00:06:26,230 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,232 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:06:26,232 - params: {'cond': '(id = 7)', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:06:26,235 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,237 - needed_params: {'cond', 'table'}
2025-02-05 00:06:26,237 - params: {'cond': '(col_0 = 74.77)', 'table': 'table_0'}
2025-02-05 00:06:26,237 - intersection phase2 end
2025-02-05 00:06:26,237 - 
2025-02-05 00:06:26,237 - intersection phase3
2025-02-05 00:06:26,240 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:06:26,242 - needed_params: {'cond', 'table'}
2025-02-05 00:06:26,242 - params: {'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 00:06:26,242 - intersection phase3 end
2025-02-05 00:06:26,242 - 
2025-02-05 00:06:26,242 - 生成死锁事务序列成功如下
2025-02-05 00:06:26,242 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 44.32) AND (col_1 = 97.8) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_0 = 73.61) AND (col_1 = 41.09) FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 93.58, col_0 = 40.13 WHERE (id = 6)'), (1, 'SELECT id FROM table_0 WHERE (id = 7) FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (col_0 = 74.77)'), (2, None), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:06:27,797 - 创建事务1连接成功
2025-02-05 00:06:27,799 - 执行事务1语句: BEGIN
2025-02-05 00:06:27,800 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 44.32) AND (col_1 = 97.8) LOCK IN SHARE MODE
2025-02-05 00:06:27,801 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 00:06:27,802 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 00:06:27,802 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_0 = 73.61) AND (col_1 = 41.09) FOR UPDATE
2025-02-05 00:06:27,803 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 00:06:27,804 - 执行事务1语句: UPDATE table_0 SET col_1 = 93.58, col_0 = 40.13 WHERE (id = 6)
2025-02-05 00:06:27,804 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 7) FOR UPDATE
2025-02-05 00:06:27,805 - 执行事务1语句: DELETE FROM table_0 WHERE (col_0 = 74.77)
2025-02-05 00:06:27,805 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 00:06:27,807 - 执行事务1语句: COMMIT;
2025-02-05 00:06:27,812 - 执行事务1成功
2025-02-05 00:06:30,371 - 恢复初始状态成功
2025-02-05 00:06:31,146 - 创建事务2连接成功
2025-02-05 00:06:31,148 - 执行事务2语句: BEGIN
2025-02-05 00:06:31,149 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:31,149 - 执行事务2语句: COMMIT;
2025-02-05 00:06:31,153 - 执行事务2成功
2025-02-05 00:06:36,078 - 
2025-02-05 00:06:36,078 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 44.32) AND (col_1 = 97.8) LOCK IN SHARE MODE', <Thread(Thread-518, started 16980)>, 1738685196.0787003)}
2025-02-05 00:06:36,179 - stmt_idx: 2, status: success, result: None
2025-02-05 00:06:36,179 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 44.32) AND (col_1 = 97.8) LOCK IN SHARE MODE
2025-02-05 00:06:36,179 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:06:36,180 - 
2025-02-05 00:06:36,287 - 
2025-02-05 00:06:36,287 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:36,394 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:36,395 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:36,395 - 
2025-02-05 00:06:36,502 - 
2025-02-05 00:06:36,503 - 执行前idx: 5, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077), 4: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-520, started 41788)>, 1738685196.5022798)}
2025-02-05 00:06:36,609 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:36,717 - stmt_idx: 4, status: success, result: None
2025-02-05 00:06:36,718 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 00:06:36,718 - 执行后idx: 5, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:36,718 - 
2025-02-05 00:06:36,825 - 
2025-02-05 00:06:36,826 - 执行前idx: 6, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077), 5: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-521, started 34064)>, 1738685196.825101)}
2025-02-05 00:06:36,933 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:37,041 - stmt_idx: 5, status: success, result: None
2025-02-05 00:06:37,041 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 00:06:37,041 - 执行后idx: 6, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:37,041 - 
2025-02-05 00:06:37,149 - 
2025-02-05 00:06:37,149 - 执行前idx: 7, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077), 6: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_0 = 73.61) AND (col_1 = 41.09) FOR UPDATE', <Thread(Thread-522, started 15128)>, 1738685197.1486244)}
2025-02-05 00:06:37,255 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:37,363 - stmt_idx: 6, status: success, result: None
2025-02-05 00:06:37,363 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_0 = 73.61) AND (col_1 = 41.09) FOR UPDATE
2025-02-05 00:06:37,363 - 执行后idx: 7, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:37,363 - 
2025-02-05 00:06:37,470 - 
2025-02-05 00:06:37,471 - 执行前idx: 8, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077), 7: (1, 'SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-523, started 37956)>, 1738685197.4708846)}
2025-02-05 00:06:37,578 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:37,683 - stmt_idx: 7, status: success, result: None
2025-02-05 00:06:37,683 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 00:06:37,683 - 执行后idx: 8, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:37,683 - 
2025-02-05 00:06:37,791 - 
2025-02-05 00:06:37,791 - 执行前idx: 9, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077), 8: (1, 'UPDATE table_0 SET col_1 = 93.58, col_0 = 40.13 WHERE (id = 6)', <Thread(Thread-524, started 41872)>, 1738685197.791617)}
2025-02-05 00:06:37,897 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:38,006 - stmt_idx: 8, status: success, result: None
2025-02-05 00:06:38,007 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 93.58, col_0 = 40.13 WHERE (id = 6)
2025-02-05 00:06:38,007 - 执行后idx: 9, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:38,007 - 
2025-02-05 00:06:38,115 - 
2025-02-05 00:06:38,115 - 执行前idx: 10, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077), 9: (1, 'SELECT id FROM table_0 WHERE (id = 7) FOR UPDATE', <Thread(Thread-525, started 35256)>, 1738685198.1150937)}
2025-02-05 00:06:38,224 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:38,331 - stmt_idx: 9, status: success, result: None
2025-02-05 00:06:38,331 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (id = 7) FOR UPDATE
2025-02-05 00:06:38,331 - 执行后idx: 10, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:38,331 - 
2025-02-05 00:06:38,438 - 
2025-02-05 00:06:38,439 - 执行前idx: 11, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077), 10: (1, 'DELETE FROM table_0 WHERE (col_0 = 74.77)', <Thread(Thread-526, started 7188)>, 1738685198.438564)}
2025-02-05 00:06:38,547 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:38,652 - stmt_idx: 10, status: success, result: None
2025-02-05 00:06:38,652 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_0 = 74.77)
2025-02-05 00:06:38,653 - 执行后idx: 11, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:38,653 - 
2025-02-05 00:06:38,758 - stmt为None, trx_id: 2, stmt: None
2025-02-05 00:06:38,759 - 
2025-02-05 00:06:38,759 - 执行前idx: 13, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077), 12: (1, 'DELETE FROM table_0 WHERE (id = 1)', <Thread(Thread-527, started 40900)>, 1738685198.759901)}
2025-02-05 00:06:38,866 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:38,973 - stmt_idx: 12, status: success, result: None
2025-02-05 00:06:38,973 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 00:06:38,973 - 执行后idx: 13, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:38,973 - 
2025-02-05 00:06:39,088 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, started 30544)>, 1738685196.2873077)}
2025-02-05 00:06:39,088 - 
2025-02-05 00:06:39,088 - 执行前idx: 15, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-519, stopped 30544)>, 1738685196.2873077)}
2025-02-05 00:06:39,192 - stmt_idx: 3, status: success, result: None
2025-02-05 00:06:39,192 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:39,192 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:06:39,193 - 执行后idx: 15, pending_stmts: {14: (2, 'COMMIT', <Thread(Thread-528, started 8488)>, 1738685199.1935077)}
2025-02-05 00:06:39,193 - 
2025-02-05 00:06:39,300 - 序列遍历完成，开始查看剩余阻塞的语句：{14: (2, 'COMMIT', <Thread(Thread-528, stopped 8488)>, 1738685199.1935077)}
2025-02-05 00:06:39,300 - 
2025-02-05 00:06:39,300 - 执行前idx: 15, pending_stmts: {14: (2, 'COMMIT', <Thread(Thread-528, stopped 8488)>, 1738685199.1935077)}
2025-02-05 00:06:39,409 - stmt_idx: 14, status: success, result: None
2025-02-05 00:06:39,409 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:06:39,409 - 执行后idx: 15, pending_stmts: {}
2025-02-05 00:06:39,409 - 
2025-02-05 00:06:39,518 - 执行序列成功
2025-02-05 00:06:40,290 - is_atomic: True
2025-02-05 00:06:40,290 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:06:40,290 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 44.32) AND (col_1 = 97.8) LOCK IN SHARE MODE'), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_0 = 73.61) AND (col_1 = 41.09) FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 93.58, col_0 = 40.13 WHERE (id = 6)'), (1, 'SELECT id FROM table_0 WHERE (id = 7) FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (col_0 = 74.77)'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, 'COMMIT'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 00:06:40,291 - snapshots: {'before': {'table_0': [(1, 44.32, 97.8), (2, 42.54, 40.94), (3, 66.29, 45.25), (4, 73.61, 41.09), (5, 55.72, 45.05), (6, 82.8, 40.49), (7, 46.84, 80.67), (8, 74.77, 51.13)]}, 'trx1': {'table_0': [(3, 66.29, 45.25), (4, 73.61, 41.09), (5, 55.72, 45.05), (6, 40.13, 93.58), (7, 46.84, 80.67)]}, 'trx2': {'table_0': [(1, 44.32, 97.8), (2, 42.54, 40.94), (3, 66.29, 45.25), (4, 73.61, 41.09), (5, 55.72, 45.05), (6, 82.8, 40.49), (7, 46.84, 80.67), (8, 74.77, 51.13)]}, 'serial': {'table_0': [(3, 66.29, 45.25), (4, 73.61, 41.09), (5, 55.72, 45.05), (6, 40.13, 93.58), (7, 46.84, 80.67)]}}
2025-02-05 00:06:40,291 - 
2025-02-05 00:06:40,301 - iter: 70
2025-02-05 00:06:41,753 - table table_0 has 5 rows
2025-02-05 00:06:41,754 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [2, 3, 4, 5], 'intersection_row_ids': []}
2025-02-05 00:06:41,754 - lock_same_resource: False
2025-02-05 00:06:41,754 - 
2025-02-05 00:06:41,754 - non intersection phase1
2025-02-05 00:06:41,754 - 事务1在第一阶段自己加的锁: S
2025-02-05 00:06:41,754 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:06:41,754 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:06:41,754 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:06:41,757 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:06:41,758 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:41,758 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:06:41,761 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=5
2025-02-05 00:06:41,762 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:41,762 - params: {'v1': '2', 'v2': '5', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:06:41,762 - non intersection phase1 end
2025-02-05 00:06:41,762 - 
2025-02-05 00:06:41,762 - non intersection phase2
2025-02-05 00:06:41,766 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=5
2025-02-05 00:06:41,767 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:41,767 - params: {'v1': '3', 'v2': '5', 'table': 'table_0', 'select_cols': 'col_0, col_1'}
2025-02-05 00:06:41,770 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:06:41,772 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:41,772 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:06:41,772 - non intersection phase2 end
2025-02-05 00:06:41,772 - 
2025-02-05 00:06:41,772 - 生成死锁事务序列成功如下
2025-02-05 00:06:41,772 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:06:43,298 - 创建事务1连接成功
2025-02-05 00:06:43,300 - 执行事务1语句: BEGIN
2025-02-05 00:06:43,302 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:06:43,302 - 执行事务1语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE
2025-02-05 00:06:43,303 - 执行事务1语句: COMMIT;
2025-02-05 00:06:43,307 - 执行事务1成功
2025-02-05 00:06:45,872 - 恢复初始状态成功
2025-02-05 00:06:46,644 - 创建事务2连接成功
2025-02-05 00:06:46,645 - 执行事务2语句: BEGIN
2025-02-05 00:06:46,646 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE
2025-02-05 00:06:46,647 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:06:46,647 - 执行事务2语句: COMMIT;
2025-02-05 00:06:46,652 - 执行事务2成功
2025-02-05 00:06:51,518 - 
2025-02-05 00:06:51,518 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE', <Thread(Thread-529, started 37004)>, 1738685211.518989)}
2025-02-05 00:06:51,634 - stmt_idx: 2, status: success, result: None
2025-02-05 00:06:51,634 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE
2025-02-05 00:06:51,634 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:06:51,634 - 
2025-02-05 00:06:51,745 - 
2025-02-05 00:06:51,745 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-530, started 41448)>, 1738685211.7452843)}
2025-02-05 00:06:51,850 - stmt_idx: 3, status: success, result: None
2025-02-05 00:06:51,850 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:06:51,850 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:06:51,850 - 
2025-02-05 00:06:51,960 - 
2025-02-05 00:06:51,960 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-531, started 38100)>, 1738685211.9602811)}
2025-02-05 00:06:52,067 - stmt_idx: 4, status: success, result: None
2025-02-05 00:06:52,067 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:06:52,067 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:06:52,067 - 
2025-02-05 00:06:52,176 - 
2025-02-05 00:06:52,176 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE', <Thread(Thread-532, started 40696)>, 1738685212.1764033)}
2025-02-05 00:06:52,284 - wait for lock, trx_id: 1, stmt: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE
2025-02-05 00:06:52,285 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE', <Thread(Thread-532, started 40696)>, 1738685212.1764033)}
2025-02-05 00:06:52,285 - 
2025-02-05 00:06:52,396 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE', <Thread(Thread-532, started 40696)>, 1738685212.1764033)}
2025-02-05 00:06:52,396 - 
2025-02-05 00:06:52,396 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE', <Thread(Thread-532, stopped 40696)>, 1738685212.1764033)}
2025-02-05 00:06:52,501 - stmt_idx: 5, status: success, result: None
2025-02-05 00:06:52,501 - 成功执行序列中事务1语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE
2025-02-05 00:06:52,501 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE
2025-02-05 00:06:52,502 - 执行后idx: 8, pending_stmts: {6: (1, 'COMMIT', <Thread(Thread-533, started 40860)>, 1738685212.5020978)}
2025-02-05 00:06:52,502 - 
2025-02-05 00:06:52,609 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'COMMIT', <Thread(Thread-533, stopped 40860)>, 1738685212.5020978)}
2025-02-05 00:06:52,609 - 
2025-02-05 00:06:52,609 - 执行前idx: 8, pending_stmts: {6: (1, 'COMMIT', <Thread(Thread-533, stopped 40860)>, 1738685212.5020978)}
2025-02-05 00:06:52,719 - stmt_idx: 6, status: success, result: None
2025-02-05 00:06:52,719 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:06:52,719 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:06:52,719 - 
2025-02-05 00:06:52,828 - 执行序列成功
2025-02-05 00:06:53,597 - is_atomic: True
2025-02-05 00:06:53,597 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:06:53,597 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 5 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 00:06:53,597 - snapshots: {'before': {'table_0': [(1, 'iydjd', 2.3), (2, 'motot', 7.96), (3, 'zcxlu', 92.8), (4, 'naupd', 89.76), (5, 'fsfak', 31.86)]}, 'trx1': {'table_0': [(1, 'iydjd', 2.3), (2, 'motot', 7.96), (3, 'zcxlu', 92.8), (4, 'naupd', 89.76), (5, 'fsfak', 31.86)]}, 'trx2': {'table_0': [(1, 'iydjd', 2.3), (2, 'motot', 7.96), (3, 'zcxlu', 92.8), (4, 'naupd', 89.76), (5, 'fsfak', 31.86)]}, 'serial': {'table_0': [(1, 'iydjd', 2.3), (2, 'motot', 7.96), (3, 'zcxlu', 92.8), (4, 'naupd', 89.76), (5, 'fsfak', 31.86)]}}
2025-02-05 00:06:53,597 - 
2025-02-05 00:06:53,607 - iter: 71
2025-02-05 00:06:55,102 - table table_0 has 8 rows
2025-02-05 00:06:55,102 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [3, 4, 6, 7, 8], 'intersection_row_ids': []}
2025-02-05 00:06:55,102 - lock_same_resource: False
2025-02-05 00:06:55,102 - 
2025-02-05 00:06:55,102 - non intersection phase1
2025-02-05 00:06:55,102 - 事务1在第一阶段自己加的锁: S
2025-02-05 00:06:55,103 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:06:55,103 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:06:55,103 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:06:55,105 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 00:06:55,106 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:55,106 - params: {'v1': '1', 'v2': '2', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:06:55,108 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:06:55,109 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:06:55,110 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_343, col_384', 'vals': "NULL, 81.54, 'BYrqy', 'HUOYc', 'xntqV', 57, 'rJvYc'", 'table': 'table_0'}
2025-02-05 00:06:55,113 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:06:55,114 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:55,114 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:06:55,117 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:06:55,119 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:55,119 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:06:55,121 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:06:55,122 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:06:55,122 - params: {'set_expr': "col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36", 'table': 'table_0', 'cond': '(col_0 = 11.4)'}
2025-02-05 00:06:55,125 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:06:55,128 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:06:55,128 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_343, col_384', 'vals': "NULL, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW'", 'table': 'table_0'}
2025-02-05 00:06:55,128 - non intersection phase1 end
2025-02-05 00:06:55,128 - 
2025-02-05 00:06:55,128 - non intersection phase2
2025-02-05 00:06:55,131 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:06:55,132 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:55,132 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:06:55,135 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:06:55,136 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:06:55,136 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'col_2, col_3, col_343, col_384'}
2025-02-05 00:06:55,136 - non intersection phase2 end
2025-02-05 00:06:55,136 - 
2025-02-05 00:06:55,137 - 生成死锁事务序列成功如下
2025-02-05 00:06:55,137 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 81.54, 'BYrqy', 'HUOYc', 'xntqV', 57, 'rJvYc')"), (2, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE'), (2, "UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')"), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (2, 'SELECT col_2, col_3, col_343, col_384 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:06:56,682 - 创建事务1连接成功
2025-02-05 00:06:56,683 - 执行事务1语句: BEGIN
2025-02-05 00:06:56,685 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-05 00:06:56,685 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-05 00:06:56,686 - 执行事务1语句: COMMIT;
2025-02-05 00:06:56,690 - 执行事务1成功
2025-02-05 00:06:59,269 - 恢复初始状态成功
2025-02-05 00:07:00,054 - 创建事务2连接成功
2025-02-05 00:07:00,055 - 执行事务2语句: BEGIN
2025-02-05 00:07:00,056 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 81.54, 'BYrqy', 'HUOYc', 'xntqV', 57, 'rJvYc')
2025-02-05 00:07:00,057 - 执行事务2语句: SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-05 00:07:00,058 - 执行事务2语句: SELECT id FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE
2025-02-05 00:07:00,059 - 执行事务2语句: UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)
2025-02-05 00:07:00,059 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')
2025-02-05 00:07:00,060 - 执行事务2语句: SELECT col_2, col_3, col_343, col_384 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:07:00,062 - 执行事务2语句: COMMIT;
2025-02-05 00:07:00,066 - 执行事务2成功
2025-02-05 00:07:05,057 - 
2025-02-05 00:07:05,057 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 81.54, 'BYrqy', 'HUOYc', 'xntqV', 57, 'rJvYc')", <Thread(Thread-534, started 28320)>, 1738685225.0576723)}
2025-02-05 00:07:05,170 - stmt_idx: 2, status: success, result: None
2025-02-05 00:07:05,170 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 81.54, 'BYrqy', 'HUOYc', 'xntqV', 57, 'rJvYc')
2025-02-05 00:07:05,170 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:07:05,170 - 
2025-02-05 00:07:05,279 - 
2025-02-05 00:07:05,280 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE', <Thread(Thread-535, started 19284)>, 1738685225.2791483)}
2025-02-05 00:07:05,386 - stmt_idx: 3, status: success, result: None
2025-02-05 00:07:05,386 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-05 00:07:05,386 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:07:05,386 - 
2025-02-05 00:07:05,494 - 
2025-02-05 00:07:05,495 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE', <Thread(Thread-536, started 35620)>, 1738685225.4943168)}
2025-02-05 00:07:05,604 - stmt_idx: 4, status: success, result: None
2025-02-05 00:07:05,604 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-05 00:07:05,604 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:07:05,604 - 
2025-02-05 00:07:05,714 - 
2025-02-05 00:07:05,715 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE', <Thread(Thread-537, started 35712)>, 1738685225.714807)}
2025-02-05 00:07:05,821 - stmt_idx: 5, status: success, result: None
2025-02-05 00:07:05,821 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE
2025-02-05 00:07:05,821 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:07:05,821 - 
2025-02-05 00:07:05,928 - 
2025-02-05 00:07:05,929 - 执行前idx: 7, pending_stmts: {6: (2, "UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)", <Thread(Thread-538, started 30964)>, 1738685225.9288628)}
2025-02-05 00:07:06,037 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)
2025-02-05 00:07:06,038 - 执行后idx: 7, pending_stmts: {6: (2, "UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)", <Thread(Thread-538, started 30964)>, 1738685225.9288628)}
2025-02-05 00:07:06,038 - 
2025-02-05 00:07:06,148 - 
2025-02-05 00:07:06,148 - 执行前idx: 9, pending_stmts: {6: (2, "UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)", <Thread(Thread-538, started 30964)>, 1738685225.9288628), 8: (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE', <Thread(Thread-539, started 40140)>, 1738685226.1484876)}
2025-02-05 00:07:06,255 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)
2025-02-05 00:07:06,363 - stmt_idx: 8, status: success, result: None
2025-02-05 00:07:06,363 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-05 00:07:06,363 - 执行后idx: 9, pending_stmts: {6: (2, "UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)", <Thread(Thread-538, started 30964)>, 1738685225.9288628)}
2025-02-05 00:07:06,363 - 
2025-02-05 00:07:06,472 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, "UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)", <Thread(Thread-538, started 30964)>, 1738685225.9288628)}
2025-02-05 00:07:06,472 - 
2025-02-05 00:07:06,472 - 执行前idx: 12, pending_stmts: {6: (2, "UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)", <Thread(Thread-538, stopped 30964)>, 1738685225.9288628)}
2025-02-05 00:07:06,577 - stmt_idx: 6, status: success, result: None
2025-02-05 00:07:06,577 - 成功执行序列中事务2语句: UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)
2025-02-05 00:07:06,577 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)
2025-02-05 00:07:06,579 - 执行后idx: 12, pending_stmts: {7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')", <Thread(Thread-540, started 15116)>, 1738685226.5788608), 9: (2, 'SELECT col_2, col_3, col_343, col_384 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-541, started 6368)>, 1738685226.5794165), 10: (2, 'COMMIT', <Thread(Thread-542, started 5052)>, 1738685226.5794165)}
2025-02-05 00:07:06,579 - 
2025-02-05 00:07:06,686 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')", <Thread(Thread-540, stopped 15116)>, 1738685226.5788608), 9: (2, 'SELECT col_2, col_3, col_343, col_384 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-541, stopped 6368)>, 1738685226.5794165), 10: (2, 'COMMIT', <Thread(Thread-542, stopped 5052)>, 1738685226.5794165)}
2025-02-05 00:07:06,686 - 
2025-02-05 00:07:06,686 - 执行前idx: 12, pending_stmts: {7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')", <Thread(Thread-540, stopped 15116)>, 1738685226.5788608), 9: (2, 'SELECT col_2, col_3, col_343, col_384 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-541, stopped 6368)>, 1738685226.5794165), 10: (2, 'COMMIT', <Thread(Thread-542, stopped 5052)>, 1738685226.5794165)}
2025-02-05 00:07:06,794 - stmt_idx: 7, status: success, result: None
2025-02-05 00:07:06,794 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')
2025-02-05 00:07:06,902 - stmt_idx: 9, status: success, result: None
2025-02-05 00:07:06,902 - 成功执行序列中事务2语句: SELECT col_2, col_3, col_343, col_384 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:07:07,009 - stmt_idx: 10, status: success, result: None
2025-02-05 00:07:07,009 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:07:07,009 - 执行后idx: 12, pending_stmts: {}
2025-02-05 00:07:07,010 - 
2025-02-05 00:07:07,117 - 执行序列成功
2025-02-05 00:07:07,879 - is_atomic: True
2025-02-05 00:07:07,879 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:07:07,879 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 81.54, 'BYrqy', 'HUOYc', 'xntqV', 57, 'rJvYc')"), (2, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id >= 6 AND id <= 6 FOR UPDATE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_384 = 'UHyjH', col_3 = 'AeXQI', col_343 = 33, col_2 = 'bVEER', col_1 = 'rzqUF', col_0 = 76.36 WHERE (col_0 = 11.4)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_343, col_384) VALUES (NULL, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')"), (2, 'SELECT col_2, col_3, col_343, col_384 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 00:07:07,879 - snapshots: {'before': {'table_0': [(1, 99.72, 'iwjom', 'ctucd', 'thieb', None, None), (2, 26.66, 'fkhxh', 'clfle', 'kiapo', None, None), (3, 62.23, 'uqwah', 'isacs', 'kwetb', None, None), (4, 37.0, 'levpy', 'lvrdv', 'pvxbk', None, None), (5, 61.98, 'sfbce', 'yglpq', 'yonwh', None, None), (6, 64.58, 'rccde', 'qviqh', 'odcow', None, None), (7, 11.4, 'cstnx', 'xiknx', 'wnupm', None, None), (8, 7.15, 'zhlqv', 'rtdvz', 'nirqv', None, None)]}, 'trx1': {'table_0': [(1, 99.72, 'iwjom', 'ctucd', 'thieb', None, None), (2, 26.66, 'fkhxh', 'clfle', 'kiapo', None, None), (3, 62.23, 'uqwah', 'isacs', 'kwetb', None, None), (4, 37.0, 'levpy', 'lvrdv', 'pvxbk', None, None), (5, 61.98, 'sfbce', 'yglpq', 'yonwh', None, None), (6, 64.58, 'rccde', 'qviqh', 'odcow', None, None), (7, 11.4, 'cstnx', 'xiknx', 'wnupm', None, None), (8, 7.15, 'zhlqv', 'rtdvz', 'nirqv', None, None)]}, 'trx2': {'table_0': [(1, 99.72, 'iwjom', 'ctucd', 'thieb', None, None), (2, 26.66, 'fkhxh', 'clfle', 'kiapo', None, None), (3, 62.23, 'uqwah', 'isacs', 'kwetb', None, None), (4, 37.0, 'levpy', 'lvrdv', 'pvxbk', None, None), (5, 61.98, 'sfbce', 'yglpq', 'yonwh', None, None), (6, 64.58, 'rccde', 'qviqh', 'odcow', None, None), (7, 11.4, 'cstnx', 'xiknx', 'wnupm', None, None), (8, 7.15, 'zhlqv', 'rtdvz', 'nirqv', None, None), (9, 81.54, 'BYrqy', 'HUOYc', 'xntqV', 57, 'rJvYc'), (10, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')]}, 'serial': {'table_0': [(1, 99.72, 'iwjom', 'ctucd', 'thieb', None, None), (2, 26.66, 'fkhxh', 'clfle', 'kiapo', None, None), (3, 62.23, 'uqwah', 'isacs', 'kwetb', None, None), (4, 37.0, 'levpy', 'lvrdv', 'pvxbk', None, None), (5, 61.98, 'sfbce', 'yglpq', 'yonwh', None, None), (6, 64.58, 'rccde', 'qviqh', 'odcow', None, None), (7, 11.4, 'cstnx', 'xiknx', 'wnupm', None, None), (8, 7.15, 'zhlqv', 'rtdvz', 'nirqv', None, None), (11, 81.54, 'BYrqy', 'HUOYc', 'xntqV', 57, 'rJvYc'), (12, 78.1, 'lyUfH', 'xBCPC', 'lGCoG', 42, 'ZEUpW')]}}
2025-02-05 00:07:07,879 - 
2025-02-05 00:07:07,890 - iter: 72
2025-02-05 00:07:09,353 - table table_0 has 6 rows
2025-02-05 00:07:09,354 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [3, 4, 5, 6], 'intersection_row_ids': []}
2025-02-05 00:07:09,354 - lock_same_resource: False
2025-02-05 00:07:09,354 - 
2025-02-05 00:07:09,354 - non intersection phase1
2025-02-05 00:07:09,354 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:07:09,354 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:07:09,354 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:07:09,354 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:07:09,358 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:07:09,359 - needed_params: {'cond', 'table'}
2025-02-05 00:07:09,359 - params: {'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 00:07:09,361 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:07:09,363 - needed_params: {'cond', 'table'}
2025-02-05 00:07:09,363 - params: {'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 00:07:09,366 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=True, range_end_idx=6
2025-02-05 00:07:09,367 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:09,367 - params: {'v1': '3', 'v2': '6', 'table': 'table_0', 'select_cols': 'col_0, col_1'}
2025-02-05 00:07:09,367 - non intersection phase1 end
2025-02-05 00:07:09,367 - 
2025-02-05 00:07:09,368 - non intersection phase2
2025-02-05 00:07:09,370 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 00:07:09,372 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:09,372 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:07:09,374 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:07:09,375 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:09,375 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'col_0, col_1, col_2, col_639'}
2025-02-05 00:07:09,376 - non intersection phase2 end
2025-02-05 00:07:09,376 - 
2025-02-05 00:07:09,376 - 生成死锁事务序列成功如下
2025-02-05 00:07:09,376 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0, col_1 FROM table_0 WHERE id >= 3 AND id <= 6 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE'), (2, 'SELECT col_0, col_1, col_2, col_639 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:07:10,913 - 创建事务1连接成功
2025-02-05 00:07:10,914 - 执行事务1语句: BEGIN
2025-02-05 00:07:10,915 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 00:07:10,915 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 00:07:10,916 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-05 00:07:10,919 - 执行事务1语句: COMMIT;
2025-02-05 00:07:10,923 - 执行事务1成功
2025-02-05 00:07:13,502 - 恢复初始状态成功
2025-02-05 00:07:14,276 - 创建事务2连接成功
2025-02-05 00:07:14,278 - 执行事务2语句: BEGIN
2025-02-05 00:07:14,279 - 执行事务2语句: SELECT col_0, col_1 FROM table_0 WHERE id >= 3 AND id <= 6 FOR UPDATE
2025-02-05 00:07:14,280 - 执行事务2语句: SELECT col_0, col_1, col_2, col_639 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 00:07:14,281 - 执行事务2语句: COMMIT;
2025-02-05 00:07:14,284 - 执行事务2成功
2025-02-05 00:07:19,178 - 
2025-02-05 00:07:19,178 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id >= 3 AND id <= 6 FOR UPDATE', <Thread(Thread-543, started 18756)>, 1738685239.1782446)}
2025-02-05 00:07:19,288 - stmt_idx: 2, status: success, result: None
2025-02-05 00:07:19,288 - 成功执行序列中事务2语句: SELECT col_0, col_1 FROM table_0 WHERE id >= 3 AND id <= 6 FOR UPDATE
2025-02-05 00:07:19,288 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:07:19,288 - 
2025-02-05 00:07:19,394 - 
2025-02-05 00:07:19,395 - 执行前idx: 4, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (id = 1)', <Thread(Thread-544, started 16760)>, 1738685239.3946645)}
2025-02-05 00:07:19,500 - stmt_idx: 3, status: success, result: None
2025-02-05 00:07:19,500 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 00:07:19,500 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:07:19,500 - 
2025-02-05 00:07:19,606 - 
2025-02-05 00:07:19,607 - 执行前idx: 5, pending_stmts: {4: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-545, started 38432)>, 1738685239.6066775)}
2025-02-05 00:07:19,715 - stmt_idx: 4, status: success, result: None
2025-02-05 00:07:19,715 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 00:07:19,715 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:07:19,716 - 
2025-02-05 00:07:19,824 - 
2025-02-05 00:07:19,825 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE', <Thread(Thread-546, started 20912)>, 1738685239.8248198)}
2025-02-05 00:07:19,933 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-05 00:07:19,933 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE', <Thread(Thread-546, started 20912)>, 1738685239.8248198)}
2025-02-05 00:07:19,933 - 
2025-02-05 00:07:20,039 - 
2025-02-05 00:07:20,040 - 执行前idx: 7, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE', <Thread(Thread-546, started 20912)>, 1738685239.8248198), 6: (2, 'SELECT col_0, col_1, col_2, col_639 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-547, started 35896)>, 1738685240.0399988)}
2025-02-05 00:07:20,042 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_0, col_1, col_2, col_639 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 00:07:20,147 - stmt_idx: 5, status: success, result: None
2025-02-05 00:07:20,147 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-05 00:07:20,147 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-05 00:07:20,254 - stmt_idx: 6, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:07:20,254 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT col_0, col_1, col_2, col_639 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 00:07:20,254 - 错误: dictionary changed size during iteration
2025-02-05 00:07:20,259 - 执行序列成功
2025-02-05 00:07:21,020 - is_atomic: True
2025-02-05 00:07:21,020 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:07:21,020 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0, col_1 FROM table_0 WHERE id >= 3 AND id <= 6 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 00:07:21,020 - snapshots: {'before': {'table_0': [(1, 'zcszz', 'nmgph', 23.98, 'jrvee', None), (2, 'vlzst', 'klekt', 27.95, 'uexdu', None), (3, 'lmqzf', 'fsctg', 19.01, 'iwdap', None), (4, 'odszm', 'jiwjn', 50.67, 'wiyso', None), (5, 'wgwrc', 'prprv', 39.24, 'mqbsd', None), (6, 'elvqk', 'zdlro', 71.5, 'znepa', None)]}, 'trx1': {'table_0': [(3, 'lmqzf', 'fsctg', 19.01, 'iwdap', None), (4, 'odszm', 'jiwjn', 50.67, 'wiyso', None), (5, 'wgwrc', 'prprv', 39.24, 'mqbsd', None), (6, 'elvqk', 'zdlro', 71.5, 'znepa', None)]}, 'trx2': {'table_0': [(1, 'zcszz', 'nmgph', 23.98, 'jrvee', None), (2, 'vlzst', 'klekt', 27.95, 'uexdu', None), (3, 'lmqzf', 'fsctg', 19.01, 'iwdap', None), (4, 'odszm', 'jiwjn', 50.67, 'wiyso', None), (5, 'wgwrc', 'prprv', 39.24, 'mqbsd', None), (6, 'elvqk', 'zdlro', 71.5, 'znepa', None)]}, 'serial': {'table_0': [(3, 'lmqzf', 'fsctg', 19.01, 'iwdap', None), (4, 'odszm', 'jiwjn', 50.67, 'wiyso', None), (5, 'wgwrc', 'prprv', 39.24, 'mqbsd', None), (6, 'elvqk', 'zdlro', 71.5, 'znepa', None)]}}
2025-02-05 00:07:21,020 - 
2025-02-05 00:07:21,031 - iter: 73
2025-02-05 00:07:22,509 - table table_0 has 8 rows
2025-02-05 00:07:22,509 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7, 8], 'trx2_lock_row_ids': [3], 'intersection_row_ids': []}
2025-02-05 00:07:22,509 - lock_same_resource: False
2025-02-05 00:07:22,509 - 
2025-02-05 00:07:22,510 - non intersection phase1
2025-02-05 00:07:22,510 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:07:22,510 - 事务2在第一阶段自己加的锁: S
2025-02-05 00:07:22,510 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 00:07:22,510 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 00:07:22,513 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=True, range_end_idx=8
2025-02-05 00:07:22,514 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:22,514 - params: {'v1': '4', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:07:22,517 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=3, is_continuous=True, range_end_idx=3
2025-02-05 00:07:22,518 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:22,518 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:07:22,518 - non intersection phase1 end
2025-02-05 00:07:22,518 - 
2025-02-05 00:07:22,518 - non intersection phase2
2025-02-05 00:07:22,520 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=3, is_continuous=True, range_end_idx=3
2025-02-05 00:07:22,521 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:22,521 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:07:22,525 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=8, is_continuous=True, range_end_idx=8
2025-02-05 00:07:22,526 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:22,526 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-05 00:07:22,526 - non intersection phase2 end
2025-02-05 00:07:22,526 - 
2025-02-05 00:07:22,526 - 生成死锁事务序列成功如下
2025-02-05 00:07:22,526 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 4 AND id <= 8 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:07:24,057 - 创建事务1连接成功
2025-02-05 00:07:24,058 - 执行事务1语句: BEGIN
2025-02-05 00:07:24,059 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id >= 4 AND id <= 8 FOR UPDATE
2025-02-05 00:07:24,060 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:07:24,060 - 执行事务1语句: COMMIT;
2025-02-05 00:07:24,065 - 执行事务1成功
2025-02-05 00:07:26,648 - 恢复初始状态成功
2025-02-05 00:07:27,424 - 创建事务2连接成功
2025-02-05 00:07:27,426 - 执行事务2语句: BEGIN
2025-02-05 00:07:27,427 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:07:27,427 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-05 00:07:27,428 - 执行事务2语句: COMMIT;
2025-02-05 00:07:27,432 - 执行事务2成功
2025-02-05 00:07:32,343 - 
2025-02-05 00:07:32,343 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 4 AND id <= 8 FOR UPDATE', <Thread(Thread-548, started 35444)>, 1738685252.3434105)}
2025-02-05 00:07:32,449 - stmt_idx: 2, status: success, result: None
2025-02-05 00:07:32,449 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id >= 4 AND id <= 8 FOR UPDATE
2025-02-05 00:07:32,449 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:07:32,449 - 
2025-02-05 00:07:32,556 - 
2025-02-05 00:07:32,557 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-549, started 41800)>, 1738685252.5563643)}
2025-02-05 00:07:32,665 - stmt_idx: 3, status: success, result: None
2025-02-05 00:07:32,665 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:07:32,665 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:07:32,665 - 
2025-02-05 00:07:32,773 - 
2025-02-05 00:07:32,774 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-550, started 10872)>, 1738685252.7737617)}
2025-02-05 00:07:32,882 - stmt_idx: 4, status: success, result: None
2025-02-05 00:07:32,882 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:07:32,882 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:07:32,882 - 
2025-02-05 00:07:32,991 - 
2025-02-05 00:07:32,991 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE', <Thread(Thread-551, started 24168)>, 1738685252.9914446)}
2025-02-05 00:07:33,097 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-05 00:07:33,098 - 执行后idx: 6, pending_stmts: {5: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE', <Thread(Thread-551, started 24168)>, 1738685252.9914446)}
2025-02-05 00:07:33,098 - 
2025-02-05 00:07:33,208 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE', <Thread(Thread-551, started 24168)>, 1738685252.9914446)}
2025-02-05 00:07:33,208 - 
2025-02-05 00:07:33,208 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE', <Thread(Thread-551, stopped 24168)>, 1738685252.9914446)}
2025-02-05 00:07:33,314 - stmt_idx: 5, status: success, result: None
2025-02-05 00:07:33,314 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-05 00:07:33,314 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE
2025-02-05 00:07:33,315 - 执行后idx: 8, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-552, started 4824)>, 1738685253.3154557)}
2025-02-05 00:07:33,315 - 
2025-02-05 00:07:33,424 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, 'COMMIT', <Thread(Thread-552, stopped 4824)>, 1738685253.3154557)}
2025-02-05 00:07:33,424 - 
2025-02-05 00:07:33,424 - 执行前idx: 8, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-552, stopped 4824)>, 1738685253.3154557)}
2025-02-05 00:07:33,534 - stmt_idx: 7, status: success, result: None
2025-02-05 00:07:33,534 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:07:33,534 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:07:33,534 - 
2025-02-05 00:07:33,644 - 执行序列成功
2025-02-05 00:07:34,426 - is_atomic: True
2025-02-05 00:07:34,426 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:07:34,426 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 4 AND id <= 8 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id >= 8 AND id <= 8 FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 00:07:34,426 - snapshots: {'before': {'table_0': [(1, 10.45, 24.39), (2, 61.2, 11.11), (3, 67.34, 70.57), (4, 11.92, 29.84), (5, 92.53, 39.87), (6, 31.82, 56.39), (7, 46.09, 33.41), (8, 2.69, 56.09)]}, 'trx1': {'table_0': [(1, 10.45, 24.39), (2, 61.2, 11.11), (3, 67.34, 70.57), (4, 11.92, 29.84), (5, 92.53, 39.87), (6, 31.82, 56.39), (7, 46.09, 33.41), (8, 2.69, 56.09)]}, 'trx2': {'table_0': [(1, 10.45, 24.39), (2, 61.2, 11.11), (3, 67.34, 70.57), (4, 11.92, 29.84), (5, 92.53, 39.87), (6, 31.82, 56.39), (7, 46.09, 33.41), (8, 2.69, 56.09)]}, 'serial': {'table_0': [(1, 10.45, 24.39), (2, 61.2, 11.11), (3, 67.34, 70.57), (4, 11.92, 29.84), (5, 92.53, 39.87), (6, 31.82, 56.39), (7, 46.09, 33.41), (8, 2.69, 56.09)]}}
2025-02-05 00:07:34,426 - 
2025-02-05 00:07:34,437 - iter: 74
2025-02-05 00:07:35,935 - table table_0 has 7 rows
2025-02-05 00:07:35,935 - trx1_lock_row_ids: [2, 3, 4, 5, 6, 7]
2025-02-05 00:07:35,935 - trx2_lock_row_ids: [2, 3, 4, 5, 6, 7]
2025-02-05 00:07:35,935 - intersection_row_ids: [2, 3, 4, 5, 6, 7]
2025-02-05 00:07:35,935 - trx1_exclusive_ids: []
2025-02-05 00:07:35,935 - trx2_exclusive_ids: []
2025-02-05 00:07:35,936 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7], 'intersection_row_ids': [2, 3, 4, 5, 6, 7]}
2025-02-05 00:07:35,936 - lock_same_resource: True
2025-02-05 00:07:35,936 - 
2025-02-05 00:07:35,936 - intersection phase1
2025-02-05 00:07:35,939 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=True, range_end_idx=7
2025-02-05 00:07:35,940 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:35,940 - params: {'v1': '3', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_0, col_214, col_261'}
2025-02-05 00:07:35,943 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:07:35,944 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:35,944 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_214, col_261'}
2025-02-05 00:07:35,947 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:07:35,947 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:35,948 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_214, col_261'}
2025-02-05 00:07:35,950 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:07:35,951 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:35,951 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_261'}
2025-02-05 00:07:35,955 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:07:35,956 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:35,956 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:07:35,958 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:07:35,960 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:35,960 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:07:35,963 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:07:35,964 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:07:35,964 - params: {'cond': "(id = 8) AND (col_2 = 'gbdha')", 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:07:35,965 - intersection phase1 end
2025-02-05 00:07:35,965 - 
2025-02-05 00:07:35,965 - intersection phase2
2025-02-05 00:07:35,965 - 事务1在第二阶段自己加的锁: II
2025-02-05 00:07:35,965 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:07:35,965 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:07:35,965 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 00:07:35,965 - intersection phase2 end
2025-02-05 00:07:35,966 - 
2025-02-05 00:07:35,966 - intersection phase3
2025-02-05 00:07:35,969 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:07:35,971 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:07:35,971 - params: {'cond': "(id = 7) AND (col_261 IS NULL) AND (col_1 = 'cewyl') AND (col_0 = 'kkmao')", 'table': 'table_0', 'select_cols': 'id, col_0, col_2'}
2025-02-05 00:07:35,974 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:07:35,976 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:35,976 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_261'}
2025-02-05 00:07:35,976 - intersection phase3 end
2025-02-05 00:07:35,976 - 
2025-02-05 00:07:35,977 - 生成死锁事务序列成功如下
2025-02-05 00:07:35,977 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_214, col_261 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_214, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_261 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (id = 8) AND (col_2 = 'gbdha') LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_2 FROM table_0 WHERE (id = 7) AND (col_261 IS NULL) AND (col_1 = 'cewyl') AND (col_0 = 'kkmao') FOR UPDATE"), (2, 'SELECT id, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:07:37,531 - 创建事务1连接成功
2025-02-05 00:07:37,533 - 执行事务1语句: BEGIN
2025-02-05 00:07:37,534 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_214, col_261 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:07:37,534 - 执行事务1语句: SELECT id, col_0, col_1, col_214, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 00:07:37,535 - 执行事务1语句: SELECT id, col_0, col_1, col_261 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:07:37,536 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 00:07:37,536 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:07:37,537 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 8) AND (col_2 = 'gbdha') LOCK IN SHARE MODE
2025-02-05 00:07:37,538 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 7) AND (col_261 IS NULL) AND (col_1 = 'cewyl') AND (col_0 = 'kkmao') FOR UPDATE
2025-02-05 00:07:37,538 - 执行事务1语句: COMMIT;
2025-02-05 00:07:37,543 - 执行事务1成功
2025-02-05 00:07:40,152 - 恢复初始状态成功
2025-02-05 00:07:40,930 - 创建事务2连接成功
2025-02-05 00:07:40,931 - 执行事务2语句: BEGIN
2025-02-05 00:07:40,932 - 执行事务2语句: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:40,933 - 执行事务2语句: SELECT id, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 00:07:40,934 - 执行事务2语句: COMMIT;
2025-02-05 00:07:40,938 - 执行事务2成功
2025-02-05 00:07:45,871 - 
2025-02-05 00:07:45,871 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_214, col_261 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-553, started 38160)>, 1738685265.8714106)}
2025-02-05 00:07:45,976 - stmt_idx: 2, status: success, result: None
2025-02-05 00:07:45,976 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_214, col_261 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:07:45,976 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:07:45,976 - 
2025-02-05 00:07:46,086 - 
2025-02-05 00:07:46,087 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:46,197 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:46,197 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:46,197 - 
2025-02-05 00:07:46,306 - 
2025-02-05 00:07:46,307 - 执行前idx: 5, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004), 4: (1, 'SELECT id, col_0, col_1, col_214, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-555, started 31700)>, 1738685266.3060176)}
2025-02-05 00:07:46,414 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:46,523 - stmt_idx: 4, status: success, result: None
2025-02-05 00:07:46,523 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_214, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 00:07:46,523 - 执行后idx: 5, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:46,523 - 
2025-02-05 00:07:46,631 - 
2025-02-05 00:07:46,632 - 执行前idx: 6, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004), 5: (1, 'SELECT id, col_0, col_1, col_261 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-556, started 6872)>, 1738685266.6311548)}
2025-02-05 00:07:46,741 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:46,847 - stmt_idx: 5, status: success, result: None
2025-02-05 00:07:46,847 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_261 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:07:46,847 - 执行后idx: 6, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:46,847 - 
2025-02-05 00:07:46,954 - 
2025-02-05 00:07:46,955 - 执行前idx: 7, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004), 6: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-557, started 10928)>, 1738685266.954923)}
2025-02-05 00:07:47,062 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:47,167 - stmt_idx: 6, status: success, result: None
2025-02-05 00:07:47,167 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 00:07:47,167 - 执行后idx: 7, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:47,167 - 
2025-02-05 00:07:47,276 - 
2025-02-05 00:07:47,277 - 执行前idx: 8, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004), 7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-558, started 15324)>, 1738685267.2768078)}
2025-02-05 00:07:47,384 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:47,492 - stmt_idx: 7, status: success, result: None
2025-02-05 00:07:47,492 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:07:47,492 - 执行后idx: 8, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:47,492 - 
2025-02-05 00:07:47,599 - 
2025-02-05 00:07:47,600 - 执行前idx: 9, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004), 8: (1, "SELECT * FROM table_0 WHERE (id = 8) AND (col_2 = 'gbdha') LOCK IN SHARE MODE", <Thread(Thread-559, started 11160)>, 1738685267.5994825)}
2025-02-05 00:07:47,708 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:47,813 - stmt_idx: 8, status: success, result: None
2025-02-05 00:07:47,813 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 8) AND (col_2 = 'gbdha') LOCK IN SHARE MODE
2025-02-05 00:07:47,814 - 执行后idx: 9, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:47,814 - 
2025-02-05 00:07:47,923 - 
2025-02-05 00:07:47,924 - 执行前idx: 10, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004), 9: (1, "SELECT id, col_0, col_2 FROM table_0 WHERE (id = 7) AND (col_261 IS NULL) AND (col_1 = 'cewyl') AND (col_0 = 'kkmao') FOR UPDATE", <Thread(Thread-560, started 39000)>, 1738685267.923845)}
2025-02-05 00:07:48,028 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:48,138 - stmt_idx: 9, status: success, result: None
2025-02-05 00:07:48,138 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 7) AND (col_261 IS NULL) AND (col_1 = 'cewyl') AND (col_0 = 'kkmao') FOR UPDATE
2025-02-05 00:07:48,139 - 执行后idx: 10, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:48,139 - 
2025-02-05 00:07:48,248 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:48,248 - 
2025-02-05 00:07:48,249 - 执行前idx: 13, pending_stmts: {3: (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-554, started 24100)>, 1738685266.086004)}
2025-02-05 00:07:48,349 - stmt_idx: 3, status: success, result: None
2025-02-05 00:07:48,349 - 成功执行序列中事务2语句: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:48,349 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 00:07:48,351 - 执行后idx: 13, pending_stmts: {10: (2, 'SELECT id, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-561, started 14812)>, 1738685268.3508663), 12: (2, 'COMMIT', <Thread(Thread-562, started 29072)>, 1738685268.3513434)}
2025-02-05 00:07:48,351 - 
2025-02-05 00:07:48,459 - 序列遍历完成，开始查看剩余阻塞的语句：{10: (2, 'SELECT id, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-561, stopped 14812)>, 1738685268.3508663), 12: (2, 'COMMIT', <Thread(Thread-562, stopped 29072)>, 1738685268.3513434)}
2025-02-05 00:07:48,459 - 
2025-02-05 00:07:48,459 - 执行前idx: 13, pending_stmts: {10: (2, 'SELECT id, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-561, stopped 14812)>, 1738685268.3508663), 12: (2, 'COMMIT', <Thread(Thread-562, stopped 29072)>, 1738685268.3513434)}
2025-02-05 00:07:48,565 - stmt_idx: 10, status: success, result: None
2025-02-05 00:07:48,565 - 成功执行序列中事务2语句: SELECT id, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 00:07:48,672 - stmt_idx: 12, status: success, result: None
2025-02-05 00:07:48,672 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:07:48,672 - 执行后idx: 13, pending_stmts: {}
2025-02-05 00:07:48,672 - 
2025-02-05 00:07:48,781 - 执行序列成功
2025-02-05 00:07:49,568 - is_atomic: True
2025-02-05 00:07:49,568 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:07:49,568 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_214, col_261 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_214, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_261 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (id = 8) AND (col_2 = 'gbdha') LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_2 FROM table_0 WHERE (id = 7) AND (col_261 IS NULL) AND (col_1 = 'cewyl') AND (col_0 = 'kkmao') FOR UPDATE"), (1, 'COMMIT'), (2, 'SELECT id, col_0, col_214, col_261 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE'), (2, 'SELECT id, col_261 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'COMMIT')]
2025-02-05 00:07:49,568 - snapshots: {'before': {'table_0': [(1, 'aofkx', 'tmvle', 'rtppo', None, None), (3, 'pdupk', 'jkggk', 'qkmfn', None, None), (4, 'imhkq', 'vsuuk', 'rvlji', None, None), (5, 'pphjp', 'djnvy', 'bldny', None, None), (6, 'dpzfv', 'cfrfm', 'udmho', None, None), (7, 'kkmao', 'cewyl', 'ohmgj', None, None), (8, 'lazev', 'krsaq', 'gbdha', None, None)]}, 'trx1': {'table_0': [(1, 'aofkx', 'tmvle', 'rtppo', None, None), (3, 'pdupk', 'jkggk', 'qkmfn', None, None), (4, 'imhkq', 'vsuuk', 'rvlji', None, None), (5, 'pphjp', 'djnvy', 'bldny', None, None), (6, 'dpzfv', 'cfrfm', 'udmho', None, None), (7, 'kkmao', 'cewyl', 'ohmgj', None, None), (8, 'lazev', 'krsaq', 'gbdha', None, None)]}, 'trx2': {'table_0': [(1, 'aofkx', 'tmvle', 'rtppo', None, None), (3, 'pdupk', 'jkggk', 'qkmfn', None, None), (4, 'imhkq', 'vsuuk', 'rvlji', None, None), (5, 'pphjp', 'djnvy', 'bldny', None, None), (6, 'dpzfv', 'cfrfm', 'udmho', None, None), (7, 'kkmao', 'cewyl', 'ohmgj', None, None), (8, 'lazev', 'krsaq', 'gbdha', None, None)]}, 'serial': {'table_0': [(1, 'aofkx', 'tmvle', 'rtppo', None, None), (3, 'pdupk', 'jkggk', 'qkmfn', None, None), (4, 'imhkq', 'vsuuk', 'rvlji', None, None), (5, 'pphjp', 'djnvy', 'bldny', None, None), (6, 'dpzfv', 'cfrfm', 'udmho', None, None), (7, 'kkmao', 'cewyl', 'ohmgj', None, None), (8, 'lazev', 'krsaq', 'gbdha', None, None)]}}
2025-02-05 00:07:49,568 - 
2025-02-05 00:07:49,579 - iter: 75
2025-02-05 00:07:51,066 - table table_0 has 5 rows
2025-02-05 00:07:51,066 - trx1_lock_row_ids: [1, 2, 4, 5]
2025-02-05 00:07:51,066 - trx2_lock_row_ids: [1, 2, 3, 4, 5]
2025-02-05 00:07:51,066 - intersection_row_ids: [1, 2, 4, 5]
2025-02-05 00:07:51,066 - trx1_exclusive_ids: []
2025-02-05 00:07:51,066 - trx2_exclusive_ids: [3]
2025-02-05 00:07:51,066 - res_dict: {'trx1_lock_row_ids': [1, 2, 4, 5], 'trx2_lock_row_ids': [1, 2, 3, 4, 5], 'intersection_row_ids': [1, 2, 4, 5]}
2025-02-05 00:07:51,066 - lock_same_resource: True
2025-02-05 00:07:51,066 - 
2025-02-05 00:07:51,067 - intersection phase1
2025-02-05 00:07:51,070 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 00:07:51,071 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:51,071 - params: {'v1': '1', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:07:51,075 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:07:51,077 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:07:51,077 - params: {'insert_cols': 'id, col_0, col_1', 'vals': "NULL, 89.53, 'ntEdi'", 'table': 'table_0'}
2025-02-05 00:07:51,080 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:07:51,081 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:51,081 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'col_0, col_1'}
2025-02-05 00:07:51,085 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:07:51,087 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:07:51,087 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:07:51,090 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:07:51,092 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:07:51,093 - params: {'insert_cols': 'id, col_0, col_1', 'vals': "NULL, 31.37, 'isbMU'", 'table': 'table_0'}
2025-02-05 00:07:51,093 - intersection phase1 end
2025-02-05 00:07:51,093 - 
2025-02-05 00:07:51,093 - intersection phase2
2025-02-05 00:07:51,093 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:07:51,093 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:07:51,093 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:07:51,094 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 00:07:51,097 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:07:51,099 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:07:51,100 - params: {'cond': '(id = 3)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:07:51,100 - intersection phase2 end
2025-02-05 00:07:51,100 - 
2025-02-05 00:07:51,100 - intersection phase3
2025-02-05 00:07:51,104 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:07:51,105 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:07:51,106 - params: {'set_expr': 'col_0 = 63.68', 'table': 'table_0', 'cond': '(id = 3)'}
2025-02-05 00:07:51,111 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:07:51,112 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:07:51,113 - params: {'v1': '5', 'set_expr': 'col_0 = 37.76', 'table': 'table_0', 'v2': '5'}
2025-02-05 00:07:51,113 - intersection phase3 end
2025-02-05 00:07:51,113 - 
2025-02-05 00:07:51,113 - 生成死锁事务序列成功如下
2025-02-05 00:07:51,113 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')"), (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 31.37, 'isbMU')"), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 3) FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 37.76 WHERE id BETWEEN 5 AND 5'), (1, 'UPDATE table_0 SET col_0 = 63.68 WHERE (id = 3)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:07:52,692 - 创建事务1连接成功
2025-02-05 00:07:52,694 - 执行事务1语句: BEGIN
2025-02-05 00:07:52,695 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')
2025-02-05 00:07:52,696 - 执行事务1语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:07:52,696 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:07:52,697 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 31.37, 'isbMU')
2025-02-05 00:07:52,698 - 执行事务1语句: UPDATE table_0 SET col_0 = 63.68 WHERE (id = 3)
2025-02-05 00:07:52,700 - 执行事务1语句: COMMIT;
2025-02-05 00:07:52,706 - 执行事务1成功
2025-02-05 00:07:55,313 - 恢复初始状态成功
2025-02-05 00:07:56,106 - 创建事务2连接成功
2025-02-05 00:07:56,107 - 执行事务2语句: BEGIN
2025-02-05 00:07:56,108 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE
2025-02-05 00:07:56,109 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 00:07:56,110 - 执行事务2语句: UPDATE table_0 SET col_0 = 37.76 WHERE id BETWEEN 5 AND 5
2025-02-05 00:07:56,112 - 执行事务2语句: COMMIT;
2025-02-05 00:07:56,116 - 执行事务2成功
2025-02-05 00:08:01,112 - 
2025-02-05 00:08:01,113 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE', <Thread(Thread-563, started 8228)>, 1738685281.112739)}
2025-02-05 00:08:01,217 - stmt_idx: 2, status: success, result: None
2025-02-05 00:08:01,217 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE
2025-02-05 00:08:01,217 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:08:01,217 - 
2025-02-05 00:08:01,327 - 
2025-02-05 00:08:01,328 - 执行前idx: 4, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')", <Thread(Thread-564, started 24184)>, 1738685281.3279004)}
2025-02-05 00:08:01,436 - wait for lock, trx_id: 1, stmt: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')
2025-02-05 00:08:01,437 - 执行后idx: 4, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')", <Thread(Thread-564, started 24184)>, 1738685281.3279004)}
2025-02-05 00:08:01,437 - 
2025-02-05 00:08:01,542 - 
2025-02-05 00:08:01,543 - 执行前idx: 8, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')", <Thread(Thread-564, started 24184)>, 1738685281.3279004), 7: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 3) FOR UPDATE', <Thread(Thread-565, started 35888)>, 1738685281.5427008)}
2025-02-05 00:08:01,652 - wait for lock, trx_id: 1, stmt: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')
2025-02-05 00:08:01,759 - stmt_idx: 7, status: success, result: None
2025-02-05 00:08:01,759 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 00:08:01,759 - 执行后idx: 8, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')", <Thread(Thread-564, started 24184)>, 1738685281.3279004)}
2025-02-05 00:08:01,759 - 
2025-02-05 00:08:01,866 - 
2025-02-05 00:08:01,866 - 执行前idx: 9, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')", <Thread(Thread-564, started 24184)>, 1738685281.3279004), 8: (2, 'UPDATE table_0 SET col_0 = 37.76 WHERE id BETWEEN 5 AND 5', <Thread(Thread-566, started 30264)>, 1738685281.8662727)}
2025-02-05 00:08:01,974 - wait for lock, trx_id: 1, stmt: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')
2025-02-05 00:08:02,083 - stmt_idx: 8, status: success, result: None
2025-02-05 00:08:02,083 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 37.76 WHERE id BETWEEN 5 AND 5
2025-02-05 00:08:02,083 - 执行后idx: 9, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')", <Thread(Thread-564, started 24184)>, 1738685281.3279004)}
2025-02-05 00:08:02,083 - 
2025-02-05 00:08:02,194 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')", <Thread(Thread-564, started 24184)>, 1738685281.3279004)}
2025-02-05 00:08:02,194 - 
2025-02-05 00:08:02,194 - 执行前idx: 12, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')", <Thread(Thread-564, stopped 24184)>, 1738685281.3279004)}
2025-02-05 00:08:02,300 - stmt_idx: 3, status: success, result: None
2025-02-05 00:08:02,300 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')
2025-02-05 00:08:02,300 - 结束了阻塞，blocked_trx_id: 1, stmt: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')
2025-02-05 00:08:02,301 - 执行后idx: 12, pending_stmts: {4: (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-567, started 40812)>, 1738685282.3002415), 5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-568, started 5512)>, 1738685282.3012397), 6: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 31.37, 'isbMU')", <Thread(Thread-569, started 21180)>, 1738685282.3014064), 9: (1, 'UPDATE table_0 SET col_0 = 63.68 WHERE (id = 3)', <Thread(Thread-570, started 39660)>, 1738685282.3014064), 10: (1, 'COMMIT', <Thread(Thread-571, started 8176)>, 1738685282.3014064)}
2025-02-05 00:08:02,301 - 
2025-02-05 00:08:02,409 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-567, stopped 40812)>, 1738685282.3002415), 5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-568, stopped 5512)>, 1738685282.3012397), 6: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 31.37, 'isbMU')", <Thread(Thread-569, stopped 21180)>, 1738685282.3014064), 9: (1, 'UPDATE table_0 SET col_0 = 63.68 WHERE (id = 3)', <Thread(Thread-570, stopped 39660)>, 1738685282.3014064), 10: (1, 'COMMIT', <Thread(Thread-571, stopped 8176)>, 1738685282.3014064)}
2025-02-05 00:08:02,409 - 
2025-02-05 00:08:02,409 - 执行前idx: 12, pending_stmts: {4: (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-567, stopped 40812)>, 1738685282.3002415), 5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-568, stopped 5512)>, 1738685282.3012397), 6: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 31.37, 'isbMU')", <Thread(Thread-569, stopped 21180)>, 1738685282.3014064), 9: (1, 'UPDATE table_0 SET col_0 = 63.68 WHERE (id = 3)', <Thread(Thread-570, stopped 39660)>, 1738685282.3014064), 10: (1, 'COMMIT', <Thread(Thread-571, stopped 8176)>, 1738685282.3014064)}
2025-02-05 00:08:02,517 - stmt_idx: 4, status: success, result: None
2025-02-05 00:08:02,517 - 成功执行序列中事务1语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:08:02,627 - stmt_idx: 5, status: success, result: None
2025-02-05 00:08:02,627 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:08:02,734 - stmt_idx: 6, status: success, result: None
2025-02-05 00:08:02,734 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 31.37, 'isbMU')
2025-02-05 00:08:02,844 - stmt_idx: 9, status: success, result: None
2025-02-05 00:08:02,844 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 63.68 WHERE (id = 3)
2025-02-05 00:08:02,953 - stmt_idx: 10, status: success, result: None
2025-02-05 00:08:02,953 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:08:02,953 - 执行后idx: 12, pending_stmts: {}
2025-02-05 00:08:02,953 - 
2025-02-05 00:08:03,063 - 执行序列成功
2025-02-05 00:08:03,836 - is_atomic: True
2025-02-05 00:08:03,837 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:08:03,837 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 3) FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 37.76 WHERE id BETWEEN 5 AND 5'), (2, 'COMMIT'), (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 89.53, 'ntEdi')"), (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 31.37, 'isbMU')"), (1, 'UPDATE table_0 SET col_0 = 63.68 WHERE (id = 3)'), (1, 'COMMIT')]
2025-02-05 00:08:03,837 - snapshots: {'before': {'table_0': [(1, 99.97, 'qckni'), (2, 61.62, 'dotvh'), (3, 1.6, 'qxpfe'), (4, 28.05, 'mxnzb'), (5, 31.91, 'ftmmi')]}, 'trx1': {'table_0': [(1, 99.97, 'qckni'), (2, 61.62, 'dotvh'), (3, 63.68, 'qxpfe'), (4, 28.05, 'mxnzb'), (5, 31.91, 'ftmmi'), (6, 89.53, 'ntEdi'), (7, 31.37, 'isbMU')]}, 'trx2': {'table_0': [(1, 99.97, 'qckni'), (2, 61.62, 'dotvh'), (3, 1.6, 'qxpfe'), (4, 28.05, 'mxnzb'), (5, 37.76, 'ftmmi')]}, 'serial': {'table_0': [(1, 99.97, 'qckni'), (2, 61.62, 'dotvh'), (3, 63.68, 'qxpfe'), (4, 28.05, 'mxnzb'), (5, 37.76, 'ftmmi'), (8, 89.53, 'ntEdi'), (9, 31.37, 'isbMU')]}}
2025-02-05 00:08:03,837 - 
2025-02-05 00:08:03,847 - iter: 76
2025-02-05 00:08:05,316 - table table_0 has 7 rows
2025-02-05 00:08:05,316 - res_dict: {'trx1_lock_row_ids': [3], 'trx2_lock_row_ids': [4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-05 00:08:05,316 - lock_same_resource: False
2025-02-05 00:08:05,316 - 
2025-02-05 00:08:05,316 - non intersection phase1
2025-02-05 00:08:05,317 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:08:05,317 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:08:05,317 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 00:08:05,317 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 00:08:05,320 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:08:05,321 - needed_params: {'cond', 'table'}
2025-02-05 00:08:05,321 - params: {'cond': '(id = 3) AND (col_1 = 3) AND (col_2 = 37.95) AND (col_0 = 27)', 'table': 'table_0'}
2025-02-05 00:08:05,324 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=True, range_end_idx=7
2025-02-05 00:08:05,325 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:05,325 - params: {'v1': '4', 'v2': '7', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:08:05,325 - non intersection phase1 end
2025-02-05 00:08:05,325 - 
2025-02-05 00:08:05,325 - non intersection phase2
2025-02-05 00:08:05,329 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 00:08:05,330 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:05,330 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0, col_2'}
2025-02-05 00:08:05,333 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:08:05,334 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:08:05,334 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': 'NULL, 75, 50, 13.78', 'table': 'table_0'}
2025-02-05 00:08:05,335 - non intersection phase2 end
2025-02-05 00:08:05,335 - 
2025-02-05 00:08:05,335 - 生成死锁事务序列成功如下
2025-02-05 00:08:05,335 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'DELETE FROM table_0 WHERE (id = 3) AND (col_1 = 3) AND (col_2 = 37.95) AND (col_0 = 27)'), (2, 'SELECT id FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 75, 50, 13.78)'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:08:06,874 - 创建事务1连接成功
2025-02-05 00:08:06,876 - 执行事务1语句: BEGIN
2025-02-05 00:08:06,877 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 3) AND (col_1 = 3) AND (col_2 = 37.95) AND (col_0 = 27)
2025-02-05 00:08:06,878 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:08:06,879 - 执行事务1语句: COMMIT;
2025-02-05 00:08:06,883 - 执行事务1成功
2025-02-05 00:08:09,484 - 恢复初始状态成功
2025-02-05 00:08:10,246 - 创建事务2连接成功
2025-02-05 00:08:10,248 - 执行事务2语句: BEGIN
2025-02-05 00:08:10,249 - 执行事务2语句: SELECT id FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE
2025-02-05 00:08:10,249 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 75, 50, 13.78)
2025-02-05 00:08:10,251 - 执行事务2语句: COMMIT;
2025-02-05 00:08:10,255 - 执行事务2成功
2025-02-05 00:08:15,232 - 
2025-02-05 00:08:15,232 - 执行前idx: 3, pending_stmts: {2: (1, 'DELETE FROM table_0 WHERE (id = 3) AND (col_1 = 3) AND (col_2 = 37.95) AND (col_0 = 27)', <Thread(Thread-572, started 41808)>, 1738685295.232829)}
2025-02-05 00:08:15,343 - stmt_idx: 2, status: success, result: None
2025-02-05 00:08:15,343 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 3) AND (col_1 = 3) AND (col_2 = 37.95) AND (col_0 = 27)
2025-02-05 00:08:15,343 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:08:15,343 - 
2025-02-05 00:08:15,452 - 
2025-02-05 00:08:15,452 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE', <Thread(Thread-573, started 27880)>, 1738685295.452164)}
2025-02-05 00:08:15,559 - stmt_idx: 3, status: success, result: None
2025-02-05 00:08:15,559 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE
2025-02-05 00:08:15,559 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:08:15,559 - 
2025-02-05 00:08:15,666 - 
2025-02-05 00:08:15,667 - 执行前idx: 5, pending_stmts: {4: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 75, 50, 13.78)', <Thread(Thread-574, started 13464)>, 1738685295.6666203)}
2025-02-05 00:08:15,775 - stmt_idx: 4, status: success, result: None
2025-02-05 00:08:15,775 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 75, 50, 13.78)
2025-02-05 00:08:15,775 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:08:15,775 - 
2025-02-05 00:08:15,884 - 
2025-02-05 00:08:15,884 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-575, started 15624)>, 1738685295.8841667)}
2025-02-05 00:08:15,990 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:08:15,990 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-575, started 15624)>, 1738685295.8841667)}
2025-02-05 00:08:15,990 - 
2025-02-05 00:08:16,100 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-575, started 15624)>, 1738685295.8841667)}
2025-02-05 00:08:16,100 - 
2025-02-05 00:08:16,100 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-575, stopped 15624)>, 1738685295.8841667)}
2025-02-05 00:08:16,203 - stmt_idx: 5, status: success, result: None
2025-02-05 00:08:16,203 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:08:16,203 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:08:16,204 - 执行后idx: 8, pending_stmts: {6: (1, 'COMMIT', <Thread(Thread-576, started 39104)>, 1738685296.2042396)}
2025-02-05 00:08:16,204 - 
2025-02-05 00:08:16,312 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'COMMIT', <Thread(Thread-576, stopped 39104)>, 1738685296.2042396)}
2025-02-05 00:08:16,312 - 
2025-02-05 00:08:16,312 - 执行前idx: 8, pending_stmts: {6: (1, 'COMMIT', <Thread(Thread-576, stopped 39104)>, 1738685296.2042396)}
2025-02-05 00:08:16,421 - stmt_idx: 6, status: success, result: None
2025-02-05 00:08:16,421 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:08:16,421 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:08:16,421 - 
2025-02-05 00:08:16,529 - 执行序列成功
2025-02-05 00:08:17,304 - is_atomic: True
2025-02-05 00:08:17,304 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:08:17,304 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'DELETE FROM table_0 WHERE (id = 3) AND (col_1 = 3) AND (col_2 = 37.95) AND (col_0 = 27)'), (2, 'SELECT id FROM table_0 WHERE id >= 4 AND id <= 7 FOR UPDATE'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 75, 50, 13.78)'), (2, 'COMMIT'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'COMMIT')]
2025-02-05 00:08:17,304 - snapshots: {'before': {'table_0': [(1, 92, 92, 11.47), (2, 44, 79, 70.2), (3, 27, 3, 37.95), (4, 38, 4, 17.25), (5, 6, 70, 52.9), (6, 71, 5, 15.46), (7, 48, 33, 86.81)]}, 'trx1': {'table_0': [(1, 92, 92, 11.47), (2, 44, 79, 70.2), (3, 27, 3, 37.95), (4, 38, 4, 17.25), (5, 6, 70, 52.9), (6, 71, 5, 15.46), (7, 48, 33, 86.81)]}, 'trx2': {'table_0': [(1, 92, 92, 11.47), (2, 44, 79, 70.2), (3, 27, 3, 37.95), (4, 38, 4, 17.25), (5, 6, 70, 52.9), (6, 71, 5, 15.46), (7, 48, 33, 86.81), (8, 75, 50, 13.78)]}, 'serial': {'table_0': [(1, 92, 92, 11.47), (2, 44, 79, 70.2), (3, 27, 3, 37.95), (4, 38, 4, 17.25), (5, 6, 70, 52.9), (6, 71, 5, 15.46), (7, 48, 33, 86.81), (9, 75, 50, 13.78)]}}
2025-02-05 00:08:17,304 - 
2025-02-05 00:08:17,315 - iter: 77
2025-02-05 00:08:18,800 - table table_0 has 5 rows
2025-02-05 00:08:18,800 - trx1_lock_row_ids: [1, 2]
2025-02-05 00:08:18,800 - trx2_lock_row_ids: [1]
2025-02-05 00:08:18,800 - intersection_row_ids: [1]
2025-02-05 00:08:18,800 - trx1_exclusive_ids: [2]
2025-02-05 00:08:18,800 - trx2_exclusive_ids: []
2025-02-05 00:08:18,800 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [1], 'intersection_row_ids': [1]}
2025-02-05 00:08:18,801 - lock_same_resource: True
2025-02-05 00:08:18,801 - 
2025-02-05 00:08:18,801 - intersection phase1
2025-02-05 00:08:18,804 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:08:18,805 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:18,805 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:08:18,808 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:08:18,809 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:18,809 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:08:18,809 - intersection phase1 end
2025-02-05 00:08:18,809 - 
2025-02-05 00:08:18,809 - intersection phase2
2025-02-05 00:08:18,809 - 事务1在第二阶段自己加的锁: S
2025-02-05 00:08:18,809 - 事务2在第二阶段自己加的锁: II
2025-02-05 00:08:18,809 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:08:18,810 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 00:08:18,812 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:08:18,814 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:08:18,814 - params: {'cond': "(col_1 = 'rytsy')", 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:08:18,814 - intersection phase2 end
2025-02-05 00:08:18,814 - 
2025-02-05 00:08:18,814 - intersection phase3
2025-02-05 00:08:18,817 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:08:18,818 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:18,818 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:08:18,818 - intersection phase3 end
2025-02-05 00:08:18,818 - 
2025-02-05 00:08:18,818 - 生成死锁事务序列成功如下
2025-02-05 00:08:18,818 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, "SELECT id, col_1 FROM table_0 WHERE (col_1 = 'rytsy') LOCK IN SHARE MODE"), (1, 'SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:08:20,380 - 创建事务1连接成功
2025-02-05 00:08:20,382 - 执行事务1语句: BEGIN
2025-02-05 00:08:20,383 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:08:20,384 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE (col_1 = 'rytsy') LOCK IN SHARE MODE
2025-02-05 00:08:20,384 - 执行事务1语句: SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:08:20,385 - 执行事务1语句: COMMIT;
2025-02-05 00:08:20,390 - 执行事务1成功
2025-02-05 00:08:23,000 - 恢复初始状态成功
2025-02-05 00:08:23,766 - 创建事务2连接成功
2025-02-05 00:08:23,767 - 执行事务2语句: BEGIN
2025-02-05 00:08:23,768 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:08:23,769 - 执行事务2语句: COMMIT;
2025-02-05 00:08:23,773 - 执行事务2成功
2025-02-05 00:08:28,714 - 
2025-02-05 00:08:28,714 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-577, started 4320)>, 1738685308.7143602)}
2025-02-05 00:08:28,829 - stmt_idx: 2, status: success, result: None
2025-02-05 00:08:28,829 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:08:28,829 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:08:28,829 - 
2025-02-05 00:08:28,937 - 
2025-02-05 00:08:28,938 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-578, started 29408)>, 1738685308.9375474)}
2025-02-05 00:08:29,043 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:08:29,043 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-578, started 29408)>, 1738685308.9375474)}
2025-02-05 00:08:29,043 - 
2025-02-05 00:08:29,152 - stmt为None, trx_id: 2, stmt: None
2025-02-05 00:08:29,154 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-578, started 29408)>, 1738685308.9375474)}
2025-02-05 00:08:29,154 - 
2025-02-05 00:08:29,154 - 执行前idx: 9, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-578, stopped 29408)>, 1738685308.9375474)}
2025-02-05 00:08:29,260 - stmt_idx: 3, status: success, result: None
2025-02-05 00:08:29,260 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:08:29,260 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:08:29,261 - 执行后idx: 9, pending_stmts: {4: (1, "SELECT id, col_1 FROM table_0 WHERE (col_1 = 'rytsy') LOCK IN SHARE MODE", <Thread(Thread-579, started 30960)>, 1738685309.2610967), 5: (1, 'SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-580, started 33616)>, 1738685309.2618039), 8: (1, 'COMMIT', <Thread(Thread-581, started 41124)>, 1738685309.2618039)}
2025-02-05 00:08:29,261 - 
2025-02-05 00:08:29,366 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "SELECT id, col_1 FROM table_0 WHERE (col_1 = 'rytsy') LOCK IN SHARE MODE", <Thread(Thread-579, stopped 30960)>, 1738685309.2610967), 5: (1, 'SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-580, stopped 33616)>, 1738685309.2618039), 8: (1, 'COMMIT', <Thread(Thread-581, stopped 41124)>, 1738685309.2618039)}
2025-02-05 00:08:29,366 - 
2025-02-05 00:08:29,366 - 执行前idx: 9, pending_stmts: {4: (1, "SELECT id, col_1 FROM table_0 WHERE (col_1 = 'rytsy') LOCK IN SHARE MODE", <Thread(Thread-579, stopped 30960)>, 1738685309.2610967), 5: (1, 'SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-580, stopped 33616)>, 1738685309.2618039), 8: (1, 'COMMIT', <Thread(Thread-581, stopped 41124)>, 1738685309.2618039)}
2025-02-05 00:08:29,474 - stmt_idx: 4, status: success, result: None
2025-02-05 00:08:29,474 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE (col_1 = 'rytsy') LOCK IN SHARE MODE
2025-02-05 00:08:29,583 - stmt_idx: 5, status: success, result: None
2025-02-05 00:08:29,583 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:08:29,691 - stmt_idx: 8, status: success, result: None
2025-02-05 00:08:29,691 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:08:29,691 - 执行后idx: 9, pending_stmts: {}
2025-02-05 00:08:29,691 - 
2025-02-05 00:08:29,801 - 执行序列成功
2025-02-05 00:08:30,564 - is_atomic: True
2025-02-05 00:08:30,564 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:08:30,564 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, "SELECT id, col_1 FROM table_0 WHERE (col_1 = 'rytsy') LOCK IN SHARE MODE"), (1, 'SELECT id FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 00:08:30,564 - snapshots: {'before': {'table_0': [(1, 'rcubm'), (2, 'rytsy'), (3, 'rfdpp'), (4, 'vrxpc'), (5, 'vcwwh')]}, 'trx1': {'table_0': [(1, 'rcubm'), (2, 'rytsy'), (3, 'rfdpp'), (4, 'vrxpc'), (5, 'vcwwh')]}, 'trx2': {'table_0': [(1, 'rcubm'), (2, 'rytsy'), (3, 'rfdpp'), (4, 'vrxpc'), (5, 'vcwwh')]}, 'serial': {'table_0': [(1, 'rcubm'), (2, 'rytsy'), (3, 'rfdpp'), (4, 'vrxpc'), (5, 'vcwwh')]}}
2025-02-05 00:08:30,564 - 
2025-02-05 00:08:30,576 - iter: 78
2025-02-05 00:08:32,043 - table table_0 has 5 rows
2025-02-05 00:08:32,044 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 00:08:32,044 - lock_same_resource: False
2025-02-05 00:08:32,044 - 
2025-02-05 00:08:32,044 - non intersection phase1
2025-02-05 00:08:32,044 - 事务1在第一阶段自己加的锁: II
2025-02-05 00:08:32,044 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:08:32,044 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:08:32,044 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:08:32,047 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 00:08:32,049 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:08:32,049 - params: {'v1': '2', 'set_expr': "col_0 = 82, col_3 = 61, col_2 = 'DCcyW', col_1 = 'HzTwN', col_148 = 91", 'table': 'table_0', 'v2': '2'}
2025-02-05 00:08:32,052 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:08:32,053 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:32,053 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_3, col_148'}
2025-02-05 00:08:32,053 - non intersection phase1 end
2025-02-05 00:08:32,053 - 
2025-02-05 00:08:32,053 - non intersection phase2
2025-02-05 00:08:32,055 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:08:32,057 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:32,057 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_3, col_148'}
2025-02-05 00:08:32,059 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 00:08:32,060 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:32,060 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_148'}
2025-02-05 00:08:32,061 - non intersection phase2 end
2025-02-05 00:08:32,061 - 
2025-02-05 00:08:32,061 - 生成死锁事务序列成功如下
2025-02-05 00:08:32,061 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 82, col_3 = 61, col_2 = 'DCcyW', col_1 = 'HzTwN', col_148 = 91 WHERE id BETWEEN 2 AND 2"), (2, 'SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_148 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:08:33,615 - 创建事务1连接成功
2025-02-05 00:08:33,616 - 执行事务1语句: BEGIN
2025-02-05 00:08:33,617 - 执行事务1语句: UPDATE table_0 SET col_0 = 82, col_3 = 61, col_2 = 'DCcyW', col_1 = 'HzTwN', col_148 = 91 WHERE id BETWEEN 2 AND 2
2025-02-05 00:08:33,618 - 执行事务1语句: SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:08:33,620 - 执行事务1语句: COMMIT;
2025-02-05 00:08:33,624 - 执行事务1成功
2025-02-05 00:08:36,222 - 恢复初始状态成功
2025-02-05 00:08:37,006 - 创建事务2连接成功
2025-02-05 00:08:37,007 - 执行事务2语句: BEGIN
2025-02-05 00:08:37,008 - 执行事务2语句: SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:08:37,009 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_148 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 00:08:37,010 - 执行事务2语句: COMMIT;
2025-02-05 00:08:37,014 - 执行事务2成功
2025-02-05 00:08:41,947 - 
2025-02-05 00:08:41,947 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_0 = 82, col_3 = 61, col_2 = 'DCcyW', col_1 = 'HzTwN', col_148 = 91 WHERE id BETWEEN 2 AND 2", <Thread(Thread-582, started 41672)>, 1738685321.947784)}
2025-02-05 00:08:42,047 - stmt_idx: 2, status: success, result: None
2025-02-05 00:08:42,047 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 82, col_3 = 61, col_2 = 'DCcyW', col_1 = 'HzTwN', col_148 = 91 WHERE id BETWEEN 2 AND 2
2025-02-05 00:08:42,047 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:08:42,047 - 
2025-02-05 00:08:42,154 - 
2025-02-05 00:08:42,155 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-583, started 40088)>, 1738685322.1544724)}
2025-02-05 00:08:42,262 - stmt_idx: 3, status: success, result: None
2025-02-05 00:08:42,262 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:08:42,262 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:08:42,262 - 
2025-02-05 00:08:42,370 - 
2025-02-05 00:08:42,370 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_148 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-584, started 32364)>, 1738685322.3708644)}
2025-02-05 00:08:42,476 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1, col_2, col_148 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 00:08:42,476 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_148 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-584, started 32364)>, 1738685322.3708644)}
2025-02-05 00:08:42,477 - 
2025-02-05 00:08:42,584 - 
2025-02-05 00:08:42,584 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_148 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-584, started 32364)>, 1738685322.3708644), 5: (1, 'SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-585, started 29784)>, 1738685322.5842044)}
2025-02-05 00:08:42,587 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1, col_2, col_148 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 00:08:42,693 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:08:42,693 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0, col_1, col_2, col_148 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 00:08:42,693 - 错误: dictionary changed size during iteration
2025-02-05 00:08:42,698 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-585, stopped 29784)>, 1738685322.5842044)}
2025-02-05 00:08:42,698 - 
2025-02-05 00:08:42,698 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-585, stopped 29784)>, 1738685322.5842044)}
2025-02-05 00:08:42,801 - stmt_idx: 5, status: success, result: None
2025-02-05 00:08:42,801 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:08:42,801 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:08:42,801 - 
2025-02-05 00:08:42,910 - 执行序列成功
2025-02-05 00:08:43,694 - is_atomic: True
2025-02-05 00:08:43,694 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:08:43,694 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 82, col_3 = 61, col_2 = 'DCcyW', col_1 = 'HzTwN', col_148 = 91 WHERE id BETWEEN 2 AND 2"), (2, 'SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_3, col_148 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE')]
2025-02-05 00:08:43,694 - snapshots: {'before': {'table_0': [(1, 16, 'epwfh', 'labfg', 19, None), (2, 77, 'ldhud', 'qxknc', 60, None), (3, 100, 'gzzce', 'rgcpl', 40, None), (4, 26, 'mwfmb', 'apdob', 75, None), (5, 87, 'cpkzk', 'rdkij', 1, None)]}, 'trx1': {'table_0': [(1, 16, 'epwfh', 'labfg', 19, None), (2, 82, 'HzTwN', 'DCcyW', 61, 91), (3, 100, 'gzzce', 'rgcpl', 40, None), (4, 26, 'mwfmb', 'apdob', 75, None), (5, 87, 'cpkzk', 'rdkij', 1, None)]}, 'trx2': {'table_0': [(1, 16, 'epwfh', 'labfg', 19, None), (2, 77, 'ldhud', 'qxknc', 60, None), (3, 100, 'gzzce', 'rgcpl', 40, None), (4, 26, 'mwfmb', 'apdob', 75, None), (5, 87, 'cpkzk', 'rdkij', 1, None)]}, 'serial': {'table_0': [(1, 16, 'epwfh', 'labfg', 19, None), (2, 82, 'HzTwN', 'DCcyW', 61, 91), (3, 100, 'gzzce', 'rgcpl', 40, None), (4, 26, 'mwfmb', 'apdob', 75, None), (5, 87, 'cpkzk', 'rdkij', 1, None)]}}
2025-02-05 00:08:43,694 - 
2025-02-05 00:08:43,706 - iter: 79
2025-02-05 00:08:45,210 - table table_0 has 15 rows
2025-02-05 00:08:45,210 - trx1_start_id: 10
2025-02-05 00:08:45,211 - trx1_end_id: 11
2025-02-05 00:08:45,211 - trx1_exclusive_start_id: 10
2025-02-05 00:08:45,211 - trx1_exclusive_end_id: 9
2025-02-05 00:08:45,211 - trx1_exclusive_ids: []
2025-02-05 00:08:45,211 - trx2_start_id: 10
2025-02-05 00:08:45,211 - trx2_end_id: 13
2025-02-05 00:08:45,211 - trx2_exclusive_start_id: 12
2025-02-05 00:08:45,211 - trx2_exclusive_end_id: 13
2025-02-05 00:08:45,211 - trx2_exclusive_ids: [12, 13]
2025-02-05 00:08:45,211 - intersection_ids: [10, 11]
2025-02-05 00:08:45,211 - res_dict: {'trx1_lock_row_ids': [10, 11], 'trx2_lock_row_ids': [10, 11, 12, 13], 'intersection_row_ids': [10, 11]}
2025-02-05 00:08:45,211 - lock_same_resource: True
2025-02-05 00:08:45,211 - 
2025-02-05 00:08:45,211 - intersection phase1
2025-02-05 00:08:45,215 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=10, is_continuous=True, range_end_idx=11
2025-02-05 00:08:45,216 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:45,216 - params: {'v1': '10', 'v2': '11', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:08:45,218 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=10, is_continuous=True, range_end_idx=13
2025-02-05 00:08:45,219 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:45,219 - params: {'v1': '10', 'v2': '13', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:08:45,219 - intersection phase1 end
2025-02-05 00:08:45,219 - 
2025-02-05 00:08:45,219 - intersection phase2
2025-02-05 00:08:45,220 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:08:45,220 - 事务2在第二阶段自己加的锁: II
2025-02-05 00:08:45,220 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:08:45,220 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:08:45,223 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=10, is_continuous=True, range_end_idx=9
2025-02-05 00:08:45,224 - 生成连续锁定SQL失败: 找不到从10到9的行
2025-02-05 00:08:45,224 - 生成锁SQL失败: 找不到从10到9的行
2025-02-05 00:08:45,224 - 生成死锁事务序列失败: 找不到从10到9的行
2025-02-05 00:08:45,224 - 
2025-02-05 00:08:45,224 - Error in iteration 79: 找不到从10到9的行
2025-02-05 00:08:45,224 - 
2025-02-05 00:08:45,231 - iter: 80
2025-02-05 00:08:46,716 - table table_0 has 15 rows
2025-02-05 00:08:46,717 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
2025-02-05 00:08:46,717 - trx2_lock_row_ids: [5, 8, 12, 14]
2025-02-05 00:08:46,717 - intersection_row_ids: [5, 8, 12, 14]
2025-02-05 00:08:46,717 - trx1_exclusive_ids: [1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 15]
2025-02-05 00:08:46,717 - trx2_exclusive_ids: []
2025-02-05 00:08:46,717 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'trx2_lock_row_ids': [5, 8, 12, 14], 'intersection_row_ids': [5, 8, 12, 14]}
2025-02-05 00:08:46,717 - lock_same_resource: True
2025-02-05 00:08:46,717 - 
2025-02-05 00:08:46,717 - intersection phase1
2025-02-05 00:08:46,721 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=15
2025-02-05 00:08:46,722 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:08:46,722 - params: {'v1': '1', 'set_expr': 'col_1 = 42.72', 'table': 'table_0', 'v2': '15'}
2025-02-05 00:08:46,724 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,725 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:08:46,725 - params: {'v1': '5', 'set_expr': "col_1 = 44.81, col_0 = 'EbXLX'", 'table': 'table_0', 'v2': '5'}
2025-02-05 00:08:46,728 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,729 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:08:46,729 - params: {'v1': '8', 'set_expr': "col_1 = 30.29, col_0 = 'kHcDm'", 'table': 'table_0', 'v2': '8'}
2025-02-05 00:08:46,731 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,733 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:08:46,733 - params: {'insert_cols': 'id, col_0, col_1', 'vals': "NULL, 'CWvSB', 85.4", 'table': 'table_0'}
2025-02-05 00:08:46,737 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,738 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:08:46,738 - params: {'v1': '14', 'set_expr': "col_0 = 'afgif', col_1 = 1.02", 'table': 'table_0', 'v2': '14'}
2025-02-05 00:08:46,738 - intersection phase1 end
2025-02-05 00:08:46,738 - 
2025-02-05 00:08:46,738 - intersection phase2
2025-02-05 00:08:46,739 - 事务1在第二阶段自己加的锁: S
2025-02-05 00:08:46,739 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:08:46,739 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:08:46,739 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 00:08:46,742 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,743 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:46,743 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'col_1'}
2025-02-05 00:08:46,745 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,747 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:08:46,747 - params: {'cond': '(id = 2)', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:08:46,749 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,751 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:08:46,751 - params: {'cond': "(col_0 = 'ugzeq')", 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:08:46,754 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,755 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:46,755 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'col_0, col_1'}
2025-02-05 00:08:46,758 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,759 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:08:46,759 - params: {'cond': "(col_0 = 'fcotl') AND (col_1 = 42.97)", 'table': 'table_0', 'select_cols': 'col_1'}
2025-02-05 00:08:46,762 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,763 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:46,764 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:08:46,767 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,768 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:08:46,768 - params: {'cond': "(col_0 = 'sbjjg')", 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:08:46,770 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,771 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:46,771 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'col_0'}
2025-02-05 00:08:46,774 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,776 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:08:46,776 - params: {'v1': '11', 'v2': '11', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:08:46,779 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,780 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:08:46,780 - params: {'cond': "(col_0 = 'vecmr') AND (col_1 = 39.78)", 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:08:46,783 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,784 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:08:46,784 - params: {'cond': "(col_0 = 'fivvw')", 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:08:46,785 - intersection phase2 end
2025-02-05 00:08:46,785 - 
2025-02-05 00:08:46,785 - intersection phase3
2025-02-05 00:08:46,788 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,789 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:08:46,789 - params: {'set_expr': "col_0 = 'hrrRp', col_1 = 63.55", 'table': 'table_0', 'cond': '(id = 12)'}
2025-02-05 00:08:46,794 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:08:46,795 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:08:46,795 - params: {'cond': "(col_1 = 39.78) AND (col_0 = 'vecmr')", 'table': 'table_0', 'select_cols': 'col_0, col_1'}
2025-02-05 00:08:46,796 - intersection phase3 end
2025-02-05 00:08:46,796 - 
2025-02-05 00:08:46,796 - 生成死锁事务序列成功如下
2025-02-05 00:08:46,796 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_1 = 44.81, col_0 = 'EbXLX' WHERE id BETWEEN 5 AND 5"), (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15'), (2, "UPDATE table_0 SET col_1 = 30.29, col_0 = 'kHcDm' WHERE id BETWEEN 8 AND 8"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'CWvSB', 85.4)"), (2, "UPDATE table_0 SET col_0 = 'afgif', col_1 = 1.02 WHERE id BETWEEN 14 AND 14"), (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_0 = 'ugzeq') LOCK IN SHARE MODE"), (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, "SELECT col_1 FROM table_0 WHERE (col_0 = 'fcotl') AND (col_1 = 42.97) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'sbjjg') LOCK IN SHARE MODE"), (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_0 = 'vecmr') AND (col_1 = 39.78) LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'fivvw') LOCK IN SHARE MODE"), (2, "SELECT col_0, col_1 FROM table_0 WHERE (col_1 = 39.78) AND (col_0 = 'vecmr') LOCK IN SHARE MODE"), (1, "UPDATE table_0 SET col_0 = 'hrrRp', col_1 = 63.55 WHERE (id = 12)"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:08:48,316 - 创建事务1连接成功
2025-02-05 00:08:48,318 - 执行事务1语句: BEGIN
2025-02-05 00:08:48,319 - 执行事务1语句: UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15
2025-02-05 00:08:48,320 - 执行事务1语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:08:48,321 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 00:08:48,322 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_0 = 'ugzeq') LOCK IN SHARE MODE
2025-02-05 00:08:48,322 - 执行事务1语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 00:08:48,323 - 执行事务1语句: SELECT col_1 FROM table_0 WHERE (col_0 = 'fcotl') AND (col_1 = 42.97) LOCK IN SHARE MODE
2025-02-05 00:08:48,324 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:08:48,325 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'sbjjg') LOCK IN SHARE MODE
2025-02-05 00:08:48,326 - 执行事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 00:08:48,327 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 00:08:48,327 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_0 = 'vecmr') AND (col_1 = 39.78) LOCK IN SHARE MODE
2025-02-05 00:08:48,328 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'fivvw') LOCK IN SHARE MODE
2025-02-05 00:08:48,329 - 执行事务1语句: UPDATE table_0 SET col_0 = 'hrrRp', col_1 = 63.55 WHERE (id = 12)
2025-02-05 00:08:48,331 - 执行事务1语句: COMMIT;
2025-02-05 00:08:48,336 - 执行事务1成功
2025-02-05 00:08:50,931 - 恢复初始状态成功
2025-02-05 00:08:51,698 - 创建事务2连接成功
2025-02-05 00:08:51,700 - 执行事务2语句: BEGIN
2025-02-05 00:08:51,701 - 执行事务2语句: UPDATE table_0 SET col_1 = 44.81, col_0 = 'EbXLX' WHERE id BETWEEN 5 AND 5
2025-02-05 00:08:51,701 - 执行事务2语句: UPDATE table_0 SET col_1 = 30.29, col_0 = 'kHcDm' WHERE id BETWEEN 8 AND 8
2025-02-05 00:08:51,702 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'CWvSB', 85.4)
2025-02-05 00:08:51,703 - 执行事务2语句: UPDATE table_0 SET col_0 = 'afgif', col_1 = 1.02 WHERE id BETWEEN 14 AND 14
2025-02-05 00:08:51,703 - 执行事务2语句: SELECT col_0, col_1 FROM table_0 WHERE (col_1 = 39.78) AND (col_0 = 'vecmr') LOCK IN SHARE MODE
2025-02-05 00:08:51,706 - 执行事务2语句: COMMIT;
2025-02-05 00:08:51,710 - 执行事务2成功
2025-02-05 00:08:56,697 - 
2025-02-05 00:08:56,697 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_1 = 44.81, col_0 = 'EbXLX' WHERE id BETWEEN 5 AND 5", <Thread(Thread-586, started 12972)>, 1738685336.6971874)}
2025-02-05 00:08:56,797 - stmt_idx: 2, status: success, result: None
2025-02-05 00:08:56,797 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 44.81, col_0 = 'EbXLX' WHERE id BETWEEN 5 AND 5
2025-02-05 00:08:56,797 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:08:56,797 - 
2025-02-05 00:08:56,904 - 
2025-02-05 00:08:56,904 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757)}
2025-02-05 00:08:57,013 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15
2025-02-05 00:08:57,014 - 执行后idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757)}
2025-02-05 00:08:57,014 - 
2025-02-05 00:08:57,122 - 
2025-02-05 00:08:57,123 - 执行前idx: 5, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757), 4: (2, "UPDATE table_0 SET col_1 = 30.29, col_0 = 'kHcDm' WHERE id BETWEEN 8 AND 8", <Thread(Thread-588, started 26780)>, 1738685337.1229053)}
2025-02-05 00:08:57,234 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15
2025-02-05 00:08:57,341 - stmt_idx: 4, status: success, result: None
2025-02-05 00:08:57,341 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 30.29, col_0 = 'kHcDm' WHERE id BETWEEN 8 AND 8
2025-02-05 00:08:57,341 - 执行后idx: 5, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757)}
2025-02-05 00:08:57,341 - 
2025-02-05 00:08:57,450 - 
2025-02-05 00:08:57,451 - 执行前idx: 6, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757), 5: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'CWvSB', 85.4)", <Thread(Thread-589, started 35928)>, 1738685337.450023)}
2025-02-05 00:08:57,558 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15
2025-02-05 00:08:57,666 - stmt_idx: 5, status: success, result: None
2025-02-05 00:08:57,666 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'CWvSB', 85.4)
2025-02-05 00:08:57,666 - 执行后idx: 6, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757)}
2025-02-05 00:08:57,666 - 
2025-02-05 00:08:57,774 - 
2025-02-05 00:08:57,775 - 执行前idx: 7, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757), 6: (2, "UPDATE table_0 SET col_0 = 'afgif', col_1 = 1.02 WHERE id BETWEEN 14 AND 14", <Thread(Thread-590, started 14680)>, 1738685337.7746973)}
2025-02-05 00:08:57,880 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15
2025-02-05 00:08:57,988 - stmt_idx: 6, status: success, result: None
2025-02-05 00:08:57,988 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'afgif', col_1 = 1.02 WHERE id BETWEEN 14 AND 14
2025-02-05 00:08:57,988 - 执行后idx: 7, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757)}
2025-02-05 00:08:57,988 - 
2025-02-05 00:08:58,095 - 
2025-02-05 00:08:58,096 - 执行前idx: 19, pending_stmts: {3: (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15', <Thread(Thread-587, started 23388)>, 1738685336.9049757), 18: (2, "SELECT col_0, col_1 FROM table_0 WHERE (col_1 = 39.78) AND (col_0 = 'vecmr') LOCK IN SHARE MODE", <Thread(Thread-591, started 3096)>, 1738685338.0955906)}
2025-02-05 00:08:58,099 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_0, col_1 FROM table_0 WHERE (col_1 = 39.78) AND (col_0 = 'vecmr') LOCK IN SHARE MODE
2025-02-05 00:08:58,203 - stmt_idx: 3, status: success, result: None
2025-02-05 00:08:58,203 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15
2025-02-05 00:08:58,203 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15
2025-02-05 00:08:58,311 - stmt_idx: 18, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:08:58,311 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT col_0, col_1 FROM table_0 WHERE (col_1 = 39.78) AND (col_0 = 'vecmr') LOCK IN SHARE MODE
2025-02-05 00:08:58,311 - 错误: dictionary changed size during iteration
2025-02-05 00:08:58,312 - 
2025-02-05 00:08:58,312 - 执行前idx: 20, pending_stmts: {7: (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-592, stopped 38948)>, 1738685338.2044892), 8: (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-593, stopped 39548)>, 1738685338.204907), 9: (1, "SELECT * FROM table_0 WHERE (col_0 = 'ugzeq') LOCK IN SHARE MODE", <Thread(Thread-594, stopped 30284)>, 1738685338.204907), 10: (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-595, stopped 31436)>, 1738685338.204907), 11: (1, "SELECT col_1 FROM table_0 WHERE (col_0 = 'fcotl') AND (col_1 = 42.97) LOCK IN SHARE MODE", <Thread(Thread-596, stopped 41796)>, 1738685338.2054136), 12: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-597, stopped 41424)>, 1738685338.2054136), 13: (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'sbjjg') LOCK IN SHARE MODE", <Thread(Thread-598, stopped 36848)>, 1738685338.2054136), 14: (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-599, stopped 16664)>, 1738685338.2058475), 15: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-600, stopped 20160)>, 1738685338.2058475), 16: (1, "SELECT * FROM table_0 WHERE (col_0 = 'vecmr') AND (col_1 = 39.78) LOCK IN SHARE MODE", <Thread(Thread-601, stopped 27948)>, 1738685338.2063515), 17: (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'fivvw') LOCK IN SHARE MODE", <Thread(Thread-602, stopped 5932)>, 1738685338.2063515), 19: (1, "UPDATE table_0 SET col_0 = 'hrrRp', col_1 = 63.55 WHERE (id = 12)", <Thread(Thread-603, started 39996)>, 1738685338.3124244)}
2025-02-05 00:08:58,419 - stmt_idx: 7, status: success, result: None
2025-02-05 00:08:58,419 - 成功执行序列中事务1语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:08:58,527 - stmt_idx: 8, status: success, result: None
2025-02-05 00:08:58,527 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 00:08:58,637 - stmt_idx: 9, status: success, result: None
2025-02-05 00:08:58,637 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_0 = 'ugzeq') LOCK IN SHARE MODE
2025-02-05 00:08:58,746 - stmt_idx: 10, status: success, result: None
2025-02-05 00:08:58,746 - 成功执行序列中事务1语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 00:08:58,857 - stmt_idx: 11, status: success, result: None
2025-02-05 00:08:58,857 - 成功执行序列中事务1语句: SELECT col_1 FROM table_0 WHERE (col_0 = 'fcotl') AND (col_1 = 42.97) LOCK IN SHARE MODE
2025-02-05 00:08:58,965 - stmt_idx: 12, status: success, result: None
2025-02-05 00:08:58,965 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:08:59,073 - stmt_idx: 13, status: success, result: None
2025-02-05 00:08:59,073 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'sbjjg') LOCK IN SHARE MODE
2025-02-05 00:08:59,184 - stmt_idx: 14, status: success, result: None
2025-02-05 00:08:59,184 - 成功执行序列中事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 00:08:59,292 - stmt_idx: 15, status: success, result: None
2025-02-05 00:08:59,292 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 00:08:59,400 - stmt_idx: 16, status: success, result: None
2025-02-05 00:08:59,400 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_0 = 'vecmr') AND (col_1 = 39.78) LOCK IN SHARE MODE
2025-02-05 00:08:59,510 - stmt_idx: 17, status: success, result: None
2025-02-05 00:08:59,510 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'fivvw') LOCK IN SHARE MODE
2025-02-05 00:08:59,617 - stmt_idx: 19, status: success, result: None
2025-02-05 00:08:59,617 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'hrrRp', col_1 = 63.55 WHERE (id = 12)
2025-02-05 00:08:59,617 - 执行后idx: 20, pending_stmts: {}
2025-02-05 00:08:59,617 - 
2025-02-05 00:08:59,728 - 执行序列成功
2025-02-05 00:09:00,506 - is_atomic: True
2025-02-05 00:09:00,506 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:09:00,506 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_1 = 44.81, col_0 = 'EbXLX' WHERE id BETWEEN 5 AND 5"), (2, "UPDATE table_0 SET col_1 = 30.29, col_0 = 'kHcDm' WHERE id BETWEEN 8 AND 8"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'CWvSB', 85.4)"), (2, "UPDATE table_0 SET col_0 = 'afgif', col_1 = 1.02 WHERE id BETWEEN 14 AND 14"), (1, 'UPDATE table_0 SET col_1 = 42.72 WHERE id BETWEEN 1 AND 15'), (2, 'ROLLBACK'), (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_0 = 'ugzeq') LOCK IN SHARE MODE"), (1, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, "SELECT col_1 FROM table_0 WHERE (col_0 = 'fcotl') AND (col_1 = 42.97) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'sbjjg') LOCK IN SHARE MODE"), (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_0 = 'vecmr') AND (col_1 = 39.78) LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'fivvw') LOCK IN SHARE MODE"), (1, "UPDATE table_0 SET col_0 = 'hrrRp', col_1 = 63.55 WHERE (id = 12)"), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 00:09:00,506 - snapshots: {'before': {'table_0': [(1, 'hpevc', 27.87), (2, 'daaxm', 45.69), (3, 'ugzeq', 29.02), (4, 'hmrbr', 7.65), (5, 'rsjjh', 33.38), (6, 'fcotl', 42.97), (7, 'ntzbq', 39.78), (8, 'zrgum', 48.76), (9, 'sbjjg', 4.6), (10, 'ggnrq', 53.41), (11, 'pfpaw', 41.34), (12, 'olftj', 99.57), (13, 'vecmr', 39.78), (14, 'txebq', 8.22), (15, 'fivvw', 42.19)]}, 'trx1': {'table_0': [(1, 'hpevc', 42.72), (2, 'daaxm', 42.72), (3, 'ugzeq', 42.72), (4, 'hmrbr', 42.72), (5, 'rsjjh', 42.72), (6, 'fcotl', 42.72), (7, 'ntzbq', 42.72), (8, 'zrgum', 42.72), (9, 'sbjjg', 42.72), (10, 'ggnrq', 42.72), (11, 'pfpaw', 42.72), (12, 'hrrRp', 63.55), (13, 'vecmr', 42.72), (14, 'txebq', 42.72), (15, 'fivvw', 42.72)]}, 'trx2': {'table_0': [(1, 'hpevc', 27.87), (2, 'daaxm', 45.69), (3, 'ugzeq', 29.02), (4, 'hmrbr', 7.65), (5, 'EbXLX', 44.81), (6, 'fcotl', 42.97), (7, 'ntzbq', 39.78), (8, 'kHcDm', 30.29), (9, 'sbjjg', 4.6), (10, 'ggnrq', 53.41), (11, 'pfpaw', 41.34), (12, 'olftj', 99.57), (13, 'vecmr', 39.78), (14, 'afgif', 1.02), (15, 'fivvw', 42.19), (16, 'CWvSB', 85.4)]}, 'serial': {'table_0': [(1, 'hpevc', 42.72), (2, 'daaxm', 42.72), (3, 'ugzeq', 42.72), (4, 'hmrbr', 42.72), (5, 'rsjjh', 42.72), (6, 'fcotl', 42.72), (7, 'ntzbq', 42.72), (8, 'zrgum', 42.72), (9, 'sbjjg', 42.72), (10, 'ggnrq', 42.72), (11, 'pfpaw', 42.72), (12, 'hrrRp', 63.55), (13, 'vecmr', 42.72), (14, 'txebq', 42.72), (15, 'fivvw', 42.72)]}}
2025-02-05 00:09:00,506 - 
2025-02-05 00:09:00,517 - iter: 81
2025-02-05 00:09:02,089 - table table_0 has 11 rows
2025-02-05 00:09:02,090 - trx1_lock_row_ids: [8, 9]
2025-02-05 00:09:02,090 - trx2_lock_row_ids: [5, 6, 7, 8, 9]
2025-02-05 00:09:02,090 - intersection_row_ids: [8, 9]
2025-02-05 00:09:02,090 - trx1_exclusive_ids: []
2025-02-05 00:09:02,090 - trx2_exclusive_ids: [5, 6, 7]
2025-02-05 00:09:02,090 - res_dict: {'trx1_lock_row_ids': [8, 9], 'trx2_lock_row_ids': [5, 6, 7, 8, 9], 'intersection_row_ids': [8, 9]}
2025-02-05 00:09:02,090 - lock_same_resource: True
2025-02-05 00:09:02,090 - 
2025-02-05 00:09:02,090 - intersection phase1
2025-02-05 00:09:02,093 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=5, is_continuous=True, range_end_idx=9
2025-02-05 00:09:02,094 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:02,095 - params: {'v1': '5', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:09:02,097 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:09:02,098 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:09:02,098 - params: {'cond': '(col_2 = 20.21)', 'table': 'table_0', 'select_cols': 'col_1, col_2'}
2025-02-05 00:09:02,100 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:09:02,101 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:09:02,102 - params: {'cond': "(col_1 = 'iplso') AND (col_0 = 30) AND (col_2 = 18.53)", 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:09:02,102 - intersection phase1 end
2025-02-05 00:09:02,102 - 
2025-02-05 00:09:02,102 - intersection phase2
2025-02-05 00:09:02,102 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:09:02,102 - 事务2在第二阶段自己加的锁: NK
2025-02-05 00:09:02,102 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:09:02,102 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 00:09:02,106 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:09:02,108 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:09:02,108 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 33, 'POeYT', 37.39", 'table': 'table_0'}
2025-02-05 00:09:02,111 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:09:02,112 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:09:02,112 - params: {'set_expr': 'col_2 = 54.01, col_0 = 49', 'table': 'table_0', 'cond': '(id = 6)'}
2025-02-05 00:09:02,116 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:09:02,117 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:09:02,117 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 99, 'UYLIx', 35.01", 'table': 'table_0'}
2025-02-05 00:09:02,117 - intersection phase2 end
2025-02-05 00:09:02,117 - 
2025-02-05 00:09:02,118 - intersection phase3
2025-02-05 00:09:02,121 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=9
2025-02-05 00:09:02,123 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:02,123 - params: {'v1': '7', 'v2': '9', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:09:02,125 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:09:02,127 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:09:02,127 - params: {'set_expr': "col_1 = 'opgEF'", 'table': 'table_0', 'cond': "(col_1 = 'iplso')"}
2025-02-05 00:09:02,127 - intersection phase3 end
2025-02-05 00:09:02,127 - 
2025-02-05 00:09:02,127 - 生成死锁事务序列成功如下
2025-02-05 00:09:02,127 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 9 FOR UPDATE'), (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE'), (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'iplso') AND (col_0 = 30) AND (col_2 = 18.53) LOCK IN SHARE MODE"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 33, 'POeYT', 37.39)"), (2, 'UPDATE table_0 SET col_2 = 54.01, col_0 = 49 WHERE (id = 6)'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 99, 'UYLIx', 35.01)"), (2, "UPDATE table_0 SET col_1 = 'opgEF' WHERE (col_1 = 'iplso')"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:09:03,672 - 创建事务1连接成功
2025-02-05 00:09:03,674 - 执行事务1语句: BEGIN
2025-02-05 00:09:03,675 - 执行事务1语句: SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE
2025-02-05 00:09:03,676 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'iplso') AND (col_0 = 30) AND (col_2 = 18.53) LOCK IN SHARE MODE
2025-02-05 00:09:03,677 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:09:03,677 - 执行事务1语句: COMMIT;
2025-02-05 00:09:03,682 - 执行事务1成功
2025-02-05 00:09:06,299 - 恢复初始状态成功
2025-02-05 00:09:07,062 - 创建事务2连接成功
2025-02-05 00:09:07,064 - 执行事务2语句: BEGIN
2025-02-05 00:09:07,065 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 9 FOR UPDATE
2025-02-05 00:09:07,065 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 33, 'POeYT', 37.39)
2025-02-05 00:09:07,066 - 执行事务2语句: UPDATE table_0 SET col_2 = 54.01, col_0 = 49 WHERE (id = 6)
2025-02-05 00:09:07,067 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 99, 'UYLIx', 35.01)
2025-02-05 00:09:07,067 - 执行事务2语句: UPDATE table_0 SET col_1 = 'opgEF' WHERE (col_1 = 'iplso')
2025-02-05 00:09:07,069 - 执行事务2语句: COMMIT;
2025-02-05 00:09:07,073 - 执行事务2成功
2025-02-05 00:09:12,060 - 
2025-02-05 00:09:12,060 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 9 FOR UPDATE', <Thread(Thread-604, started 30396)>, 1738685352.0602365)}
2025-02-05 00:09:12,164 - stmt_idx: 2, status: success, result: None
2025-02-05 00:09:12,164 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 9 FOR UPDATE
2025-02-05 00:09:12,164 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:09:12,164 - 
2025-02-05 00:09:12,270 - 
2025-02-05 00:09:12,271 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036)}
2025-02-05 00:09:12,377 - wait for lock, trx_id: 1, stmt: SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE
2025-02-05 00:09:12,377 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036)}
2025-02-05 00:09:12,377 - 
2025-02-05 00:09:12,482 - 
2025-02-05 00:09:12,483 - 执行前idx: 6, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036), 5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 33, 'POeYT', 37.39)", <Thread(Thread-606, started 14932)>, 1738685352.4827275)}
2025-02-05 00:09:12,590 - wait for lock, trx_id: 1, stmt: SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE
2025-02-05 00:09:12,696 - stmt_idx: 5, status: success, result: None
2025-02-05 00:09:12,696 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 33, 'POeYT', 37.39)
2025-02-05 00:09:12,696 - 执行后idx: 6, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036)}
2025-02-05 00:09:12,696 - 
2025-02-05 00:09:12,801 - 
2025-02-05 00:09:12,802 - 执行前idx: 7, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036), 6: (2, 'UPDATE table_0 SET col_2 = 54.01, col_0 = 49 WHERE (id = 6)', <Thread(Thread-607, started 28328)>, 1738685352.8011558)}
2025-02-05 00:09:12,909 - wait for lock, trx_id: 1, stmt: SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE
2025-02-05 00:09:13,015 - stmt_idx: 6, status: success, result: None
2025-02-05 00:09:13,015 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 54.01, col_0 = 49 WHERE (id = 6)
2025-02-05 00:09:13,015 - 执行后idx: 7, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036)}
2025-02-05 00:09:13,015 - 
2025-02-05 00:09:13,122 - 
2025-02-05 00:09:13,123 - 执行前idx: 8, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036), 7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 99, 'UYLIx', 35.01)", <Thread(Thread-608, started 39908)>, 1738685353.1227238)}
2025-02-05 00:09:13,228 - wait for lock, trx_id: 1, stmt: SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE
2025-02-05 00:09:13,335 - stmt_idx: 7, status: success, result: None
2025-02-05 00:09:13,335 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 99, 'UYLIx', 35.01)
2025-02-05 00:09:13,335 - 执行后idx: 8, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036)}
2025-02-05 00:09:13,336 - 
2025-02-05 00:09:13,440 - 
2025-02-05 00:09:13,440 - 执行前idx: 9, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE', <Thread(Thread-605, started 33972)>, 1738685352.27036), 8: (2, "UPDATE table_0 SET col_1 = 'opgEF' WHERE (col_1 = 'iplso')", <Thread(Thread-609, started 39412)>, 1738685353.4407504)}
2025-02-05 00:09:13,443 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE
2025-02-05 00:09:13,546 - stmt_idx: 3, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:09:13,546 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT col_1, col_2 FROM table_0 WHERE (col_2 = 20.21) LOCK IN SHARE MODE
2025-02-05 00:09:13,546 - 错误: dictionary changed size during iteration
2025-02-05 00:09:13,550 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (2, "UPDATE table_0 SET col_1 = 'opgEF' WHERE (col_1 = 'iplso')", <Thread(Thread-609, stopped 39412)>, 1738685353.4407504)}
2025-02-05 00:09:13,550 - 
2025-02-05 00:09:13,550 - 执行前idx: 12, pending_stmts: {8: (2, "UPDATE table_0 SET col_1 = 'opgEF' WHERE (col_1 = 'iplso')", <Thread(Thread-609, stopped 39412)>, 1738685353.4407504)}
2025-02-05 00:09:13,656 - stmt_idx: 8, status: success, result: None
2025-02-05 00:09:13,656 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'opgEF' WHERE (col_1 = 'iplso')
2025-02-05 00:09:13,656 - 执行后idx: 12, pending_stmts: {}
2025-02-05 00:09:13,656 - 
2025-02-05 00:09:13,766 - 执行序列成功
2025-02-05 00:09:14,543 - is_atomic: True
2025-02-05 00:09:14,543 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:09:14,543 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 9 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 33, 'POeYT', 37.39)"), (2, 'UPDATE table_0 SET col_2 = 54.01, col_0 = 49 WHERE (id = 6)'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 99, 'UYLIx', 35.01)"), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, "UPDATE table_0 SET col_1 = 'opgEF' WHERE (col_1 = 'iplso')")]
2025-02-05 00:09:14,543 - snapshots: {'before': {'table_0': [(1, 54, 'voxpq', 83.76), (2, 70, 'rgiul', 75.88), (3, 12, 'ybvvz', 33.88), (4, 91, 'bfagv', 88.27), (5, 99, 'gnxxg', 46.89), (6, 77, 'symfz', 81.12), (7, 46, 'plitf', 94.86), (8, 44, 'sezrm', 20.21), (9, 30, 'iplso', 18.53), (10, 60, 'zneeo', 37.87), (11, 84, 'qibpw', 40.68)]}, 'trx1': {'table_0': [(1, 54, 'voxpq', 83.76), (2, 70, 'rgiul', 75.88), (3, 12, 'ybvvz', 33.88), (4, 91, 'bfagv', 88.27), (5, 99, 'gnxxg', 46.89), (6, 77, 'symfz', 81.12), (7, 46, 'plitf', 94.86), (8, 44, 'sezrm', 20.21), (9, 30, 'iplso', 18.53), (10, 60, 'zneeo', 37.87), (11, 84, 'qibpw', 40.68)]}, 'trx2': {'table_0': [(1, 54, 'voxpq', 83.76), (2, 70, 'rgiul', 75.88), (3, 12, 'ybvvz', 33.88), (4, 91, 'bfagv', 88.27), (5, 99, 'gnxxg', 46.89), (6, 49, 'symfz', 54.01), (7, 46, 'plitf', 94.86), (8, 44, 'sezrm', 20.21), (9, 30, 'opgEF', 18.53), (10, 60, 'zneeo', 37.87), (11, 84, 'qibpw', 40.68), (13, 33, 'POeYT', 37.39), (14, 99, 'UYLIx', 35.01)]}, 'serial': {'table_0': [(1, 54, 'voxpq', 83.76), (2, 70, 'rgiul', 75.88), (3, 12, 'ybvvz', 33.88), (4, 91, 'bfagv', 88.27), (5, 99, 'gnxxg', 46.89), (6, 49, 'symfz', 54.01), (7, 46, 'plitf', 94.86), (8, 44, 'sezrm', 20.21), (9, 30, 'opgEF', 18.53), (10, 60, 'zneeo', 37.87), (11, 84, 'qibpw', 40.68), (15, 33, 'POeYT', 37.39), (16, 99, 'UYLIx', 35.01)]}}
2025-02-05 00:09:14,543 - 
2025-02-05 00:09:14,555 - iter: 82
2025-02-05 00:09:16,106 - table table_0 has 7 rows
2025-02-05 00:09:16,106 - trx1_start_id: 4
2025-02-05 00:09:16,106 - trx1_end_id: 4
2025-02-05 00:09:16,106 - trx1_exclusive_start_id: 4
2025-02-05 00:09:16,106 - trx1_exclusive_end_id: 3
2025-02-05 00:09:16,106 - trx1_exclusive_ids: []
2025-02-05 00:09:16,106 - trx2_start_id: 4
2025-02-05 00:09:16,107 - trx2_end_id: 4
2025-02-05 00:09:16,107 - trx2_exclusive_start_id: 5
2025-02-05 00:09:16,107 - trx2_exclusive_end_id: 4
2025-02-05 00:09:16,107 - trx2_exclusive_ids: []
2025-02-05 00:09:16,107 - intersection_ids: [4]
2025-02-05 00:09:16,107 - res_dict: {'trx1_lock_row_ids': [4], 'trx2_lock_row_ids': [4], 'intersection_row_ids': [4]}
2025-02-05 00:09:16,107 - lock_same_resource: True
2025-02-05 00:09:16,107 - 
2025-02-05 00:09:16,107 - intersection phase1
2025-02-05 00:09:16,111 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 00:09:16,113 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:09:16,113 - params: {'v1': '4', 'set_expr': 'col_0 = 2, col_1 = 5', 'table': 'table_0', 'v2': '4'}
2025-02-05 00:09:16,116 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 00:09:16,117 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:16,118 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:09:16,119 - intersection phase1 end
2025-02-05 00:09:16,119 - 
2025-02-05 00:09:16,119 - intersection phase2
2025-02-05 00:09:16,119 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:09:16,120 - 事务2在第二阶段自己加的锁: NK
2025-02-05 00:09:16,120 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 00:09:16,120 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:09:16,123 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=3
2025-02-05 00:09:16,124 - 生成连续锁定SQL失败: 找不到从4到3的行
2025-02-05 00:09:16,124 - 生成锁SQL失败: 找不到从4到3的行
2025-02-05 00:09:16,124 - 生成死锁事务序列失败: 找不到从4到3的行
2025-02-05 00:09:16,124 - 
2025-02-05 00:09:16,124 - Error in iteration 82: 找不到从4到3的行
2025-02-05 00:09:16,124 - 
2025-02-05 00:09:16,132 - iter: 83
2025-02-05 00:09:17,678 - table table_0 has 12 rows
2025-02-05 00:09:17,678 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [7], 'intersection_row_ids': []}
2025-02-05 00:09:17,679 - lock_same_resource: False
2025-02-05 00:09:17,679 - 
2025-02-05 00:09:17,679 - non intersection phase1
2025-02-05 00:09:17,679 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:09:17,679 - 事务2在第一阶段自己加的锁: II
2025-02-05 00:09:17,679 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 00:09:17,679 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 00:09:17,683 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:09:17,684 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:17,684 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'col_1, col_4'}
2025-02-05 00:09:17,688 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 00:09:17,689 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:09:17,689 - params: {'v1': '7', 'set_expr': "col_4 = 'mgszP', col_3 = 1, col_2 = 26, col_1 = 56, col_0 = 89", 'table': 'table_0', 'v2': '7'}
2025-02-05 00:09:17,689 - non intersection phase1 end
2025-02-05 00:09:17,689 - 
2025-02-05 00:09:17,689 - non intersection phase2
2025-02-05 00:09:17,692 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 00:09:17,693 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:09:17,693 - params: {'v1': '7', 'set_expr': 'col_0 = 73, col_1 = 53', 'table': 'table_0', 'v2': '7'}
2025-02-05 00:09:17,697 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:09:17,699 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:17,699 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_3, col_4'}
2025-02-05 00:09:17,699 - non intersection phase2 end
2025-02-05 00:09:17,699 - 
2025-02-05 00:09:17,699 - 生成死锁事务序列成功如下
2025-02-05 00:09:17,699 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_1, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "UPDATE table_0 SET col_4 = 'mgszP', col_3 = 1, col_2 = 26, col_1 = 56, col_0 = 89 WHERE id BETWEEN 7 AND 7"), (2, 'SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 73, col_1 = 53 WHERE id BETWEEN 7 AND 7'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:09:19,266 - 创建事务1连接成功
2025-02-05 00:09:19,267 - 执行事务1语句: BEGIN
2025-02-05 00:09:19,268 - 执行事务1语句: SELECT col_1, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:09:19,269 - 执行事务1语句: UPDATE table_0 SET col_0 = 73, col_1 = 53 WHERE id BETWEEN 7 AND 7
2025-02-05 00:09:19,271 - 执行事务1语句: COMMIT;
2025-02-05 00:09:19,276 - 执行事务1成功
2025-02-05 00:09:21,902 - 恢复初始状态成功
2025-02-05 00:09:22,679 - 创建事务2连接成功
2025-02-05 00:09:22,681 - 执行事务2语句: BEGIN
2025-02-05 00:09:22,681 - 执行事务2语句: UPDATE table_0 SET col_4 = 'mgszP', col_3 = 1, col_2 = 26, col_1 = 56, col_0 = 89 WHERE id BETWEEN 7 AND 7
2025-02-05 00:09:22,682 - 执行事务2语句: SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:09:22,684 - 执行事务2语句: COMMIT;
2025-02-05 00:09:22,689 - 执行事务2成功
2025-02-05 00:09:27,624 - 
2025-02-05 00:09:27,624 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT col_1, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-610, started 27164)>, 1738685367.6248004)}
2025-02-05 00:09:27,738 - stmt_idx: 2, status: success, result: None
2025-02-05 00:09:27,738 - 成功执行序列中事务1语句: SELECT col_1, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:09:27,738 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:09:27,738 - 
2025-02-05 00:09:27,846 - 
2025-02-05 00:09:27,846 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_4 = 'mgszP', col_3 = 1, col_2 = 26, col_1 = 56, col_0 = 89 WHERE id BETWEEN 7 AND 7", <Thread(Thread-611, started 35816)>, 1738685367.8461723)}
2025-02-05 00:09:27,953 - stmt_idx: 3, status: success, result: None
2025-02-05 00:09:27,953 - 成功执行序列中事务2语句: UPDATE table_0 SET col_4 = 'mgszP', col_3 = 1, col_2 = 26, col_1 = 56, col_0 = 89 WHERE id BETWEEN 7 AND 7
2025-02-05 00:09:27,953 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:09:27,953 - 
2025-02-05 00:09:28,063 - 
2025-02-05 00:09:28,063 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-612, started 38564)>, 1738685368.0631657)}
2025-02-05 00:09:28,170 - wait for lock, trx_id: 2, stmt: SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:09:28,170 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-612, started 38564)>, 1738685368.0631657)}
2025-02-05 00:09:28,170 - 
2025-02-05 00:09:28,278 - 
2025-02-05 00:09:28,279 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-612, started 38564)>, 1738685368.0631657), 5: (1, 'UPDATE table_0 SET col_0 = 73, col_1 = 53 WHERE id BETWEEN 7 AND 7', <Thread(Thread-613, started 31800)>, 1738685368.2786171)}
2025-02-05 00:09:28,281 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_0 = 73, col_1 = 53 WHERE id BETWEEN 7 AND 7
2025-02-05 00:09:28,389 - stmt_idx: 4, status: success, result: None
2025-02-05 00:09:28,389 - 成功执行序列中事务2语句: SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:09:28,389 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:09:28,498 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:09:28,498 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_0 = 73, col_1 = 53 WHERE id BETWEEN 7 AND 7
2025-02-05 00:09:28,498 - 错误: dictionary changed size during iteration
2025-02-05 00:09:28,502 - 执行序列成功
2025-02-05 00:09:29,286 - is_atomic: True
2025-02-05 00:09:29,286 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:09:29,286 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_1, col_4 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "UPDATE table_0 SET col_4 = 'mgszP', col_3 = 1, col_2 = 26, col_1 = 56, col_0 = 89 WHERE id BETWEEN 7 AND 7"), (2, 'SELECT id, col_3, col_4 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-05 00:09:29,287 - snapshots: {'before': {'table_0': [(1, 20, 17, 85, 83, 'ottha'), (2, 94, 98, 46, 5, 'eigtk'), (3, 71, 27, 27, 69, 'ihdqy'), (4, 94, 10, 91, 47, 'aarae'), (5, 37, 99, 66, 96, 'xhmug'), (6, 23, 39, 8, 38, 'tnwwz'), (7, 92, 14, 21, 100, 'onyna'), (8, 12, 11, 15, 65, 'vgaoc'), (9, 88, 23, 85, 98, 'htkwv'), (10, 13, 61, 2, 91, 'yqaro'), (11, 41, 16, 41, 3, 'gzrmf'), (12, 52, 42, 9, 25, 'uscqz')]}, 'trx1': {'table_0': [(1, 20, 17, 85, 83, 'ottha'), (2, 94, 98, 46, 5, 'eigtk'), (3, 71, 27, 27, 69, 'ihdqy'), (4, 94, 10, 91, 47, 'aarae'), (5, 37, 99, 66, 96, 'xhmug'), (6, 23, 39, 8, 38, 'tnwwz'), (7, 73, 53, 21, 100, 'onyna'), (8, 12, 11, 15, 65, 'vgaoc'), (9, 88, 23, 85, 98, 'htkwv'), (10, 13, 61, 2, 91, 'yqaro'), (11, 41, 16, 41, 3, 'gzrmf'), (12, 52, 42, 9, 25, 'uscqz')]}, 'trx2': {'table_0': [(1, 20, 17, 85, 83, 'ottha'), (2, 94, 98, 46, 5, 'eigtk'), (3, 71, 27, 27, 69, 'ihdqy'), (4, 94, 10, 91, 47, 'aarae'), (5, 37, 99, 66, 96, 'xhmug'), (6, 23, 39, 8, 38, 'tnwwz'), (7, 89, 56, 26, 1, 'mgszP'), (8, 12, 11, 15, 65, 'vgaoc'), (9, 88, 23, 85, 98, 'htkwv'), (10, 13, 61, 2, 91, 'yqaro'), (11, 41, 16, 41, 3, 'gzrmf'), (12, 52, 42, 9, 25, 'uscqz')]}, 'serial': {'table_0': [(1, 20, 17, 85, 83, 'ottha'), (2, 94, 98, 46, 5, 'eigtk'), (3, 71, 27, 27, 69, 'ihdqy'), (4, 94, 10, 91, 47, 'aarae'), (5, 37, 99, 66, 96, 'xhmug'), (6, 23, 39, 8, 38, 'tnwwz'), (7, 89, 56, 26, 1, 'mgszP'), (8, 12, 11, 15, 65, 'vgaoc'), (9, 88, 23, 85, 98, 'htkwv'), (10, 13, 61, 2, 91, 'yqaro'), (11, 41, 16, 41, 3, 'gzrmf'), (12, 52, 42, 9, 25, 'uscqz')]}}
2025-02-05 00:09:29,287 - 
2025-02-05 00:09:29,299 - iter: 84
2025-02-05 00:09:30,813 - table table_0 has 13 rows
2025-02-05 00:09:30,814 - res_dict: {'trx1_lock_row_ids': [1, 3, 5, 7, 9, 10, 12, 13], 'trx2_lock_row_ids': [2], 'intersection_row_ids': []}
2025-02-05 00:09:30,814 - lock_same_resource: False
2025-02-05 00:09:30,814 - 
2025-02-05 00:09:30,814 - non intersection phase1
2025-02-05 00:09:30,814 - 事务1在第一阶段自己加的锁: II
2025-02-05 00:09:30,814 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:09:30,814 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:09:30,814 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 00:09:30,818 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,820 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:09:30,820 - params: {'set_expr': "col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81", 'table': 'table_0', 'cond': "(col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')"}
2025-02-05 00:09:30,825 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,827 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:09:30,827 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 89, 36.76, 'HFuqV', 'EkJaf', 1.64", 'table': 'table_0'}
2025-02-05 00:09:30,829 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,831 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:09:30,831 - params: {'v1': '5', 'set_expr': "col_0 = 42, col_4 = 62.12, col_1 = 46.08, col_2 = 'cNsVU'", 'table': 'table_0', 'v2': '5'}
2025-02-05 00:09:30,834 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,835 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:09:30,836 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 55, 64.88, 'CJZsH', 'XmmsS', 47.35", 'table': 'table_0'}
2025-02-05 00:09:30,840 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,842 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:09:30,842 - params: {'set_expr': 'col_1 = 85.26', 'table': 'table_0', 'cond': '(id = 9)'}
2025-02-05 00:09:30,844 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,846 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:09:30,846 - params: {'set_expr': "col_4 = 75.56, col_3 = 'UvIDx', col_2 = 'rtbED', col_1 = 29.73", 'table': 'table_0', 'cond': '(id = 10)'}
2025-02-05 00:09:30,850 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,852 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:09:30,852 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 57, 80.64, 'bGNnN', 'KXDuc', 60.43", 'table': 'table_0'}
2025-02-05 00:09:30,855 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,857 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:09:30,857 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 11, 91.59, 'uSkNC', 'bZnnP', 9.4", 'table': 'table_0'}
2025-02-05 00:09:30,860 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 00:09:30,861 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:30,861 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3'}
2025-02-05 00:09:30,862 - non intersection phase1 end
2025-02-05 00:09:30,862 - 
2025-02-05 00:09:30,862 - non intersection phase2
2025-02-05 00:09:30,866 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 00:09:30,868 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:30,868 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3, col_4'}
2025-02-05 00:09:30,871 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:09:30,873 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:09:30,873 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'vals': "NULL, 29, 6.74, 'braRR', 'XNoNy', 65.06", 'table': 'table_0'}
2025-02-05 00:09:30,874 - non intersection phase2 end
2025-02-05 00:09:30,874 - 
2025-02-05 00:09:30,874 - 生成死锁事务序列成功如下
2025-02-05 00:09:30,874 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, "UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 89, 36.76, 'HFuqV', 'EkJaf', 1.64)"), (1, "UPDATE table_0 SET col_0 = 42, col_4 = 62.12, col_1 = 46.08, col_2 = 'cNsVU' WHERE id BETWEEN 5 AND 5"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 64.88, 'CJZsH', 'XmmsS', 47.35)"), (1, 'UPDATE table_0 SET col_1 = 85.26 WHERE (id = 9)'), (1, "UPDATE table_0 SET col_4 = 75.56, col_3 = 'UvIDx', col_2 = 'rtbED', col_1 = 29.73 WHERE (id = 10)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 57, 80.64, 'bGNnN', 'KXDuc', 60.43)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 29, 6.74, 'braRR', 'XNoNy', 65.06)"), (1, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:09:32,413 - 创建事务1连接成功
2025-02-05 00:09:32,415 - 执行事务1语句: BEGIN
2025-02-05 00:09:32,416 - 执行事务1语句: UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')
2025-02-05 00:09:32,417 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 89, 36.76, 'HFuqV', 'EkJaf', 1.64)
2025-02-05 00:09:32,418 - 执行事务1语句: UPDATE table_0 SET col_0 = 42, col_4 = 62.12, col_1 = 46.08, col_2 = 'cNsVU' WHERE id BETWEEN 5 AND 5
2025-02-05 00:09:32,419 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 64.88, 'CJZsH', 'XmmsS', 47.35)
2025-02-05 00:09:32,419 - 执行事务1语句: UPDATE table_0 SET col_1 = 85.26 WHERE (id = 9)
2025-02-05 00:09:32,420 - 执行事务1语句: UPDATE table_0 SET col_4 = 75.56, col_3 = 'UvIDx', col_2 = 'rtbED', col_1 = 29.73 WHERE (id = 10)
2025-02-05 00:09:32,421 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 57, 80.64, 'bGNnN', 'KXDuc', 60.43)
2025-02-05 00:09:32,421 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)
2025-02-05 00:09:32,422 - 执行事务1语句: SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:09:32,424 - 执行事务1语句: COMMIT;
2025-02-05 00:09:32,429 - 执行事务1成功
2025-02-05 00:09:35,039 - 恢复初始状态成功
2025-02-05 00:09:35,804 - 创建事务2连接成功
2025-02-05 00:09:35,806 - 执行事务2语句: BEGIN
2025-02-05 00:09:35,807 - 执行事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:09:35,807 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 29, 6.74, 'braRR', 'XNoNy', 65.06)
2025-02-05 00:09:35,809 - 执行事务2语句: COMMIT;
2025-02-05 00:09:35,814 - 执行事务2成功
2025-02-05 00:09:40,832 - 
2025-02-05 00:09:40,832 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-614, started 41340)>, 1738685380.832629)}
2025-02-05 00:09:40,936 - stmt_idx: 2, status: success, result: None
2025-02-05 00:09:40,936 - 成功执行序列中事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:09:40,936 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:09:40,936 - 
2025-02-05 00:09:41,045 - 
2025-02-05 00:09:41,046 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')", <Thread(Thread-615, started 28584)>, 1738685381.0458565)}
2025-02-05 00:09:41,153 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')
2025-02-05 00:09:41,154 - 执行后idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')", <Thread(Thread-615, started 28584)>, 1738685381.0458565)}
2025-02-05 00:09:41,154 - 
2025-02-05 00:09:41,262 - 
2025-02-05 00:09:41,263 - 执行前idx: 12, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')", <Thread(Thread-615, started 28584)>, 1738685381.0458565), 11: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 29, 6.74, 'braRR', 'XNoNy', 65.06)", <Thread(Thread-616, started 35408)>, 1738685381.262414)}
2025-02-05 00:09:41,369 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')
2025-02-05 00:09:41,478 - stmt_idx: 11, status: success, result: None
2025-02-05 00:09:41,478 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 29, 6.74, 'braRR', 'XNoNy', 65.06)
2025-02-05 00:09:41,478 - 执行后idx: 12, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')", <Thread(Thread-615, started 28584)>, 1738685381.0458565)}
2025-02-05 00:09:41,478 - 
2025-02-05 00:09:41,589 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, "UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')", <Thread(Thread-615, started 28584)>, 1738685381.0458565)}
2025-02-05 00:09:41,590 - 
2025-02-05 00:09:41,590 - 执行前idx: 15, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')", <Thread(Thread-615, stopped 28584)>, 1738685381.0458565)}
2025-02-05 00:09:41,694 - stmt_idx: 3, status: success, result: None
2025-02-05 00:09:41,694 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')
2025-02-05 00:09:41,694 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')
2025-02-05 00:09:41,697 - 执行后idx: 15, pending_stmts: {4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 89, 36.76, 'HFuqV', 'EkJaf', 1.64)", <Thread(Thread-617, started 5520)>, 1738685381.6945896), 5: (1, "UPDATE table_0 SET col_0 = 42, col_4 = 62.12, col_1 = 46.08, col_2 = 'cNsVU' WHERE id BETWEEN 5 AND 5", <Thread(Thread-618, started 32616)>, 1738685381.6957726), 6: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 64.88, 'CJZsH', 'XmmsS', 47.35)", <Thread(Thread-619, started 32308)>, 1738685381.6957726), 7: (1, 'UPDATE table_0 SET col_1 = 85.26 WHERE (id = 9)', <Thread(Thread-620, started 25368)>, 1738685381.6957726), 8: (1, "UPDATE table_0 SET col_4 = 75.56, col_3 = 'UvIDx', col_2 = 'rtbED', col_1 = 29.73 WHERE (id = 10)", <Thread(Thread-621, started 40188)>, 1738685381.6962764), 9: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 57, 80.64, 'bGNnN', 'KXDuc', 60.43)", <Thread(Thread-622, started 5304)>, 1738685381.6962764), 10: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)", <Thread(Thread-623, started 37352)>, 1738685381.6966703), 12: (1, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-624, started 38352)>, 1738685381.697175), 14: (1, 'COMMIT', <Thread(Thread-625, started 6976)>, 1738685381.697175)}
2025-02-05 00:09:41,697 - 
2025-02-05 00:09:41,800 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 89, 36.76, 'HFuqV', 'EkJaf', 1.64)", <Thread(Thread-617, stopped 5520)>, 1738685381.6945896), 5: (1, "UPDATE table_0 SET col_0 = 42, col_4 = 62.12, col_1 = 46.08, col_2 = 'cNsVU' WHERE id BETWEEN 5 AND 5", <Thread(Thread-618, stopped 32616)>, 1738685381.6957726), 6: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 64.88, 'CJZsH', 'XmmsS', 47.35)", <Thread(Thread-619, stopped 32308)>, 1738685381.6957726), 7: (1, 'UPDATE table_0 SET col_1 = 85.26 WHERE (id = 9)', <Thread(Thread-620, stopped 25368)>, 1738685381.6957726), 8: (1, "UPDATE table_0 SET col_4 = 75.56, col_3 = 'UvIDx', col_2 = 'rtbED', col_1 = 29.73 WHERE (id = 10)", <Thread(Thread-621, stopped 40188)>, 1738685381.6962764), 9: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 57, 80.64, 'bGNnN', 'KXDuc', 60.43)", <Thread(Thread-622, stopped 5304)>, 1738685381.6962764), 10: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)", <Thread(Thread-623, stopped 37352)>, 1738685381.6966703), 12: (1, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-624, stopped 38352)>, 1738685381.697175), 14: (1, 'COMMIT', <Thread(Thread-625, stopped 6976)>, 1738685381.697175)}
2025-02-05 00:09:41,800 - 
2025-02-05 00:09:41,800 - 执行前idx: 15, pending_stmts: {4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 89, 36.76, 'HFuqV', 'EkJaf', 1.64)", <Thread(Thread-617, stopped 5520)>, 1738685381.6945896), 5: (1, "UPDATE table_0 SET col_0 = 42, col_4 = 62.12, col_1 = 46.08, col_2 = 'cNsVU' WHERE id BETWEEN 5 AND 5", <Thread(Thread-618, stopped 32616)>, 1738685381.6957726), 6: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 64.88, 'CJZsH', 'XmmsS', 47.35)", <Thread(Thread-619, stopped 32308)>, 1738685381.6957726), 7: (1, 'UPDATE table_0 SET col_1 = 85.26 WHERE (id = 9)', <Thread(Thread-620, stopped 25368)>, 1738685381.6957726), 8: (1, "UPDATE table_0 SET col_4 = 75.56, col_3 = 'UvIDx', col_2 = 'rtbED', col_1 = 29.73 WHERE (id = 10)", <Thread(Thread-621, stopped 40188)>, 1738685381.6962764), 9: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 57, 80.64, 'bGNnN', 'KXDuc', 60.43)", <Thread(Thread-622, stopped 5304)>, 1738685381.6962764), 10: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)", <Thread(Thread-623, stopped 37352)>, 1738685381.6966703), 12: (1, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-624, stopped 38352)>, 1738685381.697175), 14: (1, 'COMMIT', <Thread(Thread-625, stopped 6976)>, 1738685381.697175)}
2025-02-05 00:09:41,909 - stmt_idx: 4, status: success, result: None
2025-02-05 00:09:41,909 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 89, 36.76, 'HFuqV', 'EkJaf', 1.64)
2025-02-05 00:09:42,017 - stmt_idx: 5, status: success, result: None
2025-02-05 00:09:42,017 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 42, col_4 = 62.12, col_1 = 46.08, col_2 = 'cNsVU' WHERE id BETWEEN 5 AND 5
2025-02-05 00:09:42,126 - stmt_idx: 6, status: success, result: None
2025-02-05 00:09:42,126 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 64.88, 'CJZsH', 'XmmsS', 47.35)
2025-02-05 00:09:42,233 - stmt_idx: 7, status: success, result: None
2025-02-05 00:09:42,233 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 85.26 WHERE (id = 9)
2025-02-05 00:09:42,343 - stmt_idx: 8, status: success, result: None
2025-02-05 00:09:42,343 - 成功执行序列中事务1语句: UPDATE table_0 SET col_4 = 75.56, col_3 = 'UvIDx', col_2 = 'rtbED', col_1 = 29.73 WHERE (id = 10)
2025-02-05 00:09:42,451 - stmt_idx: 9, status: success, result: None
2025-02-05 00:09:42,451 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 57, 80.64, 'bGNnN', 'KXDuc', 60.43)
2025-02-05 00:09:42,560 - stmt_idx: 10, status: success, result: None
2025-02-05 00:09:42,560 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)
2025-02-05 00:09:42,666 - stmt_idx: 12, status: success, result: None
2025-02-05 00:09:42,666 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:09:42,774 - stmt_idx: 14, status: success, result: None
2025-02-05 00:09:42,774 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:09:42,774 - 执行后idx: 15, pending_stmts: {}
2025-02-05 00:09:42,774 - 
2025-02-05 00:09:42,882 - 执行序列成功
2025-02-05 00:09:43,657 - is_atomic: True
2025-02-05 00:09:43,657 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:09:43,657 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 29, 6.74, 'braRR', 'XNoNy', 65.06)"), (2, 'COMMIT'), (1, "UPDATE table_0 SET col_2 = 'tmAvL', col_1 = 52.87, col_0 = 81 WHERE (col_4 = 97.81) AND (col_1 = 94.67) AND (col_3 = 'felsm')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 89, 36.76, 'HFuqV', 'EkJaf', 1.64)"), (1, "UPDATE table_0 SET col_0 = 42, col_4 = 62.12, col_1 = 46.08, col_2 = 'cNsVU' WHERE id BETWEEN 5 AND 5"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55, 64.88, 'CJZsH', 'XmmsS', 47.35)"), (1, 'UPDATE table_0 SET col_1 = 85.26 WHERE (id = 9)'), (1, "UPDATE table_0 SET col_4 = 75.56, col_3 = 'UvIDx', col_2 = 'rtbED', col_1 = 29.73 WHERE (id = 10)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 57, 80.64, 'bGNnN', 'KXDuc', 60.43)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)"), (1, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 00:09:43,657 - snapshots: {'before': {'table_0': [(1, 44, 94.67, 'cynbv', 'felsm', 97.81), (2, 98, 85.0, 'jqoyf', 'qeoyu', 11.04), (3, 61, 21.25, 'wsqjq', 'nosen', 96.17), (4, 28, 4.1, 'gsnin', 'jsbfh', 1.17), (5, 57, 45.73, 'evbcu', 'ftnuj', 4.02), (6, 79, 62.86, 'ntdzk', 'fpwqm', 23.56), (7, 8, 78.81, 'ypdrz', 'wwpqh', 26.63), (8, 76, 75.97, 'mjxij', 'wgeph', 52.84), (9, 55, 29.46, 'cqyyh', 'gukgs', 39.59), (10, 17, 66.65, 'ykirl', 'updzz', 32.35), (11, 18, 74.17, 'vzxxh', 'multc', 72.92), (12, 8, 80.76, 'dejrv', 'tqhsx', 93.13), (13, 42, 80.9, 'edwvt', 'axmci', 98.91)]}, 'trx1': {'table_0': [(1, 44, 94.67, 'cynbv', 'felsm', 97.81), (2, 98, 85.0, 'jqoyf', 'qeoyu', 11.04), (3, 61, 21.25, 'wsqjq', 'nosen', 96.17), (4, 28, 4.1, 'gsnin', 'jsbfh', 1.17), (5, 42, 46.08, 'cNsVU', 'ftnuj', 62.12), (6, 79, 62.86, 'ntdzk', 'fpwqm', 23.56), (7, 8, 78.81, 'ypdrz', 'wwpqh', 26.63), (8, 76, 75.97, 'mjxij', 'wgeph', 52.84), (9, 55, 85.26, 'cqyyh', 'gukgs', 39.59), (10, 17, 29.73, 'rtbED', 'UvIDx', 75.56), (11, 18, 74.17, 'vzxxh', 'multc', 72.92), (12, 8, 80.76, 'dejrv', 'tqhsx', 93.13), (13, 42, 80.9, 'edwvt', 'axmci', 98.91), (14, 89, 36.76, 'HFuqV', 'EkJaf', 1.64), (15, 55, 64.88, 'CJZsH', 'XmmsS', 47.35), (16, 57, 80.64, 'bGNnN', 'KXDuc', 60.43), (17, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)]}, 'trx2': {'table_0': [(1, 44, 94.67, 'cynbv', 'felsm', 97.81), (2, 98, 85.0, 'jqoyf', 'qeoyu', 11.04), (3, 61, 21.25, 'wsqjq', 'nosen', 96.17), (4, 28, 4.1, 'gsnin', 'jsbfh', 1.17), (5, 57, 45.73, 'evbcu', 'ftnuj', 4.02), (6, 79, 62.86, 'ntdzk', 'fpwqm', 23.56), (7, 8, 78.81, 'ypdrz', 'wwpqh', 26.63), (8, 76, 75.97, 'mjxij', 'wgeph', 52.84), (9, 55, 29.46, 'cqyyh', 'gukgs', 39.59), (10, 17, 66.65, 'ykirl', 'updzz', 32.35), (11, 18, 74.17, 'vzxxh', 'multc', 72.92), (12, 8, 80.76, 'dejrv', 'tqhsx', 93.13), (13, 42, 80.9, 'edwvt', 'axmci', 98.91), (18, 29, 6.74, 'braRR', 'XNoNy', 65.06)]}, 'serial': {'table_0': [(1, 44, 94.67, 'cynbv', 'felsm', 97.81), (2, 98, 85.0, 'jqoyf', 'qeoyu', 11.04), (3, 61, 21.25, 'wsqjq', 'nosen', 96.17), (4, 28, 4.1, 'gsnin', 'jsbfh', 1.17), (5, 42, 46.08, 'cNsVU', 'ftnuj', 62.12), (6, 79, 62.86, 'ntdzk', 'fpwqm', 23.56), (7, 8, 78.81, 'ypdrz', 'wwpqh', 26.63), (8, 76, 75.97, 'mjxij', 'wgeph', 52.84), (9, 55, 85.26, 'cqyyh', 'gukgs', 39.59), (10, 17, 29.73, 'rtbED', 'UvIDx', 75.56), (11, 18, 74.17, 'vzxxh', 'multc', 72.92), (12, 8, 80.76, 'dejrv', 'tqhsx', 93.13), (13, 42, 80.9, 'edwvt', 'axmci', 98.91), (19, 29, 6.74, 'braRR', 'XNoNy', 65.06), (20, 89, 36.76, 'HFuqV', 'EkJaf', 1.64), (21, 55, 64.88, 'CJZsH', 'XmmsS', 47.35), (22, 57, 80.64, 'bGNnN', 'KXDuc', 60.43), (23, 11, 91.59, 'uSkNC', 'bZnnP', 9.4)]}}
2025-02-05 00:09:43,657 - 
2025-02-05 00:09:43,669 - iter: 85
2025-02-05 00:09:45,152 - table table_0 has 5 rows
2025-02-05 00:09:45,153 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 00:09:45,153 - lock_same_resource: False
2025-02-05 00:09:45,153 - 
2025-02-05 00:09:45,153 - non intersection phase1
2025-02-05 00:09:45,153 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:09:45,153 - 事务2在第一阶段自己加的锁: S
2025-02-05 00:09:45,153 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:09:45,153 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:09:45,156 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:09:45,158 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:45,158 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:09:45,161 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:09:45,162 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:45,162 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'col_0, col_428'}
2025-02-05 00:09:45,162 - non intersection phase1 end
2025-02-05 00:09:45,163 - 
2025-02-05 00:09:45,163 - non intersection phase2
2025-02-05 00:09:45,166 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:09:45,167 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:45,168 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:09:45,171 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:09:45,172 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:45,173 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:09:45,173 - non intersection phase2 end
2025-02-05 00:09:45,173 - 
2025-02-05 00:09:45,173 - 生成死锁事务序列成功如下
2025-02-05 00:09:45,173 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0, col_428 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:09:46,726 - 创建事务1连接成功
2025-02-05 00:09:46,728 - 执行事务1语句: BEGIN
2025-02-05 00:09:46,729 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:09:46,730 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:09:46,730 - 执行事务1语句: COMMIT;
2025-02-05 00:09:46,735 - 执行事务1成功
2025-02-05 00:09:49,341 - 恢复初始状态成功
2025-02-05 00:09:50,118 - 创建事务2连接成功
2025-02-05 00:09:50,120 - 执行事务2语句: BEGIN
2025-02-05 00:09:50,121 - 执行事务2语句: SELECT col_0, col_428 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:09:50,121 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:09:50,122 - 执行事务2语句: COMMIT;
2025-02-05 00:09:50,126 - 执行事务2成功
2025-02-05 00:09:55,043 - 
2025-02-05 00:09:55,043 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT col_0, col_428 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-626, started 37440)>, 1738685395.0432186)}
2025-02-05 00:09:55,154 - stmt_idx: 2, status: success, result: None
2025-02-05 00:09:55,154 - 成功执行序列中事务2语句: SELECT col_0, col_428 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:09:55,154 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:09:55,154 - 
2025-02-05 00:09:55,262 - 
2025-02-05 00:09:55,263 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-627, started 38696)>, 1738685395.2628992)}
2025-02-05 00:09:55,371 - stmt_idx: 3, status: success, result: None
2025-02-05 00:09:55,371 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:09:55,371 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:09:55,371 - 
2025-02-05 00:09:55,481 - 
2025-02-05 00:09:55,482 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-628, started 18968)>, 1738685395.4818635)}
2025-02-05 00:09:55,590 - wait for lock, trx_id: 2, stmt: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:09:55,590 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-628, started 18968)>, 1738685395.4818635)}
2025-02-05 00:09:55,591 - 
2025-02-05 00:09:55,697 - 
2025-02-05 00:09:55,698 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-628, started 18968)>, 1738685395.4818635), 5: (1, 'SELECT id, col_1 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-629, started 21156)>, 1738685395.6972086)}
2025-02-05 00:09:55,700 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:09:55,805 - stmt_idx: 4, status: success, result: None
2025-02-05 00:09:55,805 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:09:55,805 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:09:55,911 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:09:55,911 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_1 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:09:55,911 - 错误: dictionary changed size during iteration
2025-02-05 00:09:55,914 - 执行序列成功
2025-02-05 00:09:56,733 - is_atomic: True
2025-02-05 00:09:56,733 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:09:56,733 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0, col_428 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-05 00:09:56,733 - snapshots: {'before': {'table_0': [(1, 'ilbwx', 14.91, None), (2, 'azuqf', 46.53, None), (3, 'lurma', 49.57, None), (4, 'rsflf', 43.45, None), (5, 'jectc', 65.18, None)]}, 'trx1': {'table_0': [(1, 'ilbwx', 14.91, None), (2, 'azuqf', 46.53, None), (3, 'lurma', 49.57, None), (4, 'rsflf', 43.45, None), (5, 'jectc', 65.18, None)]}, 'trx2': {'table_0': [(1, 'ilbwx', 14.91, None), (2, 'azuqf', 46.53, None), (3, 'lurma', 49.57, None), (4, 'rsflf', 43.45, None), (5, 'jectc', 65.18, None)]}, 'serial': {'table_0': [(1, 'ilbwx', 14.91, None), (2, 'azuqf', 46.53, None), (3, 'lurma', 49.57, None), (4, 'rsflf', 43.45, None), (5, 'jectc', 65.18, None)]}}
2025-02-05 00:09:56,733 - 
2025-02-05 00:09:56,756 - iter: 86
2025-02-05 00:09:58,270 - table table_0 has 10 rows
2025-02-05 00:09:58,271 - res_dict: {'trx1_lock_row_ids': [6, 7, 8, 9, 10], 'trx2_lock_row_ids': [3], 'intersection_row_ids': []}
2025-02-05 00:09:58,271 - lock_same_resource: False
2025-02-05 00:09:58,271 - 
2025-02-05 00:09:58,271 - non intersection phase1
2025-02-05 00:09:58,271 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:09:58,271 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:09:58,271 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:09:58,271 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 00:09:58,274 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=10
2025-02-05 00:09:58,275 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:58,275 - params: {'v1': '7', 'v2': '11', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3'}
2025-02-05 00:09:58,278 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:09:58,279 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:09:58,279 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': "NULL, 82, 59.69, 'cuYcR', 'QOirl'", 'table': 'table_0'}
2025-02-05 00:09:58,280 - non intersection phase1 end
2025-02-05 00:09:58,280 - 
2025-02-05 00:09:58,280 - non intersection phase2
2025-02-05 00:09:58,283 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:09:58,284 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:09:58,284 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_3'}
2025-02-05 00:09:58,287 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=6, is_continuous=True, range_end_idx=8
2025-02-05 00:09:58,288 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:09:58,288 - params: {'v1': '7', 'set_expr': "col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26", 'table': 'table_0', 'v2': '9'}
2025-02-05 00:09:58,288 - non intersection phase2 end
2025-02-05 00:09:58,289 - 
2025-02-05 00:09:58,289 - 生成死锁事务序列成功如下
2025-02-05 00:09:58,289 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 82, 59.69, 'cuYcR', 'QOirl')"), (2, "UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8"), (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:09:59,858 - 创建事务1连接成功
2025-02-05 00:09:59,860 - 执行事务1语句: BEGIN
2025-02-05 00:09:59,861 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE
2025-02-05 00:09:59,862 - 执行事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:09:59,862 - 执行事务1语句: COMMIT;
2025-02-05 00:09:59,866 - 执行事务1成功
2025-02-05 00:10:02,493 - 恢复初始状态成功
2025-02-05 00:10:03,278 - 创建事务2连接成功
2025-02-05 00:10:03,279 - 执行事务2语句: BEGIN
2025-02-05 00:10:03,280 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 82, 59.69, 'cuYcR', 'QOirl')
2025-02-05 00:10:03,281 - 执行事务2语句: UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8
2025-02-05 00:10:03,283 - 执行事务2语句: COMMIT;
2025-02-05 00:10:03,288 - 执行事务2成功
2025-02-05 00:10:08,296 - 
2025-02-05 00:10:08,296 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE', <Thread(Thread-630, started 37520)>, 1738685408.2964494)}
2025-02-05 00:10:08,399 - stmt_idx: 2, status: success, result: None
2025-02-05 00:10:08,399 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE
2025-02-05 00:10:08,399 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:10:08,399 - 
2025-02-05 00:10:08,509 - 
2025-02-05 00:10:08,510 - 执行前idx: 4, pending_stmts: {3: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 82, 59.69, 'cuYcR', 'QOirl')", <Thread(Thread-631, started 26620)>, 1738685408.5092788)}
2025-02-05 00:10:08,615 - stmt_idx: 3, status: success, result: None
2025-02-05 00:10:08,615 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 82, 59.69, 'cuYcR', 'QOirl')
2025-02-05 00:10:08,615 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:10:08,615 - 
2025-02-05 00:10:08,723 - 
2025-02-05 00:10:08,724 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8", <Thread(Thread-632, started 35768)>, 1738685408.723598)}
2025-02-05 00:10:08,832 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8
2025-02-05 00:10:08,832 - 执行后idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8", <Thread(Thread-632, started 35768)>, 1738685408.723598)}
2025-02-05 00:10:08,832 - 
2025-02-05 00:10:08,940 - 
2025-02-05 00:10:08,941 - 执行前idx: 6, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8", <Thread(Thread-632, started 35768)>, 1738685408.723598), 5: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-633, started 37240)>, 1738685408.9405534)}
2025-02-05 00:10:09,048 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8
2025-02-05 00:10:09,156 - stmt_idx: 5, status: success, result: None
2025-02-05 00:10:09,156 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 00:10:09,157 - 执行后idx: 6, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8", <Thread(Thread-632, started 35768)>, 1738685408.723598)}
2025-02-05 00:10:09,157 - 
2025-02-05 00:10:09,265 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, "UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8", <Thread(Thread-632, started 35768)>, 1738685408.723598)}
2025-02-05 00:10:09,265 - 
2025-02-05 00:10:09,266 - 执行前idx: 8, pending_stmts: {4: (2, "UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8", <Thread(Thread-632, stopped 35768)>, 1738685408.723598)}
2025-02-05 00:10:09,370 - stmt_idx: 4, status: success, result: None
2025-02-05 00:10:09,370 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8
2025-02-05 00:10:09,370 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8
2025-02-05 00:10:09,371 - 执行后idx: 8, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-634, started 41940)>, 1738685409.3710394)}
2025-02-05 00:10:09,371 - 
2025-02-05 00:10:09,477 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, 'COMMIT', <Thread(Thread-634, stopped 41940)>, 1738685409.3710394)}
2025-02-05 00:10:09,477 - 
2025-02-05 00:10:09,477 - 执行前idx: 8, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-634, stopped 41940)>, 1738685409.3710394)}
2025-02-05 00:10:09,588 - stmt_idx: 7, status: success, result: None
2025-02-05 00:10:09,588 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:10:09,588 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:10:09,588 - 
2025-02-05 00:10:09,699 - 执行序列成功
2025-02-05 00:10:10,494 - is_atomic: True
2025-02-05 00:10:10,494 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:10:10,494 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 10 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 82, 59.69, 'cuYcR', 'QOirl')"), (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_2 = 'LWakq', col_3 = 'pdJuK', col_1 = 94.26 WHERE id BETWEEN 6 AND 8"), (2, 'COMMIT')]
2025-02-05 00:10:10,494 - snapshots: {'before': {'table_0': [(1, 99, 88.34, 'ahbrm', 'oezmc'), (3, 14, 44.94, 'pcrya', 'bovyd'), (4, 4, 61.58, 'kfoiu', 'snhjr'), (5, 99, 94.24, 'jxbbm', 'lrwed'), (6, 35, 75.12, 'zpeae', 'flglb'), (7, 22, 99.32, 'tkouu', 'fsfhm'), (8, 17, 89.76, 'kcnfv', 'jqejv'), (9, 22, 22.25, 'tbjae', 'kcxdy'), (10, 51, 53.47, 'lvbdw', 'yvpzg'), (11, 92, 44.59, 'mvytj', 'wvswf')]}, 'trx1': {'table_0': [(1, 99, 88.34, 'ahbrm', 'oezmc'), (3, 14, 44.94, 'pcrya', 'bovyd'), (4, 4, 61.58, 'kfoiu', 'snhjr'), (5, 99, 94.24, 'jxbbm', 'lrwed'), (6, 35, 75.12, 'zpeae', 'flglb'), (7, 22, 99.32, 'tkouu', 'fsfhm'), (8, 17, 89.76, 'kcnfv', 'jqejv'), (9, 22, 22.25, 'tbjae', 'kcxdy'), (10, 51, 53.47, 'lvbdw', 'yvpzg'), (11, 92, 44.59, 'mvytj', 'wvswf')]}, 'trx2': {'table_0': [(1, 99, 88.34, 'ahbrm', 'oezmc'), (3, 14, 44.94, 'pcrya', 'bovyd'), (4, 4, 61.58, 'kfoiu', 'snhjr'), (5, 99, 94.24, 'jxbbm', 'lrwed'), (6, 35, 94.26, 'LWakq', 'pdJuK'), (7, 22, 94.26, 'LWakq', 'pdJuK'), (8, 17, 94.26, 'LWakq', 'pdJuK'), (9, 22, 22.25, 'tbjae', 'kcxdy'), (10, 51, 53.47, 'lvbdw', 'yvpzg'), (11, 92, 44.59, 'mvytj', 'wvswf'), (12, 82, 59.69, 'cuYcR', 'QOirl')]}, 'serial': {'table_0': [(1, 99, 88.34, 'ahbrm', 'oezmc'), (3, 14, 44.94, 'pcrya', 'bovyd'), (4, 4, 61.58, 'kfoiu', 'snhjr'), (5, 99, 94.24, 'jxbbm', 'lrwed'), (6, 35, 94.26, 'LWakq', 'pdJuK'), (7, 22, 94.26, 'LWakq', 'pdJuK'), (8, 17, 94.26, 'LWakq', 'pdJuK'), (9, 22, 22.25, 'tbjae', 'kcxdy'), (10, 51, 53.47, 'lvbdw', 'yvpzg'), (11, 92, 44.59, 'mvytj', 'wvswf'), (13, 82, 59.69, 'cuYcR', 'QOirl')]}}
2025-02-05 00:10:10,494 - 
2025-02-05 00:10:10,506 - iter: 87
2025-02-05 00:10:12,077 - table table_0 has 7 rows
2025-02-05 00:10:12,078 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 7]
2025-02-05 00:10:12,078 - trx2_lock_row_ids: [1, 2, 4, 5, 7]
2025-02-05 00:10:12,078 - intersection_row_ids: [1, 2, 4, 5, 7]
2025-02-05 00:10:12,078 - trx1_exclusive_ids: [3]
2025-02-05 00:10:12,078 - trx2_exclusive_ids: []
2025-02-05 00:10:12,078 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 7], 'trx2_lock_row_ids': [1, 2, 4, 5, 7], 'intersection_row_ids': [1, 2, 4, 5, 7]}
2025-02-05 00:10:12,078 - lock_same_resource: True
2025-02-05 00:10:12,078 - 
2025-02-05 00:10:12,078 - intersection phase1
2025-02-05 00:10:12,081 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,083 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:10:12,083 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'eKAzN', 'uWfMj', 'gJHZv'", 'table': 'table_0'}
2025-02-05 00:10:12,086 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,087 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:10:12,087 - params: {'set_expr': "col_2 = 'rAysg', col_1 = 'ntniS'", 'table': 'table_0', 'cond': "(col_1 = 'gcoqu') AND (col_3 = 'glrtp') AND (col_2 = 'elexz')"}
2025-02-05 00:10:12,090 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,091 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:10:12,092 - params: {'v1': '4', 'set_expr': "col_1 = 'vVDNb'", 'table': 'table_0', 'v2': '4'}
2025-02-05 00:10:12,095 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,096 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:10:12,096 - params: {'v1': '5', 'set_expr': "col_1 = 'NRzoC', col_2 = 'JpCkR', col_3 = 'QrZuI'", 'table': 'table_0', 'v2': '5'}
2025-02-05 00:10:12,099 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,100 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:10:12,100 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'RJDsK', 'yYLcc', 'EFfdR'", 'table': 'table_0'}
2025-02-05 00:10:12,104 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,106 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:12,106 - params: {'cond': "(col_2 = 'iilna') AND (col_3 = 'jxfdb') AND (col_1 = 'hrlfx')", 'table': 'table_0', 'select_cols': 'id, col_2, col_3'}
2025-02-05 00:10:12,109 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,111 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:12,111 - params: {'cond': "(col_2 = 'elexz') AND (col_3 = 'glrtp')", 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:10:12,115 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,116 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:12,116 - params: {'cond': "(col_3 = 'ddatm') AND (col_1 = 'zsvqa') AND (col_2 = 'xldvh')", 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-05 00:10:12,120 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,122 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:12,122 - params: {'cond': "(col_3 = 'nmksc')", 'table': 'table_0', 'select_cols': 'id, col_1, col_3'}
2025-02-05 00:10:12,125 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,126 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:12,126 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_1, col_3'}
2025-02-05 00:10:12,127 - intersection phase1 end
2025-02-05 00:10:12,127 - 
2025-02-05 00:10:12,127 - intersection phase2
2025-02-05 00:10:12,127 - 事务1在第二阶段自己加的锁: S
2025-02-05 00:10:12,127 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:10:12,127 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:10:12,127 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:10:12,132 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,133 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:12,134 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_3'}
2025-02-05 00:10:12,134 - intersection phase2 end
2025-02-05 00:10:12,134 - 
2025-02-05 00:10:12,134 - intersection phase3
2025-02-05 00:10:12,138 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:10:12,140 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:10:12,140 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 'DHNAd', 'ZdJil', 'uFatU'", 'table': 'table_0'}
2025-02-05 00:10:12,140 - intersection phase3 end
2025-02-05 00:10:12,140 - 
2025-02-05 00:10:12,140 - 生成死锁事务序列成功如下
2025-02-05 00:10:12,140 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'iilna') AND (col_3 = 'jxfdb') AND (col_1 = 'hrlfx') LOCK IN SHARE MODE"), (2, "SELECT * FROM table_0 WHERE (col_2 = 'elexz') AND (col_3 = 'glrtp') LOCK IN SHARE MODE"), (2, "SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ddatm') AND (col_1 = 'zsvqa') AND (col_2 = 'xldvh') LOCK IN SHARE MODE"), (2, "SELECT id, col_1, col_3 FROM table_0 WHERE (col_3 = 'nmksc') LOCK IN SHARE MODE"), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')"), (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 'rAysg', col_1 = 'ntniS' WHERE (col_1 = 'gcoqu') AND (col_3 = 'glrtp') AND (col_2 = 'elexz')"), (1, "UPDATE table_0 SET col_1 = 'vVDNb' WHERE id BETWEEN 4 AND 4"), (1, "UPDATE table_0 SET col_1 = 'NRzoC', col_2 = 'JpCkR', col_3 = 'QrZuI' WHERE id BETWEEN 5 AND 5"), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'RJDsK', 'yYLcc', 'EFfdR')"), (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (2, None), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'DHNAd', 'ZdJil', 'uFatU')"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:10:13,715 - 创建事务1连接成功
2025-02-05 00:10:13,717 - 执行事务1语句: BEGIN
2025-02-05 00:10:13,718 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')
2025-02-05 00:10:13,719 - 执行事务1语句: UPDATE table_0 SET col_2 = 'rAysg', col_1 = 'ntniS' WHERE (col_1 = 'gcoqu') AND (col_3 = 'glrtp') AND (col_2 = 'elexz')
2025-02-05 00:10:13,719 - 执行事务1语句: UPDATE table_0 SET col_1 = 'vVDNb' WHERE id BETWEEN 4 AND 4
2025-02-05 00:10:13,720 - 执行事务1语句: UPDATE table_0 SET col_1 = 'NRzoC', col_2 = 'JpCkR', col_3 = 'QrZuI' WHERE id BETWEEN 5 AND 5
2025-02-05 00:10:13,721 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'RJDsK', 'yYLcc', 'EFfdR')
2025-02-05 00:10:13,722 - 执行事务1语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:10:13,723 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'DHNAd', 'ZdJil', 'uFatU')
2025-02-05 00:10:13,725 - 执行事务1语句: COMMIT;
2025-02-05 00:10:13,730 - 执行事务1成功
2025-02-05 00:10:16,349 - 恢复初始状态成功
2025-02-05 00:10:17,110 - 创建事务2连接成功
2025-02-05 00:10:17,112 - 执行事务2语句: BEGIN
2025-02-05 00:10:17,113 - 执行事务2语句: SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'iilna') AND (col_3 = 'jxfdb') AND (col_1 = 'hrlfx') LOCK IN SHARE MODE
2025-02-05 00:10:17,114 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_2 = 'elexz') AND (col_3 = 'glrtp') LOCK IN SHARE MODE
2025-02-05 00:10:17,115 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ddatm') AND (col_1 = 'zsvqa') AND (col_2 = 'xldvh') LOCK IN SHARE MODE
2025-02-05 00:10:17,115 - 执行事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE (col_3 = 'nmksc') LOCK IN SHARE MODE
2025-02-05 00:10:17,116 - 执行事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:10:17,117 - 执行事务2语句: COMMIT;
2025-02-05 00:10:17,121 - 执行事务2成功
2025-02-05 00:10:22,050 - 
2025-02-05 00:10:22,050 - 执行前idx: 3, pending_stmts: {2: (2, "SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'iilna') AND (col_3 = 'jxfdb') AND (col_1 = 'hrlfx') LOCK IN SHARE MODE", <Thread(Thread-635, started 40860)>, 1738685422.0509446)}
2025-02-05 00:10:22,157 - stmt_idx: 2, status: success, result: None
2025-02-05 00:10:22,157 - 成功执行序列中事务2语句: SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'iilna') AND (col_3 = 'jxfdb') AND (col_1 = 'hrlfx') LOCK IN SHARE MODE
2025-02-05 00:10:22,157 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:10:22,157 - 
2025-02-05 00:10:22,267 - 
2025-02-05 00:10:22,267 - 执行前idx: 4, pending_stmts: {3: (2, "SELECT * FROM table_0 WHERE (col_2 = 'elexz') AND (col_3 = 'glrtp') LOCK IN SHARE MODE", <Thread(Thread-636, started 1928)>, 1738685422.2674136)}
2025-02-05 00:10:22,375 - stmt_idx: 3, status: success, result: None
2025-02-05 00:10:22,375 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_2 = 'elexz') AND (col_3 = 'glrtp') LOCK IN SHARE MODE
2025-02-05 00:10:22,375 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:10:22,375 - 
2025-02-05 00:10:22,481 - 
2025-02-05 00:10:22,482 - 执行前idx: 5, pending_stmts: {4: (2, "SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ddatm') AND (col_1 = 'zsvqa') AND (col_2 = 'xldvh') LOCK IN SHARE MODE", <Thread(Thread-637, started 11736)>, 1738685422.4819372)}
2025-02-05 00:10:22,591 - stmt_idx: 4, status: success, result: None
2025-02-05 00:10:22,591 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ddatm') AND (col_1 = 'zsvqa') AND (col_2 = 'xldvh') LOCK IN SHARE MODE
2025-02-05 00:10:22,591 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:10:22,591 - 
2025-02-05 00:10:22,700 - 
2025-02-05 00:10:22,701 - 执行前idx: 6, pending_stmts: {5: (2, "SELECT id, col_1, col_3 FROM table_0 WHERE (col_3 = 'nmksc') LOCK IN SHARE MODE", <Thread(Thread-638, started 31512)>, 1738685422.700657)}
2025-02-05 00:10:22,807 - stmt_idx: 5, status: success, result: None
2025-02-05 00:10:22,807 - 成功执行序列中事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE (col_3 = 'nmksc') LOCK IN SHARE MODE
2025-02-05 00:10:22,807 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:10:22,807 - 
2025-02-05 00:10:22,913 - 
2025-02-05 00:10:22,914 - 执行前idx: 7, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')", <Thread(Thread-639, started 18000)>, 1738685422.9138997)}
2025-02-05 00:10:23,022 - wait for lock, trx_id: 1, stmt: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')
2025-02-05 00:10:23,023 - 执行后idx: 7, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')", <Thread(Thread-639, started 18000)>, 1738685422.9138997)}
2025-02-05 00:10:23,023 - 
2025-02-05 00:10:23,131 - 
2025-02-05 00:10:23,132 - 执行前idx: 8, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')", <Thread(Thread-639, started 18000)>, 1738685422.9138997), 7: (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-640, started 12696)>, 1738685423.1310875)}
2025-02-05 00:10:23,240 - wait for lock, trx_id: 1, stmt: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')
2025-02-05 00:10:23,350 - stmt_idx: 7, status: success, result: None
2025-02-05 00:10:23,350 - 成功执行序列中事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:10:23,350 - 执行后idx: 8, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')", <Thread(Thread-639, started 18000)>, 1738685422.9138997)}
2025-02-05 00:10:23,350 - 
2025-02-05 00:10:23,458 - stmt为None, trx_id: 2, stmt: None
2025-02-05 00:10:23,461 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')", <Thread(Thread-639, started 18000)>, 1738685422.9138997)}
2025-02-05 00:10:23,461 - 
2025-02-05 00:10:23,461 - 执行前idx: 17, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')", <Thread(Thread-639, stopped 18000)>, 1738685422.9138997)}
2025-02-05 00:10:23,564 - stmt_idx: 6, status: success, result: None
2025-02-05 00:10:23,564 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')
2025-02-05 00:10:23,564 - 结束了阻塞，blocked_trx_id: 1, stmt: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')
2025-02-05 00:10:23,567 - 执行后idx: 17, pending_stmts: {8: (1, "UPDATE table_0 SET col_2 = 'rAysg', col_1 = 'ntniS' WHERE (col_1 = 'gcoqu') AND (col_3 = 'glrtp') AND (col_2 = 'elexz')", <Thread(Thread-641, started 36056)>, 1738685423.564903), 9: (1, "UPDATE table_0 SET col_1 = 'vVDNb' WHERE id BETWEEN 4 AND 4", <Thread(Thread-642, started 39676)>, 1738685423.5659013), 10: (1, "UPDATE table_0 SET col_1 = 'NRzoC', col_2 = 'JpCkR', col_3 = 'QrZuI' WHERE id BETWEEN 5 AND 5", <Thread(Thread-643, started 22272)>, 1738685423.5662062), 11: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'RJDsK', 'yYLcc', 'EFfdR')", <Thread(Thread-644, started 16064)>, 1738685423.5662062), 12: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-645, started 41156)>, 1738685423.5662062), 14: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'DHNAd', 'ZdJil', 'uFatU')", <Thread(Thread-646, started 1016)>, 1738685423.5667117), 15: (1, 'COMMIT', <Thread(Thread-647, started 34604)>, 1738685423.5671668)}
2025-02-05 00:10:23,567 - 
2025-02-05 00:10:23,673 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (1, "UPDATE table_0 SET col_2 = 'rAysg', col_1 = 'ntniS' WHERE (col_1 = 'gcoqu') AND (col_3 = 'glrtp') AND (col_2 = 'elexz')", <Thread(Thread-641, stopped 36056)>, 1738685423.564903), 9: (1, "UPDATE table_0 SET col_1 = 'vVDNb' WHERE id BETWEEN 4 AND 4", <Thread(Thread-642, stopped 39676)>, 1738685423.5659013), 10: (1, "UPDATE table_0 SET col_1 = 'NRzoC', col_2 = 'JpCkR', col_3 = 'QrZuI' WHERE id BETWEEN 5 AND 5", <Thread(Thread-643, stopped 22272)>, 1738685423.5662062), 11: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'RJDsK', 'yYLcc', 'EFfdR')", <Thread(Thread-644, stopped 16064)>, 1738685423.5662062), 12: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-645, stopped 41156)>, 1738685423.5662062), 14: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'DHNAd', 'ZdJil', 'uFatU')", <Thread(Thread-646, stopped 1016)>, 1738685423.5667117), 15: (1, 'COMMIT', <Thread(Thread-647, stopped 34604)>, 1738685423.5671668)}
2025-02-05 00:10:23,673 - 
2025-02-05 00:10:23,673 - 执行前idx: 17, pending_stmts: {8: (1, "UPDATE table_0 SET col_2 = 'rAysg', col_1 = 'ntniS' WHERE (col_1 = 'gcoqu') AND (col_3 = 'glrtp') AND (col_2 = 'elexz')", <Thread(Thread-641, stopped 36056)>, 1738685423.564903), 9: (1, "UPDATE table_0 SET col_1 = 'vVDNb' WHERE id BETWEEN 4 AND 4", <Thread(Thread-642, stopped 39676)>, 1738685423.5659013), 10: (1, "UPDATE table_0 SET col_1 = 'NRzoC', col_2 = 'JpCkR', col_3 = 'QrZuI' WHERE id BETWEEN 5 AND 5", <Thread(Thread-643, stopped 22272)>, 1738685423.5662062), 11: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'RJDsK', 'yYLcc', 'EFfdR')", <Thread(Thread-644, stopped 16064)>, 1738685423.5662062), 12: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-645, stopped 41156)>, 1738685423.5662062), 14: (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'DHNAd', 'ZdJil', 'uFatU')", <Thread(Thread-646, stopped 1016)>, 1738685423.5667117), 15: (1, 'COMMIT', <Thread(Thread-647, stopped 34604)>, 1738685423.5671668)}
2025-02-05 00:10:23,782 - stmt_idx: 8, status: success, result: None
2025-02-05 00:10:23,782 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'rAysg', col_1 = 'ntniS' WHERE (col_1 = 'gcoqu') AND (col_3 = 'glrtp') AND (col_2 = 'elexz')
2025-02-05 00:10:23,893 - stmt_idx: 9, status: success, result: None
2025-02-05 00:10:23,893 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'vVDNb' WHERE id BETWEEN 4 AND 4
2025-02-05 00:10:24,004 - stmt_idx: 10, status: success, result: None
2025-02-05 00:10:24,004 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'NRzoC', col_2 = 'JpCkR', col_3 = 'QrZuI' WHERE id BETWEEN 5 AND 5
2025-02-05 00:10:24,114 - stmt_idx: 11, status: success, result: None
2025-02-05 00:10:24,114 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'RJDsK', 'yYLcc', 'EFfdR')
2025-02-05 00:10:24,222 - stmt_idx: 12, status: success, result: None
2025-02-05 00:10:24,222 - 成功执行序列中事务1语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:10:24,327 - stmt_idx: 14, status: success, result: None
2025-02-05 00:10:24,327 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'DHNAd', 'ZdJil', 'uFatU')
2025-02-05 00:10:24,436 - stmt_idx: 15, status: success, result: None
2025-02-05 00:10:24,436 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:10:24,436 - 执行后idx: 17, pending_stmts: {}
2025-02-05 00:10:24,437 - 
2025-02-05 00:10:24,546 - 执行序列成功
2025-02-05 00:10:25,321 - is_atomic: True
2025-02-05 00:10:25,321 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:10:25,321 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'iilna') AND (col_3 = 'jxfdb') AND (col_1 = 'hrlfx') LOCK IN SHARE MODE"), (2, "SELECT * FROM table_0 WHERE (col_2 = 'elexz') AND (col_3 = 'glrtp') LOCK IN SHARE MODE"), (2, "SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ddatm') AND (col_1 = 'zsvqa') AND (col_2 = 'xldvh') LOCK IN SHARE MODE"), (2, "SELECT id, col_1, col_3 FROM table_0 WHERE (col_3 = 'nmksc') LOCK IN SHARE MODE"), (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'eKAzN', 'uWfMj', 'gJHZv')"), (1, "UPDATE table_0 SET col_2 = 'rAysg', col_1 = 'ntniS' WHERE (col_1 = 'gcoqu') AND (col_3 = 'glrtp') AND (col_2 = 'elexz')"), (1, "UPDATE table_0 SET col_1 = 'vVDNb' WHERE id BETWEEN 4 AND 4"), (1, "UPDATE table_0 SET col_1 = 'NRzoC', col_2 = 'JpCkR', col_3 = 'QrZuI' WHERE id BETWEEN 5 AND 5"), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'RJDsK', 'yYLcc', 'EFfdR')"), (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 'DHNAd', 'ZdJil', 'uFatU')"), (1, 'COMMIT')]
2025-02-05 00:10:25,321 - snapshots: {'before': {'table_0': [(1, 'hrlfx', 'iilna', 'jxfdb'), (2, 'gcoqu', 'elexz', 'glrtp'), (3, 'qosjx', 'pijvo', 'owwxd'), (4, 'zsvqa', 'xldvh', 'ddatm'), (5, 'tvver', 'wjtix', 'nmksc'), (6, 'ykpxk', 'yowyc', 'xdaol'), (7, 'whepi', 'brvvw', 'pyyga')]}, 'trx1': {'table_0': [(1, 'hrlfx', 'iilna', 'jxfdb'), (2, 'ntniS', 'rAysg', 'glrtp'), (3, 'qosjx', 'pijvo', 'owwxd'), (4, 'vVDNb', 'xldvh', 'ddatm'), (5, 'NRzoC', 'JpCkR', 'QrZuI'), (6, 'ykpxk', 'yowyc', 'xdaol'), (7, 'whepi', 'brvvw', 'pyyga'), (8, 'eKAzN', 'uWfMj', 'gJHZv'), (9, 'RJDsK', 'yYLcc', 'EFfdR'), (10, 'DHNAd', 'ZdJil', 'uFatU')]}, 'trx2': {'table_0': [(1, 'hrlfx', 'iilna', 'jxfdb'), (2, 'gcoqu', 'elexz', 'glrtp'), (3, 'qosjx', 'pijvo', 'owwxd'), (4, 'zsvqa', 'xldvh', 'ddatm'), (5, 'tvver', 'wjtix', 'nmksc'), (6, 'ykpxk', 'yowyc', 'xdaol'), (7, 'whepi', 'brvvw', 'pyyga')]}, 'serial': {'table_0': [(1, 'hrlfx', 'iilna', 'jxfdb'), (2, 'ntniS', 'rAysg', 'glrtp'), (3, 'qosjx', 'pijvo', 'owwxd'), (4, 'vVDNb', 'xldvh', 'ddatm'), (5, 'NRzoC', 'JpCkR', 'QrZuI'), (6, 'ykpxk', 'yowyc', 'xdaol'), (7, 'whepi', 'brvvw', 'pyyga'), (11, 'eKAzN', 'uWfMj', 'gJHZv'), (12, 'RJDsK', 'yYLcc', 'EFfdR'), (13, 'DHNAd', 'ZdJil', 'uFatU')]}}
2025-02-05 00:10:25,321 - 
2025-02-05 00:10:25,333 - iter: 88
2025-02-05 00:10:26,843 - table table_0 has 9 rows
2025-02-05 00:10:26,843 - trx1_lock_row_ids: [6, 7, 8, 9]
2025-02-05 00:10:26,843 - trx2_lock_row_ids: [3, 6, 8]
2025-02-05 00:10:26,843 - intersection_row_ids: [6, 8]
2025-02-05 00:10:26,843 - trx1_exclusive_ids: [7, 9]
2025-02-05 00:10:26,843 - trx2_exclusive_ids: [3]
2025-02-05 00:10:26,843 - res_dict: {'trx1_lock_row_ids': [6, 7, 8, 9], 'trx2_lock_row_ids': [3, 6, 8], 'intersection_row_ids': [6, 8]}
2025-02-05 00:10:26,843 - lock_same_resource: True
2025-02-05 00:10:26,843 - 
2025-02-05 00:10:26,843 - intersection phase1
2025-02-05 00:10:26,846 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=GAP, row_idx=6, is_continuous=True, range_end_idx=9
2025-02-05 00:10:26,848 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:26,848 - params: {'v1': '6', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:10:26,850 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:10:26,851 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:26,852 - params: {'cond': "(id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp')", 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:10:26,854 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:10:26,855 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:26,855 - params: {'cond': '(col_2 = 26.14)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:10:26,855 - intersection phase1 end
2025-02-05 00:10:26,855 - 
2025-02-05 00:10:26,855 - intersection phase2
2025-02-05 00:10:26,856 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:10:26,856 - 事务2在第二阶段自己加的锁: NK
2025-02-05 00:10:26,856 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 00:10:26,856 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 00:10:26,860 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:10:26,861 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:26,861 - params: {'cond': '(id = 7)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:10:26,864 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:10:26,865 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:26,865 - params: {'cond': '(col_2 = 8.92)', 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-05 00:10:26,869 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:10:26,870 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:10:26,870 - params: {'set_expr': "col_2 = 98.98, col_1 = 76.65, col_0 = 'LOICK'", 'table': 'table_0', 'cond': "(col_2 = 22.63) AND (col_1 = 40.6) AND (col_0 = 'dmovu')"}
2025-02-05 00:10:26,870 - intersection phase2 end
2025-02-05 00:10:26,870 - 
2025-02-05 00:10:26,870 - intersection phase3
2025-02-05 00:10:26,873 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:10:26,874 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:26,874 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'col_1, col_2'}
2025-02-05 00:10:26,878 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:10:26,880 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:10:26,880 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': "NULL, 'kiPxD', 92.73, 97.32", 'table': 'table_0'}
2025-02-05 00:10:26,880 - intersection phase3 end
2025-02-05 00:10:26,880 - 
2025-02-05 00:10:26,880 - 生成死锁事务序列成功如下
2025-02-05 00:10:26,880 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE'), (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 26.14) FOR UPDATE'), (2, "UPDATE table_0 SET col_2 = 98.98, col_1 = 76.65, col_0 = 'LOICK' WHERE (col_2 = 22.63) AND (col_1 = 40.6) AND (col_0 = 'dmovu')"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) FOR UPDATE'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (col_2 = 8.92) FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kiPxD', 92.73, 97.32)"), (1, 'SELECT col_1, col_2 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:10:28,423 - 创建事务1连接成功
2025-02-05 00:10:28,424 - 执行事务1语句: BEGIN
2025-02-05 00:10:28,425 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE
2025-02-05 00:10:28,426 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) FOR UPDATE
2025-02-05 00:10:28,427 - 执行事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE (col_2 = 8.92) FOR UPDATE
2025-02-05 00:10:28,428 - 执行事务1语句: SELECT col_1, col_2 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-05 00:10:28,429 - 执行事务1语句: COMMIT;
2025-02-05 00:10:28,433 - 执行事务1成功
2025-02-05 00:10:31,058 - 恢复初始状态成功
2025-02-05 00:10:31,835 - 创建事务2连接成功
2025-02-05 00:10:31,837 - 执行事务2语句: BEGIN
2025-02-05 00:10:31,838 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE
2025-02-05 00:10:31,838 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 26.14) FOR UPDATE
2025-02-05 00:10:31,839 - 执行事务2语句: UPDATE table_0 SET col_2 = 98.98, col_1 = 76.65, col_0 = 'LOICK' WHERE (col_2 = 22.63) AND (col_1 = 40.6) AND (col_0 = 'dmovu')
2025-02-05 00:10:31,840 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kiPxD', 92.73, 97.32)
2025-02-05 00:10:31,842 - 执行事务2语句: COMMIT;
2025-02-05 00:10:31,847 - 执行事务2成功
2025-02-05 00:10:36,787 - 
2025-02-05 00:10:36,787 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE', <Thread(Thread-648, started 23420)>, 1738685436.7875404)}
2025-02-05 00:10:36,900 - stmt_idx: 2, status: success, result: None
2025-02-05 00:10:36,900 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE
2025-02-05 00:10:36,900 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:10:36,900 - 
2025-02-05 00:10:37,008 - 
2025-02-05 00:10:37,008 - 执行前idx: 4, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447)}
2025-02-05 00:10:37,113 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE
2025-02-05 00:10:37,113 - 执行后idx: 4, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447)}
2025-02-05 00:10:37,113 - 
2025-02-05 00:10:37,222 - 
2025-02-05 00:10:37,223 - 执行前idx: 7, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447), 6: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) FOR UPDATE', <Thread(Thread-650, started 38116)>, 1738685437.2228863)}
2025-02-05 00:10:37,332 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE
2025-02-05 00:10:37,440 - stmt_idx: 6, status: success, result: None
2025-02-05 00:10:37,440 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) FOR UPDATE
2025-02-05 00:10:37,440 - 执行后idx: 7, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447)}
2025-02-05 00:10:37,441 - 
2025-02-05 00:10:37,549 - 
2025-02-05 00:10:37,549 - 执行前idx: 8, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447), 7: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (col_2 = 8.92) FOR UPDATE', <Thread(Thread-651, started 29588)>, 1738685437.5491033)}
2025-02-05 00:10:37,657 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE
2025-02-05 00:10:37,763 - stmt_idx: 7, status: success, result: None
2025-02-05 00:10:37,763 - 成功执行序列中事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE (col_2 = 8.92) FOR UPDATE
2025-02-05 00:10:37,763 - 执行后idx: 8, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447)}
2025-02-05 00:10:37,763 - 
2025-02-05 00:10:37,873 - 
2025-02-05 00:10:37,874 - 执行前idx: 10, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447), 9: (1, 'SELECT col_1, col_2 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE', <Thread(Thread-652, started 22276)>, 1738685437.8730977)}
2025-02-05 00:10:37,984 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE
2025-02-05 00:10:38,094 - stmt_idx: 9, status: success, result: None
2025-02-05 00:10:38,094 - 成功执行序列中事务1语句: SELECT col_1, col_2 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE
2025-02-05 00:10:38,094 - 执行后idx: 10, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447)}
2025-02-05 00:10:38,094 - 
2025-02-05 00:10:38,206 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, started 37480)>, 1738685437.0085447)}
2025-02-05 00:10:38,206 - 
2025-02-05 00:10:38,206 - 执行前idx: 12, pending_stmts: {3: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE", <Thread(Thread-649, stopped 37480)>, 1738685437.0085447)}
2025-02-05 00:10:38,312 - stmt_idx: 3, status: success, result: None
2025-02-05 00:10:38,312 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE
2025-02-05 00:10:38,312 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE
2025-02-05 00:10:38,314 - 执行后idx: 12, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 26.14) FOR UPDATE', <Thread(Thread-653, started 24548)>, 1738685438.313808), 5: (2, "UPDATE table_0 SET col_2 = 98.98, col_1 = 76.65, col_0 = 'LOICK' WHERE (col_2 = 22.63) AND (col_1 = 40.6) AND (col_0 = 'dmovu')", <Thread(Thread-654, started 31880)>, 1738685438.3144097), 8: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kiPxD', 92.73, 97.32)", <Thread(Thread-655, started 6276)>, 1738685438.3144097), 11: (2, 'COMMIT', <Thread(Thread-656, started 13836)>, 1738685438.3144097)}
2025-02-05 00:10:38,314 - 
2025-02-05 00:10:38,422 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 26.14) FOR UPDATE', <Thread(Thread-653, stopped 24548)>, 1738685438.313808), 5: (2, "UPDATE table_0 SET col_2 = 98.98, col_1 = 76.65, col_0 = 'LOICK' WHERE (col_2 = 22.63) AND (col_1 = 40.6) AND (col_0 = 'dmovu')", <Thread(Thread-654, stopped 31880)>, 1738685438.3144097), 8: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kiPxD', 92.73, 97.32)", <Thread(Thread-655, stopped 6276)>, 1738685438.3144097), 11: (2, 'COMMIT', <Thread(Thread-656, stopped 13836)>, 1738685438.3144097)}
2025-02-05 00:10:38,422 - 
2025-02-05 00:10:38,422 - 执行前idx: 12, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 26.14) FOR UPDATE', <Thread(Thread-653, stopped 24548)>, 1738685438.313808), 5: (2, "UPDATE table_0 SET col_2 = 98.98, col_1 = 76.65, col_0 = 'LOICK' WHERE (col_2 = 22.63) AND (col_1 = 40.6) AND (col_0 = 'dmovu')", <Thread(Thread-654, stopped 31880)>, 1738685438.3144097), 8: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kiPxD', 92.73, 97.32)", <Thread(Thread-655, stopped 6276)>, 1738685438.3144097), 11: (2, 'COMMIT', <Thread(Thread-656, stopped 13836)>, 1738685438.3144097)}
2025-02-05 00:10:38,530 - stmt_idx: 4, status: success, result: None
2025-02-05 00:10:38,530 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 26.14) FOR UPDATE
2025-02-05 00:10:38,640 - stmt_idx: 5, status: success, result: None
2025-02-05 00:10:38,640 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 98.98, col_1 = 76.65, col_0 = 'LOICK' WHERE (col_2 = 22.63) AND (col_1 = 40.6) AND (col_0 = 'dmovu')
2025-02-05 00:10:38,748 - stmt_idx: 8, status: success, result: None
2025-02-05 00:10:38,748 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kiPxD', 92.73, 97.32)
2025-02-05 00:10:38,858 - stmt_idx: 11, status: success, result: None
2025-02-05 00:10:38,858 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:10:38,858 - 执行后idx: 12, pending_stmts: {}
2025-02-05 00:10:38,858 - 
2025-02-05 00:10:38,967 - 执行序列成功
2025-02-05 00:10:39,728 - is_atomic: True
2025-02-05 00:10:39,728 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:10:39,728 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) FOR UPDATE'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (col_2 = 8.92) FOR UPDATE'), (1, 'SELECT col_1, col_2 FROM table_0 WHERE id >= 3 AND id <= 3 FOR UPDATE'), (1, 'COMMIT'), (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) AND (col_1 = 15.04) AND (col_0 = 'phyqp') FOR UPDATE"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 26.14) FOR UPDATE'), (2, "UPDATE table_0 SET col_2 = 98.98, col_1 = 76.65, col_0 = 'LOICK' WHERE (col_2 = 22.63) AND (col_1 = 40.6) AND (col_0 = 'dmovu')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'kiPxD', 92.73, 97.32)"), (2, 'COMMIT')]
2025-02-05 00:10:39,728 - snapshots: {'before': {'table_0': [(1, 'jfybc', 37.53, 81.66), (2, 'cnkwu', 9.44, 21.68), (3, 'dmovu', 40.6, 22.63), (4, 'eayzk', 1.28, 51.5), (5, 'aeeiu', 7.33, 8.14), (6, 'phyqp', 15.04, 8.7), (7, 'timlg', 53.5, 97.8), (8, 'ldwsi', 64.37, 26.14), (9, 'vdahl', 17.72, 8.92)]}, 'trx1': {'table_0': [(1, 'jfybc', 37.53, 81.66), (2, 'cnkwu', 9.44, 21.68), (3, 'dmovu', 40.6, 22.63), (4, 'eayzk', 1.28, 51.5), (5, 'aeeiu', 7.33, 8.14), (6, 'phyqp', 15.04, 8.7), (7, 'timlg', 53.5, 97.8), (8, 'ldwsi', 64.37, 26.14), (9, 'vdahl', 17.72, 8.92)]}, 'trx2': {'table_0': [(1, 'jfybc', 37.53, 81.66), (2, 'cnkwu', 9.44, 21.68), (3, 'dmovu', 40.6, 22.63), (4, 'eayzk', 1.28, 51.5), (5, 'aeeiu', 7.33, 8.14), (6, 'phyqp', 15.04, 8.7), (7, 'timlg', 53.5, 97.8), (8, 'ldwsi', 64.37, 26.14), (9, 'vdahl', 17.72, 8.92), (10, 'kiPxD', 92.73, 97.32)]}, 'serial': {'table_0': [(1, 'jfybc', 37.53, 81.66), (2, 'cnkwu', 9.44, 21.68), (3, 'dmovu', 40.6, 22.63), (4, 'eayzk', 1.28, 51.5), (5, 'aeeiu', 7.33, 8.14), (6, 'phyqp', 15.04, 8.7), (7, 'timlg', 53.5, 97.8), (8, 'ldwsi', 64.37, 26.14), (9, 'vdahl', 17.72, 8.92), (11, 'kiPxD', 92.73, 97.32)]}}
2025-02-05 00:10:39,728 - 
2025-02-05 00:10:39,739 - iter: 89
2025-02-05 00:10:41,202 - table table_0 has 5 rows
2025-02-05 00:10:41,202 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 00:10:41,202 - lock_same_resource: False
2025-02-05 00:10:41,202 - 
2025-02-05 00:10:41,202 - non intersection phase1
2025-02-05 00:10:41,202 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:10:41,203 - 事务2在第一阶段自己加的锁: S
2025-02-05 00:10:41,203 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:10:41,203 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:10:41,206 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 00:10:41,207 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:41,207 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'col_1, col_2'}
2025-02-05 00:10:41,210 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:10:41,211 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:41,211 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'col_0, col_1'}
2025-02-05 00:10:41,211 - non intersection phase1 end
2025-02-05 00:10:41,211 - 
2025-02-05 00:10:41,212 - non intersection phase2
2025-02-05 00:10:41,214 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:10:41,215 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:41,215 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:10:41,218 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 00:10:41,219 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:41,219 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_1, col_2'}
2025-02-05 00:10:41,219 - non intersection phase2 end
2025-02-05 00:10:41,219 - 
2025-02-05 00:10:41,219 - 生成死锁事务序列成功如下
2025-02-05 00:10:41,219 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:10:42,774 - 创建事务1连接成功
2025-02-05 00:10:42,776 - 执行事务1语句: BEGIN
2025-02-05 00:10:42,777 - 执行事务1语句: SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:10:42,778 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:10:42,779 - 执行事务1语句: COMMIT;
2025-02-05 00:10:42,784 - 执行事务1成功
2025-02-05 00:10:45,364 - 恢复初始状态成功
2025-02-05 00:10:46,114 - 创建事务2连接成功
2025-02-05 00:10:46,115 - 执行事务2语句: BEGIN
2025-02-05 00:10:46,116 - 执行事务2语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:10:46,117 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:10:46,117 - 执行事务2语句: COMMIT;
2025-02-05 00:10:46,122 - 执行事务2成功
2025-02-05 00:10:51,033 - 
2025-02-05 00:10:51,034 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-657, started 35052)>, 1738685451.0339775)}
2025-02-05 00:10:51,139 - stmt_idx: 2, status: success, result: None
2025-02-05 00:10:51,139 - 成功执行序列中事务2语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:10:51,139 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:10:51,139 - 
2025-02-05 00:10:51,247 - 
2025-02-05 00:10:51,248 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-658, started 41408)>, 1738685451.2470236)}
2025-02-05 00:10:51,354 - stmt_idx: 3, status: success, result: None
2025-02-05 00:10:51,354 - 成功执行序列中事务1语句: SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:10:51,354 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:10:51,354 - 
2025-02-05 00:10:51,463 - 
2025-02-05 00:10:51,463 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-659, started 41136)>, 1738685451.4633873)}
2025-02-05 00:10:51,570 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:10:51,570 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-659, started 41136)>, 1738685451.4633873)}
2025-02-05 00:10:51,570 - 
2025-02-05 00:10:51,678 - 
2025-02-05 00:10:51,678 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-659, started 41136)>, 1738685451.4633873), 5: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-660, started 14160)>, 1738685451.6780293)}
2025-02-05 00:10:51,680 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:10:51,784 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:10:51,784 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:10:51,784 - 错误: dictionary changed size during iteration
2025-02-05 00:10:51,787 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-660, stopped 14160)>, 1738685451.6780293)}
2025-02-05 00:10:51,787 - 
2025-02-05 00:10:51,787 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-660, stopped 14160)>, 1738685451.6780293)}
2025-02-05 00:10:51,893 - stmt_idx: 5, status: success, result: None
2025-02-05 00:10:51,893 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:10:51,893 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:10:51,893 - 
2025-02-05 00:10:52,003 - 执行序列成功
2025-02-05 00:10:52,806 - is_atomic: True
2025-02-05 00:10:52,806 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:10:52,807 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE')]
2025-02-05 00:10:52,807 - snapshots: {'before': {'table_0': [(1, 76.54, 1.41, 47.25), (2, 34.79, 60.78, 35.55), (3, 20.05, 13.47, 60.38), (4, 79.67, 77.72, 81.79), (5, 73.67, 29.26, 89.45)]}, 'trx1': {'table_0': [(1, 76.54, 1.41, 47.25), (2, 34.79, 60.78, 35.55), (3, 20.05, 13.47, 60.38), (4, 79.67, 77.72, 81.79), (5, 73.67, 29.26, 89.45)]}, 'trx2': {'table_0': [(1, 76.54, 1.41, 47.25), (2, 34.79, 60.78, 35.55), (3, 20.05, 13.47, 60.38), (4, 79.67, 77.72, 81.79), (5, 73.67, 29.26, 89.45)]}, 'serial': {'table_0': [(1, 76.54, 1.41, 47.25), (2, 34.79, 60.78, 35.55), (3, 20.05, 13.47, 60.38), (4, 79.67, 77.72, 81.79), (5, 73.67, 29.26, 89.45)]}}
2025-02-05 00:10:52,807 - 
2025-02-05 00:10:52,818 - iter: 90
2025-02-05 00:10:54,377 - table table_0 has 9 rows
2025-02-05 00:10:54,378 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6], 'trx2_lock_row_ids': [1, 7, 8, 9], 'intersection_row_ids': []}
2025-02-05 00:10:54,378 - lock_same_resource: False
2025-02-05 00:10:54,378 - 
2025-02-05 00:10:54,378 - non intersection phase1
2025-02-05 00:10:54,378 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:10:54,378 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:10:54,379 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:10:54,379 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:10:54,382 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=6
2025-02-05 00:10:54,383 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:54,383 - params: {'v1': '3', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3'}
2025-02-05 00:10:54,386 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:10:54,387 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:54,387 - params: {'cond': '(id = 1)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_3'}
2025-02-05 00:10:54,391 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:10:54,392 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:54,392 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3'}
2025-02-05 00:10:54,395 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:10:54,396 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:10:54,397 - params: {'set_expr': "col_3 = 94.85, col_0 = 'pPKOk', col_2 = 93, col_1 = 69.48", 'table': 'table_0', 'cond': "(id = 8) AND (col_1 = 32.65) AND (col_2 = 32) AND (col_0 = 'pshxy')"}
2025-02-05 00:10:54,401 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:10:54,402 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:10:54,402 - params: {'cond': '(col_2 = 32)', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:10:54,402 - non intersection phase1 end
2025-02-05 00:10:54,402 - 
2025-02-05 00:10:54,402 - non intersection phase2
2025-02-05 00:10:54,406 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:10:54,408 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:10:54,408 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': "NULL, 'OecFo', 90.59, 31, 88.45", 'table': 'table_0'}
2025-02-05 00:10:54,410 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 00:10:54,412 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:10:54,412 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:10:54,412 - non intersection phase2 end
2025-02-05 00:10:54,412 - 
2025-02-05 00:10:54,412 - 生成死锁事务序列成功如下
2025-02-05 00:10:54,412 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 1) FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, "UPDATE table_0 SET col_3 = 94.85, col_0 = 'pPKOk', col_2 = 93, col_1 = 69.48 WHERE (id = 8) AND (col_1 = 32.65) AND (col_2 = 32) AND (col_0 = 'pshxy')"), (2, 'SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'OecFo', 90.59, 31, 88.45)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:10:55,958 - 创建事务1连接成功
2025-02-05 00:10:55,960 - 执行事务1语句: BEGIN
2025-02-05 00:10:55,961 - 执行事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE
2025-02-05 00:10:55,961 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'OecFo', 90.59, 31, 88.45)
2025-02-05 00:10:55,963 - 执行事务1语句: COMMIT;
2025-02-05 00:10:55,968 - 执行事务1成功
2025-02-05 00:10:58,556 - 恢复初始状态成功
2025-02-05 00:10:59,314 - 创建事务2连接成功
2025-02-05 00:10:59,316 - 执行事务2语句: BEGIN
2025-02-05 00:10:59,316 - 执行事务2语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 1) FOR UPDATE
2025-02-05 00:10:59,317 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:10:59,318 - 执行事务2语句: UPDATE table_0 SET col_3 = 94.85, col_0 = 'pPKOk', col_2 = 93, col_1 = 69.48 WHERE (id = 8) AND (col_1 = 32.65) AND (col_2 = 32) AND (col_0 = 'pshxy')
2025-02-05 00:10:59,319 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE
2025-02-05 00:10:59,320 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 00:10:59,322 - 执行事务2语句: COMMIT;
2025-02-05 00:10:59,326 - 执行事务2成功
2025-02-05 00:11:04,288 - 
2025-02-05 00:11:04,288 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE', <Thread(Thread-661, started 41260)>, 1738685464.288362)}
2025-02-05 00:11:04,403 - stmt_idx: 2, status: success, result: None
2025-02-05 00:11:04,403 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE
2025-02-05 00:11:04,403 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:11:04,404 - 
2025-02-05 00:11:04,510 - 
2025-02-05 00:11:04,512 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 1) FOR UPDATE', <Thread(Thread-662, started 35760)>, 1738685464.5108864)}
2025-02-05 00:11:04,619 - stmt_idx: 3, status: success, result: None
2025-02-05 00:11:04,619 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 1) FOR UPDATE
2025-02-05 00:11:04,619 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:11:04,619 - 
2025-02-05 00:11:04,728 - 
2025-02-05 00:11:04,729 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-663, started 27424)>, 1738685464.728744)}
2025-02-05 00:11:04,837 - stmt_idx: 4, status: success, result: None
2025-02-05 00:11:04,837 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 00:11:04,837 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:11:04,837 - 
2025-02-05 00:11:04,947 - 
2025-02-05 00:11:04,948 - 执行前idx: 6, pending_stmts: {5: (2, "UPDATE table_0 SET col_3 = 94.85, col_0 = 'pPKOk', col_2 = 93, col_1 = 69.48 WHERE (id = 8) AND (col_1 = 32.65) AND (col_2 = 32) AND (col_0 = 'pshxy')", <Thread(Thread-664, started 19592)>, 1738685464.9470654)}
2025-02-05 00:11:05,056 - stmt_idx: 5, status: success, result: None
2025-02-05 00:11:05,057 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 94.85, col_0 = 'pPKOk', col_2 = 93, col_1 = 69.48 WHERE (id = 8) AND (col_1 = 32.65) AND (col_2 = 32) AND (col_0 = 'pshxy')
2025-02-05 00:11:05,057 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:11:05,057 - 
2025-02-05 00:11:05,163 - 
2025-02-05 00:11:05,163 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE', <Thread(Thread-665, started 13368)>, 1738685465.163262)}
2025-02-05 00:11:05,271 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE
2025-02-05 00:11:05,272 - 执行后idx: 7, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE', <Thread(Thread-665, started 13368)>, 1738685465.163262)}
2025-02-05 00:11:05,272 - 
2025-02-05 00:11:05,381 - 
2025-02-05 00:11:05,382 - 执行前idx: 9, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE', <Thread(Thread-665, started 13368)>, 1738685465.163262), 8: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'OecFo', 90.59, 31, 88.45)", <Thread(Thread-666, started 31624)>, 1738685465.3816397)}
2025-02-05 00:11:05,487 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE
2025-02-05 00:11:05,594 - stmt_idx: 8, status: success, result: None
2025-02-05 00:11:05,594 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'OecFo', 90.59, 31, 88.45)
2025-02-05 00:11:05,594 - 执行后idx: 9, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE', <Thread(Thread-665, started 13368)>, 1738685465.163262)}
2025-02-05 00:11:05,594 - 
2025-02-05 00:11:05,705 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, 'SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE', <Thread(Thread-665, started 13368)>, 1738685465.163262)}
2025-02-05 00:11:05,706 - 
2025-02-05 00:11:05,706 - 执行前idx: 11, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE', <Thread(Thread-665, stopped 13368)>, 1738685465.163262)}
2025-02-05 00:11:05,809 - stmt_idx: 6, status: success, result: None
2025-02-05 00:11:05,809 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE
2025-02-05 00:11:05,809 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE
2025-02-05 00:11:05,811 - 执行后idx: 11, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-667, started 38688)>, 1738685465.8105967), 10: (2, 'COMMIT', <Thread(Thread-668, started 36880)>, 1738685465.811002)}
2025-02-05 00:11:05,811 - 
2025-02-05 00:11:05,916 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-667, stopped 38688)>, 1738685465.8105967), 10: (2, 'COMMIT', <Thread(Thread-668, stopped 36880)>, 1738685465.811002)}
2025-02-05 00:11:05,916 - 
2025-02-05 00:11:05,916 - 执行前idx: 11, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-667, stopped 38688)>, 1738685465.8105967), 10: (2, 'COMMIT', <Thread(Thread-668, stopped 36880)>, 1738685465.811002)}
2025-02-05 00:11:06,025 - stmt_idx: 7, status: success, result: None
2025-02-05 00:11:06,025 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 00:11:06,133 - stmt_idx: 10, status: success, result: None
2025-02-05 00:11:06,133 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:11:06,133 - 执行后idx: 11, pending_stmts: {}
2025-02-05 00:11:06,133 - 
2025-02-05 00:11:06,242 - 执行序列成功
2025-02-05 00:11:07,006 - is_atomic: True
2025-02-05 00:11:07,006 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:11:07,006 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 1) FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, "UPDATE table_0 SET col_3 = 94.85, col_0 = 'pPKOk', col_2 = 93, col_1 = 69.48 WHERE (id = 8) AND (col_1 = 32.65) AND (col_2 = 32) AND (col_0 = 'pshxy')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'OecFo', 90.59, 31, 88.45)"), (1, 'COMMIT'), (2, 'SELECT * FROM table_0 WHERE (col_2 = 32) FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'COMMIT')]
2025-02-05 00:11:07,006 - snapshots: {'before': {'table_0': [(1, 'ljslo', 42.02, 52, 35.34), (2, 'xerpc', 17.65, 19, 51.36), (3, 'pltnl', 96.78, 81, 46.86), (4, 'txjui', 62.17, 21, 96.5), (5, 'zrebe', 86.54, 35, 97.01), (6, 'mnoef', 16.61, 60, 76.31), (7, 'ojkmk', 80.55, 32, 82.24), (8, 'pshxy', 32.65, 32, 13.91), (9, 'nblap', 76.9, 32, 4.42)]}, 'trx1': {'table_0': [(1, 'ljslo', 42.02, 52, 35.34), (2, 'xerpc', 17.65, 19, 51.36), (3, 'pltnl', 96.78, 81, 46.86), (4, 'txjui', 62.17, 21, 96.5), (5, 'zrebe', 86.54, 35, 97.01), (6, 'mnoef', 16.61, 60, 76.31), (7, 'ojkmk', 80.55, 32, 82.24), (8, 'pshxy', 32.65, 32, 13.91), (9, 'nblap', 76.9, 32, 4.42), (10, 'OecFo', 90.59, 31, 88.45)]}, 'trx2': {'table_0': [(1, 'ljslo', 42.02, 52, 35.34), (2, 'xerpc', 17.65, 19, 51.36), (3, 'pltnl', 96.78, 81, 46.86), (4, 'txjui', 62.17, 21, 96.5), (5, 'zrebe', 86.54, 35, 97.01), (6, 'mnoef', 16.61, 60, 76.31), (7, 'ojkmk', 80.55, 32, 82.24), (8, 'pPKOk', 69.48, 93, 94.85), (9, 'nblap', 76.9, 32, 4.42)]}, 'serial': {'table_0': [(1, 'ljslo', 42.02, 52, 35.34), (2, 'xerpc', 17.65, 19, 51.36), (3, 'pltnl', 96.78, 81, 46.86), (4, 'txjui', 62.17, 21, 96.5), (5, 'zrebe', 86.54, 35, 97.01), (6, 'mnoef', 16.61, 60, 76.31), (7, 'ojkmk', 80.55, 32, 82.24), (8, 'pPKOk', 69.48, 93, 94.85), (9, 'nblap', 76.9, 32, 4.42), (11, 'OecFo', 90.59, 31, 88.45)]}}
2025-02-05 00:11:07,006 - 
2025-02-05 00:11:07,017 - iter: 91
2025-02-05 00:11:08,481 - table table_0 has 5 rows
2025-02-05 00:11:08,481 - trx1_lock_row_ids: [1, 2, 3, 4, 5]
2025-02-05 00:11:08,482 - trx2_lock_row_ids: [3]
2025-02-05 00:11:08,482 - intersection_row_ids: [3]
2025-02-05 00:11:08,482 - trx1_exclusive_ids: [1, 2, 4, 5]
2025-02-05 00:11:08,482 - trx2_exclusive_ids: []
2025-02-05 00:11:08,482 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [3], 'intersection_row_ids': [3]}
2025-02-05 00:11:08,482 - lock_same_resource: True
2025-02-05 00:11:08,482 - 
2025-02-05 00:11:08,482 - intersection phase1
2025-02-05 00:11:08,485 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:11:08,486 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:11:08,486 - params: {'cond': '(id = 3)', 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-05 00:11:08,489 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:11:08,490 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:08,490 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'col_0'}
2025-02-05 00:11:08,490 - intersection phase1 end
2025-02-05 00:11:08,490 - 
2025-02-05 00:11:08,490 - intersection phase2
2025-02-05 00:11:08,491 - 事务1在第二阶段自己加的锁: X
2025-02-05 00:11:08,491 - 事务2在第二阶段自己加的锁: X
2025-02-05 00:11:08,491 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 00:11:08,491 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:11:08,495 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:11:08,496 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:11:08,496 - params: {'set_expr': "col_1 = 44.2, col_2 = 'irqMn', col_0 = 16.62", 'table': 'table_0', 'cond': '(col_0 = 35.34)'}
2025-02-05 00:11:08,498 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:11:08,500 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:08,500 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:11:08,504 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:11:08,505 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:11:08,505 - params: {'set_expr': "col_2 = 'qBgbk', col_0 = 34.73", 'table': 'table_0', 'cond': '(col_0 = 4.46)'}
2025-02-05 00:11:08,509 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:11:08,510 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:11:08,511 - params: {'set_expr': "col_1 = 3.42, col_2 = 'mQYpZ'", 'table': 'table_0', 'cond': '(id = 5)'}
2025-02-05 00:11:08,511 - intersection phase2 end
2025-02-05 00:11:08,511 - 
2025-02-05 00:11:08,511 - intersection phase3
2025-02-05 00:11:08,514 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:11:08,516 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:08,516 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': 'id, col_2'}
2025-02-05 00:11:08,516 - intersection phase3 end
2025-02-05 00:11:08,516 - 
2025-02-05 00:11:08,516 - 生成死锁事务序列成功如下
2025-02-05 00:11:08,517 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_1 = 44.2, col_2 = 'irqMn', col_0 = 16.62 WHERE (col_0 = 35.34)"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, "UPDATE table_0 SET col_2 = 'qBgbk', col_0 = 34.73 WHERE (col_0 = 4.46)"), (1, "UPDATE table_0 SET col_1 = 3.42, col_2 = 'mQYpZ' WHERE (id = 5)"), (2, None), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:11:10,050 - 创建事务1连接成功
2025-02-05 00:11:10,052 - 执行事务1语句: BEGIN
2025-02-05 00:11:10,053 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 00:11:10,053 - 执行事务1语句: UPDATE table_0 SET col_1 = 44.2, col_2 = 'irqMn', col_0 = 16.62 WHERE (col_0 = 35.34)
2025-02-05 00:11:10,054 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:11:10,055 - 执行事务1语句: UPDATE table_0 SET col_2 = 'qBgbk', col_0 = 34.73 WHERE (col_0 = 4.46)
2025-02-05 00:11:10,055 - 执行事务1语句: UPDATE table_0 SET col_1 = 3.42, col_2 = 'mQYpZ' WHERE (id = 5)
2025-02-05 00:11:10,056 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:11:10,058 - 执行事务1语句: COMMIT;
2025-02-05 00:11:10,062 - 执行事务1成功
2025-02-05 00:11:12,632 - 恢复初始状态成功
2025-02-05 00:11:13,386 - 创建事务2连接成功
2025-02-05 00:11:13,387 - 执行事务2语句: BEGIN
2025-02-05 00:11:13,388 - 执行事务2语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 00:11:13,389 - 执行事务2语句: COMMIT;
2025-02-05 00:11:13,394 - 执行事务2成功
2025-02-05 00:11:18,298 - 
2025-02-05 00:11:18,298 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-669, started 37380)>, 1738685478.2985597)}
2025-02-05 00:11:18,410 - stmt_idx: 2, status: success, result: None
2025-02-05 00:11:18,410 - 成功执行序列中事务2语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 00:11:18,410 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:11:18,410 - 
2025-02-05 00:11:18,523 - 
2025-02-05 00:11:18,524 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-670, started 33132)>, 1738685478.5230556)}
2025-02-05 00:11:18,632 - wait for lock, trx_id: 1, stmt: SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 00:11:18,632 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-670, started 33132)>, 1738685478.5230556)}
2025-02-05 00:11:18,632 - 
2025-02-05 00:11:18,739 - stmt为None, trx_id: 2, stmt: None
2025-02-05 00:11:18,742 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-670, started 33132)>, 1738685478.5230556)}
2025-02-05 00:11:18,742 - 
2025-02-05 00:11:18,742 - 执行前idx: 12, pending_stmts: {3: (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-670, stopped 33132)>, 1738685478.5230556)}
2025-02-05 00:11:18,845 - stmt_idx: 3, status: success, result: None
2025-02-05 00:11:18,845 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 00:11:18,845 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 00:11:18,847 - 执行后idx: 12, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 44.2, col_2 = 'irqMn', col_0 = 16.62 WHERE (col_0 = 35.34)", <Thread(Thread-671, started 17056)>, 1738685478.8459883), 5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-672, started 25564)>, 1738685478.8459883), 6: (1, "UPDATE table_0 SET col_2 = 'qBgbk', col_0 = 34.73 WHERE (col_0 = 4.46)", <Thread(Thread-673, started 14988)>, 1738685478.8465016), 7: (1, "UPDATE table_0 SET col_1 = 3.42, col_2 = 'mQYpZ' WHERE (id = 5)", <Thread(Thread-674, started 28428)>, 1738685478.8470054), 9: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-675, started 11440)>, 1738685478.8470054), 10: (1, 'COMMIT', <Thread(Thread-676, started 18192)>, 1738685478.8474796)}
2025-02-05 00:11:18,847 - 
2025-02-05 00:11:18,953 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "UPDATE table_0 SET col_1 = 44.2, col_2 = 'irqMn', col_0 = 16.62 WHERE (col_0 = 35.34)", <Thread(Thread-671, stopped 17056)>, 1738685478.8459883), 5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-672, stopped 25564)>, 1738685478.8459883), 6: (1, "UPDATE table_0 SET col_2 = 'qBgbk', col_0 = 34.73 WHERE (col_0 = 4.46)", <Thread(Thread-673, stopped 14988)>, 1738685478.8465016), 7: (1, "UPDATE table_0 SET col_1 = 3.42, col_2 = 'mQYpZ' WHERE (id = 5)", <Thread(Thread-674, stopped 28428)>, 1738685478.8470054), 9: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-675, stopped 11440)>, 1738685478.8470054), 10: (1, 'COMMIT', <Thread(Thread-676, stopped 18192)>, 1738685478.8474796)}
2025-02-05 00:11:18,953 - 
2025-02-05 00:11:18,953 - 执行前idx: 12, pending_stmts: {4: (1, "UPDATE table_0 SET col_1 = 44.2, col_2 = 'irqMn', col_0 = 16.62 WHERE (col_0 = 35.34)", <Thread(Thread-671, stopped 17056)>, 1738685478.8459883), 5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-672, stopped 25564)>, 1738685478.8459883), 6: (1, "UPDATE table_0 SET col_2 = 'qBgbk', col_0 = 34.73 WHERE (col_0 = 4.46)", <Thread(Thread-673, stopped 14988)>, 1738685478.8465016), 7: (1, "UPDATE table_0 SET col_1 = 3.42, col_2 = 'mQYpZ' WHERE (id = 5)", <Thread(Thread-674, stopped 28428)>, 1738685478.8470054), 9: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-675, stopped 11440)>, 1738685478.8470054), 10: (1, 'COMMIT', <Thread(Thread-676, stopped 18192)>, 1738685478.8474796)}
2025-02-05 00:11:19,059 - stmt_idx: 4, status: success, result: None
2025-02-05 00:11:19,059 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 44.2, col_2 = 'irqMn', col_0 = 16.62 WHERE (col_0 = 35.34)
2025-02-05 00:11:19,166 - stmt_idx: 5, status: success, result: None
2025-02-05 00:11:19,166 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 00:11:19,274 - stmt_idx: 6, status: success, result: None
2025-02-05 00:11:19,274 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'qBgbk', col_0 = 34.73 WHERE (col_0 = 4.46)
2025-02-05 00:11:19,381 - stmt_idx: 7, status: success, result: None
2025-02-05 00:11:19,381 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 3.42, col_2 = 'mQYpZ' WHERE (id = 5)
2025-02-05 00:11:19,490 - stmt_idx: 9, status: success, result: None
2025-02-05 00:11:19,490 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 00:11:19,598 - stmt_idx: 10, status: success, result: None
2025-02-05 00:11:19,598 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:11:19,598 - 执行后idx: 12, pending_stmts: {}
2025-02-05 00:11:19,598 - 
2025-02-05 00:11:19,709 - 执行序列成功
2025-02-05 00:11:20,480 - is_atomic: True
2025-02-05 00:11:20,480 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:11:20,480 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_1 = 44.2, col_2 = 'irqMn', col_0 = 16.62 WHERE (col_0 = 35.34)"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, "UPDATE table_0 SET col_2 = 'qBgbk', col_0 = 34.73 WHERE (col_0 = 4.46)"), (1, "UPDATE table_0 SET col_1 = 3.42, col_2 = 'mQYpZ' WHERE (id = 5)"), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, 'COMMIT')]
2025-02-05 00:11:20,481 - snapshots: {'before': {'table_0': [(1, 35.34, 82.35, 'hkwgq'), (2, 16.47, 14.52, 'aehxe'), (3, 84.19, 70.97, 'vhtvj'), (4, 4.46, 99.07, 'icpki'), (5, 5.59, 19.3, 'qufbs')]}, 'trx1': {'table_0': [(1, 16.62, 44.2, 'irqMn'), (2, 16.47, 14.52, 'aehxe'), (3, 84.19, 70.97, 'vhtvj'), (4, 34.73, 99.07, 'qBgbk'), (5, 5.59, 3.42, 'mQYpZ')]}, 'trx2': {'table_0': [(1, 35.34, 82.35, 'hkwgq'), (2, 16.47, 14.52, 'aehxe'), (3, 84.19, 70.97, 'vhtvj'), (4, 4.46, 99.07, 'icpki'), (5, 5.59, 19.3, 'qufbs')]}, 'serial': {'table_0': [(1, 16.62, 44.2, 'irqMn'), (2, 16.47, 14.52, 'aehxe'), (3, 84.19, 70.97, 'vhtvj'), (4, 34.73, 99.07, 'qBgbk'), (5, 5.59, 3.42, 'mQYpZ')]}}
2025-02-05 00:11:20,481 - 
2025-02-05 00:11:20,492 - iter: 92
2025-02-05 00:11:21,979 - table table_0 has 9 rows
2025-02-05 00:11:21,979 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [7, 8, 9], 'intersection_row_ids': []}
2025-02-05 00:11:21,979 - lock_same_resource: False
2025-02-05 00:11:21,979 - 
2025-02-05 00:11:21,979 - non intersection phase1
2025-02-05 00:11:21,979 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:11:21,980 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:11:21,980 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:11:21,980 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:11:21,982 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:11:21,983 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:21,983 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:11:21,987 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=9
2025-02-05 00:11:21,988 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:21,989 - params: {'v1': '7', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:11:21,989 - non intersection phase1 end
2025-02-05 00:11:21,989 - 
2025-02-05 00:11:21,989 - non intersection phase2
2025-02-05 00:11:21,992 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=NK, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 00:11:21,993 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:21,993 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'col_1'}
2025-02-05 00:11:21,996 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 00:11:21,998 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:21,998 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:11:21,998 - non intersection phase2 end
2025-02-05 00:11:21,999 - 
2025-02-05 00:11:21,999 - 生成死锁事务序列成功如下
2025-02-05 00:11:21,999 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT col_1 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:11:23,541 - 创建事务1连接成功
2025-02-05 00:11:23,543 - 执行事务1语句: BEGIN
2025-02-05 00:11:23,544 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:11:23,545 - 执行事务1语句: SELECT col_1 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:11:23,546 - 执行事务1语句: COMMIT;
2025-02-05 00:11:23,550 - 执行事务1成功
2025-02-05 00:11:26,164 - 恢复初始状态成功
2025-02-05 00:11:26,943 - 创建事务2连接成功
2025-02-05 00:11:26,945 - 执行事务2语句: BEGIN
2025-02-05 00:11:26,946 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:11:26,947 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:11:26,948 - 执行事务2语句: COMMIT;
2025-02-05 00:11:26,953 - 执行事务2成功
2025-02-05 00:11:31,900 - 
2025-02-05 00:11:31,900 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE', <Thread(Thread-677, started 37096)>, 1738685491.9003634)}
2025-02-05 00:11:32,004 - stmt_idx: 2, status: success, result: None
2025-02-05 00:11:32,005 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE
2025-02-05 00:11:32,005 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:11:32,005 - 
2025-02-05 00:11:32,114 - 
2025-02-05 00:11:32,115 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-678, started 9072)>, 1738685492.1144476)}
2025-02-05 00:11:32,221 - stmt_idx: 3, status: success, result: None
2025-02-05 00:11:32,221 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:11:32,221 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:11:32,221 - 
2025-02-05 00:11:32,328 - 
2025-02-05 00:11:32,329 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-679, started 37756)>, 1738685492.3288703)}
2025-02-05 00:11:32,436 - wait for lock, trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:11:32,436 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-679, started 37756)>, 1738685492.3288703)}
2025-02-05 00:11:32,436 - 
2025-02-05 00:11:32,545 - 
2025-02-05 00:11:32,546 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-679, started 37756)>, 1738685492.3288703), 5: (1, 'SELECT col_1 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE', <Thread(Thread-680, started 25036)>, 1738685492.545576)}
2025-02-05 00:11:32,548 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_1 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:11:32,654 - stmt_idx: 4, status: success, result: None
2025-02-05 00:11:32,654 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:11:32,654 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 00:11:32,765 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:11:32,765 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT col_1 FROM table_0 WHERE id >= 7 AND id <= 7 FOR UPDATE
2025-02-05 00:11:32,765 - 错误: dictionary changed size during iteration
2025-02-05 00:11:32,768 - 执行序列成功
2025-02-05 00:11:33,549 - is_atomic: True
2025-02-05 00:11:33,549 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:11:33,549 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 9 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-05 00:11:33,549 - snapshots: {'before': {'table_0': [(1, 52.96, 1.23), (2, 31.82, 45.02), (3, 24.75, 76.64), (4, 9.32, 72.7), (5, 29.57, 85.36), (6, 86.0, 22.96), (7, 85.28, 59.28), (8, 2.72, 69.96), (9, 48.44, 48.69)]}, 'trx1': {'table_0': [(1, 52.96, 1.23), (2, 31.82, 45.02), (3, 24.75, 76.64), (4, 9.32, 72.7), (5, 29.57, 85.36), (6, 86.0, 22.96), (7, 85.28, 59.28), (8, 2.72, 69.96), (9, 48.44, 48.69)]}, 'trx2': {'table_0': [(1, 52.96, 1.23), (2, 31.82, 45.02), (3, 24.75, 76.64), (4, 9.32, 72.7), (5, 29.57, 85.36), (6, 86.0, 22.96), (7, 85.28, 59.28), (8, 2.72, 69.96), (9, 48.44, 48.69)]}, 'serial': {'table_0': [(1, 52.96, 1.23), (2, 31.82, 45.02), (3, 24.75, 76.64), (4, 9.32, 72.7), (5, 29.57, 85.36), (6, 86.0, 22.96), (7, 85.28, 59.28), (8, 2.72, 69.96), (9, 48.44, 48.69)]}}
2025-02-05 00:11:33,549 - 
2025-02-05 00:11:33,566 - iter: 93
2025-02-05 00:11:35,084 - table table_0 has 11 rows
2025-02-05 00:11:35,084 - trx1_lock_row_ids: [9, 11]
2025-02-05 00:11:35,084 - trx2_lock_row_ids: [9, 10, 11]
2025-02-05 00:11:35,084 - intersection_row_ids: [9, 11]
2025-02-05 00:11:35,084 - trx1_exclusive_ids: []
2025-02-05 00:11:35,084 - trx2_exclusive_ids: [10]
2025-02-05 00:11:35,085 - res_dict: {'trx1_lock_row_ids': [9, 11], 'trx2_lock_row_ids': [9, 10, 11], 'intersection_row_ids': [9, 11]}
2025-02-05 00:11:35,085 - lock_same_resource: True
2025-02-05 00:11:35,085 - 
2025-02-05 00:11:35,085 - intersection phase1
2025-02-05 00:11:35,088 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=9, is_continuous=True, range_end_idx=11
2025-02-05 00:11:35,089 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:35,090 - params: {'v1': '10', 'v2': '13', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:11:35,093 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=GAP, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:11:35,094 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:35,094 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_1'}
2025-02-05 00:11:35,096 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=GAP, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:11:35,098 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:11:35,098 - params: {'insert_cols': 'id, col_0, col_1, col_400', 'vals': "NULL, 54, 56, 'PEonC'", 'table': 'table_0'}
2025-02-05 00:11:35,099 - intersection phase1 end
2025-02-05 00:11:35,099 - 
2025-02-05 00:11:35,099 - intersection phase2
2025-02-05 00:11:35,099 - 事务1在第二阶段自己加的锁: S
2025-02-05 00:11:35,099 - 事务2在第二阶段自己加的锁: NK
2025-02-05 00:11:35,099 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 00:11:35,099 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:11:35,103 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:11:35,105 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:11:35,106 - params: {'insert_cols': 'id, col_0, col_1, col_400', 'vals': "NULL, 99, 14, 'vpnIR'", 'table': 'table_0'}
2025-02-05 00:11:35,106 - intersection phase2 end
2025-02-05 00:11:35,106 - 
2025-02-05 00:11:35,106 - intersection phase3
2025-02-05 00:11:35,110 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=11, is_continuous=True, range_end_idx=11
2025-02-05 00:11:35,112 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:35,112 - params: {'v1': '13', 'v2': '13', 'table': 'table_0', 'select_cols': 'id, col_0, col_400'}
2025-02-05 00:11:35,117 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:11:35,118 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:11:35,118 - params: {'insert_cols': 'id, col_0, col_1, col_400', 'vals': "NULL, 97, 33, 'lppEr'", 'table': 'table_0'}
2025-02-05 00:11:35,118 - intersection phase3 end
2025-02-05 00:11:35,118 - 
2025-02-05 00:11:35,118 - 生成死锁事务序列成功如下
2025-02-05 00:11:35,118 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 54, 56, 'PEonC')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 99, 14, 'vpnIR')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 97, 33, 'lppEr')"), (1, 'SELECT id, col_0, col_400 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:11:36,650 - 创建事务1连接成功
2025-02-05 00:11:36,651 - 执行事务1语句: BEGIN
2025-02-05 00:11:36,653 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:11:36,653 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 54, 56, 'PEonC')
2025-02-05 00:11:36,654 - 执行事务1语句: SELECT id, col_0, col_400 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 00:11:36,656 - 执行事务1语句: COMMIT;
2025-02-05 00:11:36,661 - 执行事务1成功
2025-02-05 00:11:39,231 - 恢复初始状态成功
2025-02-05 00:11:39,994 - 创建事务2连接成功
2025-02-05 00:11:39,996 - 执行事务2语句: BEGIN
2025-02-05 00:11:39,997 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 11 LOCK IN SHARE MODE
2025-02-05 00:11:39,998 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 99, 14, 'vpnIR')
2025-02-05 00:11:39,999 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 97, 33, 'lppEr')
2025-02-05 00:11:40,000 - 执行事务2语句: COMMIT;
2025-02-05 00:11:40,005 - 执行事务2成功
2025-02-05 00:11:44,905 - 
2025-02-05 00:11:44,905 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 11 LOCK IN SHARE MODE', <Thread(Thread-681, started 22116)>, 1738685504.9056146)}
2025-02-05 00:11:45,014 - stmt_idx: 2, status: success, result: None
2025-02-05 00:11:45,014 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 11 LOCK IN SHARE MODE
2025-02-05 00:11:45,014 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:11:45,014 - 
2025-02-05 00:11:45,125 - 
2025-02-05 00:11:45,125 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-682, started 36996)>, 1738685505.1250393)}
2025-02-05 00:11:45,231 - wait for lock, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:11:45,232 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-682, started 36996)>, 1738685505.1250393)}
2025-02-05 00:11:45,232 - 
2025-02-05 00:11:45,342 - 
2025-02-05 00:11:45,343 - 执行前idx: 6, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-682, started 36996)>, 1738685505.1250393), 5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 99, 14, 'vpnIR')", <Thread(Thread-683, started 36916)>, 1738685505.3424091)}
2025-02-05 00:11:45,449 - wait for lock, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:11:45,558 - stmt_idx: 5, status: success, result: None
2025-02-05 00:11:45,558 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 99, 14, 'vpnIR')
2025-02-05 00:11:45,558 - 执行后idx: 6, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-682, started 36996)>, 1738685505.1250393)}
2025-02-05 00:11:45,558 - 
2025-02-05 00:11:45,668 - 
2025-02-05 00:11:45,669 - 执行前idx: 7, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-682, started 36996)>, 1738685505.1250393), 6: (2, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 97, 33, 'lppEr')", <Thread(Thread-684, started 32668)>, 1738685505.6681771)}
2025-02-05 00:11:45,778 - wait for lock, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:11:45,886 - stmt_idx: 6, status: success, result: None
2025-02-05 00:11:45,886 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 97, 33, 'lppEr')
2025-02-05 00:11:45,886 - 执行后idx: 7, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-682, started 36996)>, 1738685505.1250393)}
2025-02-05 00:11:45,886 - 
2025-02-05 00:11:45,999 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-682, started 36996)>, 1738685505.1250393)}
2025-02-05 00:11:46,000 - 
2025-02-05 00:11:46,000 - 执行前idx: 10, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-682, stopped 36996)>, 1738685505.1250393)}
2025-02-05 00:11:46,104 - stmt_idx: 3, status: success, result: None
2025-02-05 00:11:46,104 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:11:46,104 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 00:11:46,105 - 执行后idx: 10, pending_stmts: {4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 54, 56, 'PEonC')", <Thread(Thread-685, started 40096)>, 1738685506.1048393), 7: (1, 'SELECT id, col_0, col_400 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-686, started 40976)>, 1738685506.1058176), 9: (1, 'COMMIT', <Thread(Thread-687, started 35028)>, 1738685506.1058176)}
2025-02-05 00:11:46,105 - 
2025-02-05 00:11:46,213 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 54, 56, 'PEonC')", <Thread(Thread-685, stopped 40096)>, 1738685506.1048393), 7: (1, 'SELECT id, col_0, col_400 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-686, stopped 40976)>, 1738685506.1058176), 9: (1, 'COMMIT', <Thread(Thread-687, stopped 35028)>, 1738685506.1058176)}
2025-02-05 00:11:46,213 - 
2025-02-05 00:11:46,213 - 执行前idx: 10, pending_stmts: {4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 54, 56, 'PEonC')", <Thread(Thread-685, stopped 40096)>, 1738685506.1048393), 7: (1, 'SELECT id, col_0, col_400 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-686, stopped 40976)>, 1738685506.1058176), 9: (1, 'COMMIT', <Thread(Thread-687, stopped 35028)>, 1738685506.1058176)}
2025-02-05 00:11:46,321 - stmt_idx: 4, status: success, result: None
2025-02-05 00:11:46,321 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 54, 56, 'PEonC')
2025-02-05 00:11:46,431 - stmt_idx: 7, status: success, result: None
2025-02-05 00:11:46,431 - 成功执行序列中事务1语句: SELECT id, col_0, col_400 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 00:11:46,540 - stmt_idx: 9, status: success, result: None
2025-02-05 00:11:46,540 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:11:46,540 - 执行后idx: 10, pending_stmts: {}
2025-02-05 00:11:46,540 - 
2025-02-05 00:11:46,648 - 执行序列成功
2025-02-05 00:11:47,414 - is_atomic: True
2025-02-05 00:11:47,414 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:11:47,414 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 11 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 99, 14, 'vpnIR')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 97, 33, 'lppEr')"), (2, 'COMMIT'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_400) VALUES (NULL, 54, 56, 'PEonC')"), (1, 'SELECT id, col_0, col_400 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 00:11:47,414 - snapshots: {'before': {'table_0': [(1, 50, 59, None), (2, 87, 5, None), (4, 61, 46, None), (5, 4, 71, None), (6, 14, 15, None), (7, 78, 82, None), (8, 7, 19, None), (9, 81, 53, None), (10, 50, 72, None), (11, 92, 35, None), (13, 7, 86, None)]}, 'trx1': {'table_0': [(1, 50, 59, None), (2, 87, 5, None), (4, 61, 46, None), (5, 4, 71, None), (6, 14, 15, None), (7, 78, 82, None), (8, 7, 19, None), (9, 81, 53, None), (10, 50, 72, None), (11, 92, 35, None), (13, 7, 86, None), (14, 54, 56, 'PEonC')]}, 'trx2': {'table_0': [(1, 50, 59, None), (2, 87, 5, None), (4, 61, 46, None), (5, 4, 71, None), (6, 14, 15, None), (7, 78, 82, None), (8, 7, 19, None), (9, 81, 53, None), (10, 50, 72, None), (11, 92, 35, None), (13, 7, 86, None), (15, 99, 14, 'vpnIR'), (16, 97, 33, 'lppEr')]}, 'serial': {'table_0': [(1, 50, 59, None), (2, 87, 5, None), (4, 61, 46, None), (5, 4, 71, None), (6, 14, 15, None), (7, 78, 82, None), (8, 7, 19, None), (9, 81, 53, None), (10, 50, 72, None), (11, 92, 35, None), (13, 7, 86, None), (17, 99, 14, 'vpnIR'), (18, 97, 33, 'lppEr'), (19, 54, 56, 'PEonC')]}}
2025-02-05 00:11:47,414 - 
2025-02-05 00:11:47,425 - iter: 94
2025-02-05 00:11:48,971 - table table_0 has 12 rows
2025-02-05 00:11:48,971 - trx1_lock_row_ids: [4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 00:11:48,971 - trx2_lock_row_ids: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
2025-02-05 00:11:48,971 - intersection_row_ids: [4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 00:11:48,971 - trx1_exclusive_ids: []
2025-02-05 00:11:48,971 - trx2_exclusive_ids: [2, 3, 12]
2025-02-05 00:11:48,971 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7, 8, 9, 10, 11], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'intersection_row_ids': [4, 5, 6, 7, 8, 9, 10, 11]}
2025-02-05 00:11:48,971 - lock_same_resource: True
2025-02-05 00:11:48,972 - 
2025-02-05 00:11:48,972 - intersection phase1
2025-02-05 00:11:48,975 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=11
2025-02-05 00:11:48,977 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:11:48,977 - params: {'v1': '4', 'set_expr': 'col_0 = 36, col_1 = 92.41', 'table': 'table_0', 'v2': '11'}
2025-02-05 00:11:48,980 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:11:48,981 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:48,981 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:11:48,983 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:11:48,985 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:11:48,985 - params: {'cond': '(id = 5) AND (col_1 = 14.19) AND (col_2 = 21.98)', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:11:48,989 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:11:48,991 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:48,991 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'col_1, col_2'}
2025-02-05 00:11:48,994 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 00:11:48,995 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:11:48,995 - params: {'cond': '(id = 7)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:11:48,998 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:11:48,999 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:48,999 - params: {'v1': '8', 'v2': '8', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:11:49,002 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:11:49,004 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:49,004 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:11:49,008 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 00:11:49,009 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:11:49,010 - params: {'v1': '10', 'v2': '10', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:11:49,013 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:11:49,015 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:11:49,015 - params: {'cond': '(col_2 = 33.77) AND (col_1 = 41.75) AND (col_0 = 62)', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:11:49,015 - intersection phase1 end
2025-02-05 00:11:49,015 - 
2025-02-05 00:11:49,016 - intersection phase2
2025-02-05 00:11:49,016 - 事务1在第二阶段自己加的锁: NK
2025-02-05 00:11:49,016 - 事务2在第二阶段自己加的锁: II
2025-02-05 00:11:49,016 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 00:11:49,016 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 00:11:49,019 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:11:49,022 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:11:49,022 - params: {'v1': '2', 'set_expr': 'col_1 = 17.24', 'table': 'table_0', 'v2': '2'}
2025-02-05 00:11:49,024 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:11:49,026 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:11:49,026 - params: {'insert_cols': 'id, col_0, col_1, col_2', 'vals': 'NULL, 36, 70.48, 52.28', 'table': 'table_0'}
2025-02-05 00:11:49,029 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:11:49,031 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:11:49,031 - params: {'set_expr': 'col_2 = 31.21, col_0 = 62', 'table': 'table_0', 'cond': '(id = 12)'}
2025-02-05 00:11:49,032 - intersection phase2 end
2025-02-05 00:11:49,032 - 
2025-02-05 00:11:49,032 - intersection phase3
2025-02-05 00:11:49,036 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:11:49,038 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:11:49,038 - params: {'set_expr': 'col_2 = 34.81', 'table': 'table_0', 'cond': '(id = 12) AND (col_1 = 60.84)'}
2025-02-05 00:11:49,042 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:11:49,043 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:11:49,043 - params: {'set_expr': 'col_2 = 6.55', 'table': 'table_0', 'cond': '(col_1 = 26.37) AND (col_0 = 67) AND (col_2 = 75.03)'}
2025-02-05 00:11:49,044 - intersection phase3 end
2025-02-05 00:11:49,044 - 
2025-02-05 00:11:49,044 - 生成死锁事务序列成功如下
2025-02-05 00:11:49,044 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE (id = 5) AND (col_1 = 14.19) AND (col_2 = 21.98) LOCK IN SHARE MODE'), (2, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 33.77) AND (col_1 = 41.75) AND (col_0 = 62) LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_1 = 17.24 WHERE id BETWEEN 2 AND 2'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 36, 70.48, 52.28)'), (2, 'UPDATE table_0 SET col_2 = 31.21, col_0 = 62 WHERE (id = 12)'), (1, 'UPDATE table_0 SET col_2 = 34.81 WHERE (id = 12) AND (col_1 = 60.84)'), (2, 'UPDATE table_0 SET col_2 = 6.55 WHERE (col_1 = 26.37) AND (col_0 = 67) AND (col_2 = 75.03)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:11:50,594 - 创建事务1连接成功
2025-02-05 00:11:50,596 - 执行事务1语句: BEGIN
2025-02-05 00:11:50,597 - 执行事务1语句: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:11:50,597 - 执行事务1语句: UPDATE table_0 SET col_2 = 34.81 WHERE (id = 12) AND (col_1 = 60.84)
2025-02-05 00:11:50,600 - 执行事务1语句: COMMIT;
2025-02-05 00:11:50,605 - 执行事务1成功
2025-02-05 00:11:53,209 - 恢复初始状态成功
2025-02-05 00:11:53,968 - 创建事务2连接成功
2025-02-05 00:11:53,970 - 执行事务2语句: BEGIN
2025-02-05 00:11:53,971 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 00:11:53,971 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE (id = 5) AND (col_1 = 14.19) AND (col_2 = 21.98) LOCK IN SHARE MODE
2025-02-05 00:11:53,972 - 执行事务2语句: SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 00:11:53,972 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 00:11:53,973 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 00:11:53,974 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 00:11:53,975 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 00:11:53,976 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 33.77) AND (col_1 = 41.75) AND (col_0 = 62) LOCK IN SHARE MODE
2025-02-05 00:11:53,976 - 执行事务2语句: UPDATE table_0 SET col_1 = 17.24 WHERE id BETWEEN 2 AND 2
2025-02-05 00:11:53,977 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 36, 70.48, 52.28)
2025-02-05 00:11:53,977 - 执行事务2语句: UPDATE table_0 SET col_2 = 31.21, col_0 = 62 WHERE (id = 12)
2025-02-05 00:11:53,978 - 执行事务2语句: UPDATE table_0 SET col_2 = 6.55 WHERE (col_1 = 26.37) AND (col_0 = 67) AND (col_2 = 75.03)
2025-02-05 00:11:53,980 - 执行事务2语句: COMMIT;
2025-02-05 00:11:53,985 - 执行事务2成功
2025-02-05 00:11:58,991 - 
2025-02-05 00:11:58,991 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-688, started 9932)>, 1738685518.9915044)}
2025-02-05 00:11:59,095 - stmt_idx: 2, status: success, result: None
2025-02-05 00:11:59,095 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 00:11:59,095 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:11:59,095 - 
2025-02-05 00:11:59,204 - 
2025-02-05 00:11:59,204 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0 FROM table_0 WHERE (id = 5) AND (col_1 = 14.19) AND (col_2 = 21.98) LOCK IN SHARE MODE', <Thread(Thread-689, started 39920)>, 1738685519.2040508)}
2025-02-05 00:11:59,312 - stmt_idx: 3, status: success, result: None
2025-02-05 00:11:59,312 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE (id = 5) AND (col_1 = 14.19) AND (col_2 = 21.98) LOCK IN SHARE MODE
2025-02-05 00:11:59,312 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:11:59,312 - 
2025-02-05 00:11:59,421 - 
2025-02-05 00:11:59,421 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-690, started 40596)>, 1738685519.4214213)}
2025-02-05 00:11:59,529 - stmt_idx: 4, status: success, result: None
2025-02-05 00:11:59,529 - 成功执行序列中事务2语句: SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 00:11:59,529 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:11:59,529 - 
2025-02-05 00:11:59,637 - 
2025-02-05 00:11:59,637 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', <Thread(Thread-691, started 39316)>, 1738685519.637954)}
2025-02-05 00:11:59,744 - stmt_idx: 5, status: success, result: None
2025-02-05 00:11:59,744 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 00:11:59,744 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:11:59,744 - 
2025-02-05 00:11:59,853 - 
2025-02-05 00:11:59,854 - 执行前idx: 7, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:11:59,961 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:11:59,961 - 执行后idx: 7, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:11:59,961 - 
2025-02-05 00:12:00,069 - 
2025-02-05 00:12:00,069 - 执行前idx: 8, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845), 7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-693, started 22640)>, 1738685520.0690007)}
2025-02-05 00:12:00,175 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:00,280 - stmt_idx: 7, status: success, result: None
2025-02-05 00:12:00,280 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 00:12:00,280 - 执行后idx: 8, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:00,280 - 
2025-02-05 00:12:00,387 - 
2025-02-05 00:12:00,388 - 执行前idx: 9, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845), 8: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-694, started 9128)>, 1738685520.3872552)}
2025-02-05 00:12:00,493 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:00,601 - stmt_idx: 8, status: success, result: None
2025-02-05 00:12:00,601 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 00:12:00,601 - 执行后idx: 9, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:00,602 - 
2025-02-05 00:12:00,708 - 
2025-02-05 00:12:00,709 - 执行前idx: 10, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845), 9: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-695, started 19080)>, 1738685520.7088032)}
2025-02-05 00:12:00,815 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:00,925 - stmt_idx: 9, status: success, result: None
2025-02-05 00:12:00,925 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 00:12:00,925 - 执行后idx: 10, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:00,925 - 
2025-02-05 00:12:01,031 - 
2025-02-05 00:12:01,032 - 执行前idx: 11, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845), 10: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 33.77) AND (col_1 = 41.75) AND (col_0 = 62) LOCK IN SHARE MODE', <Thread(Thread-696, started 33996)>, 1738685521.0313184)}
2025-02-05 00:12:01,138 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:01,243 - stmt_idx: 10, status: success, result: None
2025-02-05 00:12:01,243 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 33.77) AND (col_1 = 41.75) AND (col_0 = 62) LOCK IN SHARE MODE
2025-02-05 00:12:01,243 - 执行后idx: 11, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:01,244 - 
2025-02-05 00:12:01,351 - 
2025-02-05 00:12:01,352 - 执行前idx: 12, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845), 11: (2, 'UPDATE table_0 SET col_1 = 17.24 WHERE id BETWEEN 2 AND 2', <Thread(Thread-697, started 16892)>, 1738685521.3516855)}
2025-02-05 00:12:01,459 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:01,565 - stmt_idx: 11, status: success, result: None
2025-02-05 00:12:01,565 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 17.24 WHERE id BETWEEN 2 AND 2
2025-02-05 00:12:01,565 - 执行后idx: 12, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:01,565 - 
2025-02-05 00:12:01,672 - 
2025-02-05 00:12:01,672 - 执行前idx: 13, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845), 12: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 36, 70.48, 52.28)', <Thread(Thread-698, started 40152)>, 1738685521.6720815)}
2025-02-05 00:12:01,782 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:01,889 - stmt_idx: 12, status: success, result: None
2025-02-05 00:12:01,889 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 36, 70.48, 52.28)
2025-02-05 00:12:01,889 - 执行后idx: 13, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:01,889 - 
2025-02-05 00:12:01,996 - 
2025-02-05 00:12:01,997 - 执行前idx: 14, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845), 13: (2, 'UPDATE table_0 SET col_2 = 31.21, col_0 = 62 WHERE (id = 12)', <Thread(Thread-699, started 14256)>, 1738685521.9967134)}
2025-02-05 00:12:02,101 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:02,209 - stmt_idx: 13, status: success, result: None
2025-02-05 00:12:02,209 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 31.21, col_0 = 62 WHERE (id = 12)
2025-02-05 00:12:02,209 - 执行后idx: 14, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:02,209 - 
2025-02-05 00:12:02,315 - 
2025-02-05 00:12:02,316 - 执行前idx: 16, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845), 15: (2, 'UPDATE table_0 SET col_2 = 6.55 WHERE (col_1 = 26.37) AND (col_0 = 67) AND (col_2 = 75.03)', <Thread(Thread-700, started 16776)>, 1738685522.3154516)}
2025-02-05 00:12:02,424 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:02,536 - stmt_idx: 15, status: success, result: None
2025-02-05 00:12:02,536 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 6.55 WHERE (col_1 = 26.37) AND (col_0 = 67) AND (col_2 = 75.03)
2025-02-05 00:12:02,536 - 执行后idx: 16, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:02,536 - 
2025-02-05 00:12:02,648 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, started 26452)>, 1738685519.853845)}
2025-02-05 00:12:02,648 - 
2025-02-05 00:12:02,648 - 执行前idx: 18, pending_stmts: {6: (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11', <Thread(Thread-692, stopped 26452)>, 1738685519.853845)}
2025-02-05 00:12:02,753 - stmt_idx: 6, status: success, result: None
2025-02-05 00:12:02,753 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:02,753 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11
2025-02-05 00:12:02,755 - 执行后idx: 18, pending_stmts: {14: (1, 'UPDATE table_0 SET col_2 = 34.81 WHERE (id = 12) AND (col_1 = 60.84)', <Thread(Thread-701, started 20372)>, 1738685522.7548785), 16: (1, 'COMMIT', <Thread(Thread-702, started 40136)>, 1738685522.7548785)}
2025-02-05 00:12:02,755 - 
2025-02-05 00:12:02,861 - 序列遍历完成，开始查看剩余阻塞的语句：{14: (1, 'UPDATE table_0 SET col_2 = 34.81 WHERE (id = 12) AND (col_1 = 60.84)', <Thread(Thread-701, stopped 20372)>, 1738685522.7548785), 16: (1, 'COMMIT', <Thread(Thread-702, stopped 40136)>, 1738685522.7548785)}
2025-02-05 00:12:02,861 - 
2025-02-05 00:12:02,861 - 执行前idx: 18, pending_stmts: {14: (1, 'UPDATE table_0 SET col_2 = 34.81 WHERE (id = 12) AND (col_1 = 60.84)', <Thread(Thread-701, stopped 20372)>, 1738685522.7548785), 16: (1, 'COMMIT', <Thread(Thread-702, stopped 40136)>, 1738685522.7548785)}
2025-02-05 00:12:02,967 - stmt_idx: 14, status: success, result: None
2025-02-05 00:12:02,967 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 34.81 WHERE (id = 12) AND (col_1 = 60.84)
2025-02-05 00:12:03,074 - stmt_idx: 16, status: success, result: None
2025-02-05 00:12:03,074 - 成功执行序列中事务1语句: COMMIT
2025-02-05 00:12:03,074 - 执行后idx: 18, pending_stmts: {}
2025-02-05 00:12:03,074 - 
2025-02-05 00:12:03,183 - 执行序列成功
2025-02-05 00:12:03,986 - is_atomic: True
2025-02-05 00:12:03,986 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:12:03,986 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE (id = 5) AND (col_1 = 14.19) AND (col_2 = 21.98) LOCK IN SHARE MODE'), (2, 'SELECT col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 33.77) AND (col_1 = 41.75) AND (col_0 = 62) LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_1 = 17.24 WHERE id BETWEEN 2 AND 2'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 36, 70.48, 52.28)'), (2, 'UPDATE table_0 SET col_2 = 31.21, col_0 = 62 WHERE (id = 12)'), (2, 'UPDATE table_0 SET col_2 = 6.55 WHERE (col_1 = 26.37) AND (col_0 = 67) AND (col_2 = 75.03)'), (2, 'COMMIT'), (1, 'UPDATE table_0 SET col_0 = 36, col_1 = 92.41 WHERE id BETWEEN 4 AND 11'), (1, 'UPDATE table_0 SET col_2 = 34.81 WHERE (id = 12) AND (col_1 = 60.84)'), (1, 'COMMIT')]
2025-02-05 00:12:03,987 - snapshots: {'before': {'table_0': [(1, 25, 1.93, 21.32), (2, 14, 86.87, 88.05), (3, 54, 47.42, 42.17), (4, 53, 72.86, 74.68), (5, 10, 14.19, 21.98), (6, 98, 6.68, 26.85), (7, 13, 13.93, 30.88), (8, 67, 26.37, 75.03), (9, 56, 88.83, 72.94), (10, 71, 40.5, 9.43), (11, 62, 41.75, 33.77), (12, 11, 60.84, 70.82)]}, 'trx1': {'table_0': [(1, 25, 1.93, 21.32), (2, 14, 86.87, 88.05), (3, 54, 47.42, 42.17), (4, 36, 92.41, 74.68), (5, 36, 92.41, 21.98), (6, 36, 92.41, 26.85), (7, 36, 92.41, 30.88), (8, 36, 92.41, 75.03), (9, 36, 92.41, 72.94), (10, 36, 92.41, 9.43), (11, 36, 92.41, 33.77), (12, 11, 60.84, 70.82)]}, 'trx2': {'table_0': [(1, 25, 1.93, 21.32), (2, 14, 17.24, 88.05), (3, 54, 47.42, 42.17), (4, 53, 72.86, 74.68), (5, 10, 14.19, 21.98), (6, 98, 6.68, 26.85), (7, 13, 13.93, 30.88), (8, 67, 26.37, 75.03), (9, 56, 88.83, 72.94), (10, 71, 40.5, 9.43), (11, 62, 41.75, 33.77), (12, 62, 60.84, 31.21), (13, 36, 70.48, 52.28)]}, 'serial': {'table_0': [(1, 25, 1.93, 21.32), (2, 14, 17.24, 88.05), (3, 54, 47.42, 42.17), (4, 36, 92.41, 74.68), (5, 36, 92.41, 21.98), (6, 36, 92.41, 26.85), (7, 36, 92.41, 30.88), (8, 36, 92.41, 75.03), (9, 36, 92.41, 72.94), (10, 36, 92.41, 9.43), (11, 36, 92.41, 33.77), (12, 62, 60.84, 31.21), (14, 36, 70.48, 52.28)]}}
2025-02-05 00:12:03,987 - 
2025-02-05 00:12:04,001 - iter: 95
2025-02-05 00:12:05,563 - table table_0 has 15 rows
2025-02-05 00:12:05,563 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15], 'trx2_lock_row_ids': [7, 8, 9, 10], 'intersection_row_ids': []}
2025-02-05 00:12:05,563 - lock_same_resource: False
2025-02-05 00:12:05,563 - 
2025-02-05 00:12:05,563 - non intersection phase1
2025-02-05 00:12:05,564 - 事务1在第一阶段自己加的锁: NK
2025-02-05 00:12:05,564 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:12:05,564 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 00:12:05,564 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:12:05,567 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,569 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,569 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id, col_2, col_3, col_4, col_971'}
2025-02-05 00:12:05,573 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,574 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,574 - params: {'v1': '2', 'v2': '2', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3, col_971'}
2025-02-05 00:12:05,578 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,579 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:12:05,579 - params: {'set_expr': 'col_0 = 98', 'table': 'table_0', 'cond': '(id = 3)'}
2025-02-05 00:12:05,582 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,583 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,583 - params: {'v1': '4', 'v2': '4', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:12:05,588 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,589 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,589 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0, col_2'}
2025-02-05 00:12:05,592 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,594 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:12:05,594 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4, col_971', 'vals': "NULL, 30, 'zGumW', 'ilAgP', 'LjcCY', 'fhKEk', 45", 'table': 'table_0'}
2025-02-05 00:12:05,597 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,598 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:12:05,598 - params: {'set_expr': "col_2 = 'XjRbo'", 'table': 'table_0', 'cond': "(id = 11) AND (col_1 = 'bbavc') AND (col_2 = 'ttupp')"}
2025-02-05 00:12:05,602 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,603 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:12:05,603 - params: {'set_expr': "col_3 = 'evNDz', col_4 = 'AIIXR', col_1 = 'proMB', col_2 = 'YxIOL', col_971 = 69", 'table': 'table_0', 'cond': '(id = 12) AND (col_0 = 17)'}
2025-02-05 00:12:05,607 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,608 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,608 - params: {'v1': '13', 'v2': '13', 'table': 'table_0', 'select_cols': 'col_1, col_3, col_971'}
2025-02-05 00:12:05,611 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,612 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,612 - params: {'v1': '14', 'v2': '14', 'table': 'table_0', 'select_cols': 'id, col_2, col_971'}
2025-02-05 00:12:05,615 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=NK, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,617 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,617 - params: {'v1': '15', 'v2': '15', 'table': 'table_0', 'select_cols': 'id, col_4'}
2025-02-05 00:12:05,620 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=10
2025-02-05 00:12:05,622 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,622 - params: {'v1': '7', 'v2': '10', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4, col_971'}
2025-02-05 00:12:05,622 - non intersection phase1 end
2025-02-05 00:12:05,622 - 
2025-02-05 00:12:05,622 - non intersection phase2
2025-02-05 00:12:05,625 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 00:12:05,627 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:05,627 - params: {'v1': '9', 'v2': '9', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_3, col_971'}
2025-02-05 00:12:05,630 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:12:05,631 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:12:05,631 - params: {'cond': '(id = 1)', 'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3, col_4, col_971'}
2025-02-05 00:12:05,631 - non intersection phase2 end
2025-02-05 00:12:05,631 - 
2025-02-05 00:12:05,631 - 生成死锁事务序列成功如下
2025-02-05 00:12:05,632 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE id BETWEEN 7 AND 10 FOR UPDATE'), (1, 'SELECT id, col_2, col_3, col_4, col_971 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'SELECT id, col_1, col_2, col_3, col_971 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 98 WHERE (id = 3)'), (1, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_971) VALUES (NULL, 30, 'zGumW', 'ilAgP', 'LjcCY', 'fhKEk', 45)"), (1, "UPDATE table_0 SET col_2 = 'XjRbo' WHERE (id = 11) AND (col_1 = 'bbavc') AND (col_2 = 'ttupp')"), (1, "UPDATE table_0 SET col_3 = 'evNDz', col_4 = 'AIIXR', col_1 = 'proMB', col_2 = 'YxIOL', col_971 = 69 WHERE (id = 12) AND (col_0 = 17)"), (1, 'SELECT col_1, col_3, col_971 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE'), (1, 'SELECT id, col_2, col_971 FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE'), (1, 'SELECT id, col_4 FROM table_0 WHERE id >= 15 AND id <= 15 FOR UPDATE'), (2, 'SELECT id, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_3, col_971 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:12:07,245 - 创建事务1连接成功
2025-02-05 00:12:07,247 - 执行事务1语句: BEGIN
2025-02-05 00:12:07,248 - 执行事务1语句: SELECT id, col_2, col_3, col_4, col_971 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:12:07,249 - 执行事务1语句: SELECT id, col_1, col_2, col_3, col_971 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-05 00:12:07,250 - 执行事务1语句: UPDATE table_0 SET col_0 = 98 WHERE (id = 3)
2025-02-05 00:12:07,251 - 执行事务1语句: SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-05 00:12:07,252 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:12:07,253 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_971) VALUES (NULL, 30, 'zGumW', 'ilAgP', 'LjcCY', 'fhKEk', 45)
2025-02-05 00:12:07,254 - 执行事务1语句: UPDATE table_0 SET col_2 = 'XjRbo' WHERE (id = 11) AND (col_1 = 'bbavc') AND (col_2 = 'ttupp')
2025-02-05 00:12:07,254 - 执行事务1语句: UPDATE table_0 SET col_3 = 'evNDz', col_4 = 'AIIXR', col_1 = 'proMB', col_2 = 'YxIOL', col_971 = 69 WHERE (id = 12) AND (col_0 = 17)
2025-02-05 00:12:07,255 - 执行事务1语句: SELECT col_1, col_3, col_971 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE
2025-02-05 00:12:07,256 - 执行事务1语句: SELECT id, col_2, col_971 FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE
2025-02-05 00:12:07,257 - 执行事务1语句: SELECT id, col_4 FROM table_0 WHERE id >= 15 AND id <= 15 FOR UPDATE
2025-02-05 00:12:07,258 - 执行事务1语句: SELECT id, col_0, col_1, col_3, col_971 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 00:12:07,260 - 执行事务1语句: COMMIT;
2025-02-05 00:12:07,266 - 执行事务1成功
2025-02-05 00:12:09,913 - 恢复初始状态成功
2025-02-05 00:12:10,697 - 创建事务2连接成功
2025-02-05 00:12:10,698 - 执行事务2语句: BEGIN
2025-02-05 00:12:10,699 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE id BETWEEN 7 AND 10 FOR UPDATE
2025-02-05 00:12:10,701 - 执行事务2语句: SELECT id, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-05 00:12:10,701 - 执行事务2语句: COMMIT;
2025-02-05 00:12:10,705 - 执行事务2成功
2025-02-05 00:12:15,787 - 
2025-02-05 00:12:15,787 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE id BETWEEN 7 AND 10 FOR UPDATE', <Thread(Thread-703, started 40536)>, 1738685535.7877371)}
2025-02-05 00:12:15,897 - stmt_idx: 2, status: success, result: None
2025-02-05 00:12:15,897 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE id BETWEEN 7 AND 10 FOR UPDATE
2025-02-05 00:12:15,897 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:12:15,897 - 
2025-02-05 00:12:16,005 - 
2025-02-05 00:12:16,007 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_2, col_3, col_4, col_971 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE', <Thread(Thread-704, started 5636)>, 1738685536.0059931)}
2025-02-05 00:12:16,113 - stmt_idx: 3, status: success, result: None
2025-02-05 00:12:16,113 - 成功执行序列中事务1语句: SELECT id, col_2, col_3, col_4, col_971 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE
2025-02-05 00:12:16,113 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:12:16,113 - 
2025-02-05 00:12:16,224 - 
2025-02-05 00:12:16,225 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_1, col_2, col_3, col_971 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE', <Thread(Thread-705, started 38324)>, 1738685536.2240229)}
2025-02-05 00:12:16,329 - stmt_idx: 4, status: success, result: None
2025-02-05 00:12:16,329 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3, col_971 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE
2025-02-05 00:12:16,329 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:12:16,329 - 
2025-02-05 00:12:16,437 - 
2025-02-05 00:12:16,437 - 执行前idx: 6, pending_stmts: {5: (1, 'UPDATE table_0 SET col_0 = 98 WHERE (id = 3)', <Thread(Thread-706, started 40784)>, 1738685536.4373302)}
2025-02-05 00:12:16,547 - stmt_idx: 5, status: success, result: None
2025-02-05 00:12:16,547 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 98 WHERE (id = 3)
2025-02-05 00:12:16,547 - 执行后idx: 6, pending_stmts: {}
2025-02-05 00:12:16,547 - 
2025-02-05 00:12:16,656 - 
2025-02-05 00:12:16,656 - 执行前idx: 7, pending_stmts: {6: (1, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE', <Thread(Thread-707, started 29408)>, 1738685536.6569405)}
2025-02-05 00:12:16,763 - stmt_idx: 6, status: success, result: None
2025-02-05 00:12:16,763 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE
2025-02-05 00:12:16,763 - 执行后idx: 7, pending_stmts: {}
2025-02-05 00:12:16,763 - 
2025-02-05 00:12:16,869 - 
2025-02-05 00:12:16,870 - 执行前idx: 8, pending_stmts: {7: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE', <Thread(Thread-708, started 30960)>, 1738685536.8699887)}
2025-02-05 00:12:16,977 - stmt_idx: 7, status: success, result: None
2025-02-05 00:12:16,977 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE
2025-02-05 00:12:16,977 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:12:16,977 - 
2025-02-05 00:12:17,083 - 
2025-02-05 00:12:17,084 - 执行前idx: 9, pending_stmts: {8: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_971) VALUES (NULL, 30, 'zGumW', 'ilAgP', 'LjcCY', 'fhKEk', 45)", <Thread(Thread-709, started 33336)>, 1738685537.0837944)}
2025-02-05 00:12:17,194 - stmt_idx: 8, status: success, result: None
2025-02-05 00:12:17,194 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_971) VALUES (NULL, 30, 'zGumW', 'ilAgP', 'LjcCY', 'fhKEk', 45)
2025-02-05 00:12:17,194 - 执行后idx: 9, pending_stmts: {}
2025-02-05 00:12:17,194 - 
2025-02-05 00:12:17,302 - 
2025-02-05 00:12:17,303 - 执行前idx: 10, pending_stmts: {9: (1, "UPDATE table_0 SET col_2 = 'XjRbo' WHERE (id = 11) AND (col_1 = 'bbavc') AND (col_2 = 'ttupp')", <Thread(Thread-710, started 40088)>, 1738685537.3028638)}
2025-02-05 00:12:17,412 - stmt_idx: 9, status: success, result: None
2025-02-05 00:12:17,412 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'XjRbo' WHERE (id = 11) AND (col_1 = 'bbavc') AND (col_2 = 'ttupp')
2025-02-05 00:12:17,412 - 执行后idx: 10, pending_stmts: {}
2025-02-05 00:12:17,412 - 
2025-02-05 00:12:17,521 - 
2025-02-05 00:12:17,522 - 执行前idx: 11, pending_stmts: {10: (1, "UPDATE table_0 SET col_3 = 'evNDz', col_4 = 'AIIXR', col_1 = 'proMB', col_2 = 'YxIOL', col_971 = 69 WHERE (id = 12) AND (col_0 = 17)", <Thread(Thread-711, started 9196)>, 1738685537.5211658)}
2025-02-05 00:12:17,630 - stmt_idx: 10, status: success, result: None
2025-02-05 00:12:17,631 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 'evNDz', col_4 = 'AIIXR', col_1 = 'proMB', col_2 = 'YxIOL', col_971 = 69 WHERE (id = 12) AND (col_0 = 17)
2025-02-05 00:12:17,631 - 执行后idx: 11, pending_stmts: {}
2025-02-05 00:12:17,631 - 
2025-02-05 00:12:17,737 - 
2025-02-05 00:12:17,738 - 执行前idx: 12, pending_stmts: {11: (1, 'SELECT col_1, col_3, col_971 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE', <Thread(Thread-712, started 41944)>, 1738685537.7374496)}
2025-02-05 00:12:17,843 - stmt_idx: 11, status: success, result: None
2025-02-05 00:12:17,844 - 成功执行序列中事务1语句: SELECT col_1, col_3, col_971 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE
2025-02-05 00:12:17,844 - 执行后idx: 12, pending_stmts: {}
2025-02-05 00:12:17,844 - 
2025-02-05 00:12:17,948 - 
2025-02-05 00:12:17,949 - 执行前idx: 13, pending_stmts: {12: (1, 'SELECT id, col_2, col_971 FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE', <Thread(Thread-713, started 37512)>, 1738685537.948866)}
2025-02-05 00:12:18,056 - stmt_idx: 12, status: success, result: None
2025-02-05 00:12:18,056 - 成功执行序列中事务1语句: SELECT id, col_2, col_971 FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE
2025-02-05 00:12:18,056 - 执行后idx: 13, pending_stmts: {}
2025-02-05 00:12:18,056 - 
2025-02-05 00:12:18,165 - 
2025-02-05 00:12:18,166 - 执行前idx: 14, pending_stmts: {13: (1, 'SELECT id, col_4 FROM table_0 WHERE id >= 15 AND id <= 15 FOR UPDATE', <Thread(Thread-714, started 40248)>, 1738685538.1653428)}
2025-02-05 00:12:18,270 - stmt_idx: 13, status: success, result: None
2025-02-05 00:12:18,270 - 成功执行序列中事务1语句: SELECT id, col_4 FROM table_0 WHERE id >= 15 AND id <= 15 FOR UPDATE
2025-02-05 00:12:18,270 - 执行后idx: 14, pending_stmts: {}
2025-02-05 00:12:18,270 - 
2025-02-05 00:12:18,380 - 
2025-02-05 00:12:18,382 - 执行前idx: 15, pending_stmts: {14: (2, 'SELECT id, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE', <Thread(Thread-715, started 39552)>, 1738685538.3809767)}
2025-02-05 00:12:18,490 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-05 00:12:18,490 - 执行后idx: 15, pending_stmts: {14: (2, 'SELECT id, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE', <Thread(Thread-715, started 39552)>, 1738685538.3809767)}
2025-02-05 00:12:18,490 - 
2025-02-05 00:12:18,597 - 
2025-02-05 00:12:18,597 - 执行前idx: 16, pending_stmts: {14: (2, 'SELECT id, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE', <Thread(Thread-715, started 39552)>, 1738685538.3809767), 15: (1, 'SELECT id, col_0, col_1, col_3, col_971 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-716, started 6104)>, 1738685538.597217)}
2025-02-05 00:12:18,600 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-05 00:12:18,703 - stmt_idx: 14, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:12:18,703 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-05 00:12:18,703 - 错误: dictionary changed size during iteration
2025-02-05 00:12:18,707 - 序列遍历完成，开始查看剩余阻塞的语句：{15: (1, 'SELECT id, col_0, col_1, col_3, col_971 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-716, stopped 6104)>, 1738685538.597217)}
2025-02-05 00:12:18,707 - 
2025-02-05 00:12:18,707 - 执行前idx: 18, pending_stmts: {15: (1, 'SELECT id, col_0, col_1, col_3, col_971 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-716, stopped 6104)>, 1738685538.597217)}
2025-02-05 00:12:18,812 - stmt_idx: 15, status: success, result: None
2025-02-05 00:12:18,812 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3, col_971 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 00:12:18,812 - 执行后idx: 18, pending_stmts: {}
2025-02-05 00:12:18,812 - 
2025-02-05 00:12:18,922 - 执行序列成功
2025-02-05 00:12:19,704 - is_atomic: True
2025-02-05 00:12:19,704 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:12:19,704 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4, col_971 FROM table_0 WHERE id BETWEEN 7 AND 10 FOR UPDATE'), (1, 'SELECT id, col_2, col_3, col_4, col_971 FROM table_0 WHERE id >= 1 AND id <= 1 FOR UPDATE'), (1, 'SELECT id, col_1, col_2, col_3, col_971 FROM table_0 WHERE id >= 2 AND id <= 2 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 98 WHERE (id = 3)'), (1, 'SELECT * FROM table_0 WHERE id >= 4 AND id <= 4 FOR UPDATE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id >= 5 AND id <= 5 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_971) VALUES (NULL, 30, 'zGumW', 'ilAgP', 'LjcCY', 'fhKEk', 45)"), (1, "UPDATE table_0 SET col_2 = 'XjRbo' WHERE (id = 11) AND (col_1 = 'bbavc') AND (col_2 = 'ttupp')"), (1, "UPDATE table_0 SET col_3 = 'evNDz', col_4 = 'AIIXR', col_1 = 'proMB', col_2 = 'YxIOL', col_971 = 69 WHERE (id = 12) AND (col_0 = 17)"), (1, 'SELECT col_1, col_3, col_971 FROM table_0 WHERE id >= 13 AND id <= 13 FOR UPDATE'), (1, 'SELECT id, col_2, col_971 FROM table_0 WHERE id >= 14 AND id <= 14 FOR UPDATE'), (1, 'SELECT id, col_4 FROM table_0 WHERE id >= 15 AND id <= 15 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_3, col_971 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE')]
2025-02-05 00:12:19,704 - snapshots: {'before': {'table_0': [(1, 48, 'ojnnb', 'whhdr', 'bqyez', 'ftggf', None), (2, 12, 'yuoes', 'fewaj', 'vjpfe', 'otluh', None), (3, 15, 'qhutg', 'fhjba', 'wgblk', 'hsxue', None), (4, 96, 'wdury', 'ccguw', 'bmrhu', 'pfuex', None), (5, 55, 'nvngf', 'ftech', 'twpfv', 'gndya', None), (6, 87, 'krnxi', 'fxwtp', 'opqav', 'hrhdp', None), (7, 1, 'igvet', 'qgwim', 'bgkjk', 'wxmfd', None), (8, 14, 'falvn', 'ecpnj', 'vzrza', 'rkvms', None), (9, 30, 'yxvem', 'xlpbw', 'eekau', 'spgjk', None), (10, 54, 'glrwp', 'noxpy', 'kwifo', 'bipff', None), (11, 94, 'bbavc', 'ttupp', 'yfrsr', 'rtudx', None), (12, 17, 'zdzom', 'vtiwp', 'kmgdr', 'evyyk', None), (13, 54, 'jpvze', 'gzmbz', 'joebk', 'cmsjz', None), (14, 29, 'wwrbk', 'pdbqe', 'itexh', 'zunpz', None), (15, 54, 'nbohe', 'xkyoa', 'cdulv', 'mlvcn', None)]}, 'trx1': {'table_0': [(1, 48, 'ojnnb', 'whhdr', 'bqyez', 'ftggf', None), (2, 12, 'yuoes', 'fewaj', 'vjpfe', 'otluh', None), (3, 98, 'qhutg', 'fhjba', 'wgblk', 'hsxue', None), (4, 96, 'wdury', 'ccguw', 'bmrhu', 'pfuex', None), (5, 55, 'nvngf', 'ftech', 'twpfv', 'gndya', None), (6, 87, 'krnxi', 'fxwtp', 'opqav', 'hrhdp', None), (7, 1, 'igvet', 'qgwim', 'bgkjk', 'wxmfd', None), (8, 14, 'falvn', 'ecpnj', 'vzrza', 'rkvms', None), (9, 30, 'yxvem', 'xlpbw', 'eekau', 'spgjk', None), (10, 54, 'glrwp', 'noxpy', 'kwifo', 'bipff', None), (11, 94, 'bbavc', 'XjRbo', 'yfrsr', 'rtudx', None), (12, 17, 'proMB', 'YxIOL', 'evNDz', 'AIIXR', 69), (13, 54, 'jpvze', 'gzmbz', 'joebk', 'cmsjz', None), (14, 29, 'wwrbk', 'pdbqe', 'itexh', 'zunpz', None), (15, 54, 'nbohe', 'xkyoa', 'cdulv', 'mlvcn', None), (16, 30, 'zGumW', 'ilAgP', 'LjcCY', 'fhKEk', 45)]}, 'trx2': {'table_0': [(1, 48, 'ojnnb', 'whhdr', 'bqyez', 'ftggf', None), (2, 12, 'yuoes', 'fewaj', 'vjpfe', 'otluh', None), (3, 15, 'qhutg', 'fhjba', 'wgblk', 'hsxue', None), (4, 96, 'wdury', 'ccguw', 'bmrhu', 'pfuex', None), (5, 55, 'nvngf', 'ftech', 'twpfv', 'gndya', None), (6, 87, 'krnxi', 'fxwtp', 'opqav', 'hrhdp', None), (7, 1, 'igvet', 'qgwim', 'bgkjk', 'wxmfd', None), (8, 14, 'falvn', 'ecpnj', 'vzrza', 'rkvms', None), (9, 30, 'yxvem', 'xlpbw', 'eekau', 'spgjk', None), (10, 54, 'glrwp', 'noxpy', 'kwifo', 'bipff', None), (11, 94, 'bbavc', 'ttupp', 'yfrsr', 'rtudx', None), (12, 17, 'zdzom', 'vtiwp', 'kmgdr', 'evyyk', None), (13, 54, 'jpvze', 'gzmbz', 'joebk', 'cmsjz', None), (14, 29, 'wwrbk', 'pdbqe', 'itexh', 'zunpz', None), (15, 54, 'nbohe', 'xkyoa', 'cdulv', 'mlvcn', None)]}, 'serial': {'table_0': [(1, 48, 'ojnnb', 'whhdr', 'bqyez', 'ftggf', None), (2, 12, 'yuoes', 'fewaj', 'vjpfe', 'otluh', None), (3, 98, 'qhutg', 'fhjba', 'wgblk', 'hsxue', None), (4, 96, 'wdury', 'ccguw', 'bmrhu', 'pfuex', None), (5, 55, 'nvngf', 'ftech', 'twpfv', 'gndya', None), (6, 87, 'krnxi', 'fxwtp', 'opqav', 'hrhdp', None), (7, 1, 'igvet', 'qgwim', 'bgkjk', 'wxmfd', None), (8, 14, 'falvn', 'ecpnj', 'vzrza', 'rkvms', None), (9, 30, 'yxvem', 'xlpbw', 'eekau', 'spgjk', None), (10, 54, 'glrwp', 'noxpy', 'kwifo', 'bipff', None), (11, 94, 'bbavc', 'XjRbo', 'yfrsr', 'rtudx', None), (12, 17, 'proMB', 'YxIOL', 'evNDz', 'AIIXR', 69), (13, 54, 'jpvze', 'gzmbz', 'joebk', 'cmsjz', None), (14, 29, 'wwrbk', 'pdbqe', 'itexh', 'zunpz', None), (15, 54, 'nbohe', 'xkyoa', 'cdulv', 'mlvcn', None), (17, 30, 'zGumW', 'ilAgP', 'LjcCY', 'fhKEk', 45)]}}
2025-02-05 00:12:19,704 - 
2025-02-05 00:12:19,718 - iter: 96
2025-02-05 00:12:21,257 - table table_0 has 6 rows
2025-02-05 00:12:21,257 - res_dict: {'trx1_lock_row_ids': [1, 3, 4], 'trx2_lock_row_ids': [2, 6], 'intersection_row_ids': []}
2025-02-05 00:12:21,257 - lock_same_resource: False
2025-02-05 00:12:21,257 - 
2025-02-05 00:12:21,258 - non intersection phase1
2025-02-05 00:12:21,258 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:12:21,258 - 事务2在第一阶段自己加的锁: NK
2025-02-05 00:12:21,258 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 00:12:21,258 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 00:12:21,261 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 00:12:21,263 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:21,263 - params: {'v1': '1', 'v2': '1', 'table': 'table_0', 'select_cols': 'id'}
2025-02-05 00:12:21,265 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:12:21,266 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:21,266 - params: {'v1': '3', 'v2': '3', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:12:21,270 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:12:21,271 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:12:21,271 - params: {'cond': '(id = 4)', 'table': 'table_0', 'select_cols': '*'}
2025-02-05 00:12:21,274 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 00:12:21,275 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:12:21,275 - params: {'insert_cols': 'id, col_1, col_2, col_3', 'vals': "NULL, 48.51, 8.51, 'HSTMl'", 'table': 'table_0'}
2025-02-05 00:12:21,278 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=NK, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:12:21,280 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:12:21,280 - params: {'set_expr': "col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR'", 'table': 'table_0', 'cond': "(col_3 = 'ddtmy') AND (col_1 = 57.05)"}
2025-02-05 00:12:21,280 - non intersection phase1 end
2025-02-05 00:12:21,280 - 
2025-02-05 00:12:21,280 - non intersection phase2
2025-02-05 00:12:21,284 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 00:12:21,285 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:12:21,286 - params: {'set_expr': 'col_1 = 45.96', 'table': 'table_0', 'cond': '(id = 6)'}
2025-02-05 00:12:21,289 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 00:12:21,290 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:12:21,290 - params: {'v1': '4', 'set_expr': "col_3 = 'VjkRf', col_1 = 89.9", 'table': 'table_0', 'v2': '4'}
2025-02-05 00:12:21,291 - non intersection phase2 end
2025-02-05 00:12:21,291 - 
2025-02-05 00:12:21,291 - 生成死锁事务序列成功如下
2025-02-05 00:12:21,291 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 48.51, 8.51, 'HSTMl')"), (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)"), (1, 'SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 45.96 WHERE (id = 6)'), (2, "UPDATE table_0 SET col_3 = 'VjkRf', col_1 = 89.9 WHERE id BETWEEN 4 AND 4"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 00:12:22,856 - 创建事务1连接成功
2025-02-05 00:12:22,858 - 执行事务1语句: BEGIN
2025-02-05 00:12:22,859 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:12:22,859 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 00:12:22,860 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE
2025-02-05 00:12:22,861 - 执行事务1语句: UPDATE table_0 SET col_1 = 45.96 WHERE (id = 6)
2025-02-05 00:12:22,863 - 执行事务1语句: COMMIT;
2025-02-05 00:12:22,867 - 执行事务1成功
2025-02-05 00:12:25,471 - 恢复初始状态成功
2025-02-05 00:12:26,257 - 创建事务2连接成功
2025-02-05 00:12:26,259 - 执行事务2语句: BEGIN
2025-02-05 00:12:26,260 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 48.51, 8.51, 'HSTMl')
2025-02-05 00:12:26,260 - 执行事务2语句: UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)
2025-02-05 00:12:26,261 - 执行事务2语句: UPDATE table_0 SET col_3 = 'VjkRf', col_1 = 89.9 WHERE id BETWEEN 4 AND 4
2025-02-05 00:12:26,264 - 执行事务2语句: COMMIT;
2025-02-05 00:12:26,268 - 执行事务2成功
2025-02-05 00:12:31,226 - 
2025-02-05 00:12:31,227 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-717, started 33856)>, 1738685551.2266843)}
2025-02-05 00:12:31,340 - stmt_idx: 2, status: success, result: None
2025-02-05 00:12:31,340 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 00:12:31,340 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:12:31,340 - 
2025-02-05 00:12:31,447 - 
2025-02-05 00:12:31,448 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-718, started 40728)>, 1738685551.447878)}
2025-02-05 00:12:31,556 - stmt_idx: 3, status: success, result: None
2025-02-05 00:12:31,556 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 00:12:31,556 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:12:31,556 - 
2025-02-05 00:12:31,663 - 
2025-02-05 00:12:31,664 - 执行前idx: 5, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 48.51, 8.51, 'HSTMl')", <Thread(Thread-719, started 37328)>, 1738685551.6639273)}
2025-02-05 00:12:31,772 - stmt_idx: 4, status: success, result: None
2025-02-05 00:12:31,772 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 48.51, 8.51, 'HSTMl')
2025-02-05 00:12:31,772 - 执行后idx: 5, pending_stmts: {}
2025-02-05 00:12:31,772 - 
2025-02-05 00:12:31,880 - 
2025-02-05 00:12:31,881 - 执行前idx: 6, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)", <Thread(Thread-720, started 11752)>, 1738685551.8804638)}
2025-02-05 00:12:31,989 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)
2025-02-05 00:12:31,989 - 执行后idx: 6, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)", <Thread(Thread-720, started 11752)>, 1738685551.8804638)}
2025-02-05 00:12:31,990 - 
2025-02-05 00:12:32,098 - 
2025-02-05 00:12:32,099 - 执行前idx: 7, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)", <Thread(Thread-720, started 11752)>, 1738685551.8804638), 6: (1, 'SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE', <Thread(Thread-721, started 26772)>, 1738685552.0984993)}
2025-02-05 00:12:32,207 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)
2025-02-05 00:12:32,315 - stmt_idx: 6, status: success, result: None
2025-02-05 00:12:32,315 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE
2025-02-05 00:12:32,315 - 执行后idx: 7, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)", <Thread(Thread-720, started 11752)>, 1738685551.8804638)}
2025-02-05 00:12:32,315 - 
2025-02-05 00:12:32,421 - 
2025-02-05 00:12:32,421 - 执行前idx: 8, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)", <Thread(Thread-720, started 11752)>, 1738685551.8804638), 7: (1, 'UPDATE table_0 SET col_1 = 45.96 WHERE (id = 6)', <Thread(Thread-722, started 32888)>, 1738685552.4215808)}
2025-02-05 00:12:32,532 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)
2025-02-05 00:12:32,641 - stmt_idx: 7, status: success, result: None
2025-02-05 00:12:32,641 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 45.96 WHERE (id = 6)
2025-02-05 00:12:32,641 - 执行后idx: 8, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)", <Thread(Thread-720, started 11752)>, 1738685551.8804638)}
2025-02-05 00:12:32,641 - 
2025-02-05 00:12:32,753 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)", <Thread(Thread-720, started 11752)>, 1738685551.8804638)}
2025-02-05 00:12:32,753 - 
2025-02-05 00:12:32,753 - 执行前idx: 11, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)", <Thread(Thread-720, stopped 11752)>, 1738685551.8804638)}
2025-02-05 00:12:32,858 - stmt_idx: 5, status: success, result: None
2025-02-05 00:12:32,858 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)
2025-02-05 00:12:32,858 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)
2025-02-05 00:12:32,859 - 执行后idx: 11, pending_stmts: {8: (2, "UPDATE table_0 SET col_3 = 'VjkRf', col_1 = 89.9 WHERE id BETWEEN 4 AND 4", <Thread(Thread-723, started 38884)>, 1738685552.8593419), 9: (2, 'COMMIT', <Thread(Thread-724, started 35436)>, 1738685552.8593419)}
2025-02-05 00:12:32,860 - 
2025-02-05 00:12:32,966 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (2, "UPDATE table_0 SET col_3 = 'VjkRf', col_1 = 89.9 WHERE id BETWEEN 4 AND 4", <Thread(Thread-723, stopped 38884)>, 1738685552.8593419), 9: (2, 'COMMIT', <Thread(Thread-724, stopped 35436)>, 1738685552.8593419)}
2025-02-05 00:12:32,966 - 
2025-02-05 00:12:32,966 - 执行前idx: 11, pending_stmts: {8: (2, "UPDATE table_0 SET col_3 = 'VjkRf', col_1 = 89.9 WHERE id BETWEEN 4 AND 4", <Thread(Thread-723, stopped 38884)>, 1738685552.8593419), 9: (2, 'COMMIT', <Thread(Thread-724, stopped 35436)>, 1738685552.8593419)}
2025-02-05 00:12:33,076 - stmt_idx: 8, status: success, result: None
2025-02-05 00:12:33,076 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 'VjkRf', col_1 = 89.9 WHERE id BETWEEN 4 AND 4
2025-02-05 00:12:33,184 - stmt_idx: 9, status: success, result: None
2025-02-05 00:12:33,184 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:12:33,184 - 执行后idx: 11, pending_stmts: {}
2025-02-05 00:12:33,184 - 
2025-02-05 00:12:33,291 - 执行序列成功
2025-02-05 00:12:34,063 - is_atomic: True
2025-02-05 00:12:34,063 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:12:34,063 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3) VALUES (NULL, 48.51, 8.51, 'HSTMl')"), (1, 'SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 45.96 WHERE (id = 6)'), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_2 = 3.48, col_1 = 65.17, col_3 = 'xijKR' WHERE (col_3 = 'ddtmy') AND (col_1 = 57.05)"), (2, "UPDATE table_0 SET col_3 = 'VjkRf', col_1 = 89.9 WHERE id BETWEEN 4 AND 4"), (2, 'COMMIT')]
2025-02-05 00:12:34,063 - snapshots: {'before': {'table_0': [(1, 76.62, 7.71, 'abgxm'), (2, 19.64, 2.57, 'ysroz'), (3, 47.41, 2.57, 'vroxo'), (4, 57.28, 35.1, 'gexwt'), (5, 84.14, 14.12, 'hcvcw'), (6, 57.05, 56.95, 'ddtmy')]}, 'trx1': {'table_0': [(1, 76.62, 7.71, 'abgxm'), (2, 19.64, 2.57, 'ysroz'), (3, 47.41, 2.57, 'vroxo'), (4, 57.28, 35.1, 'gexwt'), (5, 84.14, 14.12, 'hcvcw'), (6, 45.96, 56.95, 'ddtmy')]}, 'trx2': {'table_0': [(1, 76.62, 7.71, 'abgxm'), (2, 19.64, 2.57, 'ysroz'), (3, 47.41, 2.57, 'vroxo'), (4, 89.9, 35.1, 'VjkRf'), (5, 84.14, 14.12, 'hcvcw'), (6, 65.17, 3.48, 'xijKR'), (7, 48.51, 8.51, 'HSTMl')]}, 'serial': {'table_0': [(1, 76.62, 7.71, 'abgxm'), (2, 19.64, 2.57, 'ysroz'), (3, 47.41, 2.57, 'vroxo'), (4, 89.9, 35.1, 'VjkRf'), (5, 84.14, 14.12, 'hcvcw'), (6, 45.96, 56.95, 'ddtmy'), (8, 48.51, 8.51, 'HSTMl')]}}
2025-02-05 00:12:34,063 - 
2025-02-05 00:12:34,076 - iter: 97
2025-02-05 00:12:35,603 - table table_0 has 6 rows
2025-02-05 00:12:35,604 - res_dict: {'trx1_lock_row_ids': [3], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 00:12:35,604 - lock_same_resource: False
2025-02-05 00:12:35,604 - 
2025-02-05 00:12:35,604 - non intersection phase1
2025-02-05 00:12:35,605 - 事务1在第一阶段自己加的锁: X
2025-02-05 00:12:35,605 - 事务2在第一阶段自己加的锁: II
2025-02-05 00:12:35,605 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 00:12:35,605 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:12:35,609 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:12:35,611 - needed_params: {'cond', 'table', 'select_cols'}
2025-02-05 00:12:35,611 - params: {'cond': '(id = 3)', 'table': 'table_0', 'select_cols': 'col_0'}
2025-02-05 00:12:35,616 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:12:35,618 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:12:35,618 - params: {'v1': '5', 'set_expr': "col_2 = 'ZAqbd', col_0 = 55.57", 'table': 'table_0', 'v2': '5'}
2025-02-05 00:12:35,618 - non intersection phase1 end
2025-02-05 00:12:35,618 - 
2025-02-05 00:12:35,618 - non intersection phase2
2025-02-05 00:12:35,622 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:12:35,624 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:35,624 - params: {'v1': '5', 'v2': '5', 'table': 'table_0', 'select_cols': 'id, col_0'}
2025-02-05 00:12:35,628 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 00:12:35,630 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 00:12:35,630 - params: {'set_expr': "col_2 = 'IxlxF', col_0 = 29.81", 'table': 'table_0', 'cond': "(col_0 = 93.33) AND (col_2 = 'nifzv')"}
2025-02-05 00:12:35,630 - non intersection phase2 end
2025-02-05 00:12:35,630 - 
2025-02-05 00:12:35,630 - 生成死锁事务序列成功如下
2025-02-05 00:12:35,630 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_2 = 'ZAqbd', col_0 = 55.57 WHERE id BETWEEN 5 AND 5"), (1, 'SELECT col_0 FROM table_0 WHERE (id = 3) FOR UPDATE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_2 = 'IxlxF', col_0 = 29.81 WHERE (col_0 = 93.33) AND (col_2 = 'nifzv')"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:12:37,205 - 创建事务1连接成功
2025-02-05 00:12:37,206 - 执行事务1语句: BEGIN
2025-02-05 00:12:37,207 - 执行事务1语句: SELECT col_0 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 00:12:37,208 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:12:37,209 - 执行事务1语句: COMMIT;
2025-02-05 00:12:37,213 - 执行事务1成功
2025-02-05 00:12:39,860 - 恢复初始状态成功
2025-02-05 00:12:40,624 - 创建事务2连接成功
2025-02-05 00:12:40,625 - 执行事务2语句: BEGIN
2025-02-05 00:12:40,626 - 执行事务2语句: UPDATE table_0 SET col_2 = 'ZAqbd', col_0 = 55.57 WHERE id BETWEEN 5 AND 5
2025-02-05 00:12:40,627 - 执行事务2语句: UPDATE table_0 SET col_2 = 'IxlxF', col_0 = 29.81 WHERE (col_0 = 93.33) AND (col_2 = 'nifzv')
2025-02-05 00:12:40,629 - 执行事务2语句: COMMIT;
2025-02-05 00:12:40,633 - 执行事务2成功
2025-02-05 00:12:45,582 - 
2025-02-05 00:12:45,582 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_2 = 'ZAqbd', col_0 = 55.57 WHERE id BETWEEN 5 AND 5", <Thread(Thread-725, started 35864)>, 1738685565.5825431)}
2025-02-05 00:12:45,690 - stmt_idx: 2, status: success, result: None
2025-02-05 00:12:45,690 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'ZAqbd', col_0 = 55.57 WHERE id BETWEEN 5 AND 5
2025-02-05 00:12:45,690 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:12:45,690 - 
2025-02-05 00:12:45,799 - 
2025-02-05 00:12:45,799 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT col_0 FROM table_0 WHERE (id = 3) FOR UPDATE', <Thread(Thread-726, started 31428)>, 1738685565.7993212)}
2025-02-05 00:12:45,908 - stmt_idx: 3, status: success, result: None
2025-02-05 00:12:45,908 - 成功执行序列中事务1语句: SELECT col_0 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 00:12:45,908 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:12:45,908 - 
2025-02-05 00:12:46,017 - 
2025-02-05 00:12:46,017 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-727, started 34216)>, 1738685566.0174382)}
2025-02-05 00:12:46,125 - wait for lock, trx_id: 1, stmt: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:12:46,125 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-727, started 34216)>, 1738685566.0174382)}
2025-02-05 00:12:46,125 - 
2025-02-05 00:12:46,233 - 
2025-02-05 00:12:46,234 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-727, started 34216)>, 1738685566.0174382), 5: (2, "UPDATE table_0 SET col_2 = 'IxlxF', col_0 = 29.81 WHERE (col_0 = 93.33) AND (col_2 = 'nifzv')", <Thread(Thread-728, started 34684)>, 1738685566.2335896)}
2025-02-05 00:12:46,237 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:12:46,340 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:12:46,340 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 00:12:46,340 - 错误: dictionary changed size during iteration
2025-02-05 00:12:46,344 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, "UPDATE table_0 SET col_2 = 'IxlxF', col_0 = 29.81 WHERE (col_0 = 93.33) AND (col_2 = 'nifzv')", <Thread(Thread-728, stopped 34684)>, 1738685566.2335896)}
2025-02-05 00:12:46,344 - 
2025-02-05 00:12:46,344 - 执行前idx: 8, pending_stmts: {5: (2, "UPDATE table_0 SET col_2 = 'IxlxF', col_0 = 29.81 WHERE (col_0 = 93.33) AND (col_2 = 'nifzv')", <Thread(Thread-728, stopped 34684)>, 1738685566.2335896)}
2025-02-05 00:12:46,448 - stmt_idx: 5, status: success, result: None
2025-02-05 00:12:46,448 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'IxlxF', col_0 = 29.81 WHERE (col_0 = 93.33) AND (col_2 = 'nifzv')
2025-02-05 00:12:46,448 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:12:46,448 - 
2025-02-05 00:12:46,557 - 执行序列成功
2025-02-05 00:12:47,339 - is_atomic: True
2025-02-05 00:12:47,339 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 00:12:47,339 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_2 = 'ZAqbd', col_0 = 55.57 WHERE id BETWEEN 5 AND 5"), (1, 'SELECT col_0 FROM table_0 WHERE (id = 3) FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, "UPDATE table_0 SET col_2 = 'IxlxF', col_0 = 29.81 WHERE (col_0 = 93.33) AND (col_2 = 'nifzv')")]
2025-02-05 00:12:47,339 - snapshots: {'before': {'table_0': [(1, 52.29, 'ianjq'), (2, 46.52, 'xdloh'), (3, 93.33, 'nifzv'), (4, 80.25, 'wlgex'), (5, 52.94, 'yvslc'), (6, 54.06, 'ewryb')]}, 'trx1': {'table_0': [(1, 52.29, 'ianjq'), (2, 46.52, 'xdloh'), (3, 93.33, 'nifzv'), (4, 80.25, 'wlgex'), (5, 52.94, 'yvslc'), (6, 54.06, 'ewryb')]}, 'trx2': {'table_0': [(1, 52.29, 'ianjq'), (2, 46.52, 'xdloh'), (3, 93.33, 'nifzv'), (4, 80.25, 'wlgex'), (5, 55.57, 'ZAqbd'), (6, 54.06, 'ewryb')]}, 'serial': {'table_0': [(1, 52.29, 'ianjq'), (2, 46.52, 'xdloh'), (3, 93.33, 'nifzv'), (4, 80.25, 'wlgex'), (5, 55.57, 'ZAqbd'), (6, 54.06, 'ewryb')]}}
2025-02-05 00:12:47,339 - 
2025-02-05 00:12:47,349 - iter: 98
2025-02-05 00:12:48,864 - table table_0 has 11 rows
2025-02-05 00:12:48,864 - res_dict: {'trx1_lock_row_ids': [8], 'trx2_lock_row_ids': [3, 4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-05 00:12:48,864 - lock_same_resource: False
2025-02-05 00:12:48,864 - 
2025-02-05 00:12:48,864 - non intersection phase1
2025-02-05 00:12:48,865 - 事务1在第一阶段自己加的锁: II
2025-02-05 00:12:48,865 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:12:48,865 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 00:12:48,865 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 00:12:48,868 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:12:48,869 - needed_params: {'v1', 'set_expr', 'table', 'v2'}
2025-02-05 00:12:48,869 - params: {'v1': '9', 'set_expr': 'col_0 = 27.81', 'table': 'table_0', 'v2': '9'}
2025-02-05 00:12:48,873 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=7
2025-02-05 00:12:48,874 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:48,874 - params: {'v1': '4', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_0, col_1'}
2025-02-05 00:12:48,875 - non intersection phase1 end
2025-02-05 00:12:48,875 - 
2025-02-05 00:12:48,875 - non intersection phase2
2025-02-05 00:12:48,878 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 00:12:48,879 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:12:48,879 - params: {'v1': '6', 'v2': '6', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_3'}
2025-02-05 00:12:48,882 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 00:12:48,883 - needed_params: {'cond', 'table'}
2025-02-05 00:12:48,883 - params: {'cond': '(id = 9) AND (col_3 = 70) AND (col_0 = 9.63)', 'table': 'table_0'}
2025-02-05 00:12:48,884 - non intersection phase2 end
2025-02-05 00:12:48,884 - 
2025-02-05 00:12:48,884 - 生成死锁事务序列成功如下
2025-02-05 00:12:48,884 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_0 = 27.81 WHERE id BETWEEN 9 AND 9'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 9) AND (col_3 = 70) AND (col_0 = 9.63)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:12:50,435 - 创建事务1连接成功
2025-02-05 00:12:50,436 - 执行事务1语句: BEGIN
2025-02-05 00:12:50,437 - 执行事务1语句: UPDATE table_0 SET col_0 = 27.81 WHERE id BETWEEN 9 AND 9
2025-02-05 00:12:50,438 - 执行事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:12:50,440 - 执行事务1语句: COMMIT;
2025-02-05 00:12:50,445 - 执行事务1成功
2025-02-05 00:12:53,068 - 恢复初始状态成功
2025-02-05 00:12:53,840 - 创建事务2连接成功
2025-02-05 00:12:53,842 - 执行事务2语句: BEGIN
2025-02-05 00:12:53,843 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 7 FOR UPDATE
2025-02-05 00:12:53,843 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 9) AND (col_3 = 70) AND (col_0 = 9.63)
2025-02-05 00:12:53,845 - 执行事务2语句: COMMIT;
2025-02-05 00:12:53,850 - 执行事务2成功
2025-02-05 00:12:58,765 - 
2025-02-05 00:12:58,765 - 执行前idx: 3, pending_stmts: {2: (1, 'UPDATE table_0 SET col_0 = 27.81 WHERE id BETWEEN 9 AND 9', <Thread(Thread-729, started 6484)>, 1738685578.7654545)}
2025-02-05 00:12:58,875 - stmt_idx: 2, status: success, result: None
2025-02-05 00:12:58,876 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 27.81 WHERE id BETWEEN 9 AND 9
2025-02-05 00:12:58,876 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:12:58,876 - 
2025-02-05 00:12:58,983 - 
2025-02-05 00:12:58,984 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 7 FOR UPDATE', <Thread(Thread-730, started 14440)>, 1738685578.9831588)}
2025-02-05 00:12:59,091 - stmt_idx: 3, status: success, result: None
2025-02-05 00:12:59,091 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 7 FOR UPDATE
2025-02-05 00:12:59,091 - 执行后idx: 4, pending_stmts: {}
2025-02-05 00:12:59,091 - 
2025-02-05 00:12:59,200 - 
2025-02-05 00:12:59,200 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-731, started 41456)>, 1738685579.2003298)}
2025-02-05 00:12:59,308 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:12:59,308 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-731, started 41456)>, 1738685579.2003298)}
2025-02-05 00:12:59,308 - 
2025-02-05 00:12:59,415 - 
2025-02-05 00:12:59,416 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-731, started 41456)>, 1738685579.2003298), 5: (2, 'DELETE FROM table_0 WHERE (id = 9) AND (col_3 = 70) AND (col_0 = 9.63)', <Thread(Thread-732, started 30792)>, 1738685579.4158378)}
2025-02-05 00:12:59,419 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (id = 9) AND (col_3 = 70) AND (col_0 = 9.63)
2025-02-05 00:12:59,524 - stmt_idx: 4, status: success, result: None
2025-02-05 00:12:59,524 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:12:59,524 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 00:12:59,632 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 00:12:59,632 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: DELETE FROM table_0 WHERE (id = 9) AND (col_3 = 70) AND (col_0 = 9.63)
2025-02-05 00:12:59,632 - 错误: dictionary changed size during iteration
2025-02-05 00:12:59,636 - 执行序列成功
2025-02-05 00:13:00,435 - is_atomic: True
2025-02-05 00:13:00,436 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 00:13:00,436 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_0 = 27.81 WHERE id BETWEEN 9 AND 9'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 00:13:00,436 - snapshots: {'before': {'table_0': [(1, 77.53, 'aksrp', 46), (2, 69.82, 'awhgl', 34), (4, 14.43, 'mkedo', 92), (5, 58.05, 'hhrwq', 68), (6, 78.96, 'uojex', 65), (7, 1.63, 'wwwzv', 49), (8, 35.54, 'owpeg', 1), (9, 9.63, 'slhhd', 70), (10, 96.04, 'mhqvk', 35), (12, 77.18, 'ulvwa', 35), (13, 71.13, 'lzgzg', 15)]}, 'trx1': {'table_0': [(1, 77.53, 'aksrp', 46), (2, 69.82, 'awhgl', 34), (4, 14.43, 'mkedo', 92), (5, 58.05, 'hhrwq', 68), (6, 78.96, 'uojex', 65), (7, 1.63, 'wwwzv', 49), (8, 35.54, 'owpeg', 1), (9, 27.81, 'slhhd', 70), (10, 96.04, 'mhqvk', 35), (12, 77.18, 'ulvwa', 35), (13, 71.13, 'lzgzg', 15)]}, 'trx2': {'table_0': [(1, 77.53, 'aksrp', 46), (2, 69.82, 'awhgl', 34), (4, 14.43, 'mkedo', 92), (5, 58.05, 'hhrwq', 68), (6, 78.96, 'uojex', 65), (7, 1.63, 'wwwzv', 49), (8, 35.54, 'owpeg', 1), (10, 96.04, 'mhqvk', 35), (12, 77.18, 'ulvwa', 35), (13, 71.13, 'lzgzg', 15)]}, 'serial': {'table_0': [(1, 77.53, 'aksrp', 46), (2, 69.82, 'awhgl', 34), (4, 14.43, 'mkedo', 92), (5, 58.05, 'hhrwq', 68), (6, 78.96, 'uojex', 65), (7, 1.63, 'wwwzv', 49), (8, 35.54, 'owpeg', 1), (9, 27.81, 'slhhd', 70), (10, 96.04, 'mhqvk', 35), (12, 77.18, 'ulvwa', 35), (13, 71.13, 'lzgzg', 15)]}}
2025-02-05 00:13:00,436 - 
2025-02-05 00:13:00,446 - iter: 99
2025-02-05 00:13:01,933 - table table_0 has 10 rows
2025-02-05 00:13:01,934 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'trx2_lock_row_ids': [9], 'intersection_row_ids': []}
2025-02-05 00:13:01,934 - lock_same_resource: False
2025-02-05 00:13:01,934 - 
2025-02-05 00:13:01,934 - non intersection phase1
2025-02-05 00:13:01,934 - 事务1在第一阶段自己加的锁: S
2025-02-05 00:13:01,934 - 事务2在第一阶段自己加的锁: X
2025-02-05 00:13:01,934 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 00:13:01,934 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 00:13:01,937 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=8
2025-02-05 00:13:01,938 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:13:01,938 - params: {'v1': '1', 'v2': '8', 'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2'}
2025-02-05 00:13:01,942 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:13:01,943 - needed_params: {'cond', 'table'}
2025-02-05 00:13:01,944 - params: {'cond': "(col_0 = 'ocfeu') AND (col_2 = 'eatgq')", 'table': 'table_0'}
2025-02-05 00:13:01,944 - non intersection phase1 end
2025-02-05 00:13:01,944 - 
2025-02-05 00:13:01,944 - non intersection phase2
2025-02-05 00:13:01,948 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=NK, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 00:13:01,949 - needed_params: {'insert_cols', 'vals', 'table'}
2025-02-05 00:13:01,949 - params: {'insert_cols': 'id, col_0, col_1, col_2, col_3', 'vals': "NULL, 'lesxN', 2, 'hJapL', 'KgCxL'", 'table': 'table_0'}
2025-02-05 00:13:01,952 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 00:13:01,953 - needed_params: {'v1', 'v2', 'table', 'select_cols'}
2025-02-05 00:13:01,953 - params: {'v1': '7', 'v2': '7', 'table': 'table_0', 'select_cols': 'col_2, col_3'}
2025-02-05 00:13:01,953 - non intersection phase2 end
2025-02-05 00:13:01,953 - 
2025-02-05 00:13:01,954 - 生成死锁事务序列成功如下
2025-02-05 00:13:01,954 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 LOCK IN SHARE MODE'), (2, "DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')"), (2, 'SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'lesxN', 2, 'hJapL', 'KgCxL')"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 00:13:03,505 - 创建事务1连接成功
2025-02-05 00:13:03,507 - 执行事务1语句: BEGIN
2025-02-05 00:13:03,508 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 LOCK IN SHARE MODE
2025-02-05 00:13:03,509 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'lesxN', 2, 'hJapL', 'KgCxL')
2025-02-05 00:13:03,519 - 执行事务1语句: COMMIT;
2025-02-05 00:13:03,525 - 执行事务1成功
2025-02-05 00:13:06,156 - 恢复初始状态成功
2025-02-05 00:13:06,942 - 创建事务2连接成功
2025-02-05 00:13:06,944 - 执行事务2语句: BEGIN
2025-02-05 00:13:06,944 - 执行事务2语句: DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')
2025-02-05 00:13:06,945 - 执行事务2语句: SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:13:06,948 - 执行事务2语句: COMMIT;
2025-02-05 00:13:06,951 - 执行事务2成功
2025-02-05 00:13:11,859 - 
2025-02-05 00:13:11,859 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 LOCK IN SHARE MODE', <Thread(Thread-733, started 15060)>, 1738685591.8598435)}
2025-02-05 00:13:11,968 - stmt_idx: 2, status: success, result: None
2025-02-05 00:13:11,968 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 LOCK IN SHARE MODE
2025-02-05 00:13:11,968 - 执行后idx: 3, pending_stmts: {}
2025-02-05 00:13:11,968 - 
2025-02-05 00:13:12,075 - 
2025-02-05 00:13:12,075 - 执行前idx: 4, pending_stmts: {3: (2, "DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')", <Thread(Thread-734, started 36664)>, 1738685592.0757015)}
2025-02-05 00:13:12,184 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')
2025-02-05 00:13:12,184 - 执行后idx: 4, pending_stmts: {3: (2, "DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')", <Thread(Thread-734, started 36664)>, 1738685592.0757015)}
2025-02-05 00:13:12,184 - 
2025-02-05 00:13:12,292 - 
2025-02-05 00:13:12,292 - 执行前idx: 6, pending_stmts: {3: (2, "DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')", <Thread(Thread-734, started 36664)>, 1738685592.0757015), 5: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'lesxN', 2, 'hJapL', 'KgCxL')", <Thread(Thread-735, started 32688)>, 1738685592.292476)}
2025-02-05 00:13:12,399 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')
2025-02-05 00:13:12,506 - stmt_idx: 5, status: success, result: None
2025-02-05 00:13:12,506 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'lesxN', 2, 'hJapL', 'KgCxL')
2025-02-05 00:13:12,506 - 执行后idx: 6, pending_stmts: {3: (2, "DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')", <Thread(Thread-734, started 36664)>, 1738685592.0757015)}
2025-02-05 00:13:12,506 - 
2025-02-05 00:13:12,620 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, "DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')", <Thread(Thread-734, started 36664)>, 1738685592.0757015)}
2025-02-05 00:13:12,620 - 
2025-02-05 00:13:12,620 - 执行前idx: 8, pending_stmts: {3: (2, "DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')", <Thread(Thread-734, stopped 36664)>, 1738685592.0757015)}
2025-02-05 00:13:12,723 - stmt_idx: 3, status: success, result: None
2025-02-05 00:13:12,723 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')
2025-02-05 00:13:12,723 - 结束了阻塞，blocked_trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')
2025-02-05 00:13:12,724 - 执行后idx: 8, pending_stmts: {4: (2, 'SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-736, started 34536)>, 1738685592.7244172), 7: (2, 'COMMIT', <Thread(Thread-737, started 34264)>, 1738685592.7244172)}
2025-02-05 00:13:12,724 - 
2025-02-05 00:13:12,830 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-736, stopped 34536)>, 1738685592.7244172), 7: (2, 'COMMIT', <Thread(Thread-737, stopped 34264)>, 1738685592.7244172)}
2025-02-05 00:13:12,831 - 
2025-02-05 00:13:12,831 - 执行前idx: 8, pending_stmts: {4: (2, 'SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-736, stopped 34536)>, 1738685592.7244172), 7: (2, 'COMMIT', <Thread(Thread-737, stopped 34264)>, 1738685592.7244172)}
2025-02-05 00:13:12,938 - stmt_idx: 4, status: success, result: None
2025-02-05 00:13:12,939 - 成功执行序列中事务2语句: SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 00:13:13,046 - stmt_idx: 7, status: success, result: None
2025-02-05 00:13:13,046 - 成功执行序列中事务2语句: COMMIT
2025-02-05 00:13:13,046 - 执行后idx: 8, pending_stmts: {}
2025-02-05 00:13:13,046 - 
2025-02-05 00:13:13,157 - 执行序列成功
2025-02-05 00:13:13,926 - is_atomic: True
2025-02-05 00:13:13,926 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 00:13:13,926 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 'lesxN', 2, 'hJapL', 'KgCxL')"), (1, 'COMMIT'), (2, "DELETE FROM table_0 WHERE (col_0 = 'ocfeu') AND (col_2 = 'eatgq')"), (2, 'SELECT col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'COMMIT')]
2025-02-05 00:13:13,927 - snapshots: {'before': {'table_0': [(1, 'uiqin', 71, 'ayppv', 'uyiub'), (2, 'nshlr', 45, 'jurjh', 'cuzsi'), (3, 'qzuzr', 55, 'biqbc', 'tlmqk'), (4, 'kfurk', 73, 'gaxyu', 'euiwd'), (5, 'bwnss', 47, 'slner', 'asfzi'), (6, 'puhkw', 59, 'dhntf', 'xxzom'), (7, 'hcsxc', 31, 'oytaf', 'fnvkz'), (8, 'acmyi', 74, 'robhd', 'mgnos'), (9, 'ocfeu', 31, 'eatgq', 'ufntk'), (10, 'zqrdr', 50, 'symuy', 'hyfqf')]}, 'trx1': {'table_0': [(1, 'uiqin', 71, 'ayppv', 'uyiub'), (2, 'nshlr', 45, 'jurjh', 'cuzsi'), (3, 'qzuzr', 55, 'biqbc', 'tlmqk'), (4, 'kfurk', 73, 'gaxyu', 'euiwd'), (5, 'bwnss', 47, 'slner', 'asfzi'), (6, 'puhkw', 59, 'dhntf', 'xxzom'), (7, 'hcsxc', 31, 'oytaf', 'fnvkz'), (8, 'acmyi', 74, 'robhd', 'mgnos'), (9, 'ocfeu', 31, 'eatgq', 'ufntk'), (10, 'zqrdr', 50, 'symuy', 'hyfqf'), (11, 'lesxN', 2, 'hJapL', 'KgCxL')]}, 'trx2': {'table_0': [(1, 'uiqin', 71, 'ayppv', 'uyiub'), (2, 'nshlr', 45, 'jurjh', 'cuzsi'), (3, 'qzuzr', 55, 'biqbc', 'tlmqk'), (4, 'kfurk', 73, 'gaxyu', 'euiwd'), (5, 'bwnss', 47, 'slner', 'asfzi'), (6, 'puhkw', 59, 'dhntf', 'xxzom'), (7, 'hcsxc', 31, 'oytaf', 'fnvkz'), (8, 'acmyi', 74, 'robhd', 'mgnos'), (10, 'zqrdr', 50, 'symuy', 'hyfqf')]}, 'serial': {'table_0': [(1, 'uiqin', 71, 'ayppv', 'uyiub'), (2, 'nshlr', 45, 'jurjh', 'cuzsi'), (3, 'qzuzr', 55, 'biqbc', 'tlmqk'), (4, 'kfurk', 73, 'gaxyu', 'euiwd'), (5, 'bwnss', 47, 'slner', 'asfzi'), (6, 'puhkw', 59, 'dhntf', 'xxzom'), (7, 'hcsxc', 31, 'oytaf', 'fnvkz'), (8, 'acmyi', 74, 'robhd', 'mgnos'), (10, 'zqrdr', 50, 'symuy', 'hyfqf'), (12, 'lesxN', 2, 'hJapL', 'KgCxL')]}}
2025-02-05 00:13:13,927 - 
2025-02-05 18:46:03,047 - INFO TEST
2025-02-05 18:46:03,047 - DEBUG TEST
2025-02-05 18:46:03,047 - ERROR TEST
2025-02-05 18:46:03,047 - iter: 0
2025-02-05 18:46:04,798 - table table_0 has 14 rows
2025-02-05 18:46:04,798 - trx1_lock_row_ids: [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14]
2025-02-05 18:46:04,798 - trx2_lock_row_ids: [2, 3, 4, 5]
2025-02-05 18:46:04,798 - intersection_row_ids: [2, 3, 4, 5]
2025-02-05 18:46:04,798 - trx1_exclusive_ids: [6, 7, 8, 10, 12, 13, 14]
2025-02-05 18:46:04,798 - trx2_exclusive_ids: []
2025-02-05 18:46:04,798 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14], 'trx2_lock_row_ids': [2, 3, 4, 5], 'intersection_row_ids': [2, 3, 4, 5]}
2025-02-05 18:46:04,799 - lock_same_resource: True
2025-02-05 18:46:04,799 - 
2025-02-05 18:46:04,799 - intersection phase1
2025-02-05 18:46:04,809 - 生成锁SQL失败: 'GAP'
2025-02-05 18:46:04,809 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:46:04,809 - 
2025-02-05 18:46:04,809 - Error in iteration 0: 'GAP'
2025-02-05 18:46:04,809 - 
2025-02-05 18:46:04,816 - iter: 1
2025-02-05 18:46:06,376 - table table_0 has 11 rows
2025-02-05 18:46:06,376 - trx1_start_id: 2
2025-02-05 18:46:06,376 - trx1_end_id: 6
2025-02-05 18:46:06,376 - trx1_exclusive_start_id: 2
2025-02-05 18:46:06,376 - trx1_exclusive_end_id: 1
2025-02-05 18:46:06,376 - trx1_exclusive_ids: []
2025-02-05 18:46:06,376 - trx2_start_id: 2
2025-02-05 18:46:06,376 - trx2_end_id: 10
2025-02-05 18:46:06,376 - trx2_exclusive_start_id: 7
2025-02-05 18:46:06,376 - trx2_exclusive_end_id: 10
2025-02-05 18:46:06,376 - trx2_exclusive_ids: [7, 8, 9, 10]
2025-02-05 18:46:06,376 - intersection_ids: [2, 3, 4, 5, 6]
2025-02-05 18:46:06,376 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7, 8, 9, 10], 'intersection_row_ids': [2, 3, 4, 5, 6]}
2025-02-05 18:46:06,376 - lock_same_resource: True
2025-02-05 18:46:06,377 - 
2025-02-05 18:46:06,377 - intersection phase1
2025-02-05 18:46:06,384 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 18:46:06,386 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:06,386 - params: {'select_cols': 'id, col_0, col_965', 'table': 'table_0', 'v2': '6', 'v1': '2'}
2025-02-05 18:46:06,390 - 生成锁SQL失败: 'GAP'
2025-02-05 18:46:06,390 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:46:06,390 - 
2025-02-05 18:46:06,391 - Error in iteration 1: 'GAP'
2025-02-05 18:46:06,391 - 
2025-02-05 18:46:06,398 - iter: 2
2025-02-05 18:46:07,975 - table table_0 has 8 rows
2025-02-05 18:46:07,975 - trx1_start_id: 1
2025-02-05 18:46:07,975 - trx1_end_id: 2
2025-02-05 18:46:07,975 - trx1_exclusive_start_id: 1
2025-02-05 18:46:07,975 - trx1_exclusive_end_id: 0
2025-02-05 18:46:07,975 - trx1_exclusive_ids: []
2025-02-05 18:46:07,975 - trx2_start_id: 1
2025-02-05 18:46:07,975 - trx2_end_id: 8
2025-02-05 18:46:07,975 - trx2_exclusive_start_id: 3
2025-02-05 18:46:07,975 - trx2_exclusive_end_id: 8
2025-02-05 18:46:07,975 - trx2_exclusive_ids: [3, 4, 5, 6, 7, 8]
2025-02-05 18:46:07,975 - intersection_ids: [1, 2]
2025-02-05 18:46:07,976 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': [1, 2]}
2025-02-05 18:46:07,976 - lock_same_resource: True
2025-02-05 18:46:07,976 - 
2025-02-05 18:46:07,976 - intersection phase1
2025-02-05 18:46:07,986 - 生成锁SQL失败: 'GAP'
2025-02-05 18:46:07,986 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:46:07,986 - 
2025-02-05 18:46:07,986 - Error in iteration 2: 'GAP'
2025-02-05 18:46:07,986 - 
2025-02-05 18:46:07,993 - iter: 3
2025-02-05 18:46:09,514 - table table_0 has 5 rows
2025-02-05 18:46:09,514 - res_dict: {'trx1_lock_row_ids': [4, 5], 'trx2_lock_row_ids': [2], 'intersection_row_ids': []}
2025-02-05 18:46:09,514 - lock_same_resource: False
2025-02-05 18:46:09,514 - 
2025-02-05 18:46:09,514 - non intersection phase1
2025-02-05 18:46:09,514 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:46:09,515 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:46:09,515 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:46:09,515 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:46:09,515 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:46:09,515 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:46:09,515 - 
2025-02-05 18:46:09,515 - Error in iteration 3: 'NK'
2025-02-05 18:46:09,515 - 
2025-02-05 18:46:09,522 - iter: 4
2025-02-05 18:46:11,099 - table table_0 has 13 rows
2025-02-05 18:46:11,099 - trx1_lock_row_ids: [9, 10, 11, 12, 13]
2025-02-05 18:46:11,099 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 18:46:11,099 - intersection_row_ids: [9, 10, 11, 12, 13]
2025-02-05 18:46:11,099 - trx1_exclusive_ids: []
2025-02-05 18:46:11,099 - trx2_exclusive_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 18:46:11,099 - res_dict: {'trx1_lock_row_ids': [9, 10, 11, 12, 13], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'intersection_row_ids': [9, 10, 11, 12, 13]}
2025-02-05 18:46:11,100 - lock_same_resource: True
2025-02-05 18:46:11,100 - 
2025-02-05 18:46:11,100 - intersection phase1
2025-02-05 18:46:11,108 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=9, is_continuous=True, range_end_idx=13
2025-02-05 18:46:11,111 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:11,111 - params: {'select_cols': 'col_2', 'table': 'table_0', 'v2': '13', 'v1': '9'}
2025-02-05 18:46:11,115 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,117 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:11,117 - params: {'select_cols': 'col_0, col_2, col_391', 'table': 'table_0', 'v2': '9', 'v1': '9'}
2025-02-05 18:46:11,121 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,123 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:11,123 - params: {'select_cols': 'id, col_391', 'table': 'table_0', 'v2': '10', 'v1': '10'}
2025-02-05 18:46:11,127 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,128 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:11,128 - params: {'select_cols': 'id, col_2', 'table': 'table_0', 'cond': '(col_2 = 33.22) AND (col_391 IS NULL) AND (col_0 = 56.06)'}
2025-02-05 18:46:11,133 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,135 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:11,135 - params: {'select_cols': 'id, col_0', 'table': 'table_0', 'v2': '12', 'v1': '12'}
2025-02-05 18:46:11,139 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,142 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:11,142 - params: {'select_cols': 'id, col_0, col_2', 'table': 'table_0', 'cond': '(col_2 = 30.19) AND (col_391 IS NULL)'}
2025-02-05 18:46:11,142 - intersection phase1 end
2025-02-05 18:46:11,142 - 
2025-02-05 18:46:11,143 - intersection phase2
2025-02-05 18:46:11,143 - 事务1在第二阶段自己加的锁: NK
2025-02-05 18:46:11,143 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:46:11,143 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 18:46:11,143 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 18:46:11,147 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,149 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:46:11,149 - params: {'set_expr': 'col_391 = 77.59, col_2 = 25.09', 'table': 'table_0', 'cond': '(col_0 = 47.55) AND (col_391 IS NULL) AND (col_2 = 11.48)'}
2025-02-05 18:46:11,152 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,153 - needed_params: {'table', 'cond'}
2025-02-05 18:46:11,153 - params: {'table': 'table_0', 'cond': '(col_0 = 78.72) AND (col_2 = 9.74)'}
2025-02-05 18:46:11,156 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,157 - needed_params: {'table', 'cond'}
2025-02-05 18:46:11,157 - params: {'table': 'table_0', 'cond': '(col_2 = 57.56) AND (col_0 = 22.27)'}
2025-02-05 18:46:11,160 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,161 - needed_params: {'table', 'cond'}
2025-02-05 18:46:11,162 - params: {'table': 'table_0', 'cond': '(col_0 = 88.06) AND (col_2 = 20.14)'}
2025-02-05 18:46:11,164 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,165 - needed_params: {'table', 'cond'}
2025-02-05 18:46:11,166 - params: {'table': 'table_0', 'cond': '(col_391 IS NULL) AND (col_0 = 89.73) AND (col_2 = 98.67)'}
2025-02-05 18:46:11,168 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,169 - needed_params: {'table', 'cond'}
2025-02-05 18:46:11,169 - params: {'table': 'table_0', 'cond': '(col_2 = 89.8)'}
2025-02-05 18:46:11,173 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,174 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:46:11,174 - params: {'set_expr': 'col_2 = 55.45, col_391 = 49.98', 'table': 'table_0', 'cond': '(col_391 IS NULL)'}
2025-02-05 18:46:11,175 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,176 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:11,176 - params: {'select_cols': 'id, col_0', 'table': 'table_0', 'cond': '(col_2 = 46.93)'}
2025-02-05 18:46:11,178 - intersection phase2 end
2025-02-05 18:46:11,178 - 
2025-02-05 18:46:11,178 - intersection phase3
2025-02-05 18:46:11,181 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:46:11,182 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:11,182 - params: {'select_cols': '*', 'table': 'table_0', 'v2': '7', 'v1': '7'}
2025-02-05 18:46:11,182 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:46:11,182 - 
2025-02-05 18:46:11,182 - Error in iteration 4: 'NK'
2025-02-05 18:46:11,182 - 
2025-02-05 18:46:11,189 - iter: 5
2025-02-05 18:46:12,685 - table table_0 has 7 rows
2025-02-05 18:46:12,686 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [6], 'intersection_row_ids': []}
2025-02-05 18:46:12,686 - lock_same_resource: False
2025-02-05 18:46:12,686 - 
2025-02-05 18:46:12,686 - non intersection phase1
2025-02-05 18:46:12,686 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:46:12,686 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:46:12,686 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:46:12,686 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:46:12,689 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 18:46:12,690 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:12,690 - params: {'select_cols': 'id, col_2, col_4', 'table': 'table_0', 'v2': '2', 'v1': '1'}
2025-02-05 18:46:12,694 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 18:46:12,695 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:12,695 - params: {'select_cols': 'col_1, col_2, col_4', 'table': 'table_0', 'v2': '6', 'v1': '6'}
2025-02-05 18:46:12,696 - non intersection phase1 end
2025-02-05 18:46:12,696 - 
2025-02-05 18:46:12,696 - non intersection phase2
2025-02-05 18:46:12,699 - 生成锁SQL失败: 'NK'
2025-02-05 18:46:12,699 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:46:12,699 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:46:12,700 - 
2025-02-05 18:46:12,700 - Error in iteration 5: 'NK'
2025-02-05 18:46:12,700 - 
2025-02-05 18:46:12,707 - iter: 6
2025-02-05 18:46:14,238 - table table_0 has 8 rows
2025-02-05 18:46:14,238 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [1, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': []}
2025-02-05 18:46:14,238 - lock_same_resource: False
2025-02-05 18:46:14,238 - 
2025-02-05 18:46:14,239 - non intersection phase1
2025-02-05 18:46:14,239 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:46:14,239 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:46:14,239 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 18:46:14,239 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:46:14,244 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:46:14,246 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:14,246 - params: {'select_cols': '*', 'table': 'table_0', 'v2': '2', 'v1': '2'}
2025-02-05 18:46:14,251 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:46:14,253 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:14,253 - params: {'select_cols': 'id, col_1', 'table': 'table_0', 'v2': '1', 'v1': '1'}
2025-02-05 18:46:14,257 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:46:14,259 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:46:14,259 - params: {'set_expr': 'col_0 = 94.45, col_1 = 8', 'table': 'table_0', 'cond': '(id = 3)'}
2025-02-05 18:46:14,263 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:46:14,266 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:14,266 - params: {'select_cols': 'id, col_1', 'table': 'table_0', 'cond': '(col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28)'}
2025-02-05 18:46:14,270 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:46:14,272 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:46:14,272 - params: {'set_expr': 'col_1 = 46', 'table': 'table_0', 'cond': '(col_1 = 86)'}
2025-02-05 18:46:14,275 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:14,278 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:14,278 - params: {'select_cols': '*', 'table': 'table_0', 'v2': '6', 'v1': '6'}
2025-02-05 18:46:14,281 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:46:14,282 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:14,283 - params: {'select_cols': 'id', 'table': 'table_0', 'cond': '(col_2 = 49.24)'}
2025-02-05 18:46:14,287 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:46:14,289 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:14,289 - params: {'select_cols': 'id, col_2', 'table': 'table_0', 'cond': '(col_1 = 83) AND (col_0 = 11.18)'}
2025-02-05 18:46:14,289 - non intersection phase1 end
2025-02-05 18:46:14,289 - 
2025-02-05 18:46:14,289 - non intersection phase2
2025-02-05 18:46:14,293 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:14,294 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:14,295 - params: {'select_cols': '*', 'table': 'table_0', 'v2': '6', 'v1': '6'}
2025-02-05 18:46:14,297 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:46:14,298 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:14,299 - params: {'select_cols': '*', 'table': 'table_0', 'v2': '2', 'v1': '2'}
2025-02-05 18:46:14,299 - non intersection phase2 end
2025-02-05 18:46:14,299 - 
2025-02-05 18:46:14,299 - 生成死锁事务序列成功如下
2025-02-05 18:46:14,299 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 94.45, col_1 = 8 WHERE (id = 3)'), (2, 'SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 46 WHERE (col_1 = 86)'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE (col_2 = 49.24) FOR UPDATE'), (2, 'SELECT id, col_2 FROM table_0 WHERE (col_1 = 83) AND (col_0 = 11.18) FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:46:15,848 - 创建事务1连接成功
2025-02-05 18:46:15,849 - 执行事务1语句: BEGIN
2025-02-05 18:46:15,850 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:46:15,852 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:46:15,852 - 执行事务1语句: COMMIT;
2025-02-05 18:46:15,858 - 执行事务1成功
2025-02-05 18:46:18,455 - 恢复初始状态成功
2025-02-05 18:46:19,246 - 创建事务2连接成功
2025-02-05 18:46:19,248 - 执行事务2语句: BEGIN
2025-02-05 18:46:19,249 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:46:19,251 - 执行事务2语句: UPDATE table_0 SET col_0 = 94.45, col_1 = 8 WHERE (id = 3)
2025-02-05 18:46:19,252 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE
2025-02-05 18:46:19,252 - 执行事务2语句: UPDATE table_0 SET col_1 = 46 WHERE (col_1 = 86)
2025-02-05 18:46:19,253 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:46:19,254 - 执行事务2语句: SELECT id FROM table_0 WHERE (col_2 = 49.24) FOR UPDATE
2025-02-05 18:46:19,254 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE (col_1 = 83) AND (col_0 = 11.18) FOR UPDATE
2025-02-05 18:46:19,255 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 18:46:19,258 - 执行事务2语句: COMMIT;
2025-02-05 18:46:19,265 - 执行事务2成功
2025-02-05 18:46:24,218 - 
2025-02-05 18:46:24,219 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-1, started 43312)>, 1738752384.2187302)}
2025-02-05 18:46:24,332 - stmt_idx: 2, status: success, result: None
2025-02-05 18:46:24,332 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:46:24,332 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:46:24,332 - 
2025-02-05 18:46:24,440 - 
2025-02-05 18:46:24,440 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-2, started 38248)>, 1738752384.440684)}
2025-02-05 18:46:24,547 - stmt_idx: 3, status: success, result: None
2025-02-05 18:46:24,547 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:46:24,547 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:46:24,547 - 
2025-02-05 18:46:24,655 - 
2025-02-05 18:46:24,655 - 执行前idx: 5, pending_stmts: {4: (2, 'UPDATE table_0 SET col_0 = 94.45, col_1 = 8 WHERE (id = 3)', <Thread(Thread-3, started 7512)>, 1738752384.6550028)}
2025-02-05 18:46:24,763 - stmt_idx: 4, status: success, result: None
2025-02-05 18:46:24,763 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 94.45, col_1 = 8 WHERE (id = 3)
2025-02-05 18:46:24,763 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:46:24,763 - 
2025-02-05 18:46:24,872 - 
2025-02-05 18:46:24,873 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE', <Thread(Thread-4, started 32216)>, 1738752384.8728776)}
2025-02-05 18:46:24,979 - wait for lock, trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE
2025-02-05 18:46:24,980 - 执行后idx: 6, pending_stmts: {5: (2, 'SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE', <Thread(Thread-4, started 32216)>, 1738752384.8728776)}
2025-02-05 18:46:24,980 - 
2025-02-05 18:46:25,088 - 
2025-02-05 18:46:25,089 - 执行前idx: 12, pending_stmts: {5: (2, 'SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE', <Thread(Thread-4, started 32216)>, 1738752384.8728776), 11: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-5, started 26912)>, 1738752385.0880919)}
2025-02-05 18:46:25,196 - wait for lock, trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE
2025-02-05 18:46:25,300 - stmt_idx: 11, status: success, result: None
2025-02-05 18:46:25,300 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:46:25,300 - 执行后idx: 12, pending_stmts: {5: (2, 'SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE', <Thread(Thread-4, started 32216)>, 1738752384.8728776)}
2025-02-05 18:46:25,300 - 
2025-02-05 18:46:25,411 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE', <Thread(Thread-4, started 32216)>, 1738752384.8728776)}
2025-02-05 18:46:25,411 - 
2025-02-05 18:46:25,411 - 执行前idx: 14, pending_stmts: {5: (2, 'SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE', <Thread(Thread-4, stopped 32216)>, 1738752384.8728776)}
2025-02-05 18:46:25,518 - stmt_idx: 5, status: success, result: None
2025-02-05 18:46:25,518 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE
2025-02-05 18:46:25,518 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE
2025-02-05 18:46:25,519 - 执行后idx: 14, pending_stmts: {6: (2, 'UPDATE table_0 SET col_1 = 46 WHERE (col_1 = 86)', <Thread(Thread-6, started 41340)>, 1738752385.519034), 7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-7, started 40332)>, 1738752385.5193124), 8: (2, 'SELECT id FROM table_0 WHERE (col_2 = 49.24) FOR UPDATE', <Thread(Thread-8, started 13160)>, 1738752385.5193124), 9: (2, 'SELECT id, col_2 FROM table_0 WHERE (col_1 = 83) AND (col_0 = 11.18) FOR UPDATE', <Thread(Thread-9, started 35236)>, 1738752385.5193124), 10: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-10, started 33596)>, 1738752385.5198216), 13: (2, 'COMMIT', <Thread(Thread-11, started 5708)>, 1738752385.5198216)}
2025-02-05 18:46:25,520 - 
2025-02-05 18:46:25,626 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, 'UPDATE table_0 SET col_1 = 46 WHERE (col_1 = 86)', <Thread(Thread-6, stopped 41340)>, 1738752385.519034), 7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-7, stopped 40332)>, 1738752385.5193124), 8: (2, 'SELECT id FROM table_0 WHERE (col_2 = 49.24) FOR UPDATE', <Thread(Thread-8, stopped 13160)>, 1738752385.5193124), 9: (2, 'SELECT id, col_2 FROM table_0 WHERE (col_1 = 83) AND (col_0 = 11.18) FOR UPDATE', <Thread(Thread-9, stopped 35236)>, 1738752385.5193124), 10: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-10, stopped 33596)>, 1738752385.5198216), 13: (2, 'COMMIT', <Thread(Thread-11, stopped 5708)>, 1738752385.5198216)}
2025-02-05 18:46:25,626 - 
2025-02-05 18:46:25,626 - 执行前idx: 14, pending_stmts: {6: (2, 'UPDATE table_0 SET col_1 = 46 WHERE (col_1 = 86)', <Thread(Thread-6, stopped 41340)>, 1738752385.519034), 7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-7, stopped 40332)>, 1738752385.5193124), 8: (2, 'SELECT id FROM table_0 WHERE (col_2 = 49.24) FOR UPDATE', <Thread(Thread-8, stopped 13160)>, 1738752385.5193124), 9: (2, 'SELECT id, col_2 FROM table_0 WHERE (col_1 = 83) AND (col_0 = 11.18) FOR UPDATE', <Thread(Thread-9, stopped 35236)>, 1738752385.5193124), 10: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-10, stopped 33596)>, 1738752385.5198216), 13: (2, 'COMMIT', <Thread(Thread-11, stopped 5708)>, 1738752385.5198216)}
2025-02-05 18:46:25,736 - stmt_idx: 6, status: success, result: None
2025-02-05 18:46:25,736 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 46 WHERE (col_1 = 86)
2025-02-05 18:46:25,844 - stmt_idx: 7, status: success, result: None
2025-02-05 18:46:25,844 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:46:25,950 - stmt_idx: 8, status: success, result: None
2025-02-05 18:46:25,950 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (col_2 = 49.24) FOR UPDATE
2025-02-05 18:46:26,057 - stmt_idx: 9, status: success, result: None
2025-02-05 18:46:26,057 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE (col_1 = 83) AND (col_0 = 11.18) FOR UPDATE
2025-02-05 18:46:26,166 - stmt_idx: 10, status: success, result: None
2025-02-05 18:46:26,166 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 18:46:26,275 - stmt_idx: 13, status: success, result: None
2025-02-05 18:46:26,275 - 成功执行序列中事务2语句: COMMIT
2025-02-05 18:46:26,275 - 执行后idx: 14, pending_stmts: {}
2025-02-05 18:46:26,275 - 
2025-02-05 18:46:26,384 - 执行序列成功
2025-02-05 18:46:27,170 - is_atomic: True
2025-02-05 18:46:27,170 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:46:27,170 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 94.45, col_1 = 8 WHERE (id = 3)'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'SELECT id, col_1 FROM table_0 WHERE (col_0 = 55.44) AND (col_2 = 69.73) AND (col_1 = 28) FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 46 WHERE (col_1 = 86)'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE (col_2 = 49.24) FOR UPDATE'), (2, 'SELECT id, col_2 FROM table_0 WHERE (col_1 = 83) AND (col_0 = 11.18) FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, 'COMMIT')]
2025-02-05 18:46:27,170 - snapshots: {'before': {'table_0': [(1, 2.14, 3, 40.75), (2, 76.88, 37, 56.63), (3, 55.56, 28, 95.79), (4, 55.44, 28, 69.73), (5, 26.99, 86, 27.44), (6, 99.91, 94, 4.44), (7, 37.52, 55, 49.24), (8, 11.18, 83, 7.4)]}, 'trx1': {'table_0': [(1, 2.14, 3, 40.75), (2, 76.88, 37, 56.63), (3, 55.56, 28, 95.79), (4, 55.44, 28, 69.73), (5, 26.99, 86, 27.44), (6, 99.91, 94, 4.44), (7, 37.52, 55, 49.24), (8, 11.18, 83, 7.4)]}, 'trx2': {'table_0': [(1, 2.14, 3, 40.75), (2, 76.88, 37, 56.63), (3, 94.45, 8, 95.79), (4, 55.44, 28, 69.73), (5, 26.99, 46, 27.44), (6, 99.91, 94, 4.44), (7, 37.52, 55, 49.24), (8, 11.18, 83, 7.4)]}, 'serial': {'table_0': [(1, 2.14, 3, 40.75), (2, 76.88, 37, 56.63), (3, 94.45, 8, 95.79), (4, 55.44, 28, 69.73), (5, 26.99, 46, 27.44), (6, 99.91, 94, 4.44), (7, 37.52, 55, 49.24), (8, 11.18, 83, 7.4)]}}
2025-02-05 18:46:27,170 - 
2025-02-05 18:46:27,183 - iter: 7
2025-02-05 18:46:28,802 - table table_0 has 10 rows
2025-02-05 18:46:28,803 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4], 'trx2_lock_row_ids': [6, 8], 'intersection_row_ids': []}
2025-02-05 18:46:28,803 - lock_same_resource: False
2025-02-05 18:46:28,803 - 
2025-02-05 18:46:28,803 - non intersection phase1
2025-02-05 18:46:28,804 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:46:28,804 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:46:28,804 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:46:28,804 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:46:28,807 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 18:46:28,808 - needed_params: {'set_expr', 'table', 'v2', 'v1'}
2025-02-05 18:46:28,808 - params: {'set_expr': "col_0 = 'OGtQv', col_232 = 84.01, col_3 = 'bORfu', col_4 = 'tqKvF', col_2 = 60.58, col_1 = 'ZuSqK'", 'table': 'table_0', 'v2': '4', 'v1': '1'}
2025-02-05 18:46:28,812 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:28,813 - needed_params: {'table', 'cond'}
2025-02-05 18:46:28,813 - params: {'table': 'table_0', 'cond': "(id = 6) AND (col_4 = 'eqzij') AND (col_232 IS NULL) AND (col_1 = 'mxlaj')"}
2025-02-05 18:46:28,816 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:46:28,818 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:28,818 - params: {'select_cols': '*', 'table': 'table_0', 'cond': '(id = 8)'}
2025-02-05 18:46:28,818 - non intersection phase1 end
2025-02-05 18:46:28,818 - 
2025-02-05 18:46:28,818 - non intersection phase2
2025-02-05 18:46:28,822 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:46:28,824 - needed_params: {'table', 'cond'}
2025-02-05 18:46:28,824 - params: {'table': 'table_0', 'cond': '(id = 8)'}
2025-02-05 18:46:28,827 - 生成锁SQL失败: 'NK'
2025-02-05 18:46:28,827 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:46:28,827 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:46:28,827 - 
2025-02-05 18:46:28,827 - Error in iteration 7: 'NK'
2025-02-05 18:46:28,827 - 
2025-02-05 18:46:28,836 - iter: 8
2025-02-05 18:46:30,347 - table table_0 has 13 rows
2025-02-05 18:46:30,347 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 18:46:30,347 - trx2_lock_row_ids: [1, 3, 6, 8, 9, 10, 12]
2025-02-05 18:46:30,347 - intersection_row_ids: [1, 3, 6, 8, 9, 10, 12]
2025-02-05 18:46:30,347 - trx1_exclusive_ids: [2, 4, 5, 7, 11, 13]
2025-02-05 18:46:30,347 - trx2_exclusive_ids: []
2025-02-05 18:46:30,347 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'trx2_lock_row_ids': [1, 3, 6, 8, 9, 10, 12], 'intersection_row_ids': [1, 3, 6, 8, 9, 10, 12]}
2025-02-05 18:46:30,347 - lock_same_resource: True
2025-02-05 18:46:30,347 - 
2025-02-05 18:46:30,347 - intersection phase1
2025-02-05 18:46:30,351 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=13
2025-02-05 18:46:30,352 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,352 - params: {'select_cols': '*', 'table': 'table_0', 'v2': '13', 'v1': '1'}
2025-02-05 18:46:30,355 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,356 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:30,356 - params: {'select_cols': 'id', 'table': 'table_0', 'cond': "(col_0 = 'jojca') AND (col_2 = 'exbwg') AND (col_3 = 53.94)"}
2025-02-05 18:46:30,360 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,361 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,362 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0', 'v2': '3', 'v1': '3'}
2025-02-05 18:46:30,364 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,366 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,366 - params: {'select_cols': 'id, col_2', 'table': 'table_0', 'v2': '6', 'v1': '6'}
2025-02-05 18:46:30,368 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,370 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,370 - params: {'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0', 'v2': '8', 'v1': '8'}
2025-02-05 18:46:30,373 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,375 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,375 - params: {'select_cols': 'id, col_3', 'table': 'table_0', 'v2': '9', 'v1': '9'}
2025-02-05 18:46:30,378 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,380 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,380 - params: {'select_cols': 'col_3', 'table': 'table_0', 'v2': '10', 'v1': '10'}
2025-02-05 18:46:30,383 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,385 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,385 - params: {'select_cols': 'id, col_0, col_1', 'table': 'table_0', 'v2': '12', 'v1': '12'}
2025-02-05 18:46:30,385 - intersection phase1 end
2025-02-05 18:46:30,385 - 
2025-02-05 18:46:30,385 - intersection phase2
2025-02-05 18:46:30,386 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:46:30,386 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:46:30,386 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 18:46:30,386 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 18:46:30,390 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,392 - needed_params: {'table', 'cond'}
2025-02-05 18:46:30,392 - params: {'table': 'table_0', 'cond': "(col_0 = 'hysvy') AND (col_1 = 16.76)"}
2025-02-05 18:46:30,396 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,398 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:30,398 - params: {'select_cols': '*', 'table': 'table_0', 'cond': "(col_3 = 24.46) AND (col_2 = 'aippj')"}
2025-02-05 18:46:30,401 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,404 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,404 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0', 'v2': '5', 'v1': '5'}
2025-02-05 18:46:30,408 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,409 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,409 - params: {'select_cols': 'id, col_1, col_2, col_3', 'table': 'table_0', 'v2': '7', 'v1': '7'}
2025-02-05 18:46:30,413 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,414 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:30,414 - params: {'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0', 'v2': '11', 'v1': '11'}
2025-02-05 18:46:30,417 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:46:30,419 - needed_params: {'table', 'cond'}
2025-02-05 18:46:30,419 - params: {'table': 'table_0', 'cond': '(id = 13)'}
2025-02-05 18:46:30,419 - intersection phase2 end
2025-02-05 18:46:30,419 - 
2025-02-05 18:46:30,419 - intersection phase3
2025-02-05 18:46:30,419 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:46:30,419 - 
2025-02-05 18:46:30,420 - Error in iteration 8: 'NK'
2025-02-05 18:46:30,420 - 
2025-02-05 18:46:30,428 - iter: 9
2025-02-05 18:46:31,955 - table table_0 has 14 rows
2025-02-05 18:46:31,955 - res_dict: {'trx1_lock_row_ids': [9, 10, 11, 12, 13, 14], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': []}
2025-02-05 18:46:31,955 - lock_same_resource: False
2025-02-05 18:46:31,955 - 
2025-02-05 18:46:31,956 - non intersection phase1
2025-02-05 18:46:31,956 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:46:31,957 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:46:31,957 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:46:31,957 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:46:31,960 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=9, is_continuous=True, range_end_idx=14
2025-02-05 18:46:31,961 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:31,962 - params: {'select_cols': 'id', 'table': 'table_0', 'v2': '14', 'v1': '9'}
2025-02-05 18:46:31,964 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:46:31,966 - needed_params: {'table', 'cond'}
2025-02-05 18:46:31,966 - params: {'table': 'table_0', 'cond': '(id = 1)'}
2025-02-05 18:46:31,969 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:46:31,971 - needed_params: {'table', 'cond'}
2025-02-05 18:46:31,971 - params: {'table': 'table_0', 'cond': '(id = 2)'}
2025-02-05 18:46:31,975 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:46:31,976 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:31,976 - params: {'select_cols': 'id, col_0, col_1', 'table': 'table_0', 'v2': '3', 'v1': '3'}
2025-02-05 18:46:31,980 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:46:31,982 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:31,982 - params: {'select_cols': 'id, col_0', 'table': 'table_0', 'cond': '(id = 4)'}
2025-02-05 18:46:31,985 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:46:31,986 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:46:31,986 - params: {'set_expr': "col_2 = 'YIyWS', col_1 = 'hEuTv', col_0 = 2", 'table': 'table_0', 'cond': "(col_0 = 42) AND (col_2 = 'afmln')"}
2025-02-05 18:46:31,990 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:31,992 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:31,992 - params: {'select_cols': 'id', 'table': 'table_0', 'v2': '6', 'v1': '6'}
2025-02-05 18:46:31,995 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:46:31,997 - needed_params: {'table', 'cond'}
2025-02-05 18:46:31,998 - params: {'table': 'table_0', 'cond': '(id = 7)'}
2025-02-05 18:46:32,001 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:46:32,002 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:32,003 - params: {'select_cols': 'id, col_0, col_1', 'table': 'table_0', 'v2': '8', 'v1': '8'}
2025-02-05 18:46:32,003 - non intersection phase1 end
2025-02-05 18:46:32,003 - 
2025-02-05 18:46:32,003 - non intersection phase2
2025-02-05 18:46:32,003 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:46:32,003 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:46:32,003 - 
2025-02-05 18:46:32,003 - Error in iteration 9: 'NK'
2025-02-05 18:46:32,003 - 
2025-02-05 18:46:32,010 - iter: 10
2025-02-05 18:46:33,489 - table table_0 has 8 rows
2025-02-05 18:46:33,489 - res_dict: {'trx1_lock_row_ids': [1, 2, 5, 8], 'trx2_lock_row_ids': [3, 4, 6, 7], 'intersection_row_ids': []}
2025-02-05 18:46:33,489 - lock_same_resource: False
2025-02-05 18:46:33,489 - 
2025-02-05 18:46:33,489 - non intersection phase1
2025-02-05 18:46:33,489 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:46:33,490 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:46:33,490 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:46:33,490 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:46:33,495 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:46:33,497 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:46:33,497 - params: {'table': 'table_0', 'vals': "NULL, 'rgqDy', 'LAfCL', 57.59, 'fUfyA', 9.48", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4'}
2025-02-05 18:46:33,500 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:46:33,502 - needed_params: {'set_expr', 'table', 'v2', 'v1'}
2025-02-05 18:46:33,502 - params: {'set_expr': "col_3 = 'FYWsb', col_2 = 84.41, col_1 = 'icdyv', col_4 = 52.79, col_0 = 'ZWkNv'", 'table': 'table_0', 'v2': '2', 'v1': '2'}
2025-02-05 18:46:33,506 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:46:33,508 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:46:33,508 - params: {'table': 'table_0', 'vals': "NULL, 'JYUhO', 'ZkwIt', 59.47, 'rMScm', 49.29", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4'}
2025-02-05 18:46:33,511 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:46:33,512 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:46:33,512 - params: {'table': 'table_0', 'vals': "NULL, 'wRyQa', 'BeKEN', 22.74, 'mjupA', 69.99", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4'}
2025-02-05 18:46:33,516 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:46:33,517 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:33,518 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0', 'cond': "(col_1 = 'evjpk')"}
2025-02-05 18:46:33,521 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:46:33,522 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:46:33,523 - params: {'set_expr': "col_1 = 'iyoMS', col_2 = 47.51", 'table': 'table_0', 'cond': "(col_1 = 'rphtw') AND (col_4 = 81.12)"}
2025-02-05 18:46:33,527 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:33,528 - needed_params: {'table', 'cond'}
2025-02-05 18:46:33,529 - params: {'table': 'table_0', 'cond': "(col_3 = 'zixez') AND (col_1 = 'sqilc') AND (col_0 = 'dkrid')"}
2025-02-05 18:46:33,532 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:46:33,534 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:33,534 - params: {'select_cols': 'id, col_2', 'table': 'table_0', 'cond': "(col_0 = 'ostpa') AND (col_3 = 'phjdy') AND (col_4 = 3.48)"}
2025-02-05 18:46:33,534 - non intersection phase1 end
2025-02-05 18:46:33,534 - 
2025-02-05 18:46:33,534 - non intersection phase2
2025-02-05 18:46:33,534 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:46:33,534 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:46:33,534 - 
2025-02-05 18:46:33,534 - Error in iteration 10: 'NK'
2025-02-05 18:46:33,534 - 
2025-02-05 18:46:33,542 - iter: 11
2025-02-05 18:46:35,058 - table table_0 has 14 rows
2025-02-05 18:46:35,058 - trx1_start_id: 1
2025-02-05 18:46:35,058 - trx1_end_id: 13
2025-02-05 18:46:35,058 - trx1_exclusive_start_id: 1
2025-02-05 18:46:35,059 - trx1_exclusive_end_id: 10
2025-02-05 18:46:35,059 - trx1_exclusive_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2025-02-05 18:46:35,059 - trx2_start_id: 11
2025-02-05 18:46:35,059 - trx2_end_id: 14
2025-02-05 18:46:35,059 - trx2_exclusive_start_id: 14
2025-02-05 18:46:35,059 - trx2_exclusive_end_id: 14
2025-02-05 18:46:35,059 - trx2_exclusive_ids: [14]
2025-02-05 18:46:35,059 - intersection_ids: [11, 12, 13]
2025-02-05 18:46:35,059 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'trx2_lock_row_ids': [11, 12, 13, 14], 'intersection_row_ids': [11, 12, 13]}
2025-02-05 18:46:35,059 - lock_same_resource: True
2025-02-05 18:46:35,059 - 
2025-02-05 18:46:35,059 - intersection phase1
2025-02-05 18:46:35,063 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=13
2025-02-05 18:46:35,064 - needed_params: {'set_expr', 'table', 'v2', 'v1'}
2025-02-05 18:46:35,064 - params: {'set_expr': "col_1 = 'aBAQJ'", 'table': 'table_0', 'v2': '14', 'v1': '1'}
2025-02-05 18:46:35,066 - 生成锁SQL失败: 'GAP'
2025-02-05 18:46:35,066 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:46:35,066 - 
2025-02-05 18:46:35,066 - Error in iteration 11: 'GAP'
2025-02-05 18:46:35,066 - 
2025-02-05 18:46:35,073 - iter: 12
2025-02-05 18:46:36,569 - table table_0 has 6 rows
2025-02-05 18:46:36,569 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6]
2025-02-05 18:46:36,569 - trx2_lock_row_ids: [2]
2025-02-05 18:46:36,569 - intersection_row_ids: [2]
2025-02-05 18:46:36,569 - trx1_exclusive_ids: [1, 3, 4, 5, 6]
2025-02-05 18:46:36,569 - trx2_exclusive_ids: []
2025-02-05 18:46:36,569 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6], 'trx2_lock_row_ids': [2], 'intersection_row_ids': [2]}
2025-02-05 18:46:36,569 - lock_same_resource: True
2025-02-05 18:46:36,570 - 
2025-02-05 18:46:36,570 - intersection phase1
2025-02-05 18:46:36,573 - 生成锁SQL失败: 'GAP'
2025-02-05 18:46:36,573 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:46:36,573 - 
2025-02-05 18:46:36,573 - Error in iteration 12: 'GAP'
2025-02-05 18:46:36,574 - 
2025-02-05 18:46:36,579 - iter: 13
2025-02-05 18:46:38,055 - table table_0 has 8 rows
2025-02-05 18:46:38,055 - trx1_start_id: 2
2025-02-05 18:46:38,055 - trx1_end_id: 7
2025-02-05 18:46:38,055 - trx1_exclusive_start_id: 2
2025-02-05 18:46:38,055 - trx1_exclusive_end_id: 4
2025-02-05 18:46:38,055 - trx1_exclusive_ids: [2, 3, 4]
2025-02-05 18:46:38,055 - trx2_start_id: 5
2025-02-05 18:46:38,055 - trx2_end_id: 8
2025-02-05 18:46:38,055 - trx2_exclusive_start_id: 8
2025-02-05 18:46:38,055 - trx2_exclusive_end_id: 8
2025-02-05 18:46:38,055 - trx2_exclusive_ids: [8]
2025-02-05 18:46:38,055 - intersection_ids: [5, 6, 7]
2025-02-05 18:46:38,056 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [5, 6, 7, 8], 'intersection_row_ids': [5, 6, 7]}
2025-02-05 18:46:38,056 - lock_same_resource: True
2025-02-05 18:46:38,056 - 
2025-02-05 18:46:38,056 - intersection phase1
2025-02-05 18:46:38,060 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=7
2025-02-05 18:46:38,061 - needed_params: {'select_cols', 'table', 'v2', 'v1'}
2025-02-05 18:46:38,061 - params: {'select_cols': 'id, col_0', 'table': 'table_0', 'v2': '8', 'v1': '2'}
2025-02-05 18:46:38,064 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=8
2025-02-05 18:46:38,065 - needed_params: {'set_expr', 'table', 'v2', 'v1'}
2025-02-05 18:46:38,066 - params: {'set_expr': "col_3 = 82, col_1 = 'lCWMA', col_4 = 28, col_0 = 50.19", 'table': 'table_0', 'v2': '9', 'v1': '6'}
2025-02-05 18:46:38,066 - intersection phase1 end
2025-02-05 18:46:38,066 - 
2025-02-05 18:46:38,066 - intersection phase2
2025-02-05 18:46:38,066 - 事务1在第二阶段自己加的锁: II
2025-02-05 18:46:38,066 - 事务2在第二阶段自己加的锁: NK
2025-02-05 18:46:38,066 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 18:46:38,066 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 18:46:38,071 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=4
2025-02-05 18:46:38,072 - needed_params: {'set_expr', 'table', 'v2', 'v1'}
2025-02-05 18:46:38,072 - params: {'set_expr': "col_1 = 'tlWGk'", 'table': 'table_0', 'v2': '4', 'v1': '2'}
2025-02-05 18:46:38,075 - 生成锁SQL失败: 'NK'
2025-02-05 18:46:38,075 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:46:38,075 - 
2025-02-05 18:46:38,076 - Error in iteration 13: 'NK'
2025-02-05 18:46:38,076 - 
2025-02-05 18:46:38,083 - iter: 14
2025-02-05 18:46:39,648 - table table_0 has 13 rows
2025-02-05 18:46:39,649 - trx1_lock_row_ids: [6]
2025-02-05 18:46:39,649 - trx2_lock_row_ids: [1, 2, 4, 5, 6, 8, 12, 13]
2025-02-05 18:46:39,649 - intersection_row_ids: [6]
2025-02-05 18:46:39,649 - trx1_exclusive_ids: []
2025-02-05 18:46:39,649 - trx2_exclusive_ids: [1, 2, 4, 5, 8, 12, 13]
2025-02-05 18:46:39,649 - res_dict: {'trx1_lock_row_ids': [6], 'trx2_lock_row_ids': [1, 2, 4, 5, 6, 8, 12, 13], 'intersection_row_ids': [6]}
2025-02-05 18:46:39,649 - lock_same_resource: True
2025-02-05 18:46:39,649 - 
2025-02-05 18:46:39,649 - intersection phase1
2025-02-05 18:46:39,653 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 18:46:39,654 - needed_params: {'set_expr', 'table', 'v2', 'v1'}
2025-02-05 18:46:39,655 - params: {'set_expr': 'col_0 = 74.36', 'table': 'table_0', 'v2': '6', 'v1': '6'}
2025-02-05 18:46:39,657 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,659 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:39,659 - params: {'select_cols': 'id', 'table': 'table_0', 'cond': '(id = 6)'}
2025-02-05 18:46:39,659 - intersection phase1 end
2025-02-05 18:46:39,659 - 
2025-02-05 18:46:39,659 - intersection phase2
2025-02-05 18:46:39,660 - 事务1在第二阶段自己加的锁: NK
2025-02-05 18:46:39,660 - 事务2在第二阶段自己加的锁: II
2025-02-05 18:46:39,660 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 18:46:39,660 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:46:39,663 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,664 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:46:39,664 - params: {'table': 'table_0', 'vals': 'NULL, 65.29, 6.84, 63, 39.14', 'insert_cols': 'id, col_0, col_1, col_2, col_956'}
2025-02-05 18:46:39,667 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,669 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:46:39,670 - params: {'table': 'table_0', 'vals': 'NULL, 50.22, 51.51, 3, 31.29', 'insert_cols': 'id, col_0, col_1, col_2, col_956'}
2025-02-05 18:46:39,673 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,674 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:46:39,674 - params: {'table': 'table_0', 'vals': 'NULL, 59.23, 18.89, 28, 39.58', 'insert_cols': 'id, col_0, col_1, col_2, col_956'}
2025-02-05 18:46:39,679 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,680 - needed_params: {'set_expr', 'table', 'v2', 'v1'}
2025-02-05 18:46:39,680 - params: {'set_expr': 'col_1 = 99.01, col_2 = 74, col_956 = 59.17', 'table': 'table_0', 'v2': '5', 'v1': '5'}
2025-02-05 18:46:39,684 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,685 - needed_params: {'set_expr', 'table', 'v2', 'v1'}
2025-02-05 18:46:39,685 - params: {'set_expr': 'col_2 = 1', 'table': 'table_0', 'v2': '8', 'v1': '8'}
2025-02-05 18:46:39,689 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,691 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:46:39,691 - params: {'table': 'table_0', 'vals': 'NULL, 8.14, 74.51, 78, 55.93', 'insert_cols': 'id, col_0, col_1, col_2, col_956'}
2025-02-05 18:46:39,695 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,696 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:46:39,696 - params: {'table': 'table_0', 'vals': 'NULL, 63.82, 84.51, 73, 54.61', 'insert_cols': 'id, col_0, col_1, col_2, col_956'}
2025-02-05 18:46:39,697 - intersection phase2 end
2025-02-05 18:46:39,697 - 
2025-02-05 18:46:39,697 - intersection phase3
2025-02-05 18:46:39,700 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,702 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:39,702 - params: {'select_cols': 'id, col_0, col_1, col_2, col_956', 'table': 'table_0', 'cond': '(col_1 = 53.95) AND (col_956 IS NULL) AND (col_0 = 61.9)'}
2025-02-05 18:46:39,705 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:46:39,706 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:46:39,706 - params: {'select_cols': '*', 'table': 'table_0', 'cond': '(id = 6)'}
2025-02-05 18:46:39,707 - intersection phase3 end
2025-02-05 18:46:39,707 - 
2025-02-05 18:46:39,707 - 生成死锁事务序列成功如下
2025-02-05 18:46:39,707 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_0 = 74.36 WHERE id BETWEEN 6 AND 6'), (2, 'SELECT id FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_956) VALUES (NULL, 65.29, 6.84, 63, 39.14)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_956) VALUES (NULL, 50.22, 51.51, 3, 31.29)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_956) VALUES (NULL, 59.23, 18.89, 28, 39.58)'), (2, 'UPDATE table_0 SET col_1 = 99.01, col_2 = 74, col_956 = 59.17 WHERE id BETWEEN 5 AND 5'), (2, 'UPDATE table_0 SET col_2 = 1 WHERE id BETWEEN 8 AND 8'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_956) VALUES (NULL, 8.14, 74.51, 78, 55.93)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_956) VALUES (NULL, 63.82, 84.51, 73, 54.61)'), (1, 'SELECT id, col_0, col_1, col_2, col_956 FROM table_0 WHERE (col_1 = 53.95) AND (col_956 IS NULL) AND (col_0 = 61.9) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 6) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:46:41,228 - 创建事务1连接成功
2025-02-05 18:46:41,229 - 执行事务1语句: BEGIN
2025-02-05 18:46:41,230 - 执行事务1语句: UPDATE table_0 SET col_0 = 74.36 WHERE id BETWEEN 6 AND 6
2025-02-05 18:46:41,231 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_956 FROM table_0 WHERE (col_1 = 53.95) AND (col_956 IS NULL) AND (col_0 = 61.9) LOCK IN SHARE MODE
2025-02-05 18:46:41,233 - 执行事务1语句: COMMIT;
2025-02-05 18:46:41,239 - 执行事务1成功
2025-02-05 18:49:45,962 - INFO TEST
2025-02-05 18:49:45,962 - DEBUG TEST
2025-02-05 18:49:45,962 - ERROR TEST
2025-02-05 18:49:45,963 - iter: 0
2025-02-05 18:49:47,609 - table table_0 has 11 rows
2025-02-05 18:49:47,610 - trx1_lock_row_ids: [1, 7, 9]
2025-02-05 18:49:47,610 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 18:49:47,610 - intersection_row_ids: [1, 7]
2025-02-05 18:49:47,610 - trx1_exclusive_ids: [9]
2025-02-05 18:49:47,610 - trx2_exclusive_ids: [2, 3, 4, 5, 6, 8]
2025-02-05 18:49:47,610 - res_dict: {'trx1_lock_row_ids': [1, 7, 9], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': [1, 7]}
2025-02-05 18:49:47,610 - lock_same_resource: True
2025-02-05 18:49:47,610 - 
2025-02-05 18:49:47,610 - intersection phase1
2025-02-05 18:49:47,617 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=8
2025-02-05 18:49:47,619 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:49:47,619 - params: {'set_expr': "col_0 = 'nceIr', col_1 = 'gmiRE'", 'table': 'table_0', 'v1': '1', 'v2': '8'}
2025-02-05 18:49:47,619 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:49:47,619 - 
2025-02-05 18:49:47,620 - Error in iteration 0: 'GAP'
2025-02-05 18:49:47,620 - 
2025-02-05 18:49:47,627 - iter: 1
2025-02-05 18:49:49,167 - table table_0 has 5 rows
2025-02-05 18:49:49,168 - res_dict: {'trx1_lock_row_ids': [1, 3, 4], 'trx2_lock_row_ids': [2, 5], 'intersection_row_ids': []}
2025-02-05 18:49:49,168 - lock_same_resource: False
2025-02-05 18:49:49,168 - 
2025-02-05 18:49:49,168 - non intersection phase1
2025-02-05 18:49:49,169 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:49:49,169 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:49:49,169 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 18:49:49,169 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:49:49,169 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:49:49,169 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:49:49,169 - 
2025-02-05 18:49:49,169 - Error in iteration 1: 'NK'
2025-02-05 18:49:49,169 - 
2025-02-05 18:49:49,174 - iter: 2
2025-02-05 18:49:50,722 - table table_0 has 11 rows
2025-02-05 18:49:50,722 - trx1_lock_row_ids: [1, 2, 5, 8, 10, 11]
2025-02-05 18:49:50,722 - trx2_lock_row_ids: [5, 6, 7, 8, 9, 10]
2025-02-05 18:49:50,722 - intersection_row_ids: [5, 8, 10]
2025-02-05 18:49:50,722 - trx1_exclusive_ids: [1, 2, 11]
2025-02-05 18:49:50,722 - trx2_exclusive_ids: [6, 7, 9]
2025-02-05 18:49:50,722 - res_dict: {'trx1_lock_row_ids': [1, 2, 5, 8, 10, 11], 'trx2_lock_row_ids': [5, 6, 7, 8, 9, 10], 'intersection_row_ids': [5, 8, 10]}
2025-02-05 18:49:50,722 - lock_same_resource: True
2025-02-05 18:49:50,722 - 
2025-02-05 18:49:50,722 - intersection phase1
2025-02-05 18:49:50,726 - 生成锁SQL失败: 'GAP'
2025-02-05 18:49:50,726 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:49:50,726 - 
2025-02-05 18:49:50,726 - Error in iteration 2: 'GAP'
2025-02-05 18:49:50,727 - 
2025-02-05 18:49:50,733 - iter: 3
2025-02-05 18:49:52,264 - table table_0 has 9 rows
2025-02-05 18:49:52,264 - trx1_lock_row_ids: [2, 3, 6, 7]
2025-02-05 18:49:52,264 - trx2_lock_row_ids: [4, 5, 6, 7, 8, 9]
2025-02-05 18:49:52,265 - intersection_row_ids: [6, 7]
2025-02-05 18:49:52,265 - trx1_exclusive_ids: [2, 3]
2025-02-05 18:49:52,265 - trx2_exclusive_ids: [4, 5, 8, 9]
2025-02-05 18:49:52,265 - res_dict: {'trx1_lock_row_ids': [2, 3, 6, 7], 'trx2_lock_row_ids': [4, 5, 6, 7, 8, 9], 'intersection_row_ids': [6, 7]}
2025-02-05 18:49:52,265 - lock_same_resource: True
2025-02-05 18:49:52,265 - 
2025-02-05 18:49:52,265 - intersection phase1
2025-02-05 18:49:52,269 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=9
2025-02-05 18:49:52,271 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:49:52,271 - params: {'set_expr': "col_1 = 'HcJpT', col_0 = 'BBxIz'", 'table': 'table_0', 'v1': '4', 'v2': '9'}
2025-02-05 18:49:52,271 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:49:52,271 - 
2025-02-05 18:49:52,271 - Error in iteration 3: 'GAP'
2025-02-05 18:49:52,271 - 
2025-02-05 18:49:52,276 - iter: 4
2025-02-05 18:49:53,824 - table table_0 has 14 rows
2025-02-05 18:49:53,824 - res_dict: {'trx1_lock_row_ids': [12], 'trx2_lock_row_ids': [7, 8, 9], 'intersection_row_ids': []}
2025-02-05 18:49:53,824 - lock_same_resource: False
2025-02-05 18:49:53,824 - 
2025-02-05 18:49:53,825 - non intersection phase1
2025-02-05 18:49:53,825 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:49:53,825 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:49:53,826 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:49:53,826 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:49:53,829 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:49:53,830 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:49:53,830 - params: {'select_cols': 'id', 'table': 'table_0', 'cond': '(col_0 = 4.52) AND (col_1 = 57)'}
2025-02-05 18:49:53,833 - 生成锁SQL失败: 'NK'
2025-02-05 18:49:53,833 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:49:53,834 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:49:53,834 - 
2025-02-05 18:49:53,834 - Error in iteration 4: 'NK'
2025-02-05 18:49:53,834 - 
2025-02-05 18:49:53,839 - iter: 5
2025-02-05 18:49:55,493 - table table_0 has 13 rows
2025-02-05 18:49:55,493 - trx1_lock_row_ids: [4, 5]
2025-02-05 18:49:55,493 - trx2_lock_row_ids: [2, 4, 5, 6, 10]
2025-02-05 18:49:55,493 - intersection_row_ids: [4, 5]
2025-02-05 18:49:55,493 - trx1_exclusive_ids: []
2025-02-05 18:49:55,493 - trx2_exclusive_ids: [2, 6, 10]
2025-02-05 18:49:55,493 - res_dict: {'trx1_lock_row_ids': [4, 5], 'trx2_lock_row_ids': [2, 4, 5, 6, 10], 'intersection_row_ids': [4, 5]}
2025-02-05 18:49:55,493 - lock_same_resource: True
2025-02-05 18:49:55,493 - 
2025-02-05 18:49:55,493 - intersection phase1
2025-02-05 18:49:55,496 - 生成锁SQL失败: 'GAP'
2025-02-05 18:49:55,496 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:49:55,496 - 
2025-02-05 18:49:55,497 - Error in iteration 5: 'GAP'
2025-02-05 18:49:55,497 - 
2025-02-05 18:49:55,503 - iter: 6
2025-02-05 18:49:57,054 - table table_0 has 11 rows
2025-02-05 18:49:57,054 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [11], 'intersection_row_ids': []}
2025-02-05 18:49:57,054 - lock_same_resource: False
2025-02-05 18:49:57,054 - 
2025-02-05 18:49:57,055 - non intersection phase1
2025-02-05 18:49:57,055 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:49:57,055 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:49:57,055 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:49:57,055 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:49:57,058 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=7
2025-02-05 18:49:57,059 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:49:57,059 - params: {'select_cols': 'id', 'table': 'table_0', 'v1': '1', 'v2': '7'}
2025-02-05 18:49:57,060 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:49:57,060 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:49:57,060 - 
2025-02-05 18:49:57,060 - Error in iteration 6: 'NK'
2025-02-05 18:49:57,060 - 
2025-02-05 18:49:57,066 - iter: 7
2025-02-05 18:49:58,572 - table table_0 has 12 rows
2025-02-05 18:49:58,572 - res_dict: {'trx1_lock_row_ids': [1, 2, 4, 5, 7, 8, 10], 'trx2_lock_row_ids': [6, 11, 12], 'intersection_row_ids': []}
2025-02-05 18:49:58,572 - lock_same_resource: False
2025-02-05 18:49:58,572 - 
2025-02-05 18:49:58,572 - non intersection phase1
2025-02-05 18:49:58,573 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:49:58,573 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:49:58,573 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:49:58,573 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:49:58,577 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:49:58,579 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:49:58,579 - params: {'select_cols': 'id, col_0, col_1, col_2, col_513', 'table': 'table_0', 'v1': '1', 'v2': '1'}
2025-02-05 18:49:58,581 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:49:58,583 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:49:58,583 - params: {'select_cols': 'col_0, col_1, col_513', 'table': 'table_0', 'cond': '(col_0 = 86.18) AND (col_2 = 85)'}
2025-02-05 18:49:58,586 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:49:58,587 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:49:58,588 - params: {'select_cols': 'id, col_0', 'table': 'table_0', 'cond': '(id = 4)'}
2025-02-05 18:49:58,592 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:49:58,594 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:49:58,594 - params: {'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0', 'cond': '(id = 5)'}
2025-02-05 18:49:58,599 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:49:58,601 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:49:58,601 - params: {'set_expr': "col_0 = 74.72, col_1 = 'qDyix', col_513 = 'JlWet'", 'table': 'table_0', 'cond': '(id = 7)'}
2025-02-05 18:49:58,604 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:49:58,607 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:49:58,607 - params: {'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0', 'v1': '8', 'v2': '8'}
2025-02-05 18:49:58,611 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:49:58,612 - needed_params: {'table', 'cond'}
2025-02-05 18:49:58,612 - params: {'table': 'table_0', 'cond': "(col_513 IS NULL) AND (col_0 = 66.86) AND (col_1 = 'uswzy')"}
2025-02-05 18:49:58,613 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:49:58,613 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:49:58,613 - 
2025-02-05 18:49:58,613 - Error in iteration 7: 'NK'
2025-02-05 18:49:58,613 - 
2025-02-05 18:49:58,620 - iter: 8
2025-02-05 18:50:00,111 - table table_0 has 7 rows
2025-02-05 18:50:00,112 - trx1_lock_row_ids: [5]
2025-02-05 18:50:00,112 - trx2_lock_row_ids: [2, 3, 4, 5, 6, 7]
2025-02-05 18:50:00,112 - intersection_row_ids: [5]
2025-02-05 18:50:00,112 - trx1_exclusive_ids: []
2025-02-05 18:50:00,112 - trx2_exclusive_ids: [2, 3, 4, 6, 7]
2025-02-05 18:50:00,112 - res_dict: {'trx1_lock_row_ids': [5], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7], 'intersection_row_ids': [5]}
2025-02-05 18:50:00,112 - lock_same_resource: True
2025-02-05 18:50:00,112 - 
2025-02-05 18:50:00,112 - intersection phase1
2025-02-05 18:50:00,115 - 生成锁SQL失败: 'NK'
2025-02-05 18:50:00,115 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:50:00,115 - 
2025-02-05 18:50:00,115 - Error in iteration 8: 'NK'
2025-02-05 18:50:00,116 - 
2025-02-05 18:50:00,121 - iter: 9
2025-02-05 18:50:01,637 - table table_0 has 12 rows
2025-02-05 18:50:01,637 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'intersection_row_ids': []}
2025-02-05 18:50:01,637 - lock_same_resource: False
2025-02-05 18:50:01,637 - 
2025-02-05 18:50:01,638 - non intersection phase1
2025-02-05 18:50:01,638 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:50:01,638 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:50:01,638 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:50:01,638 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 18:50:01,642 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:50:01,643 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:01,643 - params: {'select_cols': 'id', 'table': 'table_0', 'cond': "(col_2 = 'wxwgq') AND (col_0 = 'dojfn') AND (col_1 = 'rwryg')"}
2025-02-05 18:50:01,647 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:50:01,648 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:01,649 - params: {'select_cols': '*', 'table': 'table_0', 'cond': "(col_2 = 'fplhs')"}
2025-02-05 18:50:01,653 - 生成锁SQL失败: 'NK'
2025-02-05 18:50:01,653 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:50:01,653 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:50:01,653 - 
2025-02-05 18:50:01,653 - Error in iteration 9: 'NK'
2025-02-05 18:50:01,654 - 
2025-02-05 18:50:01,661 - iter: 10
2025-02-05 18:50:03,194 - table table_0 has 9 rows
2025-02-05 18:50:03,194 - trx1_start_id: 7
2025-02-05 18:50:03,195 - trx1_end_id: 8
2025-02-05 18:50:03,195 - trx1_exclusive_start_id: 7
2025-02-05 18:50:03,195 - trx1_exclusive_end_id: 6
2025-02-05 18:50:03,195 - trx1_exclusive_ids: []
2025-02-05 18:50:03,195 - trx2_start_id: 7
2025-02-05 18:50:03,195 - trx2_end_id: 8
2025-02-05 18:50:03,195 - trx2_exclusive_start_id: 9
2025-02-05 18:50:03,195 - trx2_exclusive_end_id: 8
2025-02-05 18:50:03,195 - trx2_exclusive_ids: []
2025-02-05 18:50:03,195 - intersection_ids: [7, 8]
2025-02-05 18:50:03,195 - res_dict: {'trx1_lock_row_ids': [7, 8], 'trx2_lock_row_ids': [7, 8], 'intersection_row_ids': [7, 8]}
2025-02-05 18:50:03,195 - lock_same_resource: True
2025-02-05 18:50:03,195 - 
2025-02-05 18:50:03,195 - intersection phase1
2025-02-05 18:50:03,198 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=7, is_continuous=True, range_end_idx=8
2025-02-05 18:50:03,199 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:03,199 - params: {'select_cols': 'id, col_0, col_1', 'table': 'table_0', 'v1': '7', 'v2': '8'}
2025-02-05 18:50:03,202 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=7, is_continuous=True, range_end_idx=8
2025-02-05 18:50:03,203 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:03,203 - params: {'select_cols': 'id, col_0, col_3, col_4', 'table': 'table_0', 'v1': '7', 'v2': '8'}
2025-02-05 18:50:03,204 - intersection phase1 end
2025-02-05 18:50:03,204 - 
2025-02-05 18:50:03,204 - intersection phase2
2025-02-05 18:50:03,204 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:50:03,204 - 事务2在第二阶段自己加的锁: II
2025-02-05 18:50:03,204 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 18:50:03,204 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:50:03,209 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=6
2025-02-05 18:50:03,210 - 生成连续锁定SQL失败: 找不到从7到6的行
2025-02-05 18:50:03,210 - 生成锁SQL失败: 找不到从7到6的行
2025-02-05 18:50:03,210 - 生成死锁事务序列失败: 找不到从7到6的行
2025-02-05 18:50:03,210 - 
2025-02-05 18:50:03,210 - Error in iteration 10: 找不到从7到6的行
2025-02-05 18:50:03,210 - 
2025-02-05 18:50:03,217 - iter: 11
2025-02-05 18:50:04,711 - table table_0 has 12 rows
2025-02-05 18:50:04,711 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 18:50:04,711 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 18:50:04,711 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 18:50:04,711 - trx1_exclusive_ids: []
2025-02-05 18:50:04,711 - trx2_exclusive_ids: []
2025-02-05 18:50:04,711 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}
2025-02-05 18:50:04,711 - lock_same_resource: True
2025-02-05 18:50:04,711 - 
2025-02-05 18:50:04,711 - intersection phase1
2025-02-05 18:50:04,714 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,715 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:04,715 - params: {'select_cols': 'id, col_0, col_3', 'table': 'table_0', 'cond': '(id = 1)'}
2025-02-05 18:50:04,718 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,719 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:04,719 - params: {'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0', 'cond': '(id = 2)'}
2025-02-05 18:50:04,723 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,725 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:04,725 - params: {'select_cols': '*', 'table': 'table_0', 'cond': '(id = 3)'}
2025-02-05 18:50:04,728 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,729 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:04,730 - params: {'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0', 'v1': '4', 'v2': '4'}
2025-02-05 18:50:04,733 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,735 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:04,735 - params: {'select_cols': 'id, col_2, col_3', 'table': 'table_0', 'v1': '5', 'v2': '5'}
2025-02-05 18:50:04,738 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,740 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:04,740 - params: {'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0', 'cond': "(col_3 = 95.86) AND (col_0 = 6.96) AND (col_1 = 'zlaot')"}
2025-02-05 18:50:04,743 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,744 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:04,745 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0', 'v1': '7', 'v2': '7'}
2025-02-05 18:50:04,748 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,750 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:04,750 - params: {'select_cols': 'id, col_2, col_3', 'table': 'table_0', 'v1': '8', 'v2': '8'}
2025-02-05 18:50:04,753 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,756 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:04,756 - params: {'select_cols': 'id, col_1', 'table': 'table_0', 'v1': '9', 'v2': '9'}
2025-02-05 18:50:04,759 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,760 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:04,760 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0', 'cond': '(id = 10)'}
2025-02-05 18:50:04,763 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:50:04,764 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:04,764 - params: {'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0', 'v1': '11', 'v2': '11'}
2025-02-05 18:50:04,764 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:50:04,765 - 
2025-02-05 18:50:04,765 - Error in iteration 11: 'GAP'
2025-02-05 18:50:04,765 - 
2025-02-05 18:50:04,772 - iter: 12
2025-02-05 18:50:06,263 - table table_0 has 11 rows
2025-02-05 18:50:06,264 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8], 'trx2_lock_row_ids': [1, 2, 9, 10, 11], 'intersection_row_ids': []}
2025-02-05 18:50:06,264 - lock_same_resource: False
2025-02-05 18:50:06,264 - 
2025-02-05 18:50:06,264 - non intersection phase1
2025-02-05 18:50:06,264 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:50:06,264 - 事务2在第一阶段自己加的锁: II
2025-02-05 18:50:06,264 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:50:06,265 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:50:06,268 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=3, is_continuous=True, range_end_idx=8
2025-02-05 18:50:06,269 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:06,269 - params: {'select_cols': 'id, col_0, col_1', 'table': 'table_0', 'v1': '3', 'v2': '8'}
2025-02-05 18:50:06,272 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:50:06,273 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:06,273 - params: {'vals': "NULL, 63.25, 'ISlWO', 'VPaFS', 'krQSl', 'MTMiY'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:50:06,277 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:50:06,278 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:50:06,278 - params: {'set_expr': "col_3 = 'nHKZD', col_2 = 'bgNaZ', col_1 = 'WaxgW', col_4 = 'vssxh', col_0 = 91.53", 'table': 'table_0', 'v1': '2', 'v2': '2'}
2025-02-05 18:50:06,282 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:50:06,283 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:06,283 - params: {'vals': "NULL, 72.96, 'BirTv', 'YYtBV', 'pLvCS', 'BrEku'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:50:06,287 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:50:06,288 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:06,288 - params: {'vals': "NULL, 64.07, 'TYdNj', 'PDKbf', 'tYaVK', 'trHUz'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:50:06,291 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:50:06,293 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:50:06,293 - params: {'set_expr': 'col_0 = 43.72', 'table': 'table_0', 'v1': '11', 'v2': '11'}
2025-02-05 18:50:06,294 - non intersection phase1 end
2025-02-05 18:50:06,294 - 
2025-02-05 18:50:06,294 - non intersection phase2
2025-02-05 18:50:06,297 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:50:06,299 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:50:06,299 - params: {'set_expr': "col_2 = 'QNTuO'", 'table': 'table_0', 'cond': '(id = 2)'}
2025-02-05 18:50:06,303 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 18:50:06,304 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:06,304 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0', 'v1': '7', 'v2': '7'}
2025-02-05 18:50:06,304 - non intersection phase2 end
2025-02-05 18:50:06,305 - 
2025-02-05 18:50:06,305 - 生成死锁事务序列成功如下
2025-02-05 18:50:06,305 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 63.25, 'ISlWO', 'VPaFS', 'krQSl', 'MTMiY')"), (2, "UPDATE table_0 SET col_3 = 'nHKZD', col_2 = 'bgNaZ', col_1 = 'WaxgW', col_4 = 'vssxh', col_0 = 91.53 WHERE id BETWEEN 2 AND 2"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 8 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72.96, 'BirTv', 'YYtBV', 'pLvCS', 'BrEku')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 64.07, 'TYdNj', 'PDKbf', 'tYaVK', 'trHUz')"), (2, 'UPDATE table_0 SET col_0 = 43.72 WHERE id BETWEEN 11 AND 11'), (1, "UPDATE table_0 SET col_2 = 'QNTuO' WHERE (id = 2)"), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:50:07,840 - 创建事务1连接成功
2025-02-05 18:50:07,841 - 执行事务1语句: BEGIN
2025-02-05 18:50:07,843 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 8 LOCK IN SHARE MODE
2025-02-05 18:50:07,843 - 执行事务1语句: UPDATE table_0 SET col_2 = 'QNTuO' WHERE (id = 2)
2025-02-05 18:50:07,846 - 执行事务1语句: COMMIT;
2025-02-05 18:50:07,851 - 执行事务1成功
2025-02-05 18:50:10,487 - 恢复初始状态成功
2025-02-05 18:50:11,269 - 创建事务2连接成功
2025-02-05 18:50:11,271 - 执行事务2语句: BEGIN
2025-02-05 18:50:11,272 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 63.25, 'ISlWO', 'VPaFS', 'krQSl', 'MTMiY')
2025-02-05 18:50:11,273 - 执行事务2语句: UPDATE table_0 SET col_3 = 'nHKZD', col_2 = 'bgNaZ', col_1 = 'WaxgW', col_4 = 'vssxh', col_0 = 91.53 WHERE id BETWEEN 2 AND 2
2025-02-05 18:50:11,273 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72.96, 'BirTv', 'YYtBV', 'pLvCS', 'BrEku')
2025-02-05 18:50:11,274 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 64.07, 'TYdNj', 'PDKbf', 'tYaVK', 'trHUz')
2025-02-05 18:50:11,275 - 执行事务2语句: UPDATE table_0 SET col_0 = 43.72 WHERE id BETWEEN 11 AND 11
2025-02-05 18:50:11,276 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:50:11,279 - 执行事务2语句: COMMIT;
2025-02-05 18:50:11,285 - 执行事务2成功
2025-02-05 18:50:16,241 - 
2025-02-05 18:50:16,241 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 63.25, 'ISlWO', 'VPaFS', 'krQSl', 'MTMiY')", <Thread(Thread-1, started 42864)>, 1738752616.2414336)}
2025-02-05 18:50:16,354 - stmt_idx: 2, status: success, result: None
2025-02-05 18:50:16,354 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 63.25, 'ISlWO', 'VPaFS', 'krQSl', 'MTMiY')
2025-02-05 18:50:16,354 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:50:16,354 - 
2025-02-05 18:50:16,462 - 
2025-02-05 18:50:16,462 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_3 = 'nHKZD', col_2 = 'bgNaZ', col_1 = 'WaxgW', col_4 = 'vssxh', col_0 = 91.53 WHERE id BETWEEN 2 AND 2", <Thread(Thread-2, started 41584)>, 1738752616.4624147)}
2025-02-05 18:50:16,570 - stmt_idx: 3, status: success, result: None
2025-02-05 18:50:16,570 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 'nHKZD', col_2 = 'bgNaZ', col_1 = 'WaxgW', col_4 = 'vssxh', col_0 = 91.53 WHERE id BETWEEN 2 AND 2
2025-02-05 18:50:16,570 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:50:16,570 - 
2025-02-05 18:50:16,679 - 
2025-02-05 18:50:16,680 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 8 LOCK IN SHARE MODE', <Thread(Thread-3, started 20112)>, 1738752616.6793232)}
2025-02-05 18:50:16,787 - stmt_idx: 4, status: success, result: None
2025-02-05 18:50:16,787 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 8 LOCK IN SHARE MODE
2025-02-05 18:50:16,787 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:50:16,787 - 
2025-02-05 18:50:16,893 - 
2025-02-05 18:50:16,894 - 执行前idx: 6, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72.96, 'BirTv', 'YYtBV', 'pLvCS', 'BrEku')", <Thread(Thread-4, started 36880)>, 1738752616.893967)}
2025-02-05 18:50:17,000 - stmt_idx: 5, status: success, result: None
2025-02-05 18:50:17,000 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72.96, 'BirTv', 'YYtBV', 'pLvCS', 'BrEku')
2025-02-05 18:50:17,000 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:50:17,000 - 
2025-02-05 18:50:17,108 - 
2025-02-05 18:50:17,109 - 执行前idx: 7, pending_stmts: {6: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 64.07, 'TYdNj', 'PDKbf', 'tYaVK', 'trHUz')", <Thread(Thread-5, started 32428)>, 1738752617.108402)}
2025-02-05 18:50:17,216 - stmt_idx: 6, status: success, result: None
2025-02-05 18:50:17,216 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 64.07, 'TYdNj', 'PDKbf', 'tYaVK', 'trHUz')
2025-02-05 18:50:17,216 - 执行后idx: 7, pending_stmts: {}
2025-02-05 18:50:17,216 - 
2025-02-05 18:50:17,323 - 
2025-02-05 18:50:17,324 - 执行前idx: 8, pending_stmts: {7: (2, 'UPDATE table_0 SET col_0 = 43.72 WHERE id BETWEEN 11 AND 11', <Thread(Thread-6, started 18588)>, 1738752617.3231316)}
2025-02-05 18:50:17,430 - stmt_idx: 7, status: success, result: None
2025-02-05 18:50:17,430 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 43.72 WHERE id BETWEEN 11 AND 11
2025-02-05 18:50:17,430 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:50:17,430 - 
2025-02-05 18:50:17,536 - 
2025-02-05 18:50:17,537 - 执行前idx: 9, pending_stmts: {8: (1, "UPDATE table_0 SET col_2 = 'QNTuO' WHERE (id = 2)", <Thread(Thread-7, started 11892)>, 1738752617.5368245)}
2025-02-05 18:50:17,645 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 'QNTuO' WHERE (id = 2)
2025-02-05 18:50:17,645 - 执行后idx: 9, pending_stmts: {8: (1, "UPDATE table_0 SET col_2 = 'QNTuO' WHERE (id = 2)", <Thread(Thread-7, started 11892)>, 1738752617.5368245)}
2025-02-05 18:50:17,645 - 
2025-02-05 18:50:17,753 - 
2025-02-05 18:50:17,754 - 执行前idx: 10, pending_stmts: {8: (1, "UPDATE table_0 SET col_2 = 'QNTuO' WHERE (id = 2)", <Thread(Thread-7, started 11892)>, 1738752617.5368245), 9: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-8, started 44768)>, 1738752617.7534592)}
2025-02-05 18:50:17,757 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_2 = 'QNTuO' WHERE (id = 2)
2025-02-05 18:50:17,861 - stmt_idx: 8, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:50:17,861 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_2 = 'QNTuO' WHERE (id = 2)
2025-02-05 18:50:17,861 - 错误: dictionary changed size during iteration
2025-02-05 18:50:17,865 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-8, stopped 44768)>, 1738752617.7534592)}
2025-02-05 18:50:17,865 - 
2025-02-05 18:50:17,865 - 执行前idx: 12, pending_stmts: {9: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-8, stopped 44768)>, 1738752617.7534592)}
2025-02-05 18:50:17,969 - stmt_idx: 9, status: success, result: None
2025-02-05 18:50:17,969 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:50:17,969 - 执行后idx: 12, pending_stmts: {}
2025-02-05 18:50:17,969 - 
2025-02-05 18:50:18,079 - 执行序列成功
2025-02-05 18:50:18,856 - is_atomic: True
2025-02-05 18:50:18,857 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 18:50:18,857 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 63.25, 'ISlWO', 'VPaFS', 'krQSl', 'MTMiY')"), (2, "UPDATE table_0 SET col_3 = 'nHKZD', col_2 = 'bgNaZ', col_1 = 'WaxgW', col_4 = 'vssxh', col_0 = 91.53 WHERE id BETWEEN 2 AND 2"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 8 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72.96, 'BirTv', 'YYtBV', 'pLvCS', 'BrEku')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 64.07, 'TYdNj', 'PDKbf', 'tYaVK', 'trHUz')"), (2, 'UPDATE table_0 SET col_0 = 43.72 WHERE id BETWEEN 11 AND 11'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE')]
2025-02-05 18:50:18,857 - snapshots: {'before': {'table_0': [(1, 18.02, 'oiety', 'balts', 'vxtyq', 'lbzud'), (2, 65.41, 'ppgul', 'stipq', 'occvq', 'pdohm'), (3, 53.49, 'coirx', 'kqdqf', 'sinmf', 'dgjtf'), (4, 63.94, 'fmrch', 'iugvv', 'gjjis', 'jikrf'), (5, 72.85, 'bwjwi', 'adhce', 'bgago', 'nbefd'), (6, 51.91, 'uinwo', 'ywlfh', 'ptbuc', 'eysfx'), (7, 94.25, 'kuofd', 'omqpt', 'zpjmm', 'rkbep'), (8, 64.57, 'qppkd', 'viqlr', 'fwxwe', 'ytryw'), (9, 5.15, 'tgmmg', 'awzic', 'xhwfn', 'laipt'), (10, 44.95, 'zyhie', 'chqup', 'iynom', 'xodbt'), (11, 49.41, 'witua', 'pfxzn', 'hzpxq', 'cpodu')]}, 'trx1': {'table_0': [(1, 18.02, 'oiety', 'balts', 'vxtyq', 'lbzud'), (2, 65.41, 'ppgul', 'QNTuO', 'occvq', 'pdohm'), (3, 53.49, 'coirx', 'kqdqf', 'sinmf', 'dgjtf'), (4, 63.94, 'fmrch', 'iugvv', 'gjjis', 'jikrf'), (5, 72.85, 'bwjwi', 'adhce', 'bgago', 'nbefd'), (6, 51.91, 'uinwo', 'ywlfh', 'ptbuc', 'eysfx'), (7, 94.25, 'kuofd', 'omqpt', 'zpjmm', 'rkbep'), (8, 64.57, 'qppkd', 'viqlr', 'fwxwe', 'ytryw'), (9, 5.15, 'tgmmg', 'awzic', 'xhwfn', 'laipt'), (10, 44.95, 'zyhie', 'chqup', 'iynom', 'xodbt'), (11, 49.41, 'witua', 'pfxzn', 'hzpxq', 'cpodu')]}, 'trx2': {'table_0': [(1, 18.02, 'oiety', 'balts', 'vxtyq', 'lbzud'), (2, 91.53, 'WaxgW', 'bgNaZ', 'nHKZD', 'vssxh'), (3, 53.49, 'coirx', 'kqdqf', 'sinmf', 'dgjtf'), (4, 63.94, 'fmrch', 'iugvv', 'gjjis', 'jikrf'), (5, 72.85, 'bwjwi', 'adhce', 'bgago', 'nbefd'), (6, 51.91, 'uinwo', 'ywlfh', 'ptbuc', 'eysfx'), (7, 94.25, 'kuofd', 'omqpt', 'zpjmm', 'rkbep'), (8, 64.57, 'qppkd', 'viqlr', 'fwxwe', 'ytryw'), (9, 5.15, 'tgmmg', 'awzic', 'xhwfn', 'laipt'), (10, 44.95, 'zyhie', 'chqup', 'iynom', 'xodbt'), (11, 43.72, 'witua', 'pfxzn', 'hzpxq', 'cpodu'), (12, 63.25, 'ISlWO', 'VPaFS', 'krQSl', 'MTMiY'), (13, 72.96, 'BirTv', 'YYtBV', 'pLvCS', 'BrEku'), (14, 64.07, 'TYdNj', 'PDKbf', 'tYaVK', 'trHUz')]}, 'serial': {'table_0': [(1, 18.02, 'oiety', 'balts', 'vxtyq', 'lbzud'), (2, 91.53, 'WaxgW', 'bgNaZ', 'nHKZD', 'vssxh'), (3, 53.49, 'coirx', 'kqdqf', 'sinmf', 'dgjtf'), (4, 63.94, 'fmrch', 'iugvv', 'gjjis', 'jikrf'), (5, 72.85, 'bwjwi', 'adhce', 'bgago', 'nbefd'), (6, 51.91, 'uinwo', 'ywlfh', 'ptbuc', 'eysfx'), (7, 94.25, 'kuofd', 'omqpt', 'zpjmm', 'rkbep'), (8, 64.57, 'qppkd', 'viqlr', 'fwxwe', 'ytryw'), (9, 5.15, 'tgmmg', 'awzic', 'xhwfn', 'laipt'), (10, 44.95, 'zyhie', 'chqup', 'iynom', 'xodbt'), (11, 43.72, 'witua', 'pfxzn', 'hzpxq', 'cpodu'), (15, 63.25, 'ISlWO', 'VPaFS', 'krQSl', 'MTMiY'), (16, 72.96, 'BirTv', 'YYtBV', 'pLvCS', 'BrEku'), (17, 64.07, 'TYdNj', 'PDKbf', 'tYaVK', 'trHUz')]}}
2025-02-05 18:50:18,857 - 
2025-02-05 18:50:18,871 - iter: 13
2025-02-05 18:50:20,388 - table table_0 has 5 rows
2025-02-05 18:50:20,388 - trx1_lock_row_ids: [1, 2, 3, 4, 5]
2025-02-05 18:50:20,388 - trx2_lock_row_ids: [2, 3, 4]
2025-02-05 18:50:20,388 - intersection_row_ids: [2, 3, 4]
2025-02-05 18:50:20,388 - trx1_exclusive_ids: [1, 5]
2025-02-05 18:50:20,388 - trx2_exclusive_ids: []
2025-02-05 18:50:20,388 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [2, 3, 4], 'intersection_row_ids': [2, 3, 4]}
2025-02-05 18:50:20,388 - lock_same_resource: True
2025-02-05 18:50:20,388 - 
2025-02-05 18:50:20,388 - intersection phase1
2025-02-05 18:50:20,388 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:50:20,388 - 
2025-02-05 18:50:20,389 - Error in iteration 13: 'GAP'
2025-02-05 18:50:20,389 - 
2025-02-05 18:50:20,394 - iter: 14
2025-02-05 18:50:21,919 - table table_0 has 12 rows
2025-02-05 18:50:21,919 - trx1_lock_row_ids: [3, 4, 5, 6, 7, 8, 9]
2025-02-05 18:50:21,919 - trx2_lock_row_ids: [3, 4, 5, 7, 9, 10]
2025-02-05 18:50:21,919 - intersection_row_ids: [3, 4, 5, 7, 9]
2025-02-05 18:50:21,919 - trx1_exclusive_ids: [6, 8]
2025-02-05 18:50:21,919 - trx2_exclusive_ids: [10]
2025-02-05 18:50:21,919 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [3, 4, 5, 7, 9, 10], 'intersection_row_ids': [3, 4, 5, 7, 9]}
2025-02-05 18:50:21,919 - lock_same_resource: True
2025-02-05 18:50:21,919 - 
2025-02-05 18:50:21,919 - intersection phase1
2025-02-05 18:50:21,923 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=3, is_continuous=True, range_end_idx=9
2025-02-05 18:50:21,925 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:21,925 - params: {'select_cols': 'id, col_1, col_2, col_3', 'table': 'table_0', 'v1': '3', 'v2': '9'}
2025-02-05 18:50:21,929 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,930 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:50:21,930 - params: {'set_expr': 'col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56', 'table': 'table_0', 'cond': '(id = 3)'}
2025-02-05 18:50:21,932 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,934 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:21,934 - params: {'vals': 'NULL, 15.47, 89.88, 27, 31.79', 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 18:50:21,936 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,938 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:50:21,938 - params: {'set_expr': 'col_0 = 76.89, col_3 = 4.05', 'table': 'table_0', 'cond': '(id = 5)'}
2025-02-05 18:50:21,942 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,943 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:21,943 - params: {'vals': 'NULL, 23.18, 66.16, 82, 71.78', 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 18:50:21,947 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,948 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:50:21,948 - params: {'set_expr': 'col_2 = 79, col_1 = 38.53', 'table': 'table_0', 'v1': '9', 'v2': '9'}
2025-02-05 18:50:21,948 - intersection phase1 end
2025-02-05 18:50:21,949 - 
2025-02-05 18:50:21,949 - intersection phase2
2025-02-05 18:50:21,949 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:50:21,949 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:50:21,949 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 18:50:21,949 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:50:21,954 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,956 - needed_params: {'table', 'cond'}
2025-02-05 18:50:21,956 - params: {'table': 'table_0', 'cond': '(col_1 = 51.53) AND (col_0 = 70.79)'}
2025-02-05 18:50:21,959 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,960 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:50:21,961 - params: {'set_expr': 'col_3 = 27.2, col_1 = 18.07, col_2 = 98, col_0 = 6.16', 'table': 'table_0', 'cond': '(id = 8)'}
2025-02-05 18:50:21,964 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,965 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:50:21,966 - params: {'set_expr': 'col_3 = 55.33', 'table': 'table_0', 'cond': '(id = 10)'}
2025-02-05 18:50:21,966 - intersection phase2 end
2025-02-05 18:50:21,966 - 
2025-02-05 18:50:21,966 - intersection phase3
2025-02-05 18:50:21,969 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,971 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:21,971 - params: {'vals': 'NULL, 18.52, 84.58, 44, 17.56', 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 18:50:21,975 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:50:21,977 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:21,977 - params: {'select_cols': 'col_0, col_2', 'table': 'table_0', 'cond': '(id = 6)'}
2025-02-05 18:50:21,977 - intersection phase3 end
2025-02-05 18:50:21,977 - 
2025-02-05 18:50:21,977 - 生成死锁事务序列成功如下
2025-02-05 18:50:21,977 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 9 LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 15.47, 89.88, 27, 31.79)'), (2, 'UPDATE table_0 SET col_0 = 76.89, col_3 = 4.05 WHERE (id = 5)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 23.18, 66.16, 82, 71.78)'), (2, 'UPDATE table_0 SET col_2 = 79, col_1 = 38.53 WHERE id BETWEEN 9 AND 9'), (1, 'DELETE FROM table_0 WHERE (col_1 = 51.53) AND (col_0 = 70.79)'), (1, 'UPDATE table_0 SET col_3 = 27.2, col_1 = 18.07, col_2 = 98, col_0 = 6.16 WHERE (id = 8)'), (2, 'UPDATE table_0 SET col_3 = 55.33 WHERE (id = 10)'), (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 18.52, 84.58, 44, 17.56)'), (2, 'SELECT col_0, col_2 FROM table_0 WHERE (id = 6) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:50:23,525 - 创建事务1连接成功
2025-02-05 18:50:23,527 - 执行事务1语句: BEGIN
2025-02-05 18:50:23,528 - 执行事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 9 LOCK IN SHARE MODE
2025-02-05 18:50:23,529 - 执行事务1语句: DELETE FROM table_0 WHERE (col_1 = 51.53) AND (col_0 = 70.79)
2025-02-05 18:50:23,530 - 执行事务1语句: UPDATE table_0 SET col_3 = 27.2, col_1 = 18.07, col_2 = 98, col_0 = 6.16 WHERE (id = 8)
2025-02-05 18:50:23,531 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 18.52, 84.58, 44, 17.56)
2025-02-05 18:50:23,533 - 执行事务1语句: COMMIT;
2025-02-05 18:50:23,537 - 执行事务1成功
2025-02-05 18:50:26,174 - 恢复初始状态成功
2025-02-05 18:50:26,937 - 创建事务2连接成功
2025-02-05 18:50:26,939 - 执行事务2语句: BEGIN
2025-02-05 18:50:26,940 - 执行事务2语句: UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)
2025-02-05 18:50:26,940 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 15.47, 89.88, 27, 31.79)
2025-02-05 18:50:26,941 - 执行事务2语句: UPDATE table_0 SET col_0 = 76.89, col_3 = 4.05 WHERE (id = 5)
2025-02-05 18:50:26,942 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 23.18, 66.16, 82, 71.78)
2025-02-05 18:50:26,943 - 执行事务2语句: UPDATE table_0 SET col_2 = 79, col_1 = 38.53 WHERE id BETWEEN 9 AND 9
2025-02-05 18:50:26,943 - 执行事务2语句: UPDATE table_0 SET col_3 = 55.33 WHERE (id = 10)
2025-02-05 18:50:26,944 - 执行事务2语句: SELECT col_0, col_2 FROM table_0 WHERE (id = 6) FOR UPDATE
2025-02-05 18:50:26,946 - 执行事务2语句: COMMIT;
2025-02-05 18:50:26,951 - 执行事务2成功
2025-02-05 18:50:31,854 - 
2025-02-05 18:50:31,854 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 9 LOCK IN SHARE MODE', <Thread(Thread-9, started 38064)>, 1738752631.8540068)}
2025-02-05 18:50:31,962 - stmt_idx: 2, status: success, result: None
2025-02-05 18:50:31,962 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 9 LOCK IN SHARE MODE
2025-02-05 18:50:31,962 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:50:31,962 - 
2025-02-05 18:50:32,071 - 
2025-02-05 18:50:32,072 - 执行前idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901)}
2025-02-05 18:50:32,177 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)
2025-02-05 18:50:32,177 - 执行后idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901)}
2025-02-05 18:50:32,177 - 
2025-02-05 18:50:32,284 - 
2025-02-05 18:50:32,285 - 执行前idx: 9, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901), 8: (1, 'DELETE FROM table_0 WHERE (col_1 = 51.53) AND (col_0 = 70.79)', <Thread(Thread-11, started 37700)>, 1738752632.2844818)}
2025-02-05 18:50:32,392 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)
2025-02-05 18:50:32,499 - stmt_idx: 8, status: success, result: None
2025-02-05 18:50:32,499 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_1 = 51.53) AND (col_0 = 70.79)
2025-02-05 18:50:32,499 - 执行后idx: 9, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901)}
2025-02-05 18:50:32,499 - 
2025-02-05 18:50:32,608 - 
2025-02-05 18:50:32,609 - 执行前idx: 10, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901), 9: (1, 'UPDATE table_0 SET col_3 = 27.2, col_1 = 18.07, col_2 = 98, col_0 = 6.16 WHERE (id = 8)', <Thread(Thread-12, started 31032)>, 1738752632.6082678)}
2025-02-05 18:50:32,716 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)
2025-02-05 18:50:32,822 - stmt_idx: 9, status: success, result: None
2025-02-05 18:50:32,822 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 27.2, col_1 = 18.07, col_2 = 98, col_0 = 6.16 WHERE (id = 8)
2025-02-05 18:50:32,822 - 执行后idx: 10, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901)}
2025-02-05 18:50:32,822 - 
2025-02-05 18:50:32,931 - 
2025-02-05 18:50:32,932 - 执行前idx: 12, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901), 11: (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 18.52, 84.58, 44, 17.56)', <Thread(Thread-13, started 31208)>, 1738752632.9315836)}
2025-02-05 18:50:33,040 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)
2025-02-05 18:50:33,148 - stmt_idx: 11, status: success, result: None
2025-02-05 18:50:33,148 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 18.52, 84.58, 44, 17.56)
2025-02-05 18:50:33,148 - 执行后idx: 12, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901)}
2025-02-05 18:50:33,148 - 
2025-02-05 18:50:33,262 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, started 35148)>, 1738752632.071901)}
2025-02-05 18:50:33,262 - 
2025-02-05 18:50:33,262 - 执行前idx: 15, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)', <Thread(Thread-10, stopped 35148)>, 1738752632.071901)}
2025-02-05 18:50:33,365 - stmt_idx: 3, status: success, result: None
2025-02-05 18:50:33,365 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)
2025-02-05 18:50:33,365 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)
2025-02-05 18:50:33,368 - 执行后idx: 15, pending_stmts: {4: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 15.47, 89.88, 27, 31.79)', <Thread(Thread-14, started 8176)>, 1738752633.3668475), 5: (2, 'UPDATE table_0 SET col_0 = 76.89, col_3 = 4.05 WHERE (id = 5)', <Thread(Thread-15, started 3628)>, 1738752633.367263), 6: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 23.18, 66.16, 82, 71.78)', <Thread(Thread-16, started 38100)>, 1738752633.367263), 7: (2, 'UPDATE table_0 SET col_2 = 79, col_1 = 38.53 WHERE id BETWEEN 9 AND 9', <Thread(Thread-17, started 33040)>, 1738752633.3677697), 10: (2, 'UPDATE table_0 SET col_3 = 55.33 WHERE (id = 10)', <Thread(Thread-18, started 33544)>, 1738752633.3677697), 12: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (id = 6) FOR UPDATE', <Thread(Thread-19, started 39984)>, 1738752633.36822), 13: (2, 'COMMIT', <Thread(Thread-20, started 30840)>, 1738752633.36822)}
2025-02-05 18:50:33,368 - 
2025-02-05 18:50:33,475 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 15.47, 89.88, 27, 31.79)', <Thread(Thread-14, stopped 8176)>, 1738752633.3668475), 5: (2, 'UPDATE table_0 SET col_0 = 76.89, col_3 = 4.05 WHERE (id = 5)', <Thread(Thread-15, stopped 3628)>, 1738752633.367263), 6: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 23.18, 66.16, 82, 71.78)', <Thread(Thread-16, stopped 38100)>, 1738752633.367263), 7: (2, 'UPDATE table_0 SET col_2 = 79, col_1 = 38.53 WHERE id BETWEEN 9 AND 9', <Thread(Thread-17, stopped 33040)>, 1738752633.3677697), 10: (2, 'UPDATE table_0 SET col_3 = 55.33 WHERE (id = 10)', <Thread(Thread-18, stopped 33544)>, 1738752633.3677697), 12: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (id = 6) FOR UPDATE', <Thread(Thread-19, stopped 39984)>, 1738752633.36822), 13: (2, 'COMMIT', <Thread(Thread-20, stopped 30840)>, 1738752633.36822)}
2025-02-05 18:50:33,475 - 
2025-02-05 18:50:33,475 - 执行前idx: 15, pending_stmts: {4: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 15.47, 89.88, 27, 31.79)', <Thread(Thread-14, stopped 8176)>, 1738752633.3668475), 5: (2, 'UPDATE table_0 SET col_0 = 76.89, col_3 = 4.05 WHERE (id = 5)', <Thread(Thread-15, stopped 3628)>, 1738752633.367263), 6: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 23.18, 66.16, 82, 71.78)', <Thread(Thread-16, stopped 38100)>, 1738752633.367263), 7: (2, 'UPDATE table_0 SET col_2 = 79, col_1 = 38.53 WHERE id BETWEEN 9 AND 9', <Thread(Thread-17, stopped 33040)>, 1738752633.3677697), 10: (2, 'UPDATE table_0 SET col_3 = 55.33 WHERE (id = 10)', <Thread(Thread-18, stopped 33544)>, 1738752633.3677697), 12: (2, 'SELECT col_0, col_2 FROM table_0 WHERE (id = 6) FOR UPDATE', <Thread(Thread-19, stopped 39984)>, 1738752633.36822), 13: (2, 'COMMIT', <Thread(Thread-20, stopped 30840)>, 1738752633.36822)}
2025-02-05 18:50:33,582 - stmt_idx: 4, status: success, result: None
2025-02-05 18:50:33,582 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 15.47, 89.88, 27, 31.79)
2025-02-05 18:50:33,687 - stmt_idx: 5, status: success, result: None
2025-02-05 18:50:33,687 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 76.89, col_3 = 4.05 WHERE (id = 5)
2025-02-05 18:50:33,796 - stmt_idx: 6, status: success, result: None
2025-02-05 18:50:33,796 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 23.18, 66.16, 82, 71.78)
2025-02-05 18:50:33,904 - stmt_idx: 7, status: success, result: None
2025-02-05 18:50:33,904 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 79, col_1 = 38.53 WHERE id BETWEEN 9 AND 9
2025-02-05 18:50:34,012 - stmt_idx: 10, status: success, result: None
2025-02-05 18:50:34,012 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 55.33 WHERE (id = 10)
2025-02-05 18:50:34,121 - stmt_idx: 12, status: success, result: None
2025-02-05 18:50:34,121 - 成功执行序列中事务2语句: SELECT col_0, col_2 FROM table_0 WHERE (id = 6) FOR UPDATE
2025-02-05 18:50:34,230 - stmt_idx: 13, status: success, result: None
2025-02-05 18:50:34,230 - 成功执行序列中事务2语句: COMMIT
2025-02-05 18:50:34,230 - 执行后idx: 15, pending_stmts: {}
2025-02-05 18:50:34,230 - 
2025-02-05 18:50:34,341 - 执行序列成功
2025-02-05 18:50:35,113 - is_atomic: True
2025-02-05 18:50:35,113 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:50:35,113 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 9 LOCK IN SHARE MODE'), (1, 'DELETE FROM table_0 WHERE (col_1 = 51.53) AND (col_0 = 70.79)'), (1, 'UPDATE table_0 SET col_3 = 27.2, col_1 = 18.07, col_2 = 98, col_0 = 6.16 WHERE (id = 8)'), (1, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 18.52, 84.58, 44, 17.56)'), (1, 'COMMIT'), (2, 'UPDATE table_0 SET col_2 = 64, col_0 = 15.42, col_1 = 66.72, col_3 = 13.56 WHERE (id = 3)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 15.47, 89.88, 27, 31.79)'), (2, 'UPDATE table_0 SET col_0 = 76.89, col_3 = 4.05 WHERE (id = 5)'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 23.18, 66.16, 82, 71.78)'), (2, 'UPDATE table_0 SET col_2 = 79, col_1 = 38.53 WHERE id BETWEEN 9 AND 9'), (2, 'UPDATE table_0 SET col_3 = 55.33 WHERE (id = 10)'), (2, 'SELECT col_0, col_2 FROM table_0 WHERE (id = 6) FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 18:50:35,114 - snapshots: {'before': {'table_0': [(1, 57.38, 90.47, 85, 89.3), (2, 56.66, 54.39, 10, 93.73), (3, 12.35, 88.22, 99, 71.12), (4, 33.37, 3.32, 93, 71.84), (5, 9.98, 83.5, 27, 32.66), (6, 70.79, 51.53, 54, 91.48), (7, 38.74, 35.39, 1, 74.63), (8, 9.07, 55.79, 51, 33.65), (9, 44.57, 13.7, 55, 90.06), (10, 18.54, 74.96, 89, 50.6), (11, 71.0, 25.01, 42, 71.44), (12, 55.01, 89.14, 5, 18.06)]}, 'trx1': {'table_0': [(1, 57.38, 90.47, 85, 89.3), (2, 56.66, 54.39, 10, 93.73), (3, 12.35, 88.22, 99, 71.12), (4, 33.37, 3.32, 93, 71.84), (5, 9.98, 83.5, 27, 32.66), (6, 70.79, 51.53, 54, 91.48), (7, 38.74, 35.39, 1, 74.63), (8, 6.16, 18.07, 98, 27.2), (9, 44.57, 13.7, 55, 90.06), (10, 18.54, 74.96, 89, 50.6), (11, 71.0, 25.01, 42, 71.44), (12, 55.01, 89.14, 5, 18.06), (13, 18.52, 84.58, 44, 17.56)]}, 'trx2': {'table_0': [(1, 57.38, 90.47, 85, 89.3), (2, 56.66, 54.39, 10, 93.73), (3, 15.42, 66.72, 64, 13.56), (4, 33.37, 3.32, 93, 71.84), (5, 76.89, 83.5, 27, 4.05), (6, 70.79, 51.53, 54, 91.48), (7, 38.74, 35.39, 1, 74.63), (8, 9.07, 55.79, 51, 33.65), (9, 44.57, 38.53, 79, 90.06), (10, 18.54, 74.96, 89, 55.33), (11, 71.0, 25.01, 42, 71.44), (12, 55.01, 89.14, 5, 18.06), (14, 15.47, 89.88, 27, 31.79), (15, 23.18, 66.16, 82, 71.78)]}, 'serial': {'table_0': [(1, 57.38, 90.47, 85, 89.3), (2, 56.66, 54.39, 10, 93.73), (3, 15.42, 66.72, 64, 13.56), (4, 33.37, 3.32, 93, 71.84), (5, 76.89, 83.5, 27, 4.05), (6, 70.79, 51.53, 54, 91.48), (7, 38.74, 35.39, 1, 74.63), (8, 6.16, 18.07, 98, 27.2), (9, 44.57, 38.53, 79, 90.06), (10, 18.54, 74.96, 89, 55.33), (11, 71.0, 25.01, 42, 71.44), (12, 55.01, 89.14, 5, 18.06), (16, 18.52, 84.58, 44, 17.56), (17, 15.47, 89.88, 27, 31.79), (18, 23.18, 66.16, 82, 71.78)]}}
2025-02-05 18:50:35,114 - 
2025-02-05 18:50:35,129 - iter: 15
2025-02-05 18:50:36,701 - table table_0 has 13 rows
2025-02-05 18:50:36,701 - trx1_lock_row_ids: [4, 6, 8, 9, 11]
2025-02-05 18:50:36,701 - trx2_lock_row_ids: [3, 4, 5, 6, 7, 8]
2025-02-05 18:50:36,702 - intersection_row_ids: [4, 6, 8]
2025-02-05 18:50:36,702 - trx1_exclusive_ids: [9, 11]
2025-02-05 18:50:36,702 - trx2_exclusive_ids: [3, 5, 7]
2025-02-05 18:50:36,702 - res_dict: {'trx1_lock_row_ids': [4, 6, 8, 9, 11], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8], 'intersection_row_ids': [4, 6, 8]}
2025-02-05 18:50:36,702 - lock_same_resource: True
2025-02-05 18:50:36,702 - 
2025-02-05 18:50:36,702 - intersection phase1
2025-02-05 18:50:36,706 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=3, is_continuous=True, range_end_idx=8
2025-02-05 18:50:36,708 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:36,708 - params: {'select_cols': 'id, col_1', 'table': 'table_0', 'v1': '3', 'v2': '8'}
2025-02-05 18:50:36,709 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:50:36,709 - 
2025-02-05 18:50:36,709 - Error in iteration 15: 'GAP'
2025-02-05 18:50:36,709 - 
2025-02-05 18:50:36,714 - iter: 16
2025-02-05 18:50:38,199 - table table_0 has 7 rows
2025-02-05 18:50:38,200 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7]
2025-02-05 18:50:38,200 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7]
2025-02-05 18:50:38,200 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7]
2025-02-05 18:50:38,200 - trx1_exclusive_ids: []
2025-02-05 18:50:38,200 - trx2_exclusive_ids: []
2025-02-05 18:50:38,200 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7]}
2025-02-05 18:50:38,200 - lock_same_resource: True
2025-02-05 18:50:38,200 - 
2025-02-05 18:50:38,200 - intersection phase1
2025-02-05 18:50:38,204 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:50:38,205 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:38,206 - params: {'select_cols': '*', 'table': 'table_0', 'cond': '(id = 1) AND (col_0 = 3)'}
2025-02-05 18:50:38,209 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:50:38,210 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:38,210 - params: {'select_cols': 'id, col_0', 'table': 'table_0', 'v1': '2', 'v2': '2'}
2025-02-05 18:50:38,213 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:50:38,215 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:38,215 - params: {'select_cols': 'id', 'table': 'table_0', 'v1': '3', 'v2': '3'}
2025-02-05 18:50:38,218 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:50:38,219 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:38,219 - params: {'select_cols': 'id', 'table': 'table_0', 'v1': '4', 'v2': '4'}
2025-02-05 18:50:38,223 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:50:38,225 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:38,225 - params: {'select_cols': 'id, col_0', 'table': 'table_0', 'cond': '(col_0 = 94)'}
2025-02-05 18:50:38,228 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:50:38,229 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:38,229 - params: {'select_cols': 'id', 'table': 'table_0', 'v1': '6', 'v2': '6'}
2025-02-05 18:50:38,232 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:50:38,233 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:38,234 - params: {'select_cols': '*', 'table': 'table_0', 'cond': '(id = 7)'}
2025-02-05 18:50:38,234 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:50:38,234 - 
2025-02-05 18:50:38,234 - Error in iteration 16: 'GAP'
2025-02-05 18:50:38,234 - 
2025-02-05 18:50:38,242 - iter: 17
2025-02-05 18:50:39,763 - table table_0 has 9 rows
2025-02-05 18:50:39,763 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 7, 8, 9]
2025-02-05 18:50:39,763 - trx2_lock_row_ids: [1, 3, 6, 8]
2025-02-05 18:50:39,763 - intersection_row_ids: [1, 3, 8]
2025-02-05 18:50:39,763 - trx1_exclusive_ids: [2, 4, 5, 7, 9]
2025-02-05 18:50:39,763 - trx2_exclusive_ids: [6]
2025-02-05 18:50:39,763 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 7, 8, 9], 'trx2_lock_row_ids': [1, 3, 6, 8], 'intersection_row_ids': [1, 3, 8]}
2025-02-05 18:50:39,763 - lock_same_resource: True
2025-02-05 18:50:39,763 - 
2025-02-05 18:50:39,764 - intersection phase1
2025-02-05 18:50:39,766 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:50:39,768 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:39,768 - params: {'select_cols': 'id, col_1, col_477', 'table': 'table_0', 'v1': '1', 'v2': '1'}
2025-02-05 18:50:39,771 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:50:39,772 - needed_params: {'table', 'cond'}
2025-02-05 18:50:39,772 - params: {'table': 'table_0', 'cond': "(col_477 IS NULL) AND (col_0 = 'xtfps')"}
2025-02-05 18:50:39,774 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:50:39,775 - needed_params: {'table', 'cond'}
2025-02-05 18:50:39,775 - params: {'table': 'table_0', 'cond': '(col_477 IS NULL)'}
2025-02-05 18:50:39,775 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:50:39,775 - 
2025-02-05 18:50:39,776 - Error in iteration 17: 'GAP'
2025-02-05 18:50:39,776 - 
2025-02-05 18:50:39,781 - iter: 18
2025-02-05 18:50:41,261 - table table_0 has 7 rows
2025-02-05 18:50:41,261 - res_dict: {'trx1_lock_row_ids': [3, 4], 'trx2_lock_row_ids': [5, 6, 7], 'intersection_row_ids': []}
2025-02-05 18:50:41,262 - lock_same_resource: False
2025-02-05 18:50:41,262 - 
2025-02-05 18:50:41,262 - non intersection phase1
2025-02-05 18:50:41,262 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:50:41,262 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:50:41,262 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:50:41,262 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 18:50:41,262 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:50:41,262 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:50:41,262 - 
2025-02-05 18:50:41,262 - Error in iteration 18: 'NK'
2025-02-05 18:50:41,263 - 
2025-02-05 18:50:41,268 - iter: 19
2025-02-05 18:50:42,772 - table table_0 has 11 rows
2025-02-05 18:50:42,772 - trx1_lock_row_ids: [2, 5, 9]
2025-02-05 18:50:42,772 - trx2_lock_row_ids: [3, 4, 5, 6, 7, 8, 9]
2025-02-05 18:50:42,772 - intersection_row_ids: [5, 9]
2025-02-05 18:50:42,772 - trx1_exclusive_ids: [2]
2025-02-05 18:50:42,772 - trx2_exclusive_ids: [3, 4, 6, 7, 8]
2025-02-05 18:50:42,773 - res_dict: {'trx1_lock_row_ids': [2, 5, 9], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8, 9], 'intersection_row_ids': [5, 9]}
2025-02-05 18:50:42,773 - lock_same_resource: True
2025-02-05 18:50:42,773 - 
2025-02-05 18:50:42,773 - intersection phase1
2025-02-05 18:50:42,777 - 生成锁SQL失败: 'GAP'
2025-02-05 18:50:42,777 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:50:42,777 - 
2025-02-05 18:50:42,777 - Error in iteration 19: 'GAP'
2025-02-05 18:50:42,778 - 
2025-02-05 18:50:42,783 - iter: 20
2025-02-05 18:50:44,296 - table table_0 has 14 rows
2025-02-05 18:50:44,296 - trx1_start_id: 2
2025-02-05 18:50:44,296 - trx1_end_id: 5
2025-02-05 18:50:44,296 - trx1_exclusive_start_id: 2
2025-02-05 18:50:44,296 - trx1_exclusive_end_id: 1
2025-02-05 18:50:44,296 - trx1_exclusive_ids: []
2025-02-05 18:50:44,296 - trx2_start_id: 2
2025-02-05 18:50:44,296 - trx2_end_id: 5
2025-02-05 18:50:44,296 - trx2_exclusive_start_id: 6
2025-02-05 18:50:44,296 - trx2_exclusive_end_id: 5
2025-02-05 18:50:44,296 - trx2_exclusive_ids: []
2025-02-05 18:50:44,296 - intersection_ids: [2, 3, 4, 5]
2025-02-05 18:50:44,297 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5], 'trx2_lock_row_ids': [2, 3, 4, 5], 'intersection_row_ids': [2, 3, 4, 5]}
2025-02-05 18:50:44,297 - lock_same_resource: True
2025-02-05 18:50:44,297 - 
2025-02-05 18:50:44,297 - intersection phase1
2025-02-05 18:50:44,300 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=5
2025-02-05 18:50:44,301 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:44,302 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0', 'v1': '2', 'v2': '5'}
2025-02-05 18:50:44,305 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=5
2025-02-05 18:50:44,305 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:44,305 - params: {'select_cols': 'col_0', 'table': 'table_0', 'v1': '2', 'v2': '5'}
2025-02-05 18:50:44,306 - intersection phase1 end
2025-02-05 18:50:44,306 - 
2025-02-05 18:50:44,306 - intersection phase2
2025-02-05 18:50:44,306 - 事务1在第二阶段自己加的锁: NK
2025-02-05 18:50:44,306 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:50:44,306 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 18:50:44,306 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 18:50:44,309 - 生成锁SQL失败: 'NK'
2025-02-05 18:50:44,309 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:50:44,309 - 
2025-02-05 18:50:44,309 - Error in iteration 20: 'NK'
2025-02-05 18:50:44,309 - 
2025-02-05 18:50:44,316 - iter: 21
2025-02-05 18:50:45,843 - table table_0 has 15 rows
2025-02-05 18:50:45,843 - trx1_lock_row_ids: [1, 2, 3, 6, 7, 9, 10, 11, 12, 13, 14, 15]
2025-02-05 18:50:45,843 - trx2_lock_row_ids: [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 15]
2025-02-05 18:50:45,843 - intersection_row_ids: [1, 2, 3, 6, 7, 11, 12, 13, 14, 15]
2025-02-05 18:50:45,844 - trx1_exclusive_ids: [9, 10]
2025-02-05 18:50:45,844 - trx2_exclusive_ids: [4]
2025-02-05 18:50:45,844 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 6, 7, 9, 10, 11, 12, 13, 14, 15], 'trx2_lock_row_ids': [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 15], 'intersection_row_ids': [1, 2, 3, 6, 7, 11, 12, 13, 14, 15]}
2025-02-05 18:50:45,844 - lock_same_resource: True
2025-02-05 18:50:45,844 - 
2025-02-05 18:50:45,844 - intersection phase1
2025-02-05 18:50:45,844 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:50:45,844 - 
2025-02-05 18:50:45,844 - Error in iteration 21: 'GAP'
2025-02-05 18:50:45,844 - 
2025-02-05 18:50:45,850 - iter: 22
2025-02-05 18:50:47,482 - table table_0 has 9 rows
2025-02-05 18:50:47,482 - trx1_lock_row_ids: [2]
2025-02-05 18:50:47,482 - trx2_lock_row_ids: [2]
2025-02-05 18:50:47,482 - intersection_row_ids: [2]
2025-02-05 18:50:47,482 - trx1_exclusive_ids: []
2025-02-05 18:50:47,482 - trx2_exclusive_ids: []
2025-02-05 18:50:47,482 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [2], 'intersection_row_ids': [2]}
2025-02-05 18:50:47,482 - lock_same_resource: True
2025-02-05 18:50:47,482 - 
2025-02-05 18:50:47,483 - intersection phase1
2025-02-05 18:50:47,487 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:50:47,489 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:47,490 - params: {'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0', 'v1': '2', 'v2': '2'}
2025-02-05 18:50:47,493 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:50:47,495 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:47,495 - params: {'select_cols': 'col_0, col_1, col_2, col_954', 'table': 'table_0', 'cond': '(col_2 = 21) AND (col_954 IS NULL)'}
2025-02-05 18:50:47,495 - intersection phase1 end
2025-02-05 18:50:47,495 - 
2025-02-05 18:50:47,495 - intersection phase2
2025-02-05 18:50:47,496 - 事务1在第二阶段自己加的锁: NK
2025-02-05 18:50:47,496 - 事务2在第二阶段自己加的锁: S
2025-02-05 18:50:47,496 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 18:50:47,496 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 18:50:47,496 - intersection phase2 end
2025-02-05 18:50:47,496 - 
2025-02-05 18:50:47,496 - intersection phase3
2025-02-05 18:50:47,501 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:50:47,503 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:47,503 - params: {'vals': "NULL, 'snjdI', 98, 16, 3", 'insert_cols': 'id, col_0, col_1, col_2, col_954', 'table': 'table_0'}
2025-02-05 18:50:47,503 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:50:47,503 - 
2025-02-05 18:50:47,503 - Error in iteration 22: 'NK'
2025-02-05 18:50:47,503 - 
2025-02-05 18:50:47,510 - iter: 23
2025-02-05 18:50:49,076 - table table_0 has 7 rows
2025-02-05 18:50:49,076 - res_dict: {'trx1_lock_row_ids': [5, 6, 7], 'trx2_lock_row_ids': [1, 2, 3, 4], 'intersection_row_ids': []}
2025-02-05 18:50:49,076 - lock_same_resource: False
2025-02-05 18:50:49,076 - 
2025-02-05 18:50:49,077 - non intersection phase1
2025-02-05 18:50:49,077 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:50:49,077 - 事务2在第一阶段自己加的锁: II
2025-02-05 18:50:49,077 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:50:49,077 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:50:49,077 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:50:49,077 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:50:49,077 - 
2025-02-05 18:50:49,077 - Error in iteration 23: 'NK'
2025-02-05 18:50:49,077 - 
2025-02-05 18:50:49,083 - iter: 24
2025-02-05 18:50:50,558 - table table_0 has 5 rows
2025-02-05 18:50:50,559 - trx1_start_id: 1
2025-02-05 18:50:50,559 - trx1_end_id: 5
2025-02-05 18:50:50,559 - trx1_exclusive_start_id: 1
2025-02-05 18:50:50,559 - trx1_exclusive_end_id: 3
2025-02-05 18:50:50,559 - trx1_exclusive_ids: [1, 2, 3]
2025-02-05 18:50:50,559 - trx2_start_id: 4
2025-02-05 18:50:50,559 - trx2_end_id: 5
2025-02-05 18:50:50,559 - trx2_exclusive_start_id: 6
2025-02-05 18:50:50,559 - trx2_exclusive_end_id: 5
2025-02-05 18:50:50,559 - trx2_exclusive_ids: []
2025-02-05 18:50:50,559 - intersection_ids: [4, 5]
2025-02-05 18:50:50,559 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [4, 5], 'intersection_row_ids': [4, 5]}
2025-02-05 18:50:50,559 - lock_same_resource: True
2025-02-05 18:50:50,559 - 
2025-02-05 18:50:50,559 - intersection phase1
2025-02-05 18:50:50,562 - 生成锁SQL失败: 'NK'
2025-02-05 18:50:50,562 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:50:50,562 - 
2025-02-05 18:50:50,563 - Error in iteration 24: 'NK'
2025-02-05 18:50:50,563 - 
2025-02-05 18:50:50,570 - iter: 25
2025-02-05 18:50:52,076 - table table_0 has 14 rows
2025-02-05 18:50:52,076 - res_dict: {'trx1_lock_row_ids': [1, 5, 6, 11], 'trx2_lock_row_ids': [7, 8, 14], 'intersection_row_ids': []}
2025-02-05 18:50:52,076 - lock_same_resource: False
2025-02-05 18:50:52,076 - 
2025-02-05 18:50:52,076 - non intersection phase1
2025-02-05 18:50:52,077 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:50:52,077 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:50:52,077 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 18:50:52,077 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:50:52,081 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:50:52,082 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:50:52,082 - params: {'set_expr': "col_0 = 11.75, col_2 = 5, col_3 = 'zMVji'", 'table': 'table_0', 'cond': "(col_3 = 'mmisb')"}
2025-02-05 18:50:52,084 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:50:52,086 - needed_params: {'table', 'cond'}
2025-02-05 18:50:52,086 - params: {'table': 'table_0', 'cond': '(id = 5)'}
2025-02-05 18:50:52,089 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:50:52,090 - needed_params: {'table', 'cond'}
2025-02-05 18:50:52,090 - params: {'table': 'table_0', 'cond': '(id = 6)'}
2025-02-05 18:50:52,094 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:50:52,095 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:52,095 - params: {'select_cols': 'id', 'table': 'table_0', 'cond': "(col_3 = 'vtefj') AND (col_0 = 80.28) AND (col_1 = 5.21)"}
2025-02-05 18:50:52,095 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:50:52,095 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:50:52,095 - 
2025-02-05 18:50:52,096 - Error in iteration 25: 'NK'
2025-02-05 18:50:52,096 - 
2025-02-05 18:50:52,102 - iter: 26
2025-02-05 18:50:53,680 - table table_0 has 14 rows
2025-02-05 18:50:53,681 - trx1_lock_row_ids: [1, 2, 3, 4, 7, 8, 9, 11, 14]
2025-02-05 18:50:53,681 - trx2_lock_row_ids: [10, 11]
2025-02-05 18:50:53,681 - intersection_row_ids: [11]
2025-02-05 18:50:53,681 - trx1_exclusive_ids: [1, 2, 3, 4, 7, 8, 9, 14]
2025-02-05 18:50:53,681 - trx2_exclusive_ids: [10]
2025-02-05 18:50:53,681 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 7, 8, 9, 11, 14], 'trx2_lock_row_ids': [10, 11], 'intersection_row_ids': [11]}
2025-02-05 18:50:53,681 - lock_same_resource: True
2025-02-05 18:50:53,681 - 
2025-02-05 18:50:53,681 - intersection phase1
2025-02-05 18:50:53,685 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=10, is_continuous=True, range_end_idx=11
2025-02-05 18:50:53,686 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:53,686 - params: {'select_cols': 'col_2', 'table': 'table_0', 'v1': '11', 'v2': '12'}
2025-02-05 18:50:53,689 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,690 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:50:53,690 - params: {'select_cols': 'id, col_0, col_4', 'table': 'table_0', 'cond': "(col_4 = 'uoria') AND (col_0 = 'ddboj') AND (col_2 = 98.5)"}
2025-02-05 18:50:53,690 - intersection phase1 end
2025-02-05 18:50:53,690 - 
2025-02-05 18:50:53,690 - intersection phase2
2025-02-05 18:50:53,691 - 事务1在第二阶段自己加的锁: II
2025-02-05 18:50:53,691 - 事务2在第二阶段自己加的锁: II
2025-02-05 18:50:53,691 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:50:53,691 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 18:50:53,694 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,696 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:50:53,696 - params: {'set_expr': "col_950 = 52, col_1 = 91, col_0 = 'zqjlW', col_2 = 13.34, col_4 = 'XLaaN', col_3 = 8.86", 'table': 'table_0', 'cond': '(col_3 = 43.28) AND (col_950 IS NULL)'}
2025-02-05 18:50:53,699 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,701 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:50:53,701 - params: {'set_expr': "col_0 = 'EOQRC', col_4 = 'pPzbR', col_2 = 77.65, col_950 = 47, col_3 = 42.33, col_1 = 71", 'table': 'table_0', 'cond': '(id = 2)'}
2025-02-05 18:50:53,704 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,706 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:53,706 - params: {'vals': "NULL, 'FhSmJ', 90, 38.83, 11.04, 'Lhmlt', 42", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4, col_950', 'table': 'table_0'}
2025-02-05 18:50:53,709 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,710 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:53,711 - params: {'vals': "NULL, 'tGSqV', 7, 71.38, 64.69, 'cSjHa', 85", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4, col_950', 'table': 'table_0'}
2025-02-05 18:50:53,714 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,715 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:50:53,716 - params: {'set_expr': 'col_1 = 33, col_2 = 24.36', 'table': 'table_0', 'v1': '7', 'v2': '7'}
2025-02-05 18:50:53,719 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,721 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:50:53,721 - params: {'set_expr': "col_0 = 'SXwXp', col_950 = 85, col_4 = 'YhjUw', col_3 = 81.89", 'table': 'table_0', 'v1': '8', 'v2': '8'}
2025-02-05 18:50:53,724 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,726 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:53,726 - params: {'vals': "NULL, 'PtAyE', 4, 94.43, 20.34, 'tiRlo', 78", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4, col_950', 'table': 'table_0'}
2025-02-05 18:50:53,729 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,731 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:50:53,731 - params: {'vals': "NULL, 'jiGpw', 79, 33.85, 1.08, 'tKGuz', 77", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4, col_950', 'table': 'table_0'}
2025-02-05 18:50:53,734 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:50:53,735 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:50:53,735 - params: {'set_expr': "col_4 = 'NgXnY', col_0 = 'HNeTm', col_1 = 21", 'table': 'table_0', 'v1': '11', 'v2': '11'}
2025-02-05 18:50:53,735 - intersection phase2 end
2025-02-05 18:50:53,735 - 
2025-02-05 18:50:53,736 - intersection phase3
2025-02-05 18:50:53,739 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=11, is_continuous=True, range_end_idx=11
2025-02-05 18:50:53,741 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:50:53,741 - params: {'select_cols': '*', 'table': 'table_0', 'v1': '12', 'v2': '12'}
2025-02-05 18:50:53,741 - intersection phase3 end
2025-02-05 18:50:53,741 - 
2025-02-05 18:50:53,741 - 生成死锁事务序列成功如下
2025-02-05 18:50:53,741 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_4 FROM table_0 WHERE (col_4 = 'uoria') AND (col_0 = 'ddboj') AND (col_2 = 98.5) LOCK IN SHARE MODE"), (2, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_950 = 52, col_1 = 91, col_0 = 'zqjlW', col_2 = 13.34, col_4 = 'XLaaN', col_3 = 8.86 WHERE (col_3 = 43.28) AND (col_950 IS NULL)"), (1, "UPDATE table_0 SET col_0 = 'EOQRC', col_4 = 'pPzbR', col_2 = 77.65, col_950 = 47, col_3 = 42.33, col_1 = 71 WHERE (id = 2)"), (2, "UPDATE table_0 SET col_4 = 'NgXnY', col_0 = 'HNeTm', col_1 = 21 WHERE id BETWEEN 11 AND 11"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'FhSmJ', 90, 38.83, 11.04, 'Lhmlt', 42)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'tGSqV', 7, 71.38, 64.69, 'cSjHa', 85)"), (1, 'UPDATE table_0 SET col_1 = 33, col_2 = 24.36 WHERE id BETWEEN 7 AND 7'), (1, "UPDATE table_0 SET col_0 = 'SXwXp', col_950 = 85, col_4 = 'YhjUw', col_3 = 81.89 WHERE id BETWEEN 8 AND 8"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'PtAyE', 4, 94.43, 20.34, 'tiRlo', 78)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'jiGpw', 79, 33.85, 1.08, 'tKGuz', 77)"), (2, None), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:50:55,293 - 创建事务1连接成功
2025-02-05 18:50:55,295 - 执行事务1语句: BEGIN
2025-02-05 18:50:55,297 - 执行事务1语句: SELECT id, col_0, col_4 FROM table_0 WHERE (col_4 = 'uoria') AND (col_0 = 'ddboj') AND (col_2 = 98.5) LOCK IN SHARE MODE
2025-02-05 18:50:55,298 - 执行事务1语句: UPDATE table_0 SET col_950 = 52, col_1 = 91, col_0 = 'zqjlW', col_2 = 13.34, col_4 = 'XLaaN', col_3 = 8.86 WHERE (col_3 = 43.28) AND (col_950 IS NULL)
2025-02-05 18:50:55,299 - 执行事务1语句: UPDATE table_0 SET col_0 = 'EOQRC', col_4 = 'pPzbR', col_2 = 77.65, col_950 = 47, col_3 = 42.33, col_1 = 71 WHERE (id = 2)
2025-02-05 18:50:55,300 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'FhSmJ', 90, 38.83, 11.04, 'Lhmlt', 42)
2025-02-05 18:50:55,300 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'tGSqV', 7, 71.38, 64.69, 'cSjHa', 85)
2025-02-05 18:50:55,301 - 执行事务1语句: UPDATE table_0 SET col_1 = 33, col_2 = 24.36 WHERE id BETWEEN 7 AND 7
2025-02-05 18:50:55,302 - 执行事务1语句: UPDATE table_0 SET col_0 = 'SXwXp', col_950 = 85, col_4 = 'YhjUw', col_3 = 81.89 WHERE id BETWEEN 8 AND 8
2025-02-05 18:50:55,303 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'PtAyE', 4, 94.43, 20.34, 'tiRlo', 78)
2025-02-05 18:50:55,303 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'jiGpw', 79, 33.85, 1.08, 'tKGuz', 77)
2025-02-05 18:50:55,304 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 18:50:55,307 - 执行事务1语句: COMMIT;
2025-02-05 18:50:55,313 - 执行事务1成功
2025-02-05 18:50:57,948 - 恢复初始状态成功
2025-02-05 18:50:58,721 - 创建事务2连接成功
2025-02-05 18:50:58,723 - 执行事务2语句: BEGIN
2025-02-05 18:50:58,724 - 执行事务2语句: SELECT col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE
2025-02-05 18:50:58,725 - 执行事务2语句: UPDATE table_0 SET col_4 = 'NgXnY', col_0 = 'HNeTm', col_1 = 21 WHERE id BETWEEN 11 AND 11
2025-02-05 18:50:58,727 - 执行事务2语句: COMMIT;
2025-02-05 18:50:58,732 - 执行事务2成功
2025-02-05 18:51:03,693 - 
2025-02-05 18:51:03,693 - 执行前idx: 3, pending_stmts: {2: (1, "SELECT id, col_0, col_4 FROM table_0 WHERE (col_4 = 'uoria') AND (col_0 = 'ddboj') AND (col_2 = 98.5) LOCK IN SHARE MODE", <Thread(Thread-21, started 32540)>, 1738752663.69371)}
2025-02-05 18:51:03,802 - stmt_idx: 2, status: success, result: None
2025-02-05 18:51:03,802 - 成功执行序列中事务1语句: SELECT id, col_0, col_4 FROM table_0 WHERE (col_4 = 'uoria') AND (col_0 = 'ddboj') AND (col_2 = 98.5) LOCK IN SHARE MODE
2025-02-05 18:51:03,802 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:51:03,802 - 
2025-02-05 18:51:03,911 - 
2025-02-05 18:51:03,912 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE', <Thread(Thread-22, started 24548)>, 1738752663.911475)}
2025-02-05 18:51:04,020 - stmt_idx: 3, status: success, result: None
2025-02-05 18:51:04,020 - 成功执行序列中事务2语句: SELECT col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE
2025-02-05 18:51:04,020 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:51:04,020 - 
2025-02-05 18:51:04,128 - 
2025-02-05 18:51:04,129 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_950 = 52, col_1 = 91, col_0 = 'zqjlW', col_2 = 13.34, col_4 = 'XLaaN', col_3 = 8.86 WHERE (col_3 = 43.28) AND (col_950 IS NULL)", <Thread(Thread-23, started 29640)>, 1738752664.1289842)}
2025-02-05 18:51:04,239 - stmt_idx: 4, status: success, result: None
2025-02-05 18:51:04,239 - 成功执行序列中事务1语句: UPDATE table_0 SET col_950 = 52, col_1 = 91, col_0 = 'zqjlW', col_2 = 13.34, col_4 = 'XLaaN', col_3 = 8.86 WHERE (col_3 = 43.28) AND (col_950 IS NULL)
2025-02-05 18:51:04,239 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:51:04,239 - 
2025-02-05 18:51:04,346 - 
2025-02-05 18:51:04,347 - 执行前idx: 6, pending_stmts: {5: (1, "UPDATE table_0 SET col_0 = 'EOQRC', col_4 = 'pPzbR', col_2 = 77.65, col_950 = 47, col_3 = 42.33, col_1 = 71 WHERE (id = 2)", <Thread(Thread-24, started 44140)>, 1738752664.3462682)}
2025-02-05 18:51:04,455 - stmt_idx: 5, status: success, result: None
2025-02-05 18:51:04,455 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'EOQRC', col_4 = 'pPzbR', col_2 = 77.65, col_950 = 47, col_3 = 42.33, col_1 = 71 WHERE (id = 2)
2025-02-05 18:51:04,455 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:51:04,455 - 
2025-02-05 18:51:04,563 - 
2025-02-05 18:51:04,564 - 执行前idx: 7, pending_stmts: {6: (2, "UPDATE table_0 SET col_4 = 'NgXnY', col_0 = 'HNeTm', col_1 = 21 WHERE id BETWEEN 11 AND 11", <Thread(Thread-25, started 32372)>, 1738752664.5634818)}
2025-02-05 18:51:04,672 - stmt_idx: 6, status: success, result: None
2025-02-05 18:51:04,672 - 成功执行序列中事务2语句: UPDATE table_0 SET col_4 = 'NgXnY', col_0 = 'HNeTm', col_1 = 21 WHERE id BETWEEN 11 AND 11
2025-02-05 18:51:04,672 - 执行后idx: 7, pending_stmts: {}
2025-02-05 18:51:04,672 - 
2025-02-05 18:51:04,779 - 
2025-02-05 18:51:04,780 - 执行前idx: 8, pending_stmts: {7: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'FhSmJ', 90, 38.83, 11.04, 'Lhmlt', 42)", <Thread(Thread-26, started 36988)>, 1738752664.7799795)}
2025-02-05 18:51:04,886 - stmt_idx: 7, status: success, result: None
2025-02-05 18:51:04,886 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'FhSmJ', 90, 38.83, 11.04, 'Lhmlt', 42)
2025-02-05 18:51:04,886 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:51:04,887 - 
2025-02-05 18:51:04,994 - 
2025-02-05 18:51:04,994 - 执行前idx: 9, pending_stmts: {8: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'tGSqV', 7, 71.38, 64.69, 'cSjHa', 85)", <Thread(Thread-27, started 21000)>, 1738752664.9940646)}
2025-02-05 18:51:05,102 - stmt_idx: 8, status: success, result: None
2025-02-05 18:51:05,102 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'tGSqV', 7, 71.38, 64.69, 'cSjHa', 85)
2025-02-05 18:51:05,102 - 执行后idx: 9, pending_stmts: {}
2025-02-05 18:51:05,102 - 
2025-02-05 18:51:05,211 - 
2025-02-05 18:51:05,212 - 执行前idx: 10, pending_stmts: {9: (1, 'UPDATE table_0 SET col_1 = 33, col_2 = 24.36 WHERE id BETWEEN 7 AND 7', <Thread(Thread-28, started 41096)>, 1738752665.2111847)}
2025-02-05 18:51:05,319 - stmt_idx: 9, status: success, result: None
2025-02-05 18:51:05,319 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 33, col_2 = 24.36 WHERE id BETWEEN 7 AND 7
2025-02-05 18:51:05,319 - 执行后idx: 10, pending_stmts: {}
2025-02-05 18:51:05,319 - 
2025-02-05 18:51:05,428 - 
2025-02-05 18:51:05,429 - 执行前idx: 11, pending_stmts: {10: (1, "UPDATE table_0 SET col_0 = 'SXwXp', col_950 = 85, col_4 = 'YhjUw', col_3 = 81.89 WHERE id BETWEEN 8 AND 8", <Thread(Thread-29, started 34668)>, 1738752665.428055)}
2025-02-05 18:51:05,537 - stmt_idx: 10, status: success, result: None
2025-02-05 18:51:05,537 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'SXwXp', col_950 = 85, col_4 = 'YhjUw', col_3 = 81.89 WHERE id BETWEEN 8 AND 8
2025-02-05 18:51:05,537 - 执行后idx: 11, pending_stmts: {}
2025-02-05 18:51:05,537 - 
2025-02-05 18:51:05,647 - 
2025-02-05 18:51:05,648 - 执行前idx: 12, pending_stmts: {11: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'PtAyE', 4, 94.43, 20.34, 'tiRlo', 78)", <Thread(Thread-30, started 43832)>, 1738752665.647994)}
2025-02-05 18:51:05,756 - stmt_idx: 11, status: success, result: None
2025-02-05 18:51:05,756 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'PtAyE', 4, 94.43, 20.34, 'tiRlo', 78)
2025-02-05 18:51:05,756 - 执行后idx: 12, pending_stmts: {}
2025-02-05 18:51:05,756 - 
2025-02-05 18:51:05,863 - 
2025-02-05 18:51:05,863 - 执行前idx: 13, pending_stmts: {12: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'jiGpw', 79, 33.85, 1.08, 'tKGuz', 77)", <Thread(Thread-31, started 13964)>, 1738752665.8638752)}
2025-02-05 18:51:05,970 - stmt_idx: 12, status: success, result: None
2025-02-05 18:51:05,970 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'jiGpw', 79, 33.85, 1.08, 'tKGuz', 77)
2025-02-05 18:51:05,971 - 执行后idx: 13, pending_stmts: {}
2025-02-05 18:51:05,971 - 
2025-02-05 18:51:06,078 - stmt为None, trx_id: 2, stmt: None
2025-02-05 18:51:06,079 - 
2025-02-05 18:51:06,079 - 执行前idx: 15, pending_stmts: {14: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-32, started 41252)>, 1738752666.0795274)}
2025-02-05 18:51:06,186 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 18:51:06,186 - 执行后idx: 15, pending_stmts: {14: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-32, started 41252)>, 1738752666.0795274)}
2025-02-05 18:51:06,186 - 
2025-02-05 18:51:06,298 - 序列遍历完成，开始查看剩余阻塞的语句：{14: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-32, started 41252)>, 1738752666.0795274)}
2025-02-05 18:51:06,298 - 
2025-02-05 18:51:06,298 - 执行前idx: 17, pending_stmts: {14: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-32, started 41252)>, 1738752666.0795274)}
2025-02-05 18:51:06,402 - stmt_idx: 14, status: success, result: None
2025-02-05 18:51:06,402 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 18:51:06,402 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 18:51:06,403 - 执行后idx: 17, pending_stmts: {15: (1, 'COMMIT', <Thread(Thread-33, started 40948)>, 1738752666.403553)}
2025-02-05 18:51:06,403 - 
2025-02-05 18:51:06,507 - 序列遍历完成，开始查看剩余阻塞的语句：{15: (1, 'COMMIT', <Thread(Thread-33, stopped 40948)>, 1738752666.403553)}
2025-02-05 18:51:06,507 - 
2025-02-05 18:51:06,507 - 执行前idx: 17, pending_stmts: {15: (1, 'COMMIT', <Thread(Thread-33, stopped 40948)>, 1738752666.403553)}
2025-02-05 18:51:06,616 - stmt_idx: 15, status: success, result: None
2025-02-05 18:51:06,616 - 成功执行序列中事务1语句: COMMIT
2025-02-05 18:51:06,616 - 执行后idx: 17, pending_stmts: {}
2025-02-05 18:51:06,616 - 
2025-02-05 18:51:06,725 - 执行序列成功
2025-02-05 18:51:07,513 - is_atomic: True
2025-02-05 18:51:07,514 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:51:07,514 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_4 FROM table_0 WHERE (col_4 = 'uoria') AND (col_0 = 'ddboj') AND (col_2 = 98.5) LOCK IN SHARE MODE"), (2, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 10 AND 11 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_950 = 52, col_1 = 91, col_0 = 'zqjlW', col_2 = 13.34, col_4 = 'XLaaN', col_3 = 8.86 WHERE (col_3 = 43.28) AND (col_950 IS NULL)"), (1, "UPDATE table_0 SET col_0 = 'EOQRC', col_4 = 'pPzbR', col_2 = 77.65, col_950 = 47, col_3 = 42.33, col_1 = 71 WHERE (id = 2)"), (2, "UPDATE table_0 SET col_4 = 'NgXnY', col_0 = 'HNeTm', col_1 = 21 WHERE id BETWEEN 11 AND 11"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'FhSmJ', 90, 38.83, 11.04, 'Lhmlt', 42)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'tGSqV', 7, 71.38, 64.69, 'cSjHa', 85)"), (1, 'UPDATE table_0 SET col_1 = 33, col_2 = 24.36 WHERE id BETWEEN 7 AND 7'), (1, "UPDATE table_0 SET col_0 = 'SXwXp', col_950 = 85, col_4 = 'YhjUw', col_3 = 81.89 WHERE id BETWEEN 8 AND 8"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'PtAyE', 4, 94.43, 20.34, 'tiRlo', 78)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_950) VALUES (NULL, 'jiGpw', 79, 33.85, 1.08, 'tKGuz', 77)"), (2, 'COMMIT'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 18:51:07,514 - snapshots: {'before': {'table_0': [(1, 'ujoue', 47, 17.8, 43.28, 'vnkqv', None), (2, 'jcrkj', 70, 84.31, 98.3, 'rsndi', None), (3, 'qbisv', 28, 60.56, 55.35, 'bokgu', None), (4, 'nikyi', 76, 91.88, 91.57, 'nfpeg', None), (5, 'jblhr', 67, 70.55, 45.25, 'tzmbm', None), (6, 'ossza', 44, 62.69, 50.97, 'trwfo', None), (7, 'xhlok', 51, 22.27, 21.84, 'opfxr', None), (8, 'hxnyd', 54, 34.57, 82.25, 'ptsgg', None), (10, 'feefq', 67, 3.41, 54.86, 'wjoep', None), (11, 'kmkpm', 19, 57.81, 22.09, 'dyykz', None), (12, 'ddboj', 18, 98.5, 10.93, 'uoria', None), (13, 'bumte', 21, 61.3, 52.15, 'iuwug', None), (14, 'vfpfc', 21, 89.53, 39.33, 'cjhqr', None), (15, 'yylxr', 47, 40.97, 15.27, 'ojjjq', None)]}, 'trx1': {'table_0': [(1, 'zqjlW', 91, 13.34, 8.86, 'XLaaN', 52), (2, 'EOQRC', 71, 77.65, 42.33, 'pPzbR', 47), (3, 'qbisv', 28, 60.56, 55.35, 'bokgu', None), (4, 'nikyi', 76, 91.88, 91.57, 'nfpeg', None), (5, 'jblhr', 67, 70.55, 45.25, 'tzmbm', None), (6, 'ossza', 44, 62.69, 50.97, 'trwfo', None), (7, 'xhlok', 33, 24.36, 21.84, 'opfxr', None), (8, 'SXwXp', 54, 34.57, 81.89, 'YhjUw', 85), (10, 'feefq', 67, 3.41, 54.86, 'wjoep', None), (11, 'kmkpm', 19, 57.81, 22.09, 'dyykz', None), (12, 'ddboj', 18, 98.5, 10.93, 'uoria', None), (13, 'bumte', 21, 61.3, 52.15, 'iuwug', None), (14, 'vfpfc', 21, 89.53, 39.33, 'cjhqr', None), (15, 'yylxr', 47, 40.97, 15.27, 'ojjjq', None), (16, 'FhSmJ', 90, 38.83, 11.04, 'Lhmlt', 42), (17, 'tGSqV', 7, 71.38, 64.69, 'cSjHa', 85), (18, 'PtAyE', 4, 94.43, 20.34, 'tiRlo', 78), (19, 'jiGpw', 79, 33.85, 1.08, 'tKGuz', 77)]}, 'trx2': {'table_0': [(1, 'ujoue', 47, 17.8, 43.28, 'vnkqv', None), (2, 'jcrkj', 70, 84.31, 98.3, 'rsndi', None), (3, 'qbisv', 28, 60.56, 55.35, 'bokgu', None), (4, 'nikyi', 76, 91.88, 91.57, 'nfpeg', None), (5, 'jblhr', 67, 70.55, 45.25, 'tzmbm', None), (6, 'ossza', 44, 62.69, 50.97, 'trwfo', None), (7, 'xhlok', 51, 22.27, 21.84, 'opfxr', None), (8, 'hxnyd', 54, 34.57, 82.25, 'ptsgg', None), (10, 'feefq', 67, 3.41, 54.86, 'wjoep', None), (11, 'HNeTm', 21, 57.81, 22.09, 'NgXnY', None), (12, 'ddboj', 18, 98.5, 10.93, 'uoria', None), (13, 'bumte', 21, 61.3, 52.15, 'iuwug', None), (14, 'vfpfc', 21, 89.53, 39.33, 'cjhqr', None), (15, 'yylxr', 47, 40.97, 15.27, 'ojjjq', None)]}, 'serial': {'table_0': [(1, 'zqjlW', 91, 13.34, 8.86, 'XLaaN', 52), (2, 'EOQRC', 71, 77.65, 42.33, 'pPzbR', 47), (3, 'qbisv', 28, 60.56, 55.35, 'bokgu', None), (4, 'nikyi', 76, 91.88, 91.57, 'nfpeg', None), (5, 'jblhr', 67, 70.55, 45.25, 'tzmbm', None), (6, 'ossza', 44, 62.69, 50.97, 'trwfo', None), (7, 'xhlok', 33, 24.36, 21.84, 'opfxr', None), (8, 'SXwXp', 54, 34.57, 81.89, 'YhjUw', 85), (10, 'feefq', 67, 3.41, 54.86, 'wjoep', None), (11, 'HNeTm', 21, 57.81, 22.09, 'NgXnY', None), (12, 'ddboj', 18, 98.5, 10.93, 'uoria', None), (13, 'bumte', 21, 61.3, 52.15, 'iuwug', None), (14, 'vfpfc', 21, 89.53, 39.33, 'cjhqr', None), (15, 'yylxr', 47, 40.97, 15.27, 'ojjjq', None), (20, 'FhSmJ', 90, 38.83, 11.04, 'Lhmlt', 42), (21, 'tGSqV', 7, 71.38, 64.69, 'cSjHa', 85), (22, 'PtAyE', 4, 94.43, 20.34, 'tiRlo', 78), (23, 'jiGpw', 79, 33.85, 1.08, 'tKGuz', 77)]}}
2025-02-05 18:51:07,514 - 
2025-02-05 18:51:07,527 - iter: 27
2025-02-05 18:51:08,399 - Error in iteration 27: 1062 (23000): Duplicate entry '6' for key 'table_0.PRIMARY'
2025-02-05 18:51:08,399 - 
2025-02-05 18:51:08,402 - iter: 28
2025-02-05 18:51:09,963 - table table_0 has 14 rows
2025-02-05 18:51:09,963 - trx1_start_id: 1
2025-02-05 18:51:09,963 - trx1_end_id: 2
2025-02-05 18:51:09,964 - trx1_exclusive_start_id: 1
2025-02-05 18:51:09,964 - trx1_exclusive_end_id: 0
2025-02-05 18:51:09,964 - trx1_exclusive_ids: []
2025-02-05 18:51:09,964 - trx2_start_id: 1
2025-02-05 18:51:09,964 - trx2_end_id: 11
2025-02-05 18:51:09,964 - trx2_exclusive_start_id: 3
2025-02-05 18:51:09,964 - trx2_exclusive_end_id: 11
2025-02-05 18:51:09,964 - trx2_exclusive_ids: [3, 4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 18:51:09,964 - intersection_ids: [1, 2]
2025-02-05 18:51:09,964 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'intersection_row_ids': [1, 2]}
2025-02-05 18:51:09,964 - lock_same_resource: True
2025-02-05 18:51:09,964 - 
2025-02-05 18:51:09,964 - intersection phase1
2025-02-05 18:51:09,968 - 生成锁SQL失败: 'GAP'
2025-02-05 18:51:09,968 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:51:09,968 - 
2025-02-05 18:51:09,968 - Error in iteration 28: 'GAP'
2025-02-05 18:51:09,968 - 
2025-02-05 18:51:09,975 - iter: 29
2025-02-05 18:51:11,486 - table table_0 has 11 rows
2025-02-05 18:51:11,487 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 7, 8]
2025-02-05 18:51:11,487 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 18:51:11,487 - intersection_row_ids: [1, 2, 3, 4, 5, 7, 8]
2025-02-05 18:51:11,487 - trx1_exclusive_ids: []
2025-02-05 18:51:11,487 - trx2_exclusive_ids: [6]
2025-02-05 18:51:11,487 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 7, 8], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': [1, 2, 3, 4, 5, 7, 8]}
2025-02-05 18:51:11,487 - lock_same_resource: True
2025-02-05 18:51:11,487 - 
2025-02-05 18:51:11,487 - intersection phase1
2025-02-05 18:51:11,490 - 生成锁SQL失败: 'GAP'
2025-02-05 18:51:11,490 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:51:11,490 - 
2025-02-05 18:51:11,491 - Error in iteration 29: 'GAP'
2025-02-05 18:51:11,491 - 
2025-02-05 18:51:11,496 - iter: 30
2025-02-05 18:51:13,023 - table table_0 has 10 rows
2025-02-05 18:51:13,023 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5], 'trx2_lock_row_ids': [1, 6, 7, 9, 10], 'intersection_row_ids': []}
2025-02-05 18:51:13,024 - lock_same_resource: False
2025-02-05 18:51:13,024 - 
2025-02-05 18:51:13,024 - non intersection phase1
2025-02-05 18:51:13,024 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:51:13,024 - 事务2在第一阶段自己加的锁: II
2025-02-05 18:51:13,024 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 18:51:13,024 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:51:13,028 - 生成锁SQL失败: 'NK'
2025-02-05 18:51:13,028 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:51:13,028 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:51:13,028 - 
2025-02-05 18:51:13,028 - Error in iteration 30: 'NK'
2025-02-05 18:51:13,028 - 
2025-02-05 18:51:13,033 - iter: 31
2025-02-05 18:51:14,548 - table table_0 has 11 rows
2025-02-05 18:51:14,548 - trx1_start_id: 4
2025-02-05 18:51:14,548 - trx1_end_id: 9
2025-02-05 18:51:14,548 - trx1_exclusive_start_id: 4
2025-02-05 18:51:14,548 - trx1_exclusive_end_id: 4
2025-02-05 18:51:14,548 - trx1_exclusive_ids: [4]
2025-02-05 18:51:14,548 - trx2_start_id: 5
2025-02-05 18:51:14,548 - trx2_end_id: 10
2025-02-05 18:51:14,548 - trx2_exclusive_start_id: 10
2025-02-05 18:51:14,548 - trx2_exclusive_end_id: 10
2025-02-05 18:51:14,548 - trx2_exclusive_ids: [10]
2025-02-05 18:51:14,548 - intersection_ids: [5, 6, 7, 8, 9]
2025-02-05 18:51:14,548 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [5, 6, 7, 8, 9, 10], 'intersection_row_ids': [5, 6, 7, 8, 9]}
2025-02-05 18:51:14,548 - lock_same_resource: True
2025-02-05 18:51:14,548 - 
2025-02-05 18:51:14,548 - intersection phase1
2025-02-05 18:51:14,552 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=9
2025-02-05 18:51:14,554 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:51:14,554 - params: {'set_expr': 'col_1 = 22.11', 'table': 'table_0', 'v1': '4', 'v2': '9'}
2025-02-05 18:51:14,557 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=10
2025-02-05 18:51:14,558 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:51:14,558 - params: {'select_cols': 'id, col_1', 'table': 'table_0', 'v1': '5', 'v2': '10'}
2025-02-05 18:51:14,558 - intersection phase1 end
2025-02-05 18:51:14,559 - 
2025-02-05 18:51:14,559 - intersection phase2
2025-02-05 18:51:14,559 - 事务1在第二阶段自己加的锁: NK
2025-02-05 18:51:14,559 - 事务2在第二阶段自己加的锁: NK
2025-02-05 18:51:14,559 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 18:51:14,559 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 18:51:14,561 - 生成锁SQL失败: 'NK'
2025-02-05 18:51:14,561 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:51:14,562 - 
2025-02-05 18:51:14,562 - Error in iteration 31: 'NK'
2025-02-05 18:51:14,562 - 
2025-02-05 18:51:14,567 - iter: 32
2025-02-05 18:51:16,088 - table table_0 has 8 rows
2025-02-05 18:51:16,088 - trx1_lock_row_ids: [2, 3, 4, 5, 6, 7]
2025-02-05 18:51:16,088 - trx2_lock_row_ids: [5, 6, 7]
2025-02-05 18:51:16,089 - intersection_row_ids: [5, 6, 7]
2025-02-05 18:51:16,089 - trx1_exclusive_ids: [2, 3, 4]
2025-02-05 18:51:16,089 - trx2_exclusive_ids: []
2025-02-05 18:51:16,089 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [5, 6, 7], 'intersection_row_ids': [5, 6, 7]}
2025-02-05 18:51:16,089 - lock_same_resource: True
2025-02-05 18:51:16,089 - 
2025-02-05 18:51:16,089 - intersection phase1
2025-02-05 18:51:16,092 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=7
2025-02-05 18:51:16,093 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:51:16,093 - params: {'select_cols': '*', 'table': 'table_0', 'v1': '5', 'v2': '7'}
2025-02-05 18:51:16,095 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:51:16,096 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:51:16,096 - params: {'select_cols': '*', 'table': 'table_0', 'v1': '5', 'v2': '5'}
2025-02-05 18:51:16,099 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:51:16,100 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:51:16,100 - params: {'select_cols': '*', 'table': 'table_0', 'v1': '6', 'v2': '6'}
2025-02-05 18:51:16,104 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:51:16,105 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:51:16,105 - params: {'select_cols': 'id, col_1, col_2, col_3', 'table': 'table_0', 'v1': '7', 'v2': '7'}
2025-02-05 18:51:16,105 - intersection phase1 end
2025-02-05 18:51:16,105 - 
2025-02-05 18:51:16,105 - intersection phase2
2025-02-05 18:51:16,106 - 事务1在第二阶段自己加的锁: NK
2025-02-05 18:51:16,106 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:51:16,106 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 18:51:16,106 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 18:51:16,106 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:51:16,106 - 
2025-02-05 18:51:16,106 - Error in iteration 32: 'NK'
2025-02-05 18:51:16,106 - 
2025-02-05 18:51:16,112 - iter: 33
2025-02-05 18:51:17,640 - table table_0 has 10 rows
2025-02-05 18:51:17,641 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 8, 9, 10]
2025-02-05 18:51:17,641 - trx2_lock_row_ids: [2, 3, 6, 7, 10]
2025-02-05 18:51:17,641 - intersection_row_ids: [2, 3, 6, 10]
2025-02-05 18:51:17,641 - trx1_exclusive_ids: [1, 4, 5, 8, 9]
2025-02-05 18:51:17,641 - trx2_exclusive_ids: [7]
2025-02-05 18:51:17,641 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 8, 9, 10], 'trx2_lock_row_ids': [2, 3, 6, 7, 10], 'intersection_row_ids': [2, 3, 6, 10]}
2025-02-05 18:51:17,641 - lock_same_resource: True
2025-02-05 18:51:17,641 - 
2025-02-05 18:51:17,641 - intersection phase1
2025-02-05 18:51:17,644 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,646 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:51:17,646 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0', 'cond': "(id = 2) AND (col_0 = 'jspei') AND (col_2 = 67)"}
2025-02-05 18:51:17,649 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,650 - needed_params: {'select_cols', 'table', 'cond'}
2025-02-05 18:51:17,650 - params: {'select_cols': 'id, col_0, col_1, col_4', 'table': 'table_0', 'cond': '(id = 3) AND (col_4 = 99.74)'}
2025-02-05 18:51:17,652 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,653 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:51:17,654 - params: {'select_cols': 'id, col_0, col_1, col_2, col_4', 'table': 'table_0', 'v1': '6', 'v2': '6'}
2025-02-05 18:51:17,656 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,657 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:51:17,657 - params: {'select_cols': 'id', 'table': 'table_0', 'v1': '10', 'v2': '10'}
2025-02-05 18:51:17,661 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,663 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:51:17,663 - params: {'vals': "NULL, 'pkUYh', 'ZQWle', 16, 'sYIDs', 80.12", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:51:17,666 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,667 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:51:17,667 - params: {'vals': "NULL, 'Jeksw', 'obWQI', 12, 'LHEbW', 10.03", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:51:17,670 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,672 - needed_params: {'set_expr', 'table', 'cond'}
2025-02-05 18:51:17,672 - params: {'set_expr': "col_3 = 'AddFY', col_0 = 'lzhQo', col_4 = 54.73", 'table': 'table_0', 'cond': "(col_0 = 'vwqfq')"}
2025-02-05 18:51:17,676 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,678 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:51:17,678 - params: {'vals': "NULL, 'qVFyR', 'fciBh', 66, 'aoAUc', 63.51", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:51:17,679 - intersection phase1 end
2025-02-05 18:51:17,679 - 
2025-02-05 18:51:17,679 - intersection phase2
2025-02-05 18:51:17,679 - 事务1在第二阶段自己加的锁: II
2025-02-05 18:51:17,679 - 事务2在第二阶段自己加的锁: S
2025-02-05 18:51:17,679 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:51:17,679 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:51:17,683 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,684 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:51:17,684 - params: {'vals': "NULL, 'AqOTi', 'NlBCP', 44, 'XMtBg', 12.92", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:51:17,687 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,689 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:51:17,690 - params: {'vals': "NULL, 'djOTS', 'UFZpa', 40, 'QmjMQ', 42.49", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:51:17,693 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,695 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:51:17,695 - params: {'set_expr': "col_2 = 47, col_1 = 'SVAVY', col_0 = 'CjGLJ'", 'table': 'table_0', 'v1': '5', 'v2': '5'}
2025-02-05 18:51:17,699 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,701 - needed_params: {'set_expr', 'table', 'v1', 'v2'}
2025-02-05 18:51:17,701 - params: {'set_expr': "col_1 = 'ZANnx', col_0 = 'cuRNY', col_4 = 56.74, col_3 = 'SwmGq'", 'table': 'table_0', 'v1': '8', 'v2': '8'}
2025-02-05 18:51:17,705 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,707 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:51:17,707 - params: {'vals': "NULL, 'fEPFY', 'DjPcA', 68, 'DGpSB', 80.08", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:51:17,710 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,712 - needed_params: {'select_cols', 'table', 'v1', 'v2'}
2025-02-05 18:51:17,712 - params: {'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0', 'v1': '7', 'v2': '7'}
2025-02-05 18:51:17,712 - intersection phase2 end
2025-02-05 18:51:17,712 - 
2025-02-05 18:51:17,713 - intersection phase3
2025-02-05 18:51:17,716 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:51:17,717 - needed_params: {'table', 'cond'}
2025-02-05 18:51:17,717 - params: {'table': 'table_0', 'cond': '(col_4 = 91.23) AND (col_2 = 11)'}
2025-02-05 18:51:17,718 - intersection phase3 end
2025-02-05 18:51:17,718 - 
2025-02-05 18:51:17,718 - 生成死锁事务序列成功如下
2025-02-05 18:51:17,718 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE (id = 2) AND (col_0 = 'jspei') AND (col_2 = 67) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1, col_4 FROM table_0 WHERE (id = 3) AND (col_4 = 99.74) LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'pkUYh', 'ZQWle', 16, 'sYIDs', 80.12)"), (1, 'SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'Jeksw', 'obWQI', 12, 'LHEbW', 10.03)"), (2, "UPDATE table_0 SET col_3 = 'AddFY', col_0 = 'lzhQo', col_4 = 54.73 WHERE (col_0 = 'vwqfq')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'qVFyR', 'fciBh', 66, 'aoAUc', 63.51)"), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AqOTi', 'NlBCP', 44, 'XMtBg', 12.92)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'djOTS', 'UFZpa', 40, 'QmjMQ', 42.49)"), (1, "UPDATE table_0 SET col_2 = 47, col_1 = 'SVAVY', col_0 = 'CjGLJ' WHERE id BETWEEN 5 AND 5"), (1, "UPDATE table_0 SET col_1 = 'ZANnx', col_0 = 'cuRNY', col_4 = 56.74, col_3 = 'SwmGq' WHERE id BETWEEN 8 AND 8"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'fEPFY', 'DjPcA', 68, 'DGpSB', 80.08)"), (2, None), (1, 'DELETE FROM table_0 WHERE (col_4 = 91.23) AND (col_2 = 11)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:51:19,302 - 创建事务1连接成功
2025-02-05 18:51:19,303 - 执行事务1语句: BEGIN
2025-02-05 18:51:19,305 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE (id = 2) AND (col_0 = 'jspei') AND (col_2 = 67) LOCK IN SHARE MODE
2025-02-05 18:51:19,306 - 执行事务1语句: SELECT id, col_0, col_1, col_4 FROM table_0 WHERE (id = 3) AND (col_4 = 99.74) LOCK IN SHARE MODE
2025-02-05 18:51:19,307 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:51:19,308 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 18:51:19,308 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'AqOTi', 'NlBCP', 44, 'XMtBg', 12.92)
2025-02-05 18:51:19,309 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'djOTS', 'UFZpa', 40, 'QmjMQ', 42.49)
2025-02-05 18:51:19,310 - 执行事务1语句: UPDATE table_0 SET col_2 = 47, col_1 = 'SVAVY', col_0 = 'CjGLJ' WHERE id BETWEEN 5 AND 5
2025-02-05 18:51:19,311 - 执行事务1语句: UPDATE table_0 SET col_1 = 'ZANnx', col_0 = 'cuRNY', col_4 = 56.74, col_3 = 'SwmGq' WHERE id BETWEEN 8 AND 8
2025-02-05 18:51:19,311 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 'fEPFY', 'DjPcA', 68, 'DGpSB', 80.08)
2025-02-05 18:51:19,312 - 执行事务1语句: DELETE FROM table_0 WHERE (col_4 = 91.23) AND (col_2 = 11)
2025-02-05 18:51:19,315 - 执行事务1语句: COMMIT;
2025-02-05 18:51:19,320 - 执行事务1成功
2025-02-05 18:51:39,071 - INFO TEST
2025-02-05 18:51:39,071 - DEBUG TEST
2025-02-05 18:51:39,071 - ERROR TEST
2025-02-05 18:51:39,072 - iter: 0
2025-02-05 18:51:40,605 - table table_0 has 9 rows
2025-02-05 18:51:40,606 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9]
2025-02-05 18:51:40,606 - trx2_lock_row_ids: [3, 4, 6, 7, 8]
2025-02-05 18:51:40,606 - intersection_row_ids: [3, 4, 6, 7, 8]
2025-02-05 18:51:40,606 - trx1_exclusive_ids: [1, 2, 5, 9]
2025-02-05 18:51:40,606 - trx2_exclusive_ids: []
2025-02-05 18:51:40,606 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [3, 4, 6, 7, 8], 'intersection_row_ids': [3, 4, 6, 7, 8]}
2025-02-05 18:51:40,606 - lock_same_resource: True
2025-02-05 18:51:40,606 - 
2025-02-05 18:51:40,606 - intersection phase1
2025-02-05 18:51:40,611 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,612 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:51:40,613 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'cond': "(col_2 = 16.15) AND (col_0 = 99.43) AND (col_1 = 'rqvdu')"}
2025-02-05 18:51:40,615 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,617 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:51:40,617 - params: {'table': 'table_0', 'v2': '4', 'select_cols': 'id, col_0', 'v1': '4'}
2025-02-05 18:51:40,621 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,623 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:51:40,623 - params: {'table': 'table_0', 'v2': '6', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'v1': '6'}
2025-02-05 18:51:40,627 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,629 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:51:40,629 - params: {'table': 'table_0', 'v2': '7', 'select_cols': 'id, col_2, col_3', 'v1': '7'}
2025-02-05 18:51:40,633 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,635 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:51:40,635 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'cond': '(col_0 = 42.81) AND (col_2 = 59.91)'}
2025-02-05 18:51:40,639 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,641 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:51:40,642 - params: {'table': 'table_0', 'v2': '3', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'v1': '3'}
2025-02-05 18:51:40,645 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,647 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:51:40,647 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_2, col_3', 'cond': '(id = 4) AND (col_2 = 22.42)'}
2025-02-05 18:51:40,650 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,652 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:51:40,652 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 6)'}
2025-02-05 18:51:40,655 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,656 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:51:40,656 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_3', 'cond': "(col_1 = 'lopdh')"}
2025-02-05 18:51:40,661 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,662 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:51:40,662 - params: {'table': 'table_0', 'v2': '8', 'select_cols': '*', 'v1': '8'}
2025-02-05 18:51:40,663 - intersection phase1 end
2025-02-05 18:51:40,663 - 
2025-02-05 18:51:40,663 - intersection phase2
2025-02-05 18:51:40,663 - 事务1在第二阶段自己加的锁: II
2025-02-05 18:51:40,663 - 事务2在第二阶段自己加的锁: NK
2025-02-05 18:51:40,663 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:51:40,663 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 18:51:40,667 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,669 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:51:40,669 - params: {'table': 'table_0', 'vals': "NULL, 39.55, 'AFbfh', 34.72, 17.31", 'insert_cols': 'id, col_0, col_1, col_2, col_3'}
2025-02-05 18:51:40,672 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,674 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:51:40,674 - params: {'table': 'table_0', 'set_expr': "col_0 = 40.33, col_1 = 'SQeId', col_2 = 51.05", 'cond': "(id = 2) AND (col_3 = 38.22) AND (col_0 = 20.85) AND (col_1 = 'qkfja')"}
2025-02-05 18:51:40,677 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,678 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:51:40,678 - params: {'table': 'table_0', 'set_expr': "col_3 = 94.65, col_2 = 41.92, col_1 = 'yyScd'", 'cond': '(id = 5)'}
2025-02-05 18:51:40,682 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,684 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:51:40,684 - params: {'table': 'table_0', 'set_expr': "col_2 = 95.77, col_1 = 'pqDwt', col_0 = 64.72, col_3 = 65.07", 'cond': '(id = 9)'}
2025-02-05 18:51:40,685 - intersection phase2 end
2025-02-05 18:51:40,685 - 
2025-02-05 18:51:40,685 - intersection phase3
2025-02-05 18:51:40,688 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:51:40,690 - needed_params: {'table', 'cond'}
2025-02-05 18:51:40,690 - params: {'table': 'table_0', 'cond': "(col_1 = 'lopdh') AND (col_0 = 56.79)"}
2025-02-05 18:51:40,690 - intersection phase3 end
2025-02-05 18:51:40,690 - 
2025-02-05 18:51:40,690 - 生成死锁事务序列成功如下
2025-02-05 18:51:40,690 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_2 = 16.15) AND (col_0 = 99.43) AND (col_1 = 'rqvdu') LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) AND (col_2 = 22.42) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_3 FROM table_0 WHERE (col_1 = 'lopdh') LOCK IN SHARE MODE"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_0 = 42.81) AND (col_2 = 59.91) LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.55, 'AFbfh', 34.72, 17.31)"), (1, "UPDATE table_0 SET col_0 = 40.33, col_1 = 'SQeId', col_2 = 51.05 WHERE (id = 2) AND (col_3 = 38.22) AND (col_0 = 20.85) AND (col_1 = 'qkfja')"), (1, "UPDATE table_0 SET col_3 = 94.65, col_2 = 41.92, col_1 = 'yyScd' WHERE (id = 5)"), (1, "UPDATE table_0 SET col_2 = 95.77, col_1 = 'pqDwt', col_0 = 64.72, col_3 = 65.07 WHERE (id = 9)"), (2, None), (1, "DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:51:42,239 - 创建事务1连接成功
2025-02-05 18:51:42,241 - 执行事务1语句: BEGIN
2025-02-05 18:51:42,242 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_2 = 16.15) AND (col_0 = 99.43) AND (col_1 = 'rqvdu') LOCK IN SHARE MODE
2025-02-05 18:51:42,243 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 18:51:42,243 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:51:42,245 - 执行事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:51:42,245 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_0 = 42.81) AND (col_2 = 59.91) LOCK IN SHARE MODE
2025-02-05 18:51:42,246 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.55, 'AFbfh', 34.72, 17.31)
2025-02-05 18:51:42,247 - 执行事务1语句: UPDATE table_0 SET col_0 = 40.33, col_1 = 'SQeId', col_2 = 51.05 WHERE (id = 2) AND (col_3 = 38.22) AND (col_0 = 20.85) AND (col_1 = 'qkfja')
2025-02-05 18:51:42,247 - 执行事务1语句: UPDATE table_0 SET col_3 = 94.65, col_2 = 41.92, col_1 = 'yyScd' WHERE (id = 5)
2025-02-05 18:51:42,248 - 执行事务1语句: UPDATE table_0 SET col_2 = 95.77, col_1 = 'pqDwt', col_0 = 64.72, col_3 = 65.07 WHERE (id = 9)
2025-02-05 18:51:42,249 - 执行事务1语句: DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)
2025-02-05 18:51:42,251 - 执行事务1语句: COMMIT;
2025-02-05 18:51:42,257 - 执行事务1成功
2025-02-05 18:51:44,893 - 恢复初始状态成功
2025-02-05 18:51:45,669 - 创建事务2连接成功
2025-02-05 18:51:45,670 - 执行事务2语句: BEGIN
2025-02-05 18:51:45,672 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 18:51:45,673 - 执行事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) AND (col_2 = 22.42) LOCK IN SHARE MODE
2025-02-05 18:51:45,674 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 18:51:45,674 - 执行事务2语句: SELECT id, col_0, col_3 FROM table_0 WHERE (col_1 = 'lopdh') LOCK IN SHARE MODE
2025-02-05 18:51:45,675 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 18:51:45,676 - 执行事务2语句: COMMIT;
2025-02-05 18:51:45,681 - 执行事务2成功
2025-02-05 18:51:50,580 - 
2025-02-05 18:51:50,580 - 执行前idx: 3, pending_stmts: {2: (1, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_2 = 16.15) AND (col_0 = 99.43) AND (col_1 = 'rqvdu') LOCK IN SHARE MODE", <Thread(Thread-1, started 36000)>, 1738752710.5803196)}
2025-02-05 18:51:50,682 - stmt_idx: 2, status: success, result: None
2025-02-05 18:51:50,683 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_2 = 16.15) AND (col_0 = 99.43) AND (col_1 = 'rqvdu') LOCK IN SHARE MODE
2025-02-05 18:51:50,683 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:51:50,683 - 
2025-02-05 18:51:50,789 - 
2025-02-05 18:51:50,790 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-2, started 17860)>, 1738752710.789638)}
2025-02-05 18:51:50,896 - stmt_idx: 3, status: success, result: None
2025-02-05 18:51:50,896 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 18:51:50,896 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:51:50,896 - 
2025-02-05 18:51:51,002 - 
2025-02-05 18:51:51,003 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) AND (col_2 = 22.42) LOCK IN SHARE MODE', <Thread(Thread-3, started 33240)>, 1738752711.0027971)}
2025-02-05 18:51:51,107 - stmt_idx: 4, status: success, result: None
2025-02-05 18:51:51,107 - 成功执行序列中事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) AND (col_2 = 22.42) LOCK IN SHARE MODE
2025-02-05 18:51:51,107 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:51:51,107 - 
2025-02-05 18:51:51,214 - 
2025-02-05 18:51:51,215 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-4, started 37884)>, 1738752711.214089)}
2025-02-05 18:51:51,321 - stmt_idx: 5, status: success, result: None
2025-02-05 18:51:51,321 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 18:51:51,321 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:51:51,321 - 
2025-02-05 18:51:51,430 - 
2025-02-05 18:51:51,431 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT * FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-5, started 14812)>, 1738752711.4308684)}
2025-02-05 18:51:51,541 - stmt_idx: 6, status: success, result: None
2025-02-05 18:51:51,541 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 18:51:51,541 - 执行后idx: 7, pending_stmts: {}
2025-02-05 18:51:51,541 - 
2025-02-05 18:51:51,651 - 
2025-02-05 18:51:51,652 - 执行前idx: 8, pending_stmts: {7: (2, "SELECT id, col_0, col_3 FROM table_0 WHERE (col_1 = 'lopdh') LOCK IN SHARE MODE", <Thread(Thread-6, started 45028)>, 1738752711.651169)}
2025-02-05 18:51:51,757 - stmt_idx: 7, status: success, result: None
2025-02-05 18:51:51,757 - 成功执行序列中事务2语句: SELECT id, col_0, col_3 FROM table_0 WHERE (col_1 = 'lopdh') LOCK IN SHARE MODE
2025-02-05 18:51:51,757 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:51:51,757 - 
2025-02-05 18:51:51,864 - 
2025-02-05 18:51:51,865 - 执行前idx: 9, pending_stmts: {8: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-7, started 28176)>, 1738752711.864861)}
2025-02-05 18:51:51,971 - stmt_idx: 8, status: success, result: None
2025-02-05 18:51:51,971 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 18:51:51,971 - 执行后idx: 9, pending_stmts: {}
2025-02-05 18:51:51,971 - 
2025-02-05 18:51:52,077 - 
2025-02-05 18:51:52,078 - 执行前idx: 10, pending_stmts: {9: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-8, started 43580)>, 1738752712.0778346)}
2025-02-05 18:51:52,185 - stmt_idx: 9, status: success, result: None
2025-02-05 18:51:52,185 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:51:52,185 - 执行后idx: 10, pending_stmts: {}
2025-02-05 18:51:52,185 - 
2025-02-05 18:51:52,294 - 
2025-02-05 18:51:52,295 - 执行前idx: 11, pending_stmts: {10: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-9, started 42352)>, 1738752712.2948213)}
2025-02-05 18:51:52,402 - stmt_idx: 10, status: success, result: None
2025-02-05 18:51:52,403 - 成功执行序列中事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:51:52,403 - 执行后idx: 11, pending_stmts: {}
2025-02-05 18:51:52,403 - 
2025-02-05 18:51:52,511 - 
2025-02-05 18:51:52,512 - 执行前idx: 12, pending_stmts: {11: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_0 = 42.81) AND (col_2 = 59.91) LOCK IN SHARE MODE', <Thread(Thread-10, started 34844)>, 1738752712.5111094)}
2025-02-05 18:51:52,618 - stmt_idx: 11, status: success, result: None
2025-02-05 18:51:52,618 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_0 = 42.81) AND (col_2 = 59.91) LOCK IN SHARE MODE
2025-02-05 18:51:52,618 - 执行后idx: 12, pending_stmts: {}
2025-02-05 18:51:52,618 - 
2025-02-05 18:51:52,727 - 
2025-02-05 18:51:52,727 - 执行前idx: 13, pending_stmts: {12: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.55, 'AFbfh', 34.72, 17.31)", <Thread(Thread-11, started 21652)>, 1738752712.727071)}
2025-02-05 18:51:52,834 - stmt_idx: 12, status: success, result: None
2025-02-05 18:51:52,834 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.55, 'AFbfh', 34.72, 17.31)
2025-02-05 18:51:52,834 - 执行后idx: 13, pending_stmts: {}
2025-02-05 18:51:52,834 - 
2025-02-05 18:51:52,940 - 
2025-02-05 18:51:52,941 - 执行前idx: 14, pending_stmts: {13: (1, "UPDATE table_0 SET col_0 = 40.33, col_1 = 'SQeId', col_2 = 51.05 WHERE (id = 2) AND (col_3 = 38.22) AND (col_0 = 20.85) AND (col_1 = 'qkfja')", <Thread(Thread-12, started 6400)>, 1738752712.9402251)}
2025-02-05 18:51:53,049 - stmt_idx: 13, status: success, result: None
2025-02-05 18:51:53,049 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 40.33, col_1 = 'SQeId', col_2 = 51.05 WHERE (id = 2) AND (col_3 = 38.22) AND (col_0 = 20.85) AND (col_1 = 'qkfja')
2025-02-05 18:51:53,049 - 执行后idx: 14, pending_stmts: {}
2025-02-05 18:51:53,049 - 
2025-02-05 18:51:53,159 - 
2025-02-05 18:51:53,160 - 执行前idx: 15, pending_stmts: {14: (1, "UPDATE table_0 SET col_3 = 94.65, col_2 = 41.92, col_1 = 'yyScd' WHERE (id = 5)", <Thread(Thread-13, started 43928)>, 1738752713.1596773)}
2025-02-05 18:51:53,267 - stmt_idx: 14, status: success, result: None
2025-02-05 18:51:53,267 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 94.65, col_2 = 41.92, col_1 = 'yyScd' WHERE (id = 5)
2025-02-05 18:51:53,268 - 执行后idx: 15, pending_stmts: {}
2025-02-05 18:51:53,268 - 
2025-02-05 18:51:53,374 - 
2025-02-05 18:51:53,375 - 执行前idx: 16, pending_stmts: {15: (1, "UPDATE table_0 SET col_2 = 95.77, col_1 = 'pqDwt', col_0 = 64.72, col_3 = 65.07 WHERE (id = 9)", <Thread(Thread-14, started 39596)>, 1738752713.3746498)}
2025-02-05 18:51:53,485 - stmt_idx: 15, status: success, result: None
2025-02-05 18:51:53,485 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 95.77, col_1 = 'pqDwt', col_0 = 64.72, col_3 = 65.07 WHERE (id = 9)
2025-02-05 18:51:53,485 - 执行后idx: 16, pending_stmts: {}
2025-02-05 18:51:53,485 - 
2025-02-05 18:51:53,594 - stmt为None, trx_id: 2, stmt: None
2025-02-05 18:51:53,595 - 
2025-02-05 18:51:53,595 - 执行前idx: 18, pending_stmts: {17: (1, "DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)", <Thread(Thread-15, started 35860)>, 1738752713.5953012)}
2025-02-05 18:51:53,704 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)
2025-02-05 18:51:53,705 - 执行后idx: 18, pending_stmts: {17: (1, "DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)", <Thread(Thread-15, started 35860)>, 1738752713.5953012)}
2025-02-05 18:51:53,705 - 
2025-02-05 18:51:53,814 - 序列遍历完成，开始查看剩余阻塞的语句：{17: (1, "DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)", <Thread(Thread-15, started 35860)>, 1738752713.5953012)}
2025-02-05 18:51:53,814 - 
2025-02-05 18:51:53,814 - 执行前idx: 20, pending_stmts: {17: (1, "DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)", <Thread(Thread-15, stopped 35860)>, 1738752713.5953012)}
2025-02-05 18:51:53,919 - stmt_idx: 17, status: success, result: None
2025-02-05 18:51:53,919 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)
2025-02-05 18:51:53,919 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)
2025-02-05 18:51:53,920 - 执行后idx: 20, pending_stmts: {18: (1, 'COMMIT', <Thread(Thread-16, started 3184)>, 1738752713.92041)}
2025-02-05 18:51:53,920 - 
2025-02-05 18:51:54,025 - 序列遍历完成，开始查看剩余阻塞的语句：{18: (1, 'COMMIT', <Thread(Thread-16, stopped 3184)>, 1738752713.92041)}
2025-02-05 18:51:54,025 - 
2025-02-05 18:51:54,025 - 执行前idx: 20, pending_stmts: {18: (1, 'COMMIT', <Thread(Thread-16, stopped 3184)>, 1738752713.92041)}
2025-02-05 18:51:54,132 - stmt_idx: 18, status: success, result: None
2025-02-05 18:51:54,132 - 成功执行序列中事务1语句: COMMIT
2025-02-05 18:51:54,132 - 执行后idx: 20, pending_stmts: {}
2025-02-05 18:51:54,132 - 
2025-02-05 18:51:54,241 - 执行序列成功
2025-02-05 18:51:55,008 - is_atomic: True
2025-02-05 18:51:55,009 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:51:55,009 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_2 = 16.15) AND (col_0 = 99.43) AND (col_1 = 'rqvdu') LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) AND (col_2 = 22.42) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_3 FROM table_0 WHERE (col_1 = 'lopdh') LOCK IN SHARE MODE"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_0 = 42.81) AND (col_2 = 59.91) LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.55, 'AFbfh', 34.72, 17.31)"), (1, "UPDATE table_0 SET col_0 = 40.33, col_1 = 'SQeId', col_2 = 51.05 WHERE (id = 2) AND (col_3 = 38.22) AND (col_0 = 20.85) AND (col_1 = 'qkfja')"), (1, "UPDATE table_0 SET col_3 = 94.65, col_2 = 41.92, col_1 = 'yyScd' WHERE (id = 5)"), (1, "UPDATE table_0 SET col_2 = 95.77, col_1 = 'pqDwt', col_0 = 64.72, col_3 = 65.07 WHERE (id = 9)"), (2, 'COMMIT'), (1, "DELETE FROM table_0 WHERE (col_1 = 'lopdh') AND (col_0 = 56.79)"), (1, 'COMMIT')]
2025-02-05 18:51:55,009 - snapshots: {'before': {'table_0': [(1, 82.42, 'ccofn', 38.84, 16.2), (2, 20.85, 'qkfja', 49.68, 38.22), (3, 99.43, 'rqvdu', 16.15, 61.0), (4, 55.05, 'krftj', 22.42, 71.5), (5, 85.61, 'xahlh', 82.67, 33.93), (6, 5.15, 'mtran', 5.88, 66.18), (7, 56.79, 'lopdh', 31.2, 25.18), (8, 42.81, 'bdkqr', 59.91, 32.0), (9, 63.51, 'yvdlf', 23.34, 48.61)]}, 'trx1': {'table_0': [(1, 82.42, 'ccofn', 38.84, 16.2), (2, 40.33, 'SQeId', 51.05, 38.22), (3, 99.43, 'rqvdu', 16.15, 61.0), (4, 55.05, 'krftj', 22.42, 71.5), (5, 85.61, 'yyScd', 41.92, 94.65), (6, 5.15, 'mtran', 5.88, 66.18), (8, 42.81, 'bdkqr', 59.91, 32.0), (9, 64.72, 'pqDwt', 95.77, 65.07), (10, 39.55, 'AFbfh', 34.72, 17.31)]}, 'trx2': {'table_0': [(1, 82.42, 'ccofn', 38.84, 16.2), (2, 20.85, 'qkfja', 49.68, 38.22), (3, 99.43, 'rqvdu', 16.15, 61.0), (4, 55.05, 'krftj', 22.42, 71.5), (5, 85.61, 'xahlh', 82.67, 33.93), (6, 5.15, 'mtran', 5.88, 66.18), (7, 56.79, 'lopdh', 31.2, 25.18), (8, 42.81, 'bdkqr', 59.91, 32.0), (9, 63.51, 'yvdlf', 23.34, 48.61)]}, 'serial': {'table_0': [(1, 82.42, 'ccofn', 38.84, 16.2), (2, 40.33, 'SQeId', 51.05, 38.22), (3, 99.43, 'rqvdu', 16.15, 61.0), (4, 55.05, 'krftj', 22.42, 71.5), (5, 85.61, 'yyScd', 41.92, 94.65), (6, 5.15, 'mtran', 5.88, 66.18), (8, 42.81, 'bdkqr', 59.91, 32.0), (9, 64.72, 'pqDwt', 95.77, 65.07), (11, 39.55, 'AFbfh', 34.72, 17.31)]}}
2025-02-05 18:51:55,009 - 
2025-02-05 18:51:55,021 - iter: 1
2025-02-05 18:51:56,504 - table table_0 has 5 rows
2025-02-05 18:51:56,505 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [4, 5], 'intersection_row_ids': []}
2025-02-05 18:51:56,505 - lock_same_resource: False
2025-02-05 18:51:56,505 - 
2025-02-05 18:51:56,505 - non intersection phase1
2025-02-05 18:51:56,505 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:51:56,505 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:51:56,505 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:51:56,505 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:51:56,508 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:51:56,510 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:51:56,510 - params: {'table': 'table_0', 'vals': "NULL, 46.67, 'aBILu', 98.07, 'klwaE'", 'insert_cols': 'id, col_1, col_2, col_3, col_654'}
2025-02-05 18:51:56,513 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:51:56,514 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:51:56,514 - params: {'table': 'table_0', 'set_expr': "col_3 = 76.01, col_654 = 'KcHEd'", 'v2': '2', 'v1': '2'}
2025-02-05 18:51:56,518 - 生成锁SQL失败: 'NK'
2025-02-05 18:51:56,518 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:51:56,518 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:51:56,518 - 
2025-02-05 18:51:56,519 - Error in iteration 1: 'NK'
2025-02-05 18:51:56,519 - 
2025-02-05 18:51:56,527 - iter: 2
2025-02-05 18:51:58,077 - table table_0 has 15 rows
2025-02-05 18:51:58,077 - trx1_start_id: 5
2025-02-05 18:51:58,077 - trx1_end_id: 7
2025-02-05 18:51:58,077 - trx1_exclusive_start_id: 5
2025-02-05 18:51:58,077 - trx1_exclusive_end_id: 4
2025-02-05 18:51:58,077 - trx1_exclusive_ids: []
2025-02-05 18:51:58,077 - trx2_start_id: 5
2025-02-05 18:51:58,077 - trx2_end_id: 12
2025-02-05 18:51:58,078 - trx2_exclusive_start_id: 8
2025-02-05 18:51:58,078 - trx2_exclusive_end_id: 12
2025-02-05 18:51:58,078 - trx2_exclusive_ids: [8, 9, 10, 11, 12]
2025-02-05 18:51:58,078 - intersection_ids: [5, 6, 7]
2025-02-05 18:51:58,078 - res_dict: {'trx1_lock_row_ids': [5, 6, 7], 'trx2_lock_row_ids': [5, 6, 7, 8, 9, 10, 11, 12], 'intersection_row_ids': [5, 6, 7]}
2025-02-05 18:51:58,078 - lock_same_resource: True
2025-02-05 18:51:58,078 - 
2025-02-05 18:51:58,078 - intersection phase1
2025-02-05 18:51:58,081 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=7
2025-02-05 18:51:58,083 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:51:58,083 - params: {'table': 'table_0', 'set_expr': 'col_3 = 19', 'v2': '7', 'v1': '5'}
2025-02-05 18:51:58,087 - 生成锁SQL失败: 'GAP'
2025-02-05 18:51:58,087 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:51:58,088 - 
2025-02-05 18:51:58,088 - Error in iteration 2: 'GAP'
2025-02-05 18:51:58,088 - 
2025-02-05 18:51:58,095 - iter: 3
2025-02-05 18:51:59,617 - table table_0 has 10 rows
2025-02-05 18:51:59,617 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [10], 'intersection_row_ids': []}
2025-02-05 18:51:59,617 - lock_same_resource: False
2025-02-05 18:51:59,617 - 
2025-02-05 18:51:59,618 - non intersection phase1
2025-02-05 18:51:59,618 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:51:59,618 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:51:59,618 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 18:51:59,618 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:51:59,621 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=9
2025-02-05 18:51:59,622 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:51:59,622 - params: {'table': 'table_0', 'v2': '9', 'select_cols': 'id, col_0, col_2', 'v1': '1'}
2025-02-05 18:51:59,623 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:51:59,623 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:51:59,623 - 
2025-02-05 18:51:59,623 - Error in iteration 3: 'NK'
2025-02-05 18:51:59,623 - 
2025-02-05 18:51:59,630 - iter: 4
2025-02-05 18:52:01,133 - table table_0 has 10 rows
2025-02-05 18:52:01,133 - trx1_lock_row_ids: [1, 2, 4, 5, 6, 7, 8, 9, 10]
2025-02-05 18:52:01,133 - trx2_lock_row_ids: [1, 2, 3, 4]
2025-02-05 18:52:01,133 - intersection_row_ids: [1, 2, 4]
2025-02-05 18:52:01,133 - trx1_exclusive_ids: [5, 6, 7, 8, 9, 10]
2025-02-05 18:52:01,133 - trx2_exclusive_ids: [3]
2025-02-05 18:52:01,133 - res_dict: {'trx1_lock_row_ids': [1, 2, 4, 5, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [1, 2, 3, 4], 'intersection_row_ids': [1, 2, 4]}
2025-02-05 18:52:01,133 - lock_same_resource: True
2025-02-05 18:52:01,133 - 
2025-02-05 18:52:01,133 - intersection phase1
2025-02-05 18:52:01,137 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 18:52:01,138 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:01,138 - params: {'table': 'table_0', 'v2': '4', 'select_cols': '*', 'v1': '1'}
2025-02-05 18:52:01,138 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:01,138 - 
2025-02-05 18:52:01,138 - Error in iteration 4: 'GAP'
2025-02-05 18:52:01,138 - 
2025-02-05 18:52:01,145 - iter: 5
2025-02-05 18:52:02,648 - table table_0 has 8 rows
2025-02-05 18:52:02,649 - res_dict: {'trx1_lock_row_ids': [1, 2, 8], 'trx2_lock_row_ids': [5, 7], 'intersection_row_ids': []}
2025-02-05 18:52:02,649 - lock_same_resource: False
2025-02-05 18:52:02,649 - 
2025-02-05 18:52:02,649 - non intersection phase1
2025-02-05 18:52:02,650 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:52:02,650 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:52:02,650 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:52:02,650 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 18:52:02,653 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:52:02,654 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:52:02,654 - params: {'table': 'table_0', 'set_expr': "col_2 = 83.64, col_4 = 63, col_1 = 51, col_0 = 'mCfIV'", 'v2': '1', 'v1': '1'}
2025-02-05 18:52:02,658 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:52:02,659 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:52:02,659 - params: {'table': 'table_0', 'vals': "NULL, 'kKHxE', 43, 77.76, 10", 'insert_cols': 'id, col_0, col_1, col_2, col_4'}
2025-02-05 18:52:02,663 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:52:02,664 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:52:02,664 - params: {'table': 'table_0', 'vals': "NULL, 'iRnae', 59, 55.94, 21", 'insert_cols': 'id, col_0, col_1, col_2, col_4'}
2025-02-05 18:52:02,665 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:52:02,665 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:02,665 - 
2025-02-05 18:52:02,665 - Error in iteration 5: 'NK'
2025-02-05 18:52:02,665 - 
2025-02-05 18:52:02,672 - iter: 6
2025-02-05 18:52:04,195 - table table_0 has 15 rows
2025-02-05 18:52:04,196 - trx1_start_id: 5
2025-02-05 18:52:04,196 - trx1_end_id: 14
2025-02-05 18:52:04,196 - trx1_exclusive_start_id: 5
2025-02-05 18:52:04,196 - trx1_exclusive_end_id: 12
2025-02-05 18:52:04,196 - trx1_exclusive_ids: [5, 6, 7, 8, 9, 10, 11, 12]
2025-02-05 18:52:04,196 - trx2_start_id: 13
2025-02-05 18:52:04,196 - trx2_end_id: 14
2025-02-05 18:52:04,196 - trx2_exclusive_start_id: 15
2025-02-05 18:52:04,196 - trx2_exclusive_end_id: 14
2025-02-05 18:52:04,196 - trx2_exclusive_ids: []
2025-02-05 18:52:04,196 - intersection_ids: [13, 14]
2025-02-05 18:52:04,196 - res_dict: {'trx1_lock_row_ids': [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'trx2_lock_row_ids': [13, 14], 'intersection_row_ids': [13, 14]}
2025-02-05 18:52:04,196 - lock_same_resource: True
2025-02-05 18:52:04,196 - 
2025-02-05 18:52:04,196 - intersection phase1
2025-02-05 18:52:04,200 - 生成锁SQL失败: 'GAP'
2025-02-05 18:52:04,200 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:04,200 - 
2025-02-05 18:52:04,200 - Error in iteration 6: 'GAP'
2025-02-05 18:52:04,200 - 
2025-02-05 18:52:04,207 - iter: 7
2025-02-05 18:52:05,769 - table table_0 has 11 rows
2025-02-05 18:52:05,770 - trx1_lock_row_ids: [2, 3, 4, 5, 6, 7]
2025-02-05 18:52:05,770 - trx2_lock_row_ids: [3, 6, 7, 10]
2025-02-05 18:52:05,770 - intersection_row_ids: [3, 6, 7]
2025-02-05 18:52:05,770 - trx1_exclusive_ids: [2, 4, 5]
2025-02-05 18:52:05,770 - trx2_exclusive_ids: [10]
2025-02-05 18:52:05,770 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [3, 6, 7, 10], 'intersection_row_ids': [3, 6, 7]}
2025-02-05 18:52:05,770 - lock_same_resource: True
2025-02-05 18:52:05,770 - 
2025-02-05 18:52:05,770 - intersection phase1
2025-02-05 18:52:05,773 - 生成锁SQL失败: 'NK'
2025-02-05 18:52:05,773 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:05,773 - 
2025-02-05 18:52:05,773 - Error in iteration 7: 'NK'
2025-02-05 18:52:05,773 - 
2025-02-05 18:52:05,778 - iter: 8
2025-02-05 18:52:07,270 - table table_0 has 10 rows
2025-02-05 18:52:07,270 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2025-02-05 18:52:07,271 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2025-02-05 18:52:07,271 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2025-02-05 18:52:07,271 - trx1_exclusive_ids: []
2025-02-05 18:52:07,271 - trx2_exclusive_ids: []
2025-02-05 18:52:07,271 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
2025-02-05 18:52:07,271 - lock_same_resource: True
2025-02-05 18:52:07,271 - 
2025-02-05 18:52:07,271 - intersection phase1
2025-02-05 18:52:07,274 - 生成锁SQL失败: 'GAP'
2025-02-05 18:52:07,275 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:07,275 - 
2025-02-05 18:52:07,275 - Error in iteration 8: 'GAP'
2025-02-05 18:52:07,275 - 
2025-02-05 18:52:07,280 - iter: 9
2025-02-05 18:52:08,800 - table table_0 has 15 rows
2025-02-05 18:52:08,800 - res_dict: {'trx1_lock_row_ids': [1, 3, 8, 9, 10, 13], 'trx2_lock_row_ids': [2, 6, 7, 11, 12, 14, 15], 'intersection_row_ids': []}
2025-02-05 18:52:08,800 - lock_same_resource: False
2025-02-05 18:52:08,800 - 
2025-02-05 18:52:08,801 - non intersection phase1
2025-02-05 18:52:08,801 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:52:08,801 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:52:08,801 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:52:08,801 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:52:08,804 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,805 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:08,805 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 1) AND (col_2 = 17)'}
2025-02-05 18:52:08,808 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,811 - needed_params: {'table', 'cond'}
2025-02-05 18:52:08,811 - params: {'table': 'table_0', 'cond': '(col_1 = 54.82)'}
2025-02-05 18:52:08,814 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,815 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:08,815 - params: {'table': 'table_0', 'v2': '8', 'select_cols': '*', 'v1': '8'}
2025-02-05 18:52:08,819 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,820 - needed_params: {'table', 'cond'}
2025-02-05 18:52:08,820 - params: {'table': 'table_0', 'cond': '(id = 9)'}
2025-02-05 18:52:08,822 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,824 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:08,824 - params: {'table': 'table_0', 'v2': '10', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'v1': '10'}
2025-02-05 18:52:08,828 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,829 - needed_params: {'table', 'cond'}
2025-02-05 18:52:08,829 - params: {'table': 'table_0', 'cond': "(col_2 = 39) AND (col_1 = 10.86) AND (col_0 = 'yccfa')"}
2025-02-05 18:52:08,833 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,835 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:08,835 - params: {'table': 'table_0', 'v2': '2', 'select_cols': 'id', 'v1': '2'}
2025-02-05 18:52:08,838 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,839 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:08,840 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 6)'}
2025-02-05 18:52:08,843 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,845 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:08,845 - params: {'table': 'table_0', 'select_cols': 'col_4', 'cond': '(col_1 = 64.73) AND (col_2 = 40)'}
2025-02-05 18:52:08,849 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,850 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:08,850 - params: {'table': 'table_0', 'v2': '11', 'select_cols': '*', 'v1': '11'}
2025-02-05 18:52:08,854 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,855 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:08,856 - params: {'table': 'table_0', 'select_cols': 'col_0, col_3, col_4', 'cond': "(id = 12) AND (col_0 = 'ghvdd') AND (col_3 = 'wflzk')"}
2025-02-05 18:52:08,859 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,860 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:08,860 - params: {'table': 'table_0', 'select_cols': 'id', 'cond': "(col_3 = 'duofc')"}
2025-02-05 18:52:08,864 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,865 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:08,865 - params: {'table': 'table_0', 'select_cols': 'id, col_3', 'cond': "(col_0 = 'spysq') AND (col_1 = 96.23) AND (col_2 = 21)"}
2025-02-05 18:52:08,865 - non intersection phase1 end
2025-02-05 18:52:08,865 - 
2025-02-05 18:52:08,865 - non intersection phase2
2025-02-05 18:52:08,868 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:52:08,870 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:52:08,870 - params: {'table': 'table_0', 'set_expr': 'col_4 = 69, col_1 = 4.91', 'cond': '(id = 11)'}
2025-02-05 18:52:08,870 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:52:08,870 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:08,871 - 
2025-02-05 18:52:08,871 - Error in iteration 9: 'NK'
2025-02-05 18:52:08,871 - 
2025-02-05 18:52:08,877 - iter: 10
2025-02-05 18:52:10,389 - table table_0 has 9 rows
2025-02-05 18:52:10,390 - trx1_lock_row_ids: [2, 4, 5, 6]
2025-02-05 18:52:10,390 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6]
2025-02-05 18:52:10,390 - intersection_row_ids: [2, 4, 5, 6]
2025-02-05 18:52:10,390 - trx1_exclusive_ids: []
2025-02-05 18:52:10,390 - trx2_exclusive_ids: [1, 3]
2025-02-05 18:52:10,390 - res_dict: {'trx1_lock_row_ids': [2, 4, 5, 6], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6], 'intersection_row_ids': [2, 4, 5, 6]}
2025-02-05 18:52:10,390 - lock_same_resource: True
2025-02-05 18:52:10,390 - 
2025-02-05 18:52:10,390 - intersection phase1
2025-02-05 18:52:10,393 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=6
2025-02-05 18:52:10,394 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:52:10,395 - params: {'table': 'table_0', 'set_expr': 'col_0 = 56, col_2 = 76', 'v2': '6', 'v1': '1'}
2025-02-05 18:52:10,397 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:52:10,399 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:10,399 - params: {'table': 'table_0', 'v2': '2', 'select_cols': '*', 'v1': '2'}
2025-02-05 18:52:10,401 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:52:10,403 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:10,403 - params: {'table': 'table_0', 'v2': '4', 'select_cols': 'col_1, col_2', 'v1': '4'}
2025-02-05 18:52:10,406 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:52:10,408 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:10,408 - params: {'table': 'table_0', 'select_cols': 'id, col_2', 'cond': '(id = 5)'}
2025-02-05 18:52:10,411 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:52:10,412 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:10,412 - params: {'table': 'table_0', 'v2': '6', 'select_cols': 'id, col_0, col_2', 'v1': '6'}
2025-02-05 18:52:10,412 - intersection phase1 end
2025-02-05 18:52:10,413 - 
2025-02-05 18:52:10,413 - intersection phase2
2025-02-05 18:52:10,413 - 事务1在第二阶段自己加的锁: NK
2025-02-05 18:52:10,413 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:52:10,413 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 18:52:10,413 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 18:52:10,416 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:52:10,419 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:10,419 - params: {'table': 'table_0', 'v2': '1', 'select_cols': 'id, col_0, col_2', 'v1': '1'}
2025-02-05 18:52:10,422 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:52:10,424 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:10,424 - params: {'table': 'table_0', 'v2': '3', 'select_cols': 'id, col_1', 'v1': '3'}
2025-02-05 18:52:10,424 - intersection phase2 end
2025-02-05 18:52:10,424 - 
2025-02-05 18:52:10,424 - intersection phase3
2025-02-05 18:52:10,427 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:52:10,429 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:52:10,429 - params: {'table': 'table_0', 'vals': 'NULL, 62, 66.41, 77', 'insert_cols': 'id, col_0, col_1, col_2'}
2025-02-05 18:52:10,429 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:10,429 - 
2025-02-05 18:52:10,429 - Error in iteration 10: 'NK'
2025-02-05 18:52:10,429 - 
2025-02-05 18:52:10,436 - iter: 11
2025-02-05 18:52:11,952 - table table_0 has 12 rows
2025-02-05 18:52:11,953 - trx1_lock_row_ids: [2, 3, 5, 6, 7, 9, 10, 12]
2025-02-05 18:52:11,953 - trx2_lock_row_ids: [1, 2, 3, 5, 6, 10]
2025-02-05 18:52:11,953 - intersection_row_ids: [2, 3, 5, 6, 10]
2025-02-05 18:52:11,953 - trx1_exclusive_ids: [7, 9, 12]
2025-02-05 18:52:11,953 - trx2_exclusive_ids: [1]
2025-02-05 18:52:11,953 - res_dict: {'trx1_lock_row_ids': [2, 3, 5, 6, 7, 9, 10, 12], 'trx2_lock_row_ids': [1, 2, 3, 5, 6, 10], 'intersection_row_ids': [2, 3, 5, 6, 10]}
2025-02-05 18:52:11,953 - lock_same_resource: True
2025-02-05 18:52:11,953 - 
2025-02-05 18:52:11,953 - intersection phase1
2025-02-05 18:52:11,953 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:11,953 - 
2025-02-05 18:52:11,953 - Error in iteration 11: 'GAP'
2025-02-05 18:52:11,953 - 
2025-02-05 18:52:11,959 - iter: 12
2025-02-05 18:52:13,439 - table table_0 has 7 rows
2025-02-05 18:52:13,439 - trx1_lock_row_ids: [2, 3, 4, 5, 6, 7]
2025-02-05 18:52:13,439 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7]
2025-02-05 18:52:13,439 - intersection_row_ids: [2, 3, 4, 5, 6, 7]
2025-02-05 18:52:13,439 - trx1_exclusive_ids: []
2025-02-05 18:52:13,439 - trx2_exclusive_ids: [1]
2025-02-05 18:52:13,439 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'intersection_row_ids': [2, 3, 4, 5, 6, 7]}
2025-02-05 18:52:13,439 - lock_same_resource: True
2025-02-05 18:52:13,439 - 
2025-02-05 18:52:13,439 - intersection phase1
2025-02-05 18:52:13,442 - 生成锁SQL失败: 'GAP'
2025-02-05 18:52:13,442 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:13,442 - 
2025-02-05 18:52:13,443 - Error in iteration 12: 'GAP'
2025-02-05 18:52:13,443 - 
2025-02-05 18:52:13,449 - iter: 13
2025-02-05 18:52:14,972 - table table_0 has 13 rows
2025-02-05 18:52:14,972 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6], 'trx2_lock_row_ids': [13], 'intersection_row_ids': []}
2025-02-05 18:52:14,973 - lock_same_resource: False
2025-02-05 18:52:14,973 - 
2025-02-05 18:52:14,973 - non intersection phase1
2025-02-05 18:52:14,973 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:52:14,973 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:52:14,973 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:52:14,973 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 18:52:14,977 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=6
2025-02-05 18:52:14,978 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:52:14,978 - params: {'table': 'table_0', 'set_expr': 'col_1 = 43', 'v2': '6', 'v1': '1'}
2025-02-05 18:52:14,981 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=13, is_continuous=True, range_end_idx=13
2025-02-05 18:52:14,982 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:14,982 - params: {'table': 'table_0', 'v2': '13', 'select_cols': 'id', 'v1': '13'}
2025-02-05 18:52:14,982 - non intersection phase1 end
2025-02-05 18:52:14,982 - 
2025-02-05 18:52:14,983 - non intersection phase2
2025-02-05 18:52:14,987 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=13, is_continuous=True, range_end_idx=13
2025-02-05 18:52:14,988 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:14,989 - params: {'table': 'table_0', 'v2': '13', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'v1': '13'}
2025-02-05 18:52:14,991 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 18:52:14,992 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:52:14,992 - params: {'table': 'table_0', 'set_expr': "col_3 = 'HzidK'", 'v2': '2', 'v1': '1'}
2025-02-05 18:52:14,993 - non intersection phase2 end
2025-02-05 18:52:14,993 - 
2025-02-05 18:52:14,993 - 生成死锁事务序列成功如下
2025-02-05 18:52:14,993 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_1 = 43 WHERE id BETWEEN 1 AND 6'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, "UPDATE table_0 SET col_3 = 'HzidK' WHERE id BETWEEN 1 AND 2"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:52:16,503 - 创建事务1连接成功
2025-02-05 18:52:16,504 - 执行事务1语句: BEGIN
2025-02-05 18:52:16,505 - 执行事务1语句: UPDATE table_0 SET col_1 = 43 WHERE id BETWEEN 1 AND 6
2025-02-05 18:52:16,506 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 18:52:16,508 - 执行事务1语句: COMMIT;
2025-02-05 18:52:16,513 - 执行事务1成功
2025-02-05 18:52:19,101 - 恢复初始状态成功
2025-02-05 18:52:19,849 - 创建事务2连接成功
2025-02-05 18:52:19,850 - 执行事务2语句: BEGIN
2025-02-05 18:52:19,851 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 18:52:19,852 - 执行事务2语句: UPDATE table_0 SET col_3 = 'HzidK' WHERE id BETWEEN 1 AND 2
2025-02-05 18:52:19,854 - 执行事务2语句: COMMIT;
2025-02-05 18:52:19,859 - 执行事务2成功
2025-02-05 18:52:24,731 - 
2025-02-05 18:52:24,732 - 执行前idx: 3, pending_stmts: {2: (1, 'UPDATE table_0 SET col_1 = 43 WHERE id BETWEEN 1 AND 6', <Thread(Thread-17, started 41316)>, 1738752744.73189)}
2025-02-05 18:52:24,836 - stmt_idx: 2, status: success, result: None
2025-02-05 18:52:24,836 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 43 WHERE id BETWEEN 1 AND 6
2025-02-05 18:52:24,836 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:52:24,836 - 
2025-02-05 18:52:24,947 - 
2025-02-05 18:52:24,948 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-18, started 18396)>, 1738752744.9475698)}
2025-02-05 18:52:25,054 - stmt_idx: 3, status: success, result: None
2025-02-05 18:52:25,054 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 18:52:25,054 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:52:25,054 - 
2025-02-05 18:52:25,160 - 
2025-02-05 18:52:25,161 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-19, started 37396)>, 1738752745.1606963)}
2025-02-05 18:52:25,270 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 18:52:25,271 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-19, started 37396)>, 1738752745.1606963)}
2025-02-05 18:52:25,271 - 
2025-02-05 18:52:25,382 - 
2025-02-05 18:52:25,383 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-19, started 37396)>, 1738752745.1606963), 5: (2, "UPDATE table_0 SET col_3 = 'HzidK' WHERE id BETWEEN 1 AND 2", <Thread(Thread-20, started 3276)>, 1738752745.382782)}
2025-02-05 18:52:25,385 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_3 = 'HzidK' WHERE id BETWEEN 1 AND 2
2025-02-05 18:52:25,490 - stmt_idx: 4, status: success, result: None
2025-02-05 18:52:25,490 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 18:52:25,490 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 18:52:25,598 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:52:25,598 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: UPDATE table_0 SET col_3 = 'HzidK' WHERE id BETWEEN 1 AND 2
2025-02-05 18:52:25,598 - 错误: dictionary changed size during iteration
2025-02-05 18:52:25,603 - 执行序列成功
2025-02-05 18:52:26,360 - is_atomic: True
2025-02-05 18:52:26,360 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:52:26,360 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_1 = 43 WHERE id BETWEEN 1 AND 6'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 18:52:26,360 - snapshots: {'before': {'table_0': [(1, 'xykun', 12, 'moipd', 'gjqaf'), (2, 'ltszr', 40, 'smtgu', 'pmcuk'), (3, 'liveg', 99, 'oxksv', 'fgzmu'), (4, 'npqfh', 97, 'jmgfe', 'ciqam'), (5, 'xtzaf', 51, 'kzuvp', 'jzzbd'), (6, 'oukrf', 92, 'puiir', 'wsjnu'), (7, 'ipyld', 30, 'pgjqf', 'jpawy'), (8, 'pygxg', 82, 'acbqf', 'ijfzc'), (9, 'ijdhf', 11, 'wjwfb', 'sjpgy'), (10, 'gjhys', 79, 'oooqf', 'kicyk'), (11, 'aehui', 47, 'bttyg', 'ndzhh'), (12, 'xrxpv', 83, 'xwmtk', 'cvgns'), (13, 'khrrr', 60, 'kwngc', 'gocej')]}, 'trx1': {'table_0': [(1, 'xykun', 43, 'moipd', 'gjqaf'), (2, 'ltszr', 43, 'smtgu', 'pmcuk'), (3, 'liveg', 43, 'oxksv', 'fgzmu'), (4, 'npqfh', 43, 'jmgfe', 'ciqam'), (5, 'xtzaf', 43, 'kzuvp', 'jzzbd'), (6, 'oukrf', 43, 'puiir', 'wsjnu'), (7, 'ipyld', 30, 'pgjqf', 'jpawy'), (8, 'pygxg', 82, 'acbqf', 'ijfzc'), (9, 'ijdhf', 11, 'wjwfb', 'sjpgy'), (10, 'gjhys', 79, 'oooqf', 'kicyk'), (11, 'aehui', 47, 'bttyg', 'ndzhh'), (12, 'xrxpv', 83, 'xwmtk', 'cvgns'), (13, 'khrrr', 60, 'kwngc', 'gocej')]}, 'trx2': {'table_0': [(1, 'xykun', 12, 'moipd', 'HzidK'), (2, 'ltszr', 40, 'smtgu', 'HzidK'), (3, 'liveg', 99, 'oxksv', 'fgzmu'), (4, 'npqfh', 97, 'jmgfe', 'ciqam'), (5, 'xtzaf', 51, 'kzuvp', 'jzzbd'), (6, 'oukrf', 92, 'puiir', 'wsjnu'), (7, 'ipyld', 30, 'pgjqf', 'jpawy'), (8, 'pygxg', 82, 'acbqf', 'ijfzc'), (9, 'ijdhf', 11, 'wjwfb', 'sjpgy'), (10, 'gjhys', 79, 'oooqf', 'kicyk'), (11, 'aehui', 47, 'bttyg', 'ndzhh'), (12, 'xrxpv', 83, 'xwmtk', 'cvgns'), (13, 'khrrr', 60, 'kwngc', 'gocej')]}, 'serial': {'table_0': [(1, 'xykun', 43, 'moipd', 'gjqaf'), (2, 'ltszr', 43, 'smtgu', 'pmcuk'), (3, 'liveg', 43, 'oxksv', 'fgzmu'), (4, 'npqfh', 43, 'jmgfe', 'ciqam'), (5, 'xtzaf', 43, 'kzuvp', 'jzzbd'), (6, 'oukrf', 43, 'puiir', 'wsjnu'), (7, 'ipyld', 30, 'pgjqf', 'jpawy'), (8, 'pygxg', 82, 'acbqf', 'ijfzc'), (9, 'ijdhf', 11, 'wjwfb', 'sjpgy'), (10, 'gjhys', 79, 'oooqf', 'kicyk'), (11, 'aehui', 47, 'bttyg', 'ndzhh'), (12, 'xrxpv', 83, 'xwmtk', 'cvgns'), (13, 'khrrr', 60, 'kwngc', 'gocej')]}}
2025-02-05 18:52:26,360 - 
2025-02-05 18:52:26,373 - iter: 14
2025-02-05 18:52:27,894 - table table_0 has 14 rows
2025-02-05 18:52:27,895 - res_dict: {'trx1_lock_row_ids': [1, 14], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'intersection_row_ids': []}
2025-02-05 18:52:27,895 - lock_same_resource: False
2025-02-05 18:52:27,895 - 
2025-02-05 18:52:27,895 - non intersection phase1
2025-02-05 18:52:27,895 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:52:27,895 - 事务2在第一阶段自己加的锁: II
2025-02-05 18:52:27,895 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:52:27,896 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:52:27,896 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:52:27,896 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:27,896 - 
2025-02-05 18:52:27,896 - Error in iteration 14: 'NK'
2025-02-05 18:52:27,896 - 
2025-02-05 18:52:27,901 - iter: 15
2025-02-05 18:52:29,407 - table table_0 has 11 rows
2025-02-05 18:52:29,407 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [4, 5, 6, 7, 8, 9], 'intersection_row_ids': []}
2025-02-05 18:52:29,407 - lock_same_resource: False
2025-02-05 18:52:29,407 - 
2025-02-05 18:52:29,407 - non intersection phase1
2025-02-05 18:52:29,408 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:52:29,408 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:52:29,408 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:52:29,408 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 18:52:29,408 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:52:29,408 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:29,408 - 
2025-02-05 18:52:29,408 - Error in iteration 15: 'NK'
2025-02-05 18:52:29,408 - 
2025-02-05 18:52:29,413 - iter: 16
2025-02-05 18:52:30,899 - table table_0 has 10 rows
2025-02-05 18:52:30,899 - trx1_lock_row_ids: [3, 4, 5, 6, 7, 8, 9, 10]
2025-02-05 18:52:30,899 - trx2_lock_row_ids: [5, 6, 7, 8]
2025-02-05 18:52:30,899 - intersection_row_ids: [5, 6, 7, 8]
2025-02-05 18:52:30,899 - trx1_exclusive_ids: [3, 4, 9, 10]
2025-02-05 18:52:30,899 - trx2_exclusive_ids: []
2025-02-05 18:52:30,899 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [5, 6, 7, 8], 'intersection_row_ids': [5, 6, 7, 8]}
2025-02-05 18:52:30,900 - lock_same_resource: True
2025-02-05 18:52:30,900 - 
2025-02-05 18:52:30,900 - intersection phase1
2025-02-05 18:52:30,903 - 生成锁SQL失败: 'GAP'
2025-02-05 18:52:30,903 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:30,903 - 
2025-02-05 18:52:30,903 - Error in iteration 16: 'GAP'
2025-02-05 18:52:30,903 - 
2025-02-05 18:52:30,908 - iter: 17
2025-02-05 18:52:32,428 - table table_0 has 14 rows
2025-02-05 18:52:32,428 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]
2025-02-05 18:52:32,428 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]
2025-02-05 18:52:32,428 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]
2025-02-05 18:52:32,428 - trx1_exclusive_ids: []
2025-02-05 18:52:32,428 - trx2_exclusive_ids: []
2025-02-05 18:52:32,429 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]}
2025-02-05 18:52:32,429 - lock_same_resource: True
2025-02-05 18:52:32,429 - 
2025-02-05 18:52:32,429 - intersection phase1
2025-02-05 18:52:32,432 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,433 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,433 - params: {'table': 'table_0', 'v2': '1', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'v1': '1'}
2025-02-05 18:52:32,435 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,437 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,437 - params: {'table': 'table_0', 'v2': '2', 'select_cols': 'id, col_1, col_2', 'v1': '2'}
2025-02-05 18:52:32,440 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,441 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,441 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 3)'}
2025-02-05 18:52:32,443 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,444 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,445 - params: {'table': 'table_0', 'select_cols': 'id, col_1, col_3', 'cond': "(col_2 = 27.88) AND (col_0 = 'lqvqh') AND (col_3 = 'yzvty')"}
2025-02-05 18:52:32,449 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,450 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,450 - params: {'table': 'table_0', 'v2': '5', 'select_cols': 'id', 'v1': '5'}
2025-02-05 18:52:32,453 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,455 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,455 - params: {'table': 'table_0', 'v2': '6', 'select_cols': 'id, col_0', 'v1': '6'}
2025-02-05 18:52:32,458 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,460 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,460 - params: {'table': 'table_0', 'select_cols': '*', 'cond': "(col_0 = 'chqic')"}
2025-02-05 18:52:32,464 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,465 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,466 - params: {'table': 'table_0', 'v2': '8', 'select_cols': 'id, col_1, col_2', 'v1': '8'}
2025-02-05 18:52:32,468 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,471 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,471 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'cond': "(col_3 = 'maear') AND (col_0 = 'xfrbw') AND (col_1 = 81.57)"}
2025-02-05 18:52:32,473 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,475 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,475 - params: {'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3', 'cond': '(col_2 = 39.71) AND (col_1 = 50.66)'}
2025-02-05 18:52:32,478 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,479 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,479 - params: {'table': 'table_0', 'v2': '12', 'select_cols': 'col_0', 'v1': '12'}
2025-02-05 18:52:32,483 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,485 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,485 - params: {'table': 'table_0', 'select_cols': 'id, col_3', 'cond': '(id = 13)'}
2025-02-05 18:52:32,488 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,490 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,490 - params: {'table': 'table_0', 'v2': '14', 'select_cols': '*', 'v1': '14'}
2025-02-05 18:52:32,493 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,494 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,494 - params: {'table': 'table_0', 'select_cols': 'id', 'cond': "(col_3 = 'akdan')"}
2025-02-05 18:52:32,497 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,499 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,499 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_2', 'cond': '(id = 2)'}
2025-02-05 18:52:32,503 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,504 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,505 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_3', 'cond': "(col_0 = 'jjvgd') AND (col_3 = 'vfwsw') AND (col_2 = 6.09)"}
2025-02-05 18:52:32,509 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,510 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,510 - params: {'table': 'table_0', 'v2': '4', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'v1': '4'}
2025-02-05 18:52:32,514 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,515 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,515 - params: {'table': 'table_0', 'select_cols': 'id, col_2, col_3', 'cond': "(col_0 = 'pbmvm')"}
2025-02-05 18:52:32,518 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,519 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,520 - params: {'table': 'table_0', 'v2': '6', 'select_cols': '*', 'v1': '6'}
2025-02-05 18:52:32,523 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,524 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,524 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 7)'}
2025-02-05 18:52:32,527 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,529 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,529 - params: {'table': 'table_0', 'v2': '8', 'select_cols': 'id, col_0, col_2, col_3', 'v1': '8'}
2025-02-05 18:52:32,533 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,534 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,534 - params: {'table': 'table_0', 'v2': '9', 'select_cols': '*', 'v1': '9'}
2025-02-05 18:52:32,539 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,540 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,540 - params: {'table': 'table_0', 'select_cols': 'id', 'cond': "(col_0 = 'uxymb')"}
2025-02-05 18:52:32,544 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,545 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,546 - params: {'table': 'table_0', 'v2': '12', 'select_cols': 'id, col_0, col_2', 'v1': '12'}
2025-02-05 18:52:32,549 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,550 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:32,550 - params: {'table': 'table_0', 'v2': '13', 'select_cols': '*', 'v1': '13'}
2025-02-05 18:52:32,553 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 18:52:32,555 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:32,555 - params: {'table': 'table_0', 'select_cols': 'id, col_1, col_2, col_3', 'cond': "(col_2 = 61.05) AND (col_0 = 'pertj')"}
2025-02-05 18:52:32,555 - intersection phase1 end
2025-02-05 18:52:32,555 - 
2025-02-05 18:52:32,555 - intersection phase2
2025-02-05 18:52:32,556 - 事务1在第二阶段自己加的锁: II
2025-02-05 18:52:32,556 - 事务2在第二阶段自己加的锁: NK
2025-02-05 18:52:32,556 - 事务1在第三阶段请求对方资源的锁: NK
2025-02-05 18:52:32,556 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 18:52:32,557 - intersection phase2 end
2025-02-05 18:52:32,557 - 
2025-02-05 18:52:32,557 - intersection phase3
2025-02-05 18:52:32,557 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:32,557 - 
2025-02-05 18:52:32,557 - Error in iteration 17: 'NK'
2025-02-05 18:52:32,557 - 
2025-02-05 18:52:32,565 - iter: 18
2025-02-05 18:52:34,090 - table table_0 has 5 rows
2025-02-05 18:52:34,091 - trx1_lock_row_ids: [1, 2, 3, 4]
2025-02-05 18:52:34,091 - trx2_lock_row_ids: [2]
2025-02-05 18:52:34,091 - intersection_row_ids: [2]
2025-02-05 18:52:34,091 - trx1_exclusive_ids: [1, 3, 4]
2025-02-05 18:52:34,091 - trx2_exclusive_ids: []
2025-02-05 18:52:34,091 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4], 'trx2_lock_row_ids': [2], 'intersection_row_ids': [2]}
2025-02-05 18:52:34,091 - lock_same_resource: True
2025-02-05 18:52:34,091 - 
2025-02-05 18:52:34,091 - intersection phase1
2025-02-05 18:52:34,095 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:52:34,096 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:52:34,096 - params: {'table': 'table_0', 'set_expr': "col_1 = 'lxwGp', col_3 = 'jPBfN', col_2 = 'TFQtR'", 'v2': '2', 'v1': '2'}
2025-02-05 18:52:34,096 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:34,096 - 
2025-02-05 18:52:34,096 - Error in iteration 18: 'GAP'
2025-02-05 18:52:34,096 - 
2025-02-05 18:52:34,102 - iter: 19
2025-02-05 18:52:35,630 - table table_0 has 7 rows
2025-02-05 18:52:35,630 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-05 18:52:35,631 - lock_same_resource: False
2025-02-05 18:52:35,631 - 
2025-02-05 18:52:35,631 - non intersection phase1
2025-02-05 18:52:35,631 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:52:35,631 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:52:35,631 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 18:52:35,631 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:52:35,634 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 18:52:35,635 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:35,635 - params: {'table': 'table_0', 'v2': '1', 'select_cols': '*', 'v1': '1'}
2025-02-05 18:52:35,638 - 生成锁SQL失败: 'NK'
2025-02-05 18:52:35,638 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:52:35,639 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:35,639 - 
2025-02-05 18:52:35,639 - Error in iteration 19: 'NK'
2025-02-05 18:52:35,639 - 
2025-02-05 18:52:35,645 - iter: 20
2025-02-05 18:52:37,144 - table table_0 has 11 rows
2025-02-05 18:52:37,144 - res_dict: {'trx1_lock_row_ids': [6, 7], 'trx2_lock_row_ids': [11], 'intersection_row_ids': []}
2025-02-05 18:52:37,144 - lock_same_resource: False
2025-02-05 18:52:37,144 - 
2025-02-05 18:52:37,145 - non intersection phase1
2025-02-05 18:52:37,145 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:52:37,145 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:52:37,145 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:52:37,145 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:52:37,148 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=6, is_continuous=True, range_end_idx=7
2025-02-05 18:52:37,149 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:37,149 - params: {'table': 'table_0', 'v2': '7', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'v1': '6'}
2025-02-05 18:52:37,153 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:52:37,155 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:37,155 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 11)'}
2025-02-05 18:52:37,155 - non intersection phase1 end
2025-02-05 18:52:37,155 - 
2025-02-05 18:52:37,155 - non intersection phase2
2025-02-05 18:52:37,159 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:52:37,161 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:52:37,161 - params: {'table': 'table_0', 'set_expr': "col_0 = 9.45, col_1 = 'XPRsN', col_2 = 20.95", 'cond': "(col_1 = 'fomti') AND (col_3 = 29)"}
2025-02-05 18:52:37,164 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 18:52:37,165 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:37,165 - params: {'table': 'table_0', 'v2': '7', 'select_cols': 'id, col_0', 'v1': '7'}
2025-02-05 18:52:37,165 - non intersection phase2 end
2025-02-05 18:52:37,165 - 
2025-02-05 18:52:37,165 - 生成死锁事务序列成功如下
2025-02-05 18:52:37,165 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 9.45, col_1 = 'XPRsN', col_2 = 20.95 WHERE (col_1 = 'fomti') AND (col_3 = 29)"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:52:38,706 - 创建事务1连接成功
2025-02-05 18:52:38,708 - 执行事务1语句: BEGIN
2025-02-05 18:52:38,709 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE
2025-02-05 18:52:38,709 - 执行事务1语句: UPDATE table_0 SET col_0 = 9.45, col_1 = 'XPRsN', col_2 = 20.95 WHERE (col_1 = 'fomti') AND (col_3 = 29)
2025-02-05 18:52:38,711 - 执行事务1语句: COMMIT;
2025-02-05 18:52:38,716 - 执行事务1成功
2025-02-05 18:52:41,289 - 恢复初始状态成功
2025-02-05 18:52:42,053 - 创建事务2连接成功
2025-02-05 18:52:42,054 - 执行事务2语句: BEGIN
2025-02-05 18:52:42,055 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE
2025-02-05 18:52:42,056 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:52:42,057 - 执行事务2语句: COMMIT;
2025-02-05 18:52:42,062 - 执行事务2成功
2025-02-05 18:52:46,930 - 
2025-02-05 18:52:46,931 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE', <Thread(Thread-21, started 39364)>, 1738752766.9307845)}
2025-02-05 18:52:47,041 - stmt_idx: 2, status: success, result: None
2025-02-05 18:52:47,041 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE
2025-02-05 18:52:47,041 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:52:47,041 - 
2025-02-05 18:52:47,149 - 
2025-02-05 18:52:47,149 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE', <Thread(Thread-22, started 39284)>, 1738752767.148744)}
2025-02-05 18:52:47,256 - stmt_idx: 3, status: success, result: None
2025-02-05 18:52:47,256 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE
2025-02-05 18:52:47,256 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:52:47,256 - 
2025-02-05 18:52:47,363 - 
2025-02-05 18:52:47,364 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-23, started 28324)>, 1738752767.3636508)}
2025-02-05 18:52:47,470 - wait for lock, trx_id: 2, stmt: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:52:47,470 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-23, started 28324)>, 1738752767.3636508)}
2025-02-05 18:52:47,471 - 
2025-02-05 18:52:47,578 - 
2025-02-05 18:52:47,579 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-23, started 28324)>, 1738752767.3636508), 5: (1, "UPDATE table_0 SET col_0 = 9.45, col_1 = 'XPRsN', col_2 = 20.95 WHERE (col_1 = 'fomti') AND (col_3 = 29)", <Thread(Thread-24, started 40648)>, 1738752767.578357)}
2025-02-05 18:52:47,581 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:52:47,682 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:52:47,682 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:52:47,682 - 错误: dictionary changed size during iteration
2025-02-05 18:52:47,686 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, "UPDATE table_0 SET col_0 = 9.45, col_1 = 'XPRsN', col_2 = 20.95 WHERE (col_1 = 'fomti') AND (col_3 = 29)", <Thread(Thread-24, stopped 40648)>, 1738752767.578357)}
2025-02-05 18:52:47,686 - 
2025-02-05 18:52:47,686 - 执行前idx: 8, pending_stmts: {5: (1, "UPDATE table_0 SET col_0 = 9.45, col_1 = 'XPRsN', col_2 = 20.95 WHERE (col_1 = 'fomti') AND (col_3 = 29)", <Thread(Thread-24, stopped 40648)>, 1738752767.578357)}
2025-02-05 18:52:47,791 - stmt_idx: 5, status: success, result: None
2025-02-05 18:52:47,791 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 9.45, col_1 = 'XPRsN', col_2 = 20.95 WHERE (col_1 = 'fomti') AND (col_3 = 29)
2025-02-05 18:52:47,791 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:52:47,791 - 
2025-02-05 18:52:47,899 - 执行序列成功
2025-02-05 18:52:48,669 - is_atomic: True
2025-02-05 18:52:48,669 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:52:48,669 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, "UPDATE table_0 SET col_0 = 9.45, col_1 = 'XPRsN', col_2 = 20.95 WHERE (col_1 = 'fomti') AND (col_3 = 29)")]
2025-02-05 18:52:48,669 - snapshots: {'before': {'table_0': [(1, 80.73, 'yknlh', 96.8, 90), (2, 78.85, 'mfhre', 16.74, 7), (3, 76.97, 'todyo', 51.1, 14), (4, 41.19, 'rtbvj', 23.13, 87), (5, 5.71, 'dfnls', 89.07, 8), (6, 37.01, 'yybot', 64.19, 74), (7, 24.23, 'rfsej', 34.29, 42), (8, 41.14, 'yszmw', 86.15, 31), (9, 61.02, 'dyble', 1.75, 100), (10, 82.53, 'gtqca', 48.24, 17), (11, 72.58, 'fomti', 28.37, 29)]}, 'trx1': {'table_0': [(1, 80.73, 'yknlh', 96.8, 90), (2, 78.85, 'mfhre', 16.74, 7), (3, 76.97, 'todyo', 51.1, 14), (4, 41.19, 'rtbvj', 23.13, 87), (5, 5.71, 'dfnls', 89.07, 8), (6, 37.01, 'yybot', 64.19, 74), (7, 24.23, 'rfsej', 34.29, 42), (8, 41.14, 'yszmw', 86.15, 31), (9, 61.02, 'dyble', 1.75, 100), (10, 82.53, 'gtqca', 48.24, 17), (11, 9.45, 'XPRsN', 20.95, 29)]}, 'trx2': {'table_0': [(1, 80.73, 'yknlh', 96.8, 90), (2, 78.85, 'mfhre', 16.74, 7), (3, 76.97, 'todyo', 51.1, 14), (4, 41.19, 'rtbvj', 23.13, 87), (5, 5.71, 'dfnls', 89.07, 8), (6, 37.01, 'yybot', 64.19, 74), (7, 24.23, 'rfsej', 34.29, 42), (8, 41.14, 'yszmw', 86.15, 31), (9, 61.02, 'dyble', 1.75, 100), (10, 82.53, 'gtqca', 48.24, 17), (11, 72.58, 'fomti', 28.37, 29)]}, 'serial': {'table_0': [(1, 80.73, 'yknlh', 96.8, 90), (2, 78.85, 'mfhre', 16.74, 7), (3, 76.97, 'todyo', 51.1, 14), (4, 41.19, 'rtbvj', 23.13, 87), (5, 5.71, 'dfnls', 89.07, 8), (6, 37.01, 'yybot', 64.19, 74), (7, 24.23, 'rfsej', 34.29, 42), (8, 41.14, 'yszmw', 86.15, 31), (9, 61.02, 'dyble', 1.75, 100), (10, 82.53, 'gtqca', 48.24, 17), (11, 9.45, 'XPRsN', 20.95, 29)]}}
2025-02-05 18:52:48,669 - 
2025-02-05 18:52:48,682 - iter: 21
2025-02-05 18:52:50,155 - table table_0 has 7 rows
2025-02-05 18:52:50,155 - trx1_lock_row_ids: [2, 3]
2025-02-05 18:52:50,155 - trx2_lock_row_ids: [1, 2, 3, 7]
2025-02-05 18:52:50,155 - intersection_row_ids: [2, 3]
2025-02-05 18:52:50,155 - trx1_exclusive_ids: []
2025-02-05 18:52:50,155 - trx2_exclusive_ids: [1, 7]
2025-02-05 18:52:50,155 - res_dict: {'trx1_lock_row_ids': [2, 3], 'trx2_lock_row_ids': [1, 2, 3, 7], 'intersection_row_ids': [2, 3]}
2025-02-05 18:52:50,155 - lock_same_resource: True
2025-02-05 18:52:50,155 - 
2025-02-05 18:52:50,155 - intersection phase1
2025-02-05 18:52:50,159 - 生成锁SQL失败: 'NK'
2025-02-05 18:52:50,159 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:50,159 - 
2025-02-05 18:52:50,159 - Error in iteration 21: 'NK'
2025-02-05 18:52:50,159 - 
2025-02-05 18:52:50,167 - iter: 22
2025-02-05 18:52:51,679 - table table_0 has 10 rows
2025-02-05 18:52:51,679 - trx1_lock_row_ids: [1, 3, 4, 5, 6, 8, 9, 10]
2025-02-05 18:52:51,679 - trx2_lock_row_ids: [1, 4, 5, 6, 8, 10]
2025-02-05 18:52:51,680 - intersection_row_ids: [1, 4, 5, 6, 8, 10]
2025-02-05 18:52:51,680 - trx1_exclusive_ids: [3, 9]
2025-02-05 18:52:51,680 - trx2_exclusive_ids: []
2025-02-05 18:52:51,680 - res_dict: {'trx1_lock_row_ids': [1, 3, 4, 5, 6, 8, 9, 10], 'trx2_lock_row_ids': [1, 4, 5, 6, 8, 10], 'intersection_row_ids': [1, 4, 5, 6, 8, 10]}
2025-02-05 18:52:51,680 - lock_same_resource: True
2025-02-05 18:52:51,680 - 
2025-02-05 18:52:51,680 - intersection phase1
2025-02-05 18:52:51,680 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:51,680 - 
2025-02-05 18:52:51,680 - Error in iteration 22: 'GAP'
2025-02-05 18:52:51,680 - 
2025-02-05 18:52:51,685 - iter: 23
2025-02-05 18:52:53,167 - table table_0 has 13 rows
2025-02-05 18:52:53,167 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [12, 13], 'intersection_row_ids': []}
2025-02-05 18:52:53,167 - lock_same_resource: False
2025-02-05 18:52:53,167 - 
2025-02-05 18:52:53,167 - non intersection phase1
2025-02-05 18:52:53,168 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:52:53,168 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:52:53,168 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:52:53,168 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:52:53,171 - 生成锁SQL失败: 'NK'
2025-02-05 18:52:53,171 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:52:53,171 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:53,171 - 
2025-02-05 18:52:53,171 - Error in iteration 23: 'NK'
2025-02-05 18:52:53,171 - 
2025-02-05 18:52:53,177 - iter: 24
2025-02-05 18:52:54,710 - table table_0 has 11 rows
2025-02-05 18:52:54,710 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 10, 11], 'trx2_lock_row_ids': [8, 9], 'intersection_row_ids': []}
2025-02-05 18:52:54,710 - lock_same_resource: False
2025-02-05 18:52:54,710 - 
2025-02-05 18:52:54,710 - non intersection phase1
2025-02-05 18:52:54,711 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:52:54,711 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:52:54,711 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:52:54,711 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:52:54,714 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,715 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:52:54,715 - params: {'table': 'table_0', 'set_expr': "col_1 = 7.34, col_3 = 30.5, col_2 = 71.79, col_403 = 'QsfYR', col_0 = 27", 'cond': '(id = 1)'}
2025-02-05 18:52:54,718 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,720 - needed_params: {'table', 'cond'}
2025-02-05 18:52:54,720 - params: {'table': 'table_0', 'cond': '(col_2 = 72.75) AND (col_1 = 97.62) AND (col_0 = 45)'}
2025-02-05 18:52:54,724 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,725 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:54,726 - params: {'table': 'table_0', 'v2': '3', 'select_cols': 'id', 'v1': '3'}
2025-02-05 18:52:54,729 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,730 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:54,730 - params: {'table': 'table_0', 'select_cols': 'id, col_2', 'cond': '(col_3 = 60.63) AND (col_0 = 47) AND (col_1 = 71.4)'}
2025-02-05 18:52:54,733 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,735 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:54,735 - params: {'table': 'table_0', 'v2': '5', 'select_cols': 'id, col_2, col_3, col_403', 'v1': '5'}
2025-02-05 18:52:54,739 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,741 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:52:54,741 - params: {'table': 'table_0', 'set_expr': 'col_3 = 40.28, col_1 = 2.37, col_0 = 68', 'cond': '(col_3 = 36.5) AND (col_0 = 65) AND (col_2 = 3.77)'}
2025-02-05 18:52:54,743 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,745 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:54,745 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(col_0 = 76) AND (col_403 IS NULL) AND (col_3 = 71.45)'}
2025-02-05 18:52:54,749 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,750 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:52:54,750 - params: {'table': 'table_0', 'v2': '10', 'select_cols': 'id, col_1', 'v1': '10'}
2025-02-05 18:52:54,754 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:52:54,755 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:52:54,755 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 11)'}
2025-02-05 18:52:54,759 - 生成锁SQL失败: 'NK'
2025-02-05 18:52:54,759 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:52:54,759 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:54,759 - 
2025-02-05 18:52:54,759 - Error in iteration 24: 'NK'
2025-02-05 18:52:54,759 - 
2025-02-05 18:52:54,765 - iter: 25
2025-02-05 18:52:56,270 - table table_0 has 11 rows
2025-02-05 18:52:56,270 - res_dict: {'trx1_lock_row_ids': [8, 9], 'trx2_lock_row_ids': [1, 2, 3, 6, 7], 'intersection_row_ids': []}
2025-02-05 18:52:56,270 - lock_same_resource: False
2025-02-05 18:52:56,270 - 
2025-02-05 18:52:56,270 - non intersection phase1
2025-02-05 18:52:56,271 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:52:56,271 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:52:56,271 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:52:56,271 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:52:56,274 - 生成锁SQL失败: 'NK'
2025-02-05 18:52:56,275 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:52:56,275 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:56,275 - 
2025-02-05 18:52:56,275 - Error in iteration 25: 'NK'
2025-02-05 18:52:56,275 - 
2025-02-05 18:52:56,282 - iter: 26
2025-02-05 18:52:57,780 - table table_0 has 8 rows
2025-02-05 18:52:57,780 - res_dict: {'trx1_lock_row_ids': [1, 2, 6, 7, 8], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 18:52:57,780 - lock_same_resource: False
2025-02-05 18:52:57,780 - 
2025-02-05 18:52:57,780 - non intersection phase1
2025-02-05 18:52:57,781 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:52:57,781 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:52:57,781 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:52:57,781 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:52:57,781 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:52:57,781 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:52:57,781 - 
2025-02-05 18:52:57,781 - Error in iteration 26: 'NK'
2025-02-05 18:52:57,781 - 
2025-02-05 18:52:57,786 - iter: 27
2025-02-05 18:52:59,281 - table table_0 has 13 rows
2025-02-05 18:52:59,281 - trx1_lock_row_ids: [4, 9, 10, 12, 13]
2025-02-05 18:52:59,281 - trx2_lock_row_ids: [10]
2025-02-05 18:52:59,282 - intersection_row_ids: [10]
2025-02-05 18:52:59,282 - trx1_exclusive_ids: [4, 9, 12, 13]
2025-02-05 18:52:59,282 - trx2_exclusive_ids: []
2025-02-05 18:52:59,282 - res_dict: {'trx1_lock_row_ids': [4, 9, 10, 12, 13], 'trx2_lock_row_ids': [10], 'intersection_row_ids': [10]}
2025-02-05 18:52:59,282 - lock_same_resource: True
2025-02-05 18:52:59,282 - 
2025-02-05 18:52:59,282 - intersection phase1
2025-02-05 18:52:59,282 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:52:59,282 - 
2025-02-05 18:52:59,282 - Error in iteration 27: 'GAP'
2025-02-05 18:52:59,282 - 
2025-02-05 18:52:59,288 - iter: 28
2025-02-05 18:53:00,869 - table table_0 has 13 rows
2025-02-05 18:53:00,869 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [13], 'intersection_row_ids': []}
2025-02-05 18:53:00,869 - lock_same_resource: False
2025-02-05 18:53:00,869 - 
2025-02-05 18:53:00,869 - non intersection phase1
2025-02-05 18:53:00,870 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:53:00,870 - 事务2在第一阶段自己加的锁: II
2025-02-05 18:53:00,870 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:53:00,870 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:53:00,873 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=12
2025-02-05 18:53:00,874 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:00,874 - params: {'table': 'table_0', 'v2': '12', 'select_cols': 'id, col_0', 'v1': '1'}
2025-02-05 18:53:00,877 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:53:00,878 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:00,878 - params: {'table': 'table_0', 'set_expr': "col_1 = 'copYU'", 'v2': '13', 'v1': '13'}
2025-02-05 18:53:00,878 - non intersection phase1 end
2025-02-05 18:53:00,878 - 
2025-02-05 18:53:00,878 - non intersection phase2
2025-02-05 18:53:00,879 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:53:00,879 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:53:00,879 - 
2025-02-05 18:53:00,879 - Error in iteration 28: 'NK'
2025-02-05 18:53:00,879 - 
2025-02-05 18:53:00,885 - iter: 29
2025-02-05 18:53:02,454 - table table_0 has 14 rows
2025-02-05 18:53:02,454 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8], 'trx2_lock_row_ids': [1, 2, 9, 10, 11, 13, 14], 'intersection_row_ids': []}
2025-02-05 18:53:02,454 - lock_same_resource: False
2025-02-05 18:53:02,454 - 
2025-02-05 18:53:02,454 - non intersection phase1
2025-02-05 18:53:02,455 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:53:02,455 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:53:02,455 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 18:53:02,455 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:53:02,457 - 生成锁SQL失败: 'NK'
2025-02-05 18:53:02,457 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:53:02,457 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:53:02,457 - 
2025-02-05 18:53:02,458 - Error in iteration 29: 'NK'
2025-02-05 18:53:02,458 - 
2025-02-05 18:53:02,464 - iter: 30
2025-02-05 18:53:03,978 - table table_0 has 10 rows
2025-02-05 18:53:03,978 - res_dict: {'trx1_lock_row_ids': [10], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'intersection_row_ids': []}
2025-02-05 18:53:03,978 - lock_same_resource: False
2025-02-05 18:53:03,978 - 
2025-02-05 18:53:03,978 - non intersection phase1
2025-02-05 18:53:03,978 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:53:03,979 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:53:03,979 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:53:03,979 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:53:03,982 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:53:03,983 - needed_params: {'table', 'cond'}
2025-02-05 18:53:03,983 - params: {'table': 'table_0', 'cond': '(id = 10)'}
2025-02-05 18:53:03,986 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=9
2025-02-05 18:53:03,987 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:03,987 - params: {'table': 'table_0', 'v2': '9', 'select_cols': 'id, col_0, col_1', 'v1': '1'}
2025-02-05 18:53:03,988 - non intersection phase1 end
2025-02-05 18:53:03,988 - 
2025-02-05 18:53:03,988 - non intersection phase2
2025-02-05 18:53:03,992 - 生成锁SQL失败: 'NK'
2025-02-05 18:53:03,992 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:53:03,992 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:53:03,992 - 
2025-02-05 18:53:03,992 - Error in iteration 30: 'NK'
2025-02-05 18:53:03,993 - 
2025-02-05 18:53:03,997 - iter: 31
2025-02-05 18:53:05,530 - table table_0 has 11 rows
2025-02-05 18:53:05,530 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [1, 9, 10, 11], 'intersection_row_ids': []}
2025-02-05 18:53:05,530 - lock_same_resource: False
2025-02-05 18:53:05,530 - 
2025-02-05 18:53:05,530 - non intersection phase1
2025-02-05 18:53:05,531 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:53:05,531 - 事务2在第一阶段自己加的锁: II
2025-02-05 18:53:05,531 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 18:53:05,531 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:53:05,534 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=7
2025-02-05 18:53:05,535 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:05,535 - params: {'table': 'table_0', 'v2': '7', 'select_cols': 'id, col_1', 'v1': '2'}
2025-02-05 18:53:05,538 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:53:05,540 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:05,540 - params: {'table': 'table_0', 'set_expr': "col_1 = 'kXzzb', col_0 = 33.91", 'v2': '1', 'v1': '1'}
2025-02-05 18:53:05,543 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:53:05,545 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:53:05,545 - params: {'table': 'table_0', 'vals': "NULL, 90.73, 'EyyIO'", 'insert_cols': 'id, col_0, col_1'}
2025-02-05 18:53:05,547 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:53:05,548 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:53:05,548 - params: {'table': 'table_0', 'set_expr': "col_1 = 'zCqFp'", 'cond': '(id = 10)'}
2025-02-05 18:53:05,551 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:53:05,553 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:05,553 - params: {'table': 'table_0', 'set_expr': "col_0 = 8.15, col_1 = 'OKFuF'", 'v2': '11', 'v1': '11'}
2025-02-05 18:53:05,553 - non intersection phase1 end
2025-02-05 18:53:05,553 - 
2025-02-05 18:53:05,553 - non intersection phase2
2025-02-05 18:53:05,557 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:53:05,558 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:53:05,558 - params: {'table': 'table_0', 'vals': "NULL, 64.41, 'cmsZn'", 'insert_cols': 'id, col_0, col_1'}
2025-02-05 18:53:05,561 - 生成锁SQL失败: 'NK'
2025-02-05 18:53:05,561 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:53:05,561 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:53:05,561 - 
2025-02-05 18:53:05,561 - Error in iteration 31: 'NK'
2025-02-05 18:53:05,562 - 
2025-02-05 18:53:05,566 - iter: 32
2025-02-05 18:53:07,076 - table table_0 has 12 rows
2025-02-05 18:53:07,076 - res_dict: {'trx1_lock_row_ids': [3], 'trx2_lock_row_ids': [5, 6, 7, 8, 9, 10, 11], 'intersection_row_ids': []}
2025-02-05 18:53:07,076 - lock_same_resource: False
2025-02-05 18:53:07,076 - 
2025-02-05 18:53:07,077 - non intersection phase1
2025-02-05 18:53:07,077 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:53:07,077 - 事务2在第一阶段自己加的锁: II
2025-02-05 18:53:07,077 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 18:53:07,077 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:53:07,080 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:53:07,081 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:07,081 - params: {'table': 'table_0', 'v2': '3', 'select_cols': 'col_2, col_4', 'v1': '3'}
2025-02-05 18:53:07,084 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=11
2025-02-05 18:53:07,085 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:07,085 - params: {'table': 'table_0', 'set_expr': 'col_1 = 78.79', 'v2': '11', 'v1': '5'}
2025-02-05 18:53:07,085 - non intersection phase1 end
2025-02-05 18:53:07,086 - 
2025-02-05 18:53:07,086 - non intersection phase2
2025-02-05 18:53:07,090 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=6, is_continuous=True, range_end_idx=10
2025-02-05 18:53:07,091 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:07,091 - params: {'table': 'table_0', 'set_expr': 'col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84', 'v2': '10', 'v1': '6'}
2025-02-05 18:53:07,094 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:53:07,095 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:53:07,095 - params: {'table': 'table_0', 'set_expr': 'col_2 = 58.1, col_3 = 69.9', 'cond': '(col_0 = 96) AND (col_3 = 64.74)'}
2025-02-05 18:53:07,095 - non intersection phase2 end
2025-02-05 18:53:07,096 - 
2025-02-05 18:53:07,096 - 生成死锁事务序列成功如下
2025-02-05 18:53:07,096 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 78.79 WHERE id BETWEEN 5 AND 11'), (1, 'UPDATE table_0 SET col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84 WHERE id BETWEEN 6 AND 10'), (2, 'UPDATE table_0 SET col_2 = 58.1, col_3 = 69.9 WHERE (col_0 = 96) AND (col_3 = 64.74)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:53:08,630 - 创建事务1连接成功
2025-02-05 18:53:08,631 - 执行事务1语句: BEGIN
2025-02-05 18:53:08,632 - 执行事务1语句: SELECT col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 18:53:08,634 - 执行事务1语句: UPDATE table_0 SET col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84 WHERE id BETWEEN 6 AND 10
2025-02-05 18:53:08,636 - 执行事务1语句: COMMIT;
2025-02-05 18:53:08,640 - 执行事务1成功
2025-02-05 18:53:11,252 - 恢复初始状态成功
2025-02-05 18:53:12,015 - 创建事务2连接成功
2025-02-05 18:53:12,017 - 执行事务2语句: BEGIN
2025-02-05 18:53:12,018 - 执行事务2语句: UPDATE table_0 SET col_1 = 78.79 WHERE id BETWEEN 5 AND 11
2025-02-05 18:53:12,018 - 执行事务2语句: UPDATE table_0 SET col_2 = 58.1, col_3 = 69.9 WHERE (col_0 = 96) AND (col_3 = 64.74)
2025-02-05 18:53:12,021 - 执行事务2语句: COMMIT;
2025-02-05 18:53:12,025 - 执行事务2成功
2025-02-05 18:53:16,910 - 
2025-02-05 18:53:16,910 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-25, started 4636)>, 1738752796.9103124)}
2025-02-05 18:53:17,018 - stmt_idx: 2, status: success, result: None
2025-02-05 18:53:17,018 - 成功执行序列中事务1语句: SELECT col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 18:53:17,018 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:53:17,018 - 
2025-02-05 18:53:17,126 - 
2025-02-05 18:53:17,127 - 执行前idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_1 = 78.79 WHERE id BETWEEN 5 AND 11', <Thread(Thread-26, started 35248)>, 1738752797.1266243)}
2025-02-05 18:53:17,231 - stmt_idx: 3, status: success, result: None
2025-02-05 18:53:17,231 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 78.79 WHERE id BETWEEN 5 AND 11
2025-02-05 18:53:17,231 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:53:17,231 - 
2025-02-05 18:53:17,339 - 
2025-02-05 18:53:17,340 - 执行前idx: 5, pending_stmts: {4: (1, 'UPDATE table_0 SET col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84 WHERE id BETWEEN 6 AND 10', <Thread(Thread-27, started 33812)>, 1738752797.3393078)}
2025-02-05 18:53:17,446 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84 WHERE id BETWEEN 6 AND 10
2025-02-05 18:53:17,446 - 执行后idx: 5, pending_stmts: {4: (1, 'UPDATE table_0 SET col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84 WHERE id BETWEEN 6 AND 10', <Thread(Thread-27, started 33812)>, 1738752797.3393078)}
2025-02-05 18:53:17,446 - 
2025-02-05 18:53:17,554 - 
2025-02-05 18:53:17,554 - 执行前idx: 6, pending_stmts: {4: (1, 'UPDATE table_0 SET col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84 WHERE id BETWEEN 6 AND 10', <Thread(Thread-27, started 33812)>, 1738752797.3393078), 5: (2, 'UPDATE table_0 SET col_2 = 58.1, col_3 = 69.9 WHERE (col_0 = 96) AND (col_3 = 64.74)', <Thread(Thread-28, started 17972)>, 1738752797.5542789)}
2025-02-05 18:53:17,557 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84 WHERE id BETWEEN 6 AND 10
2025-02-05 18:53:17,663 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:53:17,663 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_2 = 93.58, col_4 = 35, col_3 = 40.28, col_1 = 64.19, col_0 = 84 WHERE id BETWEEN 6 AND 10
2025-02-05 18:53:17,663 - 错误: dictionary changed size during iteration
2025-02-05 18:53:17,668 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'UPDATE table_0 SET col_2 = 58.1, col_3 = 69.9 WHERE (col_0 = 96) AND (col_3 = 64.74)', <Thread(Thread-28, stopped 17972)>, 1738752797.5542789)}
2025-02-05 18:53:17,668 - 
2025-02-05 18:53:17,668 - 执行前idx: 8, pending_stmts: {5: (2, 'UPDATE table_0 SET col_2 = 58.1, col_3 = 69.9 WHERE (col_0 = 96) AND (col_3 = 64.74)', <Thread(Thread-28, stopped 17972)>, 1738752797.5542789)}
2025-02-05 18:53:17,771 - stmt_idx: 5, status: success, result: None
2025-02-05 18:53:17,771 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 58.1, col_3 = 69.9 WHERE (col_0 = 96) AND (col_3 = 64.74)
2025-02-05 18:53:17,771 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:53:17,771 - 
2025-02-05 18:53:17,879 - 执行序列成功
2025-02-05 18:53:18,637 - is_atomic: True
2025-02-05 18:53:18,637 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 18:53:18,637 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_2, col_4 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 78.79 WHERE id BETWEEN 5 AND 11'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, 'UPDATE table_0 SET col_2 = 58.1, col_3 = 69.9 WHERE (col_0 = 96) AND (col_3 = 64.74)')]
2025-02-05 18:53:18,637 - snapshots: {'before': {'table_0': [(1, 54, 99.58, 78.94, 61.43, 98), (2, 87, 94.36, 76.35, 10.58, 47), (3, 96, 40.34, 91.0, 64.74, 60), (4, 91, 37.98, 48.16, 26.18, 98), (5, 31, 12.02, 82.31, 56.73, 88), (6, 20, 72.99, 64.06, 39.22, 46), (7, 89, 58.99, 41.89, 1.85, 66), (8, 20, 97.63, 68.99, 60.64, 90), (9, 39, 42.48, 98.62, 9.1, 85), (10, 25, 53.46, 90.28, 29.2, 86), (11, 54, 22.6, 53.32, 3.14, 75), (12, 77, 1.8, 83.91, 80.32, 67)]}, 'trx1': {'table_0': [(1, 54, 99.58, 78.94, 61.43, 98), (2, 87, 94.36, 76.35, 10.58, 47), (3, 96, 40.34, 91.0, 64.74, 60), (4, 91, 37.98, 48.16, 26.18, 98), (5, 31, 12.02, 82.31, 56.73, 88), (6, 84, 64.19, 93.58, 40.28, 35), (7, 84, 64.19, 93.58, 40.28, 35), (8, 84, 64.19, 93.58, 40.28, 35), (9, 84, 64.19, 93.58, 40.28, 35), (10, 84, 64.19, 93.58, 40.28, 35), (11, 54, 22.6, 53.32, 3.14, 75), (12, 77, 1.8, 83.91, 80.32, 67)]}, 'trx2': {'table_0': [(1, 54, 99.58, 78.94, 61.43, 98), (2, 87, 94.36, 76.35, 10.58, 47), (3, 96, 40.34, 58.1, 69.9, 60), (4, 91, 37.98, 48.16, 26.18, 98), (5, 31, 78.79, 82.31, 56.73, 88), (6, 20, 78.79, 64.06, 39.22, 46), (7, 89, 78.79, 41.89, 1.85, 66), (8, 20, 78.79, 68.99, 60.64, 90), (9, 39, 78.79, 98.62, 9.1, 85), (10, 25, 78.79, 90.28, 29.2, 86), (11, 54, 78.79, 53.32, 3.14, 75), (12, 77, 1.8, 83.91, 80.32, 67)]}, 'serial': {'table_0': [(1, 54, 99.58, 78.94, 61.43, 98), (2, 87, 94.36, 76.35, 10.58, 47), (3, 96, 40.34, 58.1, 69.9, 60), (4, 91, 37.98, 48.16, 26.18, 98), (5, 31, 78.79, 82.31, 56.73, 88), (6, 20, 78.79, 64.06, 39.22, 46), (7, 89, 78.79, 41.89, 1.85, 66), (8, 20, 78.79, 68.99, 60.64, 90), (9, 39, 78.79, 98.62, 9.1, 85), (10, 25, 78.79, 90.28, 29.2, 86), (11, 54, 78.79, 53.32, 3.14, 75), (12, 77, 1.8, 83.91, 80.32, 67)]}}
2025-02-05 18:53:18,637 - 
2025-02-05 18:53:18,649 - iter: 33
2025-02-05 18:53:20,132 - table table_0 has 12 rows
2025-02-05 18:53:20,132 - trx1_start_id: 6
2025-02-05 18:53:20,132 - trx1_end_id: 7
2025-02-05 18:53:20,132 - trx1_exclusive_start_id: 6
2025-02-05 18:53:20,132 - trx1_exclusive_end_id: 6
2025-02-05 18:53:20,132 - trx1_exclusive_ids: [6]
2025-02-05 18:53:20,132 - trx2_start_id: 7
2025-02-05 18:53:20,132 - trx2_end_id: 12
2025-02-05 18:53:20,132 - trx2_exclusive_start_id: 8
2025-02-05 18:53:20,132 - trx2_exclusive_end_id: 12
2025-02-05 18:53:20,132 - trx2_exclusive_ids: [8, 9, 10, 11, 12]
2025-02-05 18:53:20,132 - intersection_ids: [7]
2025-02-05 18:53:20,133 - res_dict: {'trx1_lock_row_ids': [6, 7], 'trx2_lock_row_ids': [7, 8, 9, 10, 11, 12], 'intersection_row_ids': [7]}
2025-02-05 18:53:20,133 - lock_same_resource: True
2025-02-05 18:53:20,133 - 
2025-02-05 18:53:20,133 - intersection phase1
2025-02-05 18:53:20,135 - 生成锁SQL失败: 'GAP'
2025-02-05 18:53:20,135 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:53:20,136 - 
2025-02-05 18:53:20,136 - Error in iteration 33: 'GAP'
2025-02-05 18:53:20,136 - 
2025-02-05 18:53:20,142 - iter: 34
2025-02-05 18:53:21,708 - table table_0 has 13 rows
2025-02-05 18:53:21,708 - res_dict: {'trx1_lock_row_ids': [5, 6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [13], 'intersection_row_ids': []}
2025-02-05 18:53:21,708 - lock_same_resource: False
2025-02-05 18:53:21,708 - 
2025-02-05 18:53:21,709 - non intersection phase1
2025-02-05 18:53:21,709 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:53:21,709 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:53:21,709 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:53:21,709 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:53:21,713 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=12
2025-02-05 18:53:21,714 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:21,714 - params: {'table': 'table_0', 'set_expr': "col_922 = 11.11, col_0 = 98, col_1 = 42, col_3 = 'IXshQ'", 'v2': '12', 'v1': '5'}
2025-02-05 18:53:21,717 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:53:21,718 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:53:21,718 - params: {'table': 'table_0', 'set_expr': 'col_0 = 21', 'cond': '(id = 13)'}
2025-02-05 18:53:21,718 - non intersection phase1 end
2025-02-05 18:53:21,718 - 
2025-02-05 18:53:21,718 - non intersection phase2
2025-02-05 18:53:21,722 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:53:21,722 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:53:21,722 - params: {'table': 'table_0', 'set_expr': "col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw'", 'cond': "(col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)"}
2025-02-05 18:53:21,725 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=11, is_continuous=True, range_end_idx=12
2025-02-05 18:53:21,727 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:21,727 - params: {'table': 'table_0', 'v2': '12', 'select_cols': 'col_0, col_2, col_922', 'v1': '11'}
2025-02-05 18:53:21,727 - non intersection phase2 end
2025-02-05 18:53:21,727 - 
2025-02-05 18:53:21,727 - 生成死锁事务序列成功如下
2025-02-05 18:53:21,727 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_922 = 11.11, col_0 = 98, col_1 = 42, col_3 = 'IXshQ' WHERE id BETWEEN 5 AND 12"), (2, 'UPDATE table_0 SET col_0 = 21 WHERE (id = 13)'), (1, "UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)"), (2, 'SELECT col_0, col_2, col_922 FROM table_0 WHERE id BETWEEN 11 AND 12 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:53:23,267 - 创建事务1连接成功
2025-02-05 18:53:23,269 - 执行事务1语句: BEGIN
2025-02-05 18:53:23,270 - 执行事务1语句: UPDATE table_0 SET col_922 = 11.11, col_0 = 98, col_1 = 42, col_3 = 'IXshQ' WHERE id BETWEEN 5 AND 12
2025-02-05 18:53:23,271 - 执行事务1语句: UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)
2025-02-05 18:53:23,273 - 执行事务1语句: COMMIT;
2025-02-05 18:53:23,277 - 执行事务1成功
2025-02-05 18:53:25,855 - 恢复初始状态成功
2025-02-05 18:53:26,603 - 创建事务2连接成功
2025-02-05 18:53:26,604 - 执行事务2语句: BEGIN
2025-02-05 18:53:26,605 - 执行事务2语句: UPDATE table_0 SET col_0 = 21 WHERE (id = 13)
2025-02-05 18:53:26,606 - 执行事务2语句: SELECT col_0, col_2, col_922 FROM table_0 WHERE id BETWEEN 11 AND 12 FOR UPDATE
2025-02-05 18:53:26,608 - 执行事务2语句: COMMIT;
2025-02-05 18:53:26,614 - 执行事务2成功
2025-02-05 18:53:31,512 - 
2025-02-05 18:53:31,512 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_922 = 11.11, col_0 = 98, col_1 = 42, col_3 = 'IXshQ' WHERE id BETWEEN 5 AND 12", <Thread(Thread-29, started 11720)>, 1738752811.512897)}
2025-02-05 18:53:31,623 - stmt_idx: 2, status: success, result: None
2025-02-05 18:53:31,623 - 成功执行序列中事务1语句: UPDATE table_0 SET col_922 = 11.11, col_0 = 98, col_1 = 42, col_3 = 'IXshQ' WHERE id BETWEEN 5 AND 12
2025-02-05 18:53:31,623 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:53:31,623 - 
2025-02-05 18:53:31,730 - 
2025-02-05 18:53:31,731 - 执行前idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_0 = 21 WHERE (id = 13)', <Thread(Thread-30, started 4908)>, 1738752811.730127)}
2025-02-05 18:53:31,836 - stmt_idx: 3, status: success, result: None
2025-02-05 18:53:31,836 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 21 WHERE (id = 13)
2025-02-05 18:53:31,836 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:53:31,836 - 
2025-02-05 18:53:31,946 - 
2025-02-05 18:53:31,946 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)", <Thread(Thread-31, started 3160)>, 1738752811.9464545)}
2025-02-05 18:53:32,054 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)
2025-02-05 18:53:32,054 - 执行后idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)", <Thread(Thread-31, started 3160)>, 1738752811.9464545)}
2025-02-05 18:53:32,054 - 
2025-02-05 18:53:32,162 - 
2025-02-05 18:53:32,163 - 执行前idx: 6, pending_stmts: {4: (1, "UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)", <Thread(Thread-31, started 3160)>, 1738752811.9464545), 5: (2, 'SELECT col_0, col_2, col_922 FROM table_0 WHERE id BETWEEN 11 AND 12 FOR UPDATE', <Thread(Thread-32, started 38860)>, 1738752812.162621)}
2025-02-05 18:53:32,166 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_0, col_2, col_922 FROM table_0 WHERE id BETWEEN 11 AND 12 FOR UPDATE
2025-02-05 18:53:32,269 - stmt_idx: 4, status: success, result: None
2025-02-05 18:53:32,269 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)
2025-02-05 18:53:32,269 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)
2025-02-05 18:53:32,376 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:53:32,376 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT col_0, col_2, col_922 FROM table_0 WHERE id BETWEEN 11 AND 12 FOR UPDATE
2025-02-05 18:53:32,377 - 错误: dictionary changed size during iteration
2025-02-05 18:53:32,382 - 执行序列成功
2025-02-05 18:53:33,164 - is_atomic: True
2025-02-05 18:53:33,164 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:53:33,164 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_922 = 11.11, col_0 = 98, col_1 = 42, col_3 = 'IXshQ' WHERE id BETWEEN 5 AND 12"), (2, 'UPDATE table_0 SET col_0 = 21 WHERE (id = 13)'), (1, "UPDATE table_0 SET col_0 = 99, col_922 = 25.48, col_3 = 'LoYTd', col_1 = 57, col_2 = 'MDNVw' WHERE (col_3 = 'purnd') AND (col_1 = 19) AND (col_0 = 77)"), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 18:53:33,164 - snapshots: {'before': {'table_0': [(1, 1, 77, 'ebwqj', 'jfqgd', None), (2, 70, 13, 'vnyhf', 'eymoz', None), (3, 52, 56, 'beiyi', 'exdyh', None), (4, 11, 73, 'fcmko', 'zhnvn', None), (5, 68, 18, 'baeiz', 'aqigi', None), (6, 43, 11, 'oiwhr', 'nkfdc', None), (7, 71, 5, 'dbvcn', 'lalnk', None), (8, 14, 38, 'dzlua', 'blklj', None), (9, 32, 1, 'hnsln', 'uoddl', None), (10, 3, 1, 'eofgv', 'pbsnh', None), (11, 20, 25, 'nljmu', 'tmpnn', None), (12, 52, 9, 'jdopc', 'zlkkm', None), (13, 77, 19, 'egcos', 'purnd', None)]}, 'trx1': {'table_0': [(1, 1, 77, 'ebwqj', 'jfqgd', None), (2, 70, 13, 'vnyhf', 'eymoz', None), (3, 52, 56, 'beiyi', 'exdyh', None), (4, 11, 73, 'fcmko', 'zhnvn', None), (5, 98, 42, 'baeiz', 'IXshQ', 11.11), (6, 98, 42, 'oiwhr', 'IXshQ', 11.11), (7, 98, 42, 'dbvcn', 'IXshQ', 11.11), (8, 98, 42, 'dzlua', 'IXshQ', 11.11), (9, 98, 42, 'hnsln', 'IXshQ', 11.11), (10, 98, 42, 'eofgv', 'IXshQ', 11.11), (11, 98, 42, 'nljmu', 'IXshQ', 11.11), (12, 98, 42, 'jdopc', 'IXshQ', 11.11), (13, 99, 57, 'MDNVw', 'LoYTd', 25.48)]}, 'trx2': {'table_0': [(1, 1, 77, 'ebwqj', 'jfqgd', None), (2, 70, 13, 'vnyhf', 'eymoz', None), (3, 52, 56, 'beiyi', 'exdyh', None), (4, 11, 73, 'fcmko', 'zhnvn', None), (5, 68, 18, 'baeiz', 'aqigi', None), (6, 43, 11, 'oiwhr', 'nkfdc', None), (7, 71, 5, 'dbvcn', 'lalnk', None), (8, 14, 38, 'dzlua', 'blklj', None), (9, 32, 1, 'hnsln', 'uoddl', None), (10, 3, 1, 'eofgv', 'pbsnh', None), (11, 20, 25, 'nljmu', 'tmpnn', None), (12, 52, 9, 'jdopc', 'zlkkm', None), (13, 21, 19, 'egcos', 'purnd', None)]}, 'serial': {'table_0': [(1, 1, 77, 'ebwqj', 'jfqgd', None), (2, 70, 13, 'vnyhf', 'eymoz', None), (3, 52, 56, 'beiyi', 'exdyh', None), (4, 11, 73, 'fcmko', 'zhnvn', None), (5, 98, 42, 'baeiz', 'IXshQ', 11.11), (6, 98, 42, 'oiwhr', 'IXshQ', 11.11), (7, 98, 42, 'dbvcn', 'IXshQ', 11.11), (8, 98, 42, 'dzlua', 'IXshQ', 11.11), (9, 98, 42, 'hnsln', 'IXshQ', 11.11), (10, 98, 42, 'eofgv', 'IXshQ', 11.11), (11, 98, 42, 'nljmu', 'IXshQ', 11.11), (12, 98, 42, 'jdopc', 'IXshQ', 11.11), (13, 99, 57, 'MDNVw', 'LoYTd', 25.48)]}}
2025-02-05 18:53:33,164 - 
2025-02-05 18:53:33,178 - iter: 35
2025-02-05 18:53:34,695 - table table_0 has 8 rows
2025-02-05 18:53:34,695 - res_dict: {'trx1_lock_row_ids': [6, 7], 'trx2_lock_row_ids': [2, 3, 4, 5], 'intersection_row_ids': []}
2025-02-05 18:53:34,695 - lock_same_resource: False
2025-02-05 18:53:34,695 - 
2025-02-05 18:53:34,695 - non intersection phase1
2025-02-05 18:53:34,696 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:53:34,696 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:53:34,696 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:53:34,696 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:53:34,699 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:53:34,701 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:34,701 - params: {'table': 'table_0', 'set_expr': "col_1 = 'OtmpO', col_936 = 12.08, col_0 = 43, col_2 = 41.18", 'v2': '6', 'v1': '6'}
2025-02-05 18:53:34,704 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:53:34,705 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:34,706 - params: {'table': 'table_0', 'set_expr': "col_2 = 27.38, col_0 = 57, col_1 = 'SGnRw', col_936 = 74.49", 'v2': '7', 'v1': '7'}
2025-02-05 18:53:34,708 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=5
2025-02-05 18:53:34,709 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:34,709 - params: {'table': 'table_0', 'v2': '5', 'select_cols': '*', 'v1': '2'}
2025-02-05 18:53:34,710 - non intersection phase1 end
2025-02-05 18:53:34,710 - 
2025-02-05 18:53:34,710 - non intersection phase2
2025-02-05 18:53:34,713 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 18:53:34,714 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:34,714 - params: {'table': 'table_0', 'v2': '5', 'select_cols': 'col_0, col_2', 'v1': '4'}
2025-02-05 18:53:34,718 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:53:34,720 - needed_params: {'table', 'cond'}
2025-02-05 18:53:34,720 - params: {'table': 'table_0', 'cond': '(col_0 = 32) AND (col_936 IS NULL) AND (col_2 = 42.16)'}
2025-02-05 18:53:34,720 - non intersection phase2 end
2025-02-05 18:53:34,721 - 
2025-02-05 18:53:34,721 - 生成死锁事务序列成功如下
2025-02-05 18:53:34,721 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_1 = 'OtmpO', col_936 = 12.08, col_0 = 43, col_2 = 41.18 WHERE id BETWEEN 6 AND 6"), (1, "UPDATE table_0 SET col_2 = 27.38, col_0 = 57, col_1 = 'SGnRw', col_936 = 74.49 WHERE id BETWEEN 7 AND 7"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE'), (2, 'DELETE FROM table_0 WHERE (col_0 = 32) AND (col_936 IS NULL) AND (col_2 = 42.16)'), (1, 'SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:53:36,242 - 创建事务1连接成功
2025-02-05 18:53:36,243 - 执行事务1语句: BEGIN
2025-02-05 18:53:36,245 - 执行事务1语句: UPDATE table_0 SET col_1 = 'OtmpO', col_936 = 12.08, col_0 = 43, col_2 = 41.18 WHERE id BETWEEN 6 AND 6
2025-02-05 18:53:36,245 - 执行事务1语句: UPDATE table_0 SET col_2 = 27.38, col_0 = 57, col_1 = 'SGnRw', col_936 = 74.49 WHERE id BETWEEN 7 AND 7
2025-02-05 18:53:36,247 - 执行事务1语句: SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 18:53:36,249 - 执行事务1语句: COMMIT;
2025-02-05 18:53:36,253 - 执行事务1成功
2025-02-05 18:53:38,840 - 恢复初始状态成功
2025-02-05 18:53:39,612 - 创建事务2连接成功
2025-02-05 18:53:39,613 - 执行事务2语句: BEGIN
2025-02-05 18:53:39,615 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE
2025-02-05 18:53:39,615 - 执行事务2语句: DELETE FROM table_0 WHERE (col_0 = 32) AND (col_936 IS NULL) AND (col_2 = 42.16)
2025-02-05 18:53:39,617 - 执行事务2语句: COMMIT;
2025-02-05 18:53:39,622 - 执行事务2成功
2025-02-05 18:53:44,554 - 
2025-02-05 18:53:44,554 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_1 = 'OtmpO', col_936 = 12.08, col_0 = 43, col_2 = 41.18 WHERE id BETWEEN 6 AND 6", <Thread(Thread-33, started 34188)>, 1738752824.5542667)}
2025-02-05 18:53:44,656 - stmt_idx: 2, status: success, result: None
2025-02-05 18:53:44,656 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'OtmpO', col_936 = 12.08, col_0 = 43, col_2 = 41.18 WHERE id BETWEEN 6 AND 6
2025-02-05 18:53:44,656 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:53:44,656 - 
2025-02-05 18:53:44,763 - 
2025-02-05 18:53:44,764 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 27.38, col_0 = 57, col_1 = 'SGnRw', col_936 = 74.49 WHERE id BETWEEN 7 AND 7", <Thread(Thread-34, started 14740)>, 1738752824.7634716)}
2025-02-05 18:53:44,870 - stmt_idx: 3, status: success, result: None
2025-02-05 18:53:44,870 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 27.38, col_0 = 57, col_1 = 'SGnRw', col_936 = 74.49 WHERE id BETWEEN 7 AND 7
2025-02-05 18:53:44,870 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:53:44,870 - 
2025-02-05 18:53:44,980 - 
2025-02-05 18:53:44,981 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE', <Thread(Thread-35, started 20892)>, 1738752824.9808993)}
2025-02-05 18:53:45,087 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE
2025-02-05 18:53:45,088 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE', <Thread(Thread-35, started 20892)>, 1738752824.9808993)}
2025-02-05 18:53:45,088 - 
2025-02-05 18:53:45,194 - 
2025-02-05 18:53:45,194 - 执行前idx: 7, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE', <Thread(Thread-35, started 20892)>, 1738752824.9808993), 6: (1, 'SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-36, started 37420)>, 1738752825.1932197)}
2025-02-05 18:53:45,196 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE
2025-02-05 18:53:45,300 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:53:45,300 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE
2025-02-05 18:53:45,300 - 错误: dictionary changed size during iteration
2025-02-05 18:53:45,304 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-36, stopped 37420)>, 1738752825.1932197)}
2025-02-05 18:53:45,304 - 
2025-02-05 18:53:45,304 - 执行前idx: 9, pending_stmts: {6: (1, 'SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-36, stopped 37420)>, 1738752825.1932197)}
2025-02-05 18:53:45,408 - stmt_idx: 6, status: success, result: None
2025-02-05 18:53:45,408 - 成功执行序列中事务1语句: SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 18:53:45,408 - 执行后idx: 9, pending_stmts: {}
2025-02-05 18:53:45,408 - 
2025-02-05 18:53:45,516 - 执行序列成功
2025-02-05 18:53:46,296 - is_atomic: True
2025-02-05 18:53:46,296 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:53:46,296 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_1 = 'OtmpO', col_936 = 12.08, col_0 = 43, col_2 = 41.18 WHERE id BETWEEN 6 AND 6"), (1, "UPDATE table_0 SET col_2 = 27.38, col_0 = 57, col_1 = 'SGnRw', col_936 = 74.49 WHERE id BETWEEN 7 AND 7"), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE')]
2025-02-05 18:53:46,296 - snapshots: {'before': {'table_0': [(1, 53, 'suaod', 60.5, None), (2, 90, 'syvvn', 3.05, None), (3, 53, 'hprjh', 67.32, None), (4, 43, 'szobc', 57.21, None), (5, 69, 'ulvvd', 12.75, None), (6, 32, 'oqgcn', 42.16, None), (7, 3, 'qtjbm', 82.42, None), (8, 5, 'nvddb', 4.99, None)]}, 'trx1': {'table_0': [(1, 53, 'suaod', 60.5, None), (2, 90, 'syvvn', 3.05, None), (3, 53, 'hprjh', 67.32, None), (4, 43, 'szobc', 57.21, None), (5, 69, 'ulvvd', 12.75, None), (6, 43, 'OtmpO', 41.18, 12.08), (7, 57, 'SGnRw', 27.38, 74.49), (8, 5, 'nvddb', 4.99, None)]}, 'trx2': {'table_0': [(1, 53, 'suaod', 60.5, None), (2, 90, 'syvvn', 3.05, None), (3, 53, 'hprjh', 67.32, None), (4, 43, 'szobc', 57.21, None), (5, 69, 'ulvvd', 12.75, None), (7, 3, 'qtjbm', 82.42, None), (8, 5, 'nvddb', 4.99, None)]}, 'serial': {'table_0': [(1, 53, 'suaod', 60.5, None), (2, 90, 'syvvn', 3.05, None), (3, 53, 'hprjh', 67.32, None), (4, 43, 'szobc', 57.21, None), (5, 69, 'ulvvd', 12.75, None), (6, 43, 'OtmpO', 41.18, 12.08), (7, 57, 'SGnRw', 27.38, 74.49), (8, 5, 'nvddb', 4.99, None)]}}
2025-02-05 18:53:46,296 - 
2025-02-05 18:53:46,308 - iter: 36
2025-02-05 18:53:47,782 - table table_0 has 6 rows
2025-02-05 18:53:47,782 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6]
2025-02-05 18:53:47,782 - trx2_lock_row_ids: [6]
2025-02-05 18:53:47,782 - intersection_row_ids: [6]
2025-02-05 18:53:47,782 - trx1_exclusive_ids: [1, 2, 3, 4, 5]
2025-02-05 18:53:47,782 - trx2_exclusive_ids: []
2025-02-05 18:53:47,782 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6], 'trx2_lock_row_ids': [6], 'intersection_row_ids': [6]}
2025-02-05 18:53:47,782 - lock_same_resource: True
2025-02-05 18:53:47,782 - 
2025-02-05 18:53:47,782 - intersection phase1
2025-02-05 18:53:47,782 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:53:47,783 - 
2025-02-05 18:53:47,783 - Error in iteration 36: 'GAP'
2025-02-05 18:53:47,783 - 
2025-02-05 18:53:47,788 - iter: 37
2025-02-05 18:53:49,266 - table table_0 has 11 rows
2025-02-05 18:53:49,267 - res_dict: {'trx1_lock_row_ids': [11], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'intersection_row_ids': []}
2025-02-05 18:53:49,267 - lock_same_resource: False
2025-02-05 18:53:49,267 - 
2025-02-05 18:53:49,267 - non intersection phase1
2025-02-05 18:53:49,267 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:53:49,267 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:53:49,267 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:53:49,267 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:53:49,270 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:53:49,271 - needed_params: {'table', 'cond'}
2025-02-05 18:53:49,271 - params: {'table': 'table_0', 'cond': '(col_0 = 98)'}
2025-02-05 18:53:49,274 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=10
2025-02-05 18:53:49,276 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:49,276 - params: {'table': 'table_0', 'v2': '10', 'select_cols': 'id, col_0, col_1', 'v1': '1'}
2025-02-05 18:53:49,276 - non intersection phase1 end
2025-02-05 18:53:49,276 - 
2025-02-05 18:53:49,276 - non intersection phase2
2025-02-05 18:53:49,279 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=9, is_continuous=True, range_end_idx=10
2025-02-05 18:53:49,280 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:49,280 - params: {'table': 'table_0', 'v2': '10', 'select_cols': 'id', 'v1': '9'}
2025-02-05 18:53:49,280 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:53:49,280 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:53:49,280 - 
2025-02-05 18:53:49,280 - Error in iteration 37: 'NK'
2025-02-05 18:53:49,280 - 
2025-02-05 18:53:49,287 - iter: 38
2025-02-05 18:53:50,764 - table table_0 has 8 rows
2025-02-05 18:53:50,764 - res_dict: {'trx1_lock_row_ids': [7], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 18:53:50,764 - lock_same_resource: False
2025-02-05 18:53:50,764 - 
2025-02-05 18:53:50,765 - non intersection phase1
2025-02-05 18:53:50,765 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:53:50,765 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:53:50,765 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:53:50,765 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:53:50,768 - 生成锁SQL失败: 'NK'
2025-02-05 18:53:50,768 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:53:50,768 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:53:50,768 - 
2025-02-05 18:53:50,768 - Error in iteration 38: 'NK'
2025-02-05 18:53:50,768 - 
2025-02-05 18:53:50,773 - iter: 39
2025-02-05 18:53:52,267 - table table_0 has 13 rows
2025-02-05 18:53:52,268 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 7, 8, 9, 10, 12, 13], 'trx2_lock_row_ids': [11], 'intersection_row_ids': []}
2025-02-05 18:53:52,268 - lock_same_resource: False
2025-02-05 18:53:52,268 - 
2025-02-05 18:53:52,268 - non intersection phase1
2025-02-05 18:53:52,268 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:53:52,268 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:53:52,268 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:53:52,268 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 18:53:52,272 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,273 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:52,273 - params: {'table': 'table_0', 'v2': '3', 'select_cols': 'id, col_0, col_1', 'v1': '3'}
2025-02-05 18:53:52,276 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,277 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:53:52,277 - params: {'table': 'table_0', 'select_cols': 'id', 'cond': '(id = 4)'}
2025-02-05 18:53:52,281 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,283 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:53:52,283 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_1', 'cond': "(col_1 = 93.62) AND (col_0 = 'gcxjf')"}
2025-02-05 18:53:52,285 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,287 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:53:52,287 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 7) AND (col_1 = 95.85)'}
2025-02-05 18:53:52,290 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,291 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:52,291 - params: {'table': 'table_0', 'v2': '8', 'select_cols': 'id, col_0, col_1', 'v1': '8'}
2025-02-05 18:53:52,295 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,297 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:53:52,297 - params: {'table': 'table_0', 'select_cols': '*', 'cond': '(id = 9)'}
2025-02-05 18:53:52,300 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,301 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:53:52,302 - params: {'table': 'table_0', 'select_cols': '*', 'cond': "(col_0 = 'zfkpo') AND (col_1 = 89.61)"}
2025-02-05 18:53:52,305 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,306 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:52,307 - params: {'table': 'table_0', 'v2': '12', 'select_cols': '*', 'v1': '12'}
2025-02-05 18:53:52,309 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:53:52,311 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:53:52,311 - params: {'table': 'table_0', 'select_cols': 'id, col_0', 'cond': '(id = 13)'}
2025-02-05 18:53:52,314 - 生成锁SQL失败: 'NK'
2025-02-05 18:53:52,314 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:53:52,314 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:53:52,314 - 
2025-02-05 18:53:52,315 - Error in iteration 39: 'NK'
2025-02-05 18:53:52,315 - 
2025-02-05 18:53:52,321 - iter: 40
2025-02-05 18:53:53,812 - table table_0 has 12 rows
2025-02-05 18:53:53,812 - res_dict: {'trx1_lock_row_ids': [3, 11], 'trx2_lock_row_ids': [1, 5, 6, 9, 10], 'intersection_row_ids': []}
2025-02-05 18:53:53,813 - lock_same_resource: False
2025-02-05 18:53:53,813 - 
2025-02-05 18:53:53,813 - non intersection phase1
2025-02-05 18:53:53,813 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:53:53,813 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:53:53,813 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:53:53,813 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:53:53,817 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:53:53,818 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:53:53,818 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'cond': '(id = 3)'}
2025-02-05 18:53:53,820 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:53:53,822 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:53:53,822 - params: {'table': 'table_0', 'select_cols': 'id, col_1, col_2', 'cond': "(col_1 = 61.99) AND (col_0 = 15.47) AND (col_2 = 'bphnm')"}
2025-02-05 18:53:53,822 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:53:53,822 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:53:53,822 - 
2025-02-05 18:53:53,823 - Error in iteration 40: 'NK'
2025-02-05 18:53:53,823 - 
2025-02-05 18:53:53,828 - iter: 41
2025-02-05 18:53:55,327 - table table_0 has 13 rows
2025-02-05 18:53:55,327 - trx1_start_id: 5
2025-02-05 18:53:55,327 - trx1_end_id: 5
2025-02-05 18:53:55,327 - trx1_exclusive_start_id: 5
2025-02-05 18:53:55,327 - trx1_exclusive_end_id: 4
2025-02-05 18:53:55,327 - trx1_exclusive_ids: []
2025-02-05 18:53:55,327 - trx2_start_id: 5
2025-02-05 18:53:55,327 - trx2_end_id: 5
2025-02-05 18:53:55,327 - trx2_exclusive_start_id: 6
2025-02-05 18:53:55,327 - trx2_exclusive_end_id: 5
2025-02-05 18:53:55,327 - trx2_exclusive_ids: []
2025-02-05 18:53:55,327 - intersection_ids: [5]
2025-02-05 18:53:55,327 - res_dict: {'trx1_lock_row_ids': [5], 'trx2_lock_row_ids': [5], 'intersection_row_ids': [5]}
2025-02-05 18:53:55,327 - lock_same_resource: True
2025-02-05 18:53:55,327 - 
2025-02-05 18:53:55,327 - intersection phase1
2025-02-05 18:53:55,331 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 18:53:55,333 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:55,333 - params: {'table': 'table_0', 'set_expr': 'col_1 = 95', 'v2': '5', 'v1': '5'}
2025-02-05 18:53:55,336 - 生成锁SQL失败: 'GAP'
2025-02-05 18:53:55,336 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:53:55,336 - 
2025-02-05 18:53:55,336 - Error in iteration 41: 'GAP'
2025-02-05 18:53:55,336 - 
2025-02-05 18:53:55,343 - iter: 42
2025-02-05 18:53:56,844 - table table_0 has 7 rows
2025-02-05 18:53:56,844 - trx1_lock_row_ids: [2, 4, 6]
2025-02-05 18:53:56,844 - trx2_lock_row_ids: [2]
2025-02-05 18:53:56,844 - intersection_row_ids: [2]
2025-02-05 18:53:56,844 - trx1_exclusive_ids: [4, 6]
2025-02-05 18:53:56,844 - trx2_exclusive_ids: []
2025-02-05 18:53:56,844 - res_dict: {'trx1_lock_row_ids': [2, 4, 6], 'trx2_lock_row_ids': [2], 'intersection_row_ids': [2]}
2025-02-05 18:53:56,844 - lock_same_resource: True
2025-02-05 18:53:56,844 - 
2025-02-05 18:53:56,845 - intersection phase1
2025-02-05 18:53:56,848 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:53:56,849 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:53:56,849 - params: {'table': 'table_0', 'set_expr': 'col_2 = 76', 'v2': '2', 'v1': '2'}
2025-02-05 18:53:56,852 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:53:56,853 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:53:56,853 - params: {'table': 'table_0', 'vals': "NULL, 'VyhVh', 85.02, 98, 43.77, 17.56, 60", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4, col_204'}
2025-02-05 18:53:56,854 - intersection phase1 end
2025-02-05 18:53:56,854 - 
2025-02-05 18:53:56,854 - intersection phase2
2025-02-05 18:53:56,854 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:53:56,854 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:53:56,854 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:53:56,854 - 事务2在第三阶段请求对方资源的锁: NK
2025-02-05 18:53:56,858 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:53:56,859 - needed_params: {'table', 'cond'}
2025-02-05 18:53:56,859 - params: {'table': 'table_0', 'cond': '(id = 4)'}
2025-02-05 18:53:56,863 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:53:56,864 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:53:56,865 - params: {'table': 'table_0', 'set_expr': "col_1 = 62.43, col_4 = 25.32, col_204 = 17, col_2 = 99, col_0 = 'ZRVLl'", 'cond': '(id = 6)'}
2025-02-05 18:53:56,865 - intersection phase2 end
2025-02-05 18:53:56,865 - 
2025-02-05 18:53:56,865 - intersection phase3
2025-02-05 18:53:56,867 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:53:56,869 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:53:56,869 - params: {'table': 'table_0', 'v2': '2', 'select_cols': '*', 'v1': '2'}
2025-02-05 18:53:56,870 - intersection phase3 end
2025-02-05 18:53:56,870 - 
2025-02-05 18:53:56,870 - 生成死锁事务序列成功如下
2025-02-05 18:53:56,870 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_204) VALUES (NULL, 'VyhVh', 85.02, 98, 43.77, 17.56, 60)"), (2, 'UPDATE table_0 SET col_2 = 76 WHERE id BETWEEN 2 AND 2'), (1, 'DELETE FROM table_0 WHERE (id = 4)'), (1, "UPDATE table_0 SET col_1 = 62.43, col_4 = 25.32, col_204 = 17, col_2 = 99, col_0 = 'ZRVLl' WHERE (id = 6)"), (2, None), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:53:58,427 - 创建事务1连接成功
2025-02-05 18:53:58,428 - 执行事务1语句: BEGIN
2025-02-05 18:53:58,429 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_204) VALUES (NULL, 'VyhVh', 85.02, 98, 43.77, 17.56, 60)
2025-02-05 18:53:58,430 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 4)
2025-02-05 18:53:58,430 - 执行事务1语句: UPDATE table_0 SET col_1 = 62.43, col_4 = 25.32, col_204 = 17, col_2 = 99, col_0 = 'ZRVLl' WHERE (id = 6)
2025-02-05 18:53:58,431 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:53:58,434 - 执行事务1语句: COMMIT;
2025-02-05 18:53:58,439 - 执行事务1成功
2025-02-05 18:54:01,036 - 恢复初始状态成功
2025-02-05 18:54:01,797 - 创建事务2连接成功
2025-02-05 18:54:01,799 - 执行事务2语句: BEGIN
2025-02-05 18:54:01,799 - 执行事务2语句: UPDATE table_0 SET col_2 = 76 WHERE id BETWEEN 2 AND 2
2025-02-05 18:54:01,802 - 执行事务2语句: COMMIT;
2025-02-05 18:54:01,806 - 执行事务2成功
2025-02-05 18:54:06,699 - 
2025-02-05 18:54:06,699 - 执行前idx: 3, pending_stmts: {2: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_204) VALUES (NULL, 'VyhVh', 85.02, 98, 43.77, 17.56, 60)", <Thread(Thread-37, started 7420)>, 1738752846.69904)}
2025-02-05 18:54:06,806 - stmt_idx: 2, status: success, result: None
2025-02-05 18:54:06,806 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_204) VALUES (NULL, 'VyhVh', 85.02, 98, 43.77, 17.56, 60)
2025-02-05 18:54:06,806 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:54:06,806 - 
2025-02-05 18:54:06,918 - 
2025-02-05 18:54:06,919 - 执行前idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_2 = 76 WHERE id BETWEEN 2 AND 2', <Thread(Thread-38, started 34992)>, 1738752846.918282)}
2025-02-05 18:54:07,024 - stmt_idx: 3, status: success, result: None
2025-02-05 18:54:07,024 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 76 WHERE id BETWEEN 2 AND 2
2025-02-05 18:54:07,024 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:54:07,024 - 
2025-02-05 18:54:07,132 - 
2025-02-05 18:54:07,133 - 执行前idx: 5, pending_stmts: {4: (1, 'DELETE FROM table_0 WHERE (id = 4)', <Thread(Thread-39, started 5580)>, 1738752847.1328964)}
2025-02-05 18:54:07,242 - stmt_idx: 4, status: success, result: None
2025-02-05 18:54:07,242 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 4)
2025-02-05 18:54:07,243 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:54:07,243 - 
2025-02-05 18:54:07,350 - 
2025-02-05 18:54:07,351 - 执行前idx: 6, pending_stmts: {5: (1, "UPDATE table_0 SET col_1 = 62.43, col_4 = 25.32, col_204 = 17, col_2 = 99, col_0 = 'ZRVLl' WHERE (id = 6)", <Thread(Thread-40, started 43436)>, 1738752847.3501077)}
2025-02-05 18:54:07,457 - stmt_idx: 5, status: success, result: None
2025-02-05 18:54:07,457 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 62.43, col_4 = 25.32, col_204 = 17, col_2 = 99, col_0 = 'ZRVLl' WHERE (id = 6)
2025-02-05 18:54:07,457 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:54:07,457 - 
2025-02-05 18:54:07,564 - stmt为None, trx_id: 2, stmt: None
2025-02-05 18:54:07,565 - 
2025-02-05 18:54:07,565 - 执行前idx: 8, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-41, started 42836)>, 1738752847.5659087)}
2025-02-05 18:54:07,672 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:54:07,672 - 执行后idx: 8, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-41, started 42836)>, 1738752847.5659087)}
2025-02-05 18:54:07,673 - 
2025-02-05 18:54:07,786 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-41, started 42836)>, 1738752847.5659087)}
2025-02-05 18:54:07,786 - 
2025-02-05 18:54:07,786 - 执行前idx: 10, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-41, started 42836)>, 1738752847.5659087)}
2025-02-05 18:54:07,892 - stmt_idx: 7, status: success, result: None
2025-02-05 18:54:07,892 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:54:07,892 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:54:07,893 - 执行后idx: 10, pending_stmts: {9: (1, 'COMMIT', <Thread(Thread-42, started 36804)>, 1738752847.8934164)}
2025-02-05 18:54:07,893 - 
2025-02-05 18:54:08,000 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (1, 'COMMIT', <Thread(Thread-42, stopped 36804)>, 1738752847.8934164)}
2025-02-05 18:54:08,000 - 
2025-02-05 18:54:08,000 - 执行前idx: 10, pending_stmts: {9: (1, 'COMMIT', <Thread(Thread-42, stopped 36804)>, 1738752847.8934164)}
2025-02-05 18:54:08,108 - stmt_idx: 9, status: success, result: None
2025-02-05 18:54:08,108 - 成功执行序列中事务1语句: COMMIT
2025-02-05 18:54:08,108 - 执行后idx: 10, pending_stmts: {}
2025-02-05 18:54:08,108 - 
2025-02-05 18:54:08,219 - 执行序列成功
2025-02-05 18:54:08,989 - is_atomic: True
2025-02-05 18:54:08,989 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:54:08,989 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4, col_204) VALUES (NULL, 'VyhVh', 85.02, 98, 43.77, 17.56, 60)"), (2, 'UPDATE table_0 SET col_2 = 76 WHERE id BETWEEN 2 AND 2'), (1, 'DELETE FROM table_0 WHERE (id = 4)'), (1, "UPDATE table_0 SET col_1 = 62.43, col_4 = 25.32, col_204 = 17, col_2 = 99, col_0 = 'ZRVLl' WHERE (id = 6)"), (2, 'COMMIT'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 18:54:08,989 - snapshots: {'before': {'table_0': [(1, 'ejpnf', 10.56, 41, 52.64, 63.96, None), (2, 'klzdy', 95.47, 28, 82.63, 46.31, None), (3, 'yhrtz', 76.72, 22, 65.85, 46.99, None), (4, 'bxqvi', 36.12, 29, 30.07, 9.87, None), (5, 'fnhmy', 16.94, 5, 69.12, 95.06, None), (6, 'uljpf', 59.52, 79, 76.07, 54.87, None), (7, 'krntm', 72.29, 99, 34.35, 67.58, None)]}, 'trx1': {'table_0': [(1, 'ejpnf', 10.56, 41, 52.64, 63.96, None), (2, 'klzdy', 95.47, 28, 82.63, 46.31, None), (3, 'yhrtz', 76.72, 22, 65.85, 46.99, None), (5, 'fnhmy', 16.94, 5, 69.12, 95.06, None), (6, 'ZRVLl', 62.43, 99, 76.07, 25.32, 17), (7, 'krntm', 72.29, 99, 34.35, 67.58, None), (8, 'VyhVh', 85.02, 98, 43.77, 17.56, 60)]}, 'trx2': {'table_0': [(1, 'ejpnf', 10.56, 41, 52.64, 63.96, None), (2, 'klzdy', 95.47, 76, 82.63, 46.31, None), (3, 'yhrtz', 76.72, 22, 65.85, 46.99, None), (4, 'bxqvi', 36.12, 29, 30.07, 9.87, None), (5, 'fnhmy', 16.94, 5, 69.12, 95.06, None), (6, 'uljpf', 59.52, 79, 76.07, 54.87, None), (7, 'krntm', 72.29, 99, 34.35, 67.58, None)]}, 'serial': {'table_0': [(1, 'ejpnf', 10.56, 41, 52.64, 63.96, None), (2, 'klzdy', 95.47, 76, 82.63, 46.31, None), (3, 'yhrtz', 76.72, 22, 65.85, 46.99, None), (5, 'fnhmy', 16.94, 5, 69.12, 95.06, None), (6, 'ZRVLl', 62.43, 99, 76.07, 25.32, 17), (7, 'krntm', 72.29, 99, 34.35, 67.58, None), (9, 'VyhVh', 85.02, 98, 43.77, 17.56, 60)]}}
2025-02-05 18:54:08,989 - 
2025-02-05 18:54:09,000 - iter: 43
2025-02-05 18:54:10,470 - table table_0 has 7 rows
2025-02-05 18:54:10,470 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7]
2025-02-05 18:54:10,470 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7]
2025-02-05 18:54:10,470 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7]
2025-02-05 18:54:10,470 - trx1_exclusive_ids: []
2025-02-05 18:54:10,471 - trx2_exclusive_ids: []
2025-02-05 18:54:10,471 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7]}
2025-02-05 18:54:10,471 - lock_same_resource: True
2025-02-05 18:54:10,471 - 
2025-02-05 18:54:10,471 - intersection phase1
2025-02-05 18:54:10,473 - 生成锁SQL失败: 'GAP'
2025-02-05 18:54:10,473 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:54:10,473 - 
2025-02-05 18:54:10,474 - Error in iteration 43: 'GAP'
2025-02-05 18:54:10,474 - 
2025-02-05 18:54:10,479 - iter: 44
2025-02-05 18:54:12,004 - table table_0 has 14 rows
2025-02-05 18:54:12,004 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7], 'trx2_lock_row_ids': [14], 'intersection_row_ids': []}
2025-02-05 18:54:12,004 - lock_same_resource: False
2025-02-05 18:54:12,005 - 
2025-02-05 18:54:12,005 - non intersection phase1
2025-02-05 18:54:12,005 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:54:12,005 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:54:12,005 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 18:54:12,005 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:54:12,008 - 生成锁SQL失败: 'NK'
2025-02-05 18:54:12,008 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:54:12,008 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:12,008 - 
2025-02-05 18:54:12,009 - Error in iteration 44: 'NK'
2025-02-05 18:54:12,009 - 
2025-02-05 18:54:12,015 - iter: 45
2025-02-05 18:54:13,531 - table table_0 has 15 rows
2025-02-05 18:54:13,531 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
2025-02-05 18:54:13,531 - trx2_lock_row_ids: [1, 3, 4, 5, 9, 11, 14]
2025-02-05 18:54:13,531 - intersection_row_ids: [1, 3, 4, 5, 9, 11, 14]
2025-02-05 18:54:13,531 - trx1_exclusive_ids: [2, 6, 7, 8, 10, 12, 13, 15]
2025-02-05 18:54:13,531 - trx2_exclusive_ids: []
2025-02-05 18:54:13,531 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'trx2_lock_row_ids': [1, 3, 4, 5, 9, 11, 14], 'intersection_row_ids': [1, 3, 4, 5, 9, 11, 14]}
2025-02-05 18:54:13,531 - lock_same_resource: True
2025-02-05 18:54:13,531 - 
2025-02-05 18:54:13,532 - intersection phase1
2025-02-05 18:54:13,534 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=15
2025-02-05 18:54:13,536 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:54:13,536 - params: {'table': 'table_0', 'set_expr': 'col_4 = 36.54, col_2 = 12', 'v2': '15', 'v1': '1'}
2025-02-05 18:54:13,536 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:54:13,536 - 
2025-02-05 18:54:13,536 - Error in iteration 45: 'GAP'
2025-02-05 18:54:13,536 - 
2025-02-05 18:54:13,542 - iter: 46
2025-02-05 18:54:15,029 - table table_0 has 13 rows
2025-02-05 18:54:15,029 - res_dict: {'trx1_lock_row_ids': [5, 6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [2, 3, 4, 13], 'intersection_row_ids': []}
2025-02-05 18:54:15,030 - lock_same_resource: False
2025-02-05 18:54:15,030 - 
2025-02-05 18:54:15,030 - non intersection phase1
2025-02-05 18:54:15,030 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:54:15,030 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:54:15,030 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:54:15,030 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:54:15,033 - 生成锁SQL失败: 'NK'
2025-02-05 18:54:15,033 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:54:15,033 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:15,033 - 
2025-02-05 18:54:15,034 - Error in iteration 46: 'NK'
2025-02-05 18:54:15,034 - 
2025-02-05 18:54:15,038 - iter: 47
2025-02-05 18:54:16,595 - table table_0 has 14 rows
2025-02-05 18:54:16,595 - res_dict: {'trx1_lock_row_ids': [2, 3, 4], 'trx2_lock_row_ids': [5, 6, 7, 11, 12, 14], 'intersection_row_ids': []}
2025-02-05 18:54:16,595 - lock_same_resource: False
2025-02-05 18:54:16,595 - 
2025-02-05 18:54:16,595 - non intersection phase1
2025-02-05 18:54:16,596 - 事务1在第一阶段自己加的锁: S
2025-02-05 18:54:16,596 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:54:16,596 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:54:16,596 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:54:16,599 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=4
2025-02-05 18:54:16,600 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:54:16,600 - params: {'table': 'table_0', 'v2': '5', 'select_cols': '*', 'v1': '3'}
2025-02-05 18:54:16,602 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:54:16,604 - needed_params: {'table', 'cond'}
2025-02-05 18:54:16,604 - params: {'table': 'table_0', 'cond': '(id = 6)'}
2025-02-05 18:54:16,609 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:54:16,610 - needed_params: {'table', 'cond'}
2025-02-05 18:54:16,610 - params: {'table': 'table_0', 'cond': '(col_1 = 100) AND (col_2 = 27.01)'}
2025-02-05 18:54:16,613 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:54:16,614 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:54:16,614 - params: {'table': 'table_0', 'v2': '8', 'select_cols': '*', 'v1': '8'}
2025-02-05 18:54:16,617 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:54:16,618 - needed_params: {'table', 'select_cols', 'cond'}
2025-02-05 18:54:16,618 - params: {'table': 'table_0', 'select_cols': 'id, col_0, col_1, col_2', 'cond': '(id = 12) AND (col_1 = 95) AND (col_2 = 60.56) AND (col_0 = 37)'}
2025-02-05 18:54:16,623 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:54:16,625 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:54:16,625 - params: {'table': 'table_0', 'set_expr': 'col_2 = 26.77', 'cond': '(col_1 = 34) AND (col_2 = 15.14) AND (col_0 = 46)'}
2025-02-05 18:54:16,628 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 18:54:16,630 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:54:16,630 - params: {'table': 'table_0', 'set_expr': 'col_0 = 94, col_2 = 91.72, col_1 = 55', 'cond': '(id = 15)'}
2025-02-05 18:54:16,631 - non intersection phase1 end
2025-02-05 18:54:16,631 - 
2025-02-05 18:54:16,631 - non intersection phase2
2025-02-05 18:54:16,634 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:54:16,636 - needed_params: {'table', 'cond'}
2025-02-05 18:54:16,636 - params: {'table': 'table_0', 'cond': '(id = 12)'}
2025-02-05 18:54:16,639 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=3
2025-02-05 18:54:16,640 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:54:16,640 - params: {'table': 'table_0', 'v2': '4', 'select_cols': '*', 'v1': '4'}
2025-02-05 18:54:16,640 - non intersection phase2 end
2025-02-05 18:54:16,640 - 
2025-02-05 18:54:16,640 - 生成死锁事务序列成功如下
2025-02-05 18:54:16,640 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'DELETE FROM table_0 WHERE (id = 6)'), (2, 'DELETE FROM table_0 WHERE (col_1 = 100) AND (col_2 = 27.01)'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 12) AND (col_1 = 95) AND (col_2 = 60.56) AND (col_0 = 37) FOR UPDATE'), (2, 'UPDATE table_0 SET col_2 = 26.77 WHERE (col_1 = 34) AND (col_2 = 15.14) AND (col_0 = 46)'), (2, 'UPDATE table_0 SET col_0 = 94, col_2 = 91.72, col_1 = 55 WHERE (id = 15)'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 12)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:54:18,181 - 创建事务1连接成功
2025-02-05 18:54:18,182 - 执行事务1语句: BEGIN
2025-02-05 18:54:18,183 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE
2025-02-05 18:54:18,184 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 12)
2025-02-05 18:54:18,187 - 执行事务1语句: COMMIT;
2025-02-05 18:54:18,191 - 执行事务1成功
2025-02-05 18:54:20,801 - 恢复初始状态成功
2025-02-05 18:54:21,572 - 创建事务2连接成功
2025-02-05 18:54:21,574 - 执行事务2语句: BEGIN
2025-02-05 18:54:21,575 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 6)
2025-02-05 18:54:21,576 - 执行事务2语句: DELETE FROM table_0 WHERE (col_1 = 100) AND (col_2 = 27.01)
2025-02-05 18:54:21,576 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 18:54:21,577 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 12) AND (col_1 = 95) AND (col_2 = 60.56) AND (col_0 = 37) FOR UPDATE
2025-02-05 18:54:21,578 - 执行事务2语句: UPDATE table_0 SET col_2 = 26.77 WHERE (col_1 = 34) AND (col_2 = 15.14) AND (col_0 = 46)
2025-02-05 18:54:21,578 - 执行事务2语句: UPDATE table_0 SET col_0 = 94, col_2 = 91.72, col_1 = 55 WHERE (id = 15)
2025-02-05 18:54:21,579 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 18:54:21,582 - 执行事务2语句: COMMIT;
2025-02-05 18:54:21,585 - 执行事务2成功
2025-02-05 18:54:26,437 - 
2025-02-05 18:54:26,437 - 执行前idx: 3, pending_stmts: {2: (2, 'DELETE FROM table_0 WHERE (id = 6)', <Thread(Thread-43, started 33940)>, 1738752866.437763)}
2025-02-05 18:54:26,543 - stmt_idx: 2, status: success, result: None
2025-02-05 18:54:26,543 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 6)
2025-02-05 18:54:26,543 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:54:26,543 - 
2025-02-05 18:54:26,649 - 
2025-02-05 18:54:26,649 - 执行前idx: 4, pending_stmts: {3: (2, 'DELETE FROM table_0 WHERE (col_1 = 100) AND (col_2 = 27.01)', <Thread(Thread-44, started 43768)>, 1738752866.6497161)}
2025-02-05 18:54:26,757 - stmt_idx: 3, status: success, result: None
2025-02-05 18:54:26,757 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_1 = 100) AND (col_2 = 27.01)
2025-02-05 18:54:26,757 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:54:26,757 - 
2025-02-05 18:54:26,869 - 
2025-02-05 18:54:26,869 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE', <Thread(Thread-45, started 34324)>, 1738752866.8693128)}
2025-02-05 18:54:26,978 - stmt_idx: 4, status: success, result: None
2025-02-05 18:54:26,978 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE
2025-02-05 18:54:26,978 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:54:26,979 - 
2025-02-05 18:54:27,085 - 
2025-02-05 18:54:27,086 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-46, started 44020)>, 1738752867.0856016)}
2025-02-05 18:54:27,192 - stmt_idx: 5, status: success, result: None
2025-02-05 18:54:27,192 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 18:54:27,192 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:54:27,192 - 
2025-02-05 18:54:27,300 - 
2025-02-05 18:54:27,301 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 12) AND (col_1 = 95) AND (col_2 = 60.56) AND (col_0 = 37) FOR UPDATE', <Thread(Thread-47, started 22084)>, 1738752867.300761)}
2025-02-05 18:54:27,405 - stmt_idx: 6, status: success, result: None
2025-02-05 18:54:27,405 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 12) AND (col_1 = 95) AND (col_2 = 60.56) AND (col_0 = 37) FOR UPDATE
2025-02-05 18:54:27,405 - 执行后idx: 7, pending_stmts: {}
2025-02-05 18:54:27,405 - 
2025-02-05 18:54:27,514 - 
2025-02-05 18:54:27,515 - 执行前idx: 8, pending_stmts: {7: (2, 'UPDATE table_0 SET col_2 = 26.77 WHERE (col_1 = 34) AND (col_2 = 15.14) AND (col_0 = 46)', <Thread(Thread-48, started 36456)>, 1738752867.5143893)}
2025-02-05 18:54:27,622 - stmt_idx: 7, status: success, result: None
2025-02-05 18:54:27,622 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 26.77 WHERE (col_1 = 34) AND (col_2 = 15.14) AND (col_0 = 46)
2025-02-05 18:54:27,623 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:54:27,623 - 
2025-02-05 18:54:27,730 - 
2025-02-05 18:54:27,730 - 执行前idx: 9, pending_stmts: {8: (2, 'UPDATE table_0 SET col_0 = 94, col_2 = 91.72, col_1 = 55 WHERE (id = 15)', <Thread(Thread-49, started 8816)>, 1738752867.730422)}
2025-02-05 18:54:27,838 - stmt_idx: 8, status: success, result: None
2025-02-05 18:54:27,838 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 94, col_2 = 91.72, col_1 = 55 WHERE (id = 15)
2025-02-05 18:54:27,838 - 执行后idx: 9, pending_stmts: {}
2025-02-05 18:54:27,838 - 
2025-02-05 18:54:27,945 - 
2025-02-05 18:54:27,946 - 执行前idx: 10, pending_stmts: {9: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-50, started 33564)>, 1738752867.9456663)}
2025-02-05 18:54:28,054 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 18:54:28,054 - 执行后idx: 10, pending_stmts: {9: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-50, started 33564)>, 1738752867.9456663)}
2025-02-05 18:54:28,054 - 
2025-02-05 18:54:28,165 - 
2025-02-05 18:54:28,165 - 执行前idx: 11, pending_stmts: {9: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-50, started 33564)>, 1738752867.9456663), 10: (1, 'DELETE FROM table_0 WHERE (id = 12)', <Thread(Thread-51, started 29940)>, 1738752868.1651073)}
2025-02-05 18:54:28,167 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (id = 12)
2025-02-05 18:54:28,272 - stmt_idx: 9, status: success, result: None
2025-02-05 18:54:28,272 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 18:54:28,272 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 18:54:28,378 - stmt_idx: 10, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:54:28,378 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: DELETE FROM table_0 WHERE (id = 12)
2025-02-05 18:54:28,378 - 错误: dictionary changed size during iteration
2025-02-05 18:54:28,384 - 执行序列成功
2025-02-05 18:54:29,147 - is_atomic: True
2025-02-05 18:54:29,147 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 18:54:29,147 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'DELETE FROM table_0 WHERE (id = 6)'), (2, 'DELETE FROM table_0 WHERE (col_1 = 100) AND (col_2 = 27.01)'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 12) AND (col_1 = 95) AND (col_2 = 60.56) AND (col_0 = 37) FOR UPDATE'), (2, 'UPDATE table_0 SET col_2 = 26.77 WHERE (col_1 = 34) AND (col_2 = 15.14) AND (col_0 = 46)'), (2, 'UPDATE table_0 SET col_0 = 94, col_2 = 91.72, col_1 = 55 WHERE (id = 15)'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 18:54:29,147 - snapshots: {'before': {'table_0': [(1, 90, 2, 12.49), (3, 56, 97, 33.76), (4, 68, 73, 18.25), (5, 28, 28, 51.59), (6, 98, 66, 21.42), (7, 83, 100, 27.01), (8, 88, 30, 55.96), (9, 79, 48, 37.25), (10, 65, 75, 39.35), (11, 79, 50, 7.01), (12, 37, 95, 60.56), (13, 46, 34, 15.14), (14, 13, 24, 21.58), (15, 50, 26, 97.37)]}, 'trx1': {'table_0': [(1, 90, 2, 12.49), (3, 56, 97, 33.76), (4, 68, 73, 18.25), (5, 28, 28, 51.59), (6, 98, 66, 21.42), (7, 83, 100, 27.01), (8, 88, 30, 55.96), (9, 79, 48, 37.25), (10, 65, 75, 39.35), (11, 79, 50, 7.01), (13, 46, 34, 15.14), (14, 13, 24, 21.58), (15, 50, 26, 97.37)]}, 'trx2': {'table_0': [(1, 90, 2, 12.49), (3, 56, 97, 33.76), (4, 68, 73, 18.25), (5, 28, 28, 51.59), (7, 83, 100, 27.01), (8, 88, 30, 55.96), (9, 79, 48, 37.25), (10, 65, 75, 39.35), (11, 79, 50, 7.01), (12, 37, 95, 60.56), (13, 46, 34, 15.14), (14, 13, 24, 21.58), (15, 94, 55, 91.72)]}, 'serial': {'table_0': [(1, 90, 2, 12.49), (3, 56, 97, 33.76), (4, 68, 73, 18.25), (5, 28, 28, 51.59), (7, 83, 100, 27.01), (8, 88, 30, 55.96), (9, 79, 48, 37.25), (10, 65, 75, 39.35), (11, 79, 50, 7.01), (12, 37, 95, 60.56), (13, 46, 34, 15.14), (14, 13, 24, 21.58), (15, 94, 55, 91.72)]}}
2025-02-05 18:54:29,147 - 
2025-02-05 18:54:29,161 - iter: 48
2025-02-05 18:54:30,688 - table table_0 has 14 rows
2025-02-05 18:54:30,688 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [11, 13], 'intersection_row_ids': []}
2025-02-05 18:54:30,688 - lock_same_resource: False
2025-02-05 18:54:30,688 - 
2025-02-05 18:54:30,689 - non intersection phase1
2025-02-05 18:54:30,689 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:54:30,689 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:54:30,689 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 18:54:30,689 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:54:30,692 - 生成锁SQL失败: 'NK'
2025-02-05 18:54:30,692 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:54:30,692 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:30,692 - 
2025-02-05 18:54:30,693 - Error in iteration 48: 'NK'
2025-02-05 18:54:30,693 - 
2025-02-05 18:54:30,699 - iter: 49
2025-02-05 18:54:32,229 - table table_0 has 15 rows
2025-02-05 18:54:32,229 - trx1_lock_row_ids: [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15]
2025-02-05 18:54:32,229 - trx2_lock_row_ids: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 18:54:32,229 - intersection_row_ids: [4, 5, 6, 8, 9, 10, 11, 12]
2025-02-05 18:54:32,229 - trx1_exclusive_ids: [1, 2, 14, 15]
2025-02-05 18:54:32,229 - trx2_exclusive_ids: [3, 7, 13]
2025-02-05 18:54:32,229 - res_dict: {'trx1_lock_row_ids': [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'intersection_row_ids': [4, 5, 6, 8, 9, 10, 11, 12]}
2025-02-05 18:54:32,229 - lock_same_resource: True
2025-02-05 18:54:32,229 - 
2025-02-05 18:54:32,230 - intersection phase1
2025-02-05 18:54:32,233 - 生成锁SQL失败: 'NK'
2025-02-05 18:54:32,233 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:32,233 - 
2025-02-05 18:54:32,233 - Error in iteration 49: 'NK'
2025-02-05 18:54:32,234 - 
2025-02-05 18:54:32,240 - iter: 50
2025-02-05 18:54:33,746 - table table_0 has 9 rows
2025-02-05 18:54:33,746 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9]
2025-02-05 18:54:33,747 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9]
2025-02-05 18:54:33,747 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9]
2025-02-05 18:54:33,747 - trx1_exclusive_ids: []
2025-02-05 18:54:33,747 - trx2_exclusive_ids: []
2025-02-05 18:54:33,747 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9]}
2025-02-05 18:54:33,747 - lock_same_resource: True
2025-02-05 18:54:33,747 - 
2025-02-05 18:54:33,747 - intersection phase1
2025-02-05 18:54:33,747 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:54:33,747 - 
2025-02-05 18:54:33,747 - Error in iteration 50: 'GAP'
2025-02-05 18:54:33,747 - 
2025-02-05 18:54:33,753 - iter: 51
2025-02-05 18:54:35,248 - table table_0 has 13 rows
2025-02-05 18:54:35,248 - trx1_lock_row_ids: [4, 5, 6, 9, 12, 13]
2025-02-05 18:54:35,248 - trx2_lock_row_ids: [3, 4, 5]
2025-02-05 18:54:35,248 - intersection_row_ids: [4, 5]
2025-02-05 18:54:35,248 - trx1_exclusive_ids: [6, 9, 12, 13]
2025-02-05 18:54:35,248 - trx2_exclusive_ids: [3]
2025-02-05 18:54:35,248 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 9, 12, 13], 'trx2_lock_row_ids': [3, 4, 5], 'intersection_row_ids': [4, 5]}
2025-02-05 18:54:35,248 - lock_same_resource: True
2025-02-05 18:54:35,248 - 
2025-02-05 18:54:35,248 - intersection phase1
2025-02-05 18:54:35,251 - 生成锁SQL失败: 'NK'
2025-02-05 18:54:35,251 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:35,251 - 
2025-02-05 18:54:35,251 - Error in iteration 51: 'NK'
2025-02-05 18:54:35,251 - 
2025-02-05 18:54:35,257 - iter: 52
2025-02-05 18:54:36,750 - table table_0 has 14 rows
2025-02-05 18:54:36,750 - trx1_start_id: 2
2025-02-05 18:54:36,750 - trx1_end_id: 3
2025-02-05 18:54:36,750 - trx1_exclusive_start_id: 2
2025-02-05 18:54:36,750 - trx1_exclusive_end_id: 1
2025-02-05 18:54:36,750 - trx1_exclusive_ids: []
2025-02-05 18:54:36,750 - trx2_start_id: 2
2025-02-05 18:54:36,750 - trx2_end_id: 7
2025-02-05 18:54:36,750 - trx2_exclusive_start_id: 4
2025-02-05 18:54:36,750 - trx2_exclusive_end_id: 7
2025-02-05 18:54:36,750 - trx2_exclusive_ids: [4, 5, 6, 7]
2025-02-05 18:54:36,750 - intersection_ids: [2, 3]
2025-02-05 18:54:36,750 - res_dict: {'trx1_lock_row_ids': [2, 3], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7], 'intersection_row_ids': [2, 3]}
2025-02-05 18:54:36,750 - lock_same_resource: True
2025-02-05 18:54:36,750 - 
2025-02-05 18:54:36,750 - intersection phase1
2025-02-05 18:54:36,753 - 生成锁SQL失败: 'GAP'
2025-02-05 18:54:36,753 - 生成死锁事务序列失败: 'GAP'
2025-02-05 18:54:36,753 - 
2025-02-05 18:54:36,754 - Error in iteration 52: 'GAP'
2025-02-05 18:54:36,754 - 
2025-02-05 18:54:36,759 - iter: 53
2025-02-05 18:54:38,274 - table table_0 has 7 rows
2025-02-05 18:54:38,274 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [4], 'intersection_row_ids': []}
2025-02-05 18:54:38,274 - lock_same_resource: False
2025-02-05 18:54:38,274 - 
2025-02-05 18:54:38,274 - non intersection phase1
2025-02-05 18:54:38,275 - 事务1在第一阶段自己加的锁: NK
2025-02-05 18:54:38,275 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:54:38,275 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 18:54:38,275 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:54:38,278 - 生成锁SQL失败: 'NK'
2025-02-05 18:54:38,278 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:54:38,278 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:38,278 - 
2025-02-05 18:54:38,278 - Error in iteration 53: 'NK'
2025-02-05 18:54:38,278 - 
2025-02-05 18:54:38,284 - iter: 54
2025-02-05 18:54:39,796 - table table_0 has 12 rows
2025-02-05 18:54:39,796 - trx1_lock_row_ids: [6, 7, 10, 11]
2025-02-05 18:54:39,796 - trx2_lock_row_ids: [2, 5, 6, 7, 10]
2025-02-05 18:54:39,796 - intersection_row_ids: [6, 7, 10]
2025-02-05 18:54:39,796 - trx1_exclusive_ids: [11]
2025-02-05 18:54:39,796 - trx2_exclusive_ids: [2, 5]
2025-02-05 18:54:39,796 - res_dict: {'trx1_lock_row_ids': [6, 7, 10, 11], 'trx2_lock_row_ids': [2, 5, 6, 7, 10], 'intersection_row_ids': [6, 7, 10]}
2025-02-05 18:54:39,796 - lock_same_resource: True
2025-02-05 18:54:39,796 - 
2025-02-05 18:54:39,796 - intersection phase1
2025-02-05 18:54:39,800 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:54:39,801 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:54:39,801 - params: {'table': 'table_0', 'set_expr': "col_2 = 'RrEqz', col_1 = 29", 'v2': '6', 'v1': '6'}
2025-02-05 18:54:39,805 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:54:39,806 - needed_params: {'table', 'vals', 'insert_cols'}
2025-02-05 18:54:39,806 - params: {'table': 'table_0', 'vals': "NULL, 15.09, 35, 'ruzaj', 'mrltm', 71.47", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4'}
2025-02-05 18:54:39,808 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:54:39,809 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:54:39,809 - params: {'table': 'table_0', 'set_expr': 'col_0 = 76.93, col_1 = 25', 'v2': '10', 'v1': '10'}
2025-02-05 18:54:39,813 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:54:39,815 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:54:39,815 - params: {'table': 'table_0', 'set_expr': "col_2 = 'mEjBm', col_4 = 2.07, col_1 = 52", 'cond': '(id = 6)'}
2025-02-05 18:54:39,818 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:54:39,819 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:54:39,819 - params: {'table': 'table_0', 'set_expr': "col_3 = 'DeDMC', col_1 = 48, col_2 = 'OZifj'", 'v2': '7', 'v1': '7'}
2025-02-05 18:54:39,823 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:54:39,824 - needed_params: {'table', 'set_expr', 'cond'}
2025-02-05 18:54:39,824 - params: {'table': 'table_0', 'set_expr': "col_0 = 64.85, col_1 = 72, col_2 = 'rUIzf', col_3 = 'xMgrt'", 'cond': '(col_1 = 20) AND (col_4 = 68.02)'}
2025-02-05 18:54:39,824 - intersection phase1 end
2025-02-05 18:54:39,825 - 
2025-02-05 18:54:39,825 - intersection phase2
2025-02-05 18:54:39,825 - 事务1在第二阶段自己加的锁: NK
2025-02-05 18:54:39,825 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:54:39,825 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 18:54:39,825 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 18:54:39,825 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:39,825 - 
2025-02-05 18:54:39,825 - Error in iteration 54: 'NK'
2025-02-05 18:54:39,826 - 
2025-02-05 18:54:39,834 - iter: 55
2025-02-05 18:54:41,414 - table table_0 has 14 rows
2025-02-05 18:54:41,414 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7, 8], 'trx2_lock_row_ids': [10, 12, 14], 'intersection_row_ids': []}
2025-02-05 18:54:41,414 - lock_same_resource: False
2025-02-05 18:54:41,414 - 
2025-02-05 18:54:41,414 - non intersection phase1
2025-02-05 18:54:41,415 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:54:41,415 - 事务2在第一阶段自己加的锁: NK
2025-02-05 18:54:41,415 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 18:54:41,415 - 事务2在第二阶段请求对方资源的锁: NK
2025-02-05 18:54:41,417 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=8
2025-02-05 18:54:41,419 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:54:41,419 - params: {'table': 'table_0', 'v2': '8', 'select_cols': 'id', 'v1': '4'}
2025-02-05 18:54:41,419 - 处理无交集第一阶段失败: 'NK'
2025-02-05 18:54:41,419 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:41,419 - 
2025-02-05 18:54:41,419 - Error in iteration 55: 'NK'
2025-02-05 18:54:41,419 - 
2025-02-05 18:54:41,426 - iter: 56
2025-02-05 18:54:42,980 - table table_0 has 9 rows
2025-02-05 18:54:42,981 - res_dict: {'trx1_lock_row_ids': [4], 'trx2_lock_row_ids': [5, 6, 7, 8, 9], 'intersection_row_ids': []}
2025-02-05 18:54:42,981 - lock_same_resource: False
2025-02-05 18:54:42,981 - 
2025-02-05 18:54:42,981 - non intersection phase1
2025-02-05 18:54:42,981 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:54:42,981 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:54:42,981 - 事务1在第二阶段请求对方资源的锁: NK
2025-02-05 18:54:42,981 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 18:54:42,984 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 18:54:42,985 - needed_params: {'table', 'set_expr', 'v2', 'v1'}
2025-02-05 18:54:42,985 - params: {'table': 'table_0', 'set_expr': "col_3 = 36.62, col_4 = 'jzhDA', col_1 = 'IhiOD', col_2 = 'UGPJb'", 'v2': '4', 'v1': '4'}
2025-02-05 18:54:42,989 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=9
2025-02-05 18:54:42,991 - needed_params: {'table', 'v2', 'select_cols', 'v1'}
2025-02-05 18:54:42,991 - params: {'table': 'table_0', 'v2': '9', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'v1': '5'}
2025-02-05 18:54:42,991 - non intersection phase1 end
2025-02-05 18:54:42,991 - 
2025-02-05 18:54:42,992 - non intersection phase2
2025-02-05 18:54:42,994 - 生成锁SQL失败: 'NK'
2025-02-05 18:54:42,994 - 处理无交集第二阶段失败: 'NK'
2025-02-05 18:54:42,995 - 生成死锁事务序列失败: 'NK'
2025-02-05 18:54:42,995 - 
2025-02-05 18:54:42,995 - Error in iteration 56: 'NK'
2025-02-05 18:54:42,995 - 
2025-02-05 18:54:43,003 - iter: 57
2025-02-05 18:54:46,895 - INFO TEST
2025-02-05 18:54:46,896 - DEBUG TEST
2025-02-05 18:54:46,896 - ERROR TEST
2025-02-05 18:54:46,896 - iter: 0
2025-02-05 18:54:48,425 - table table_0 has 5 rows
2025-02-05 18:54:48,425 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 18:54:48,425 - lock_same_resource: False
2025-02-05 18:54:48,425 - 
2025-02-05 18:54:48,425 - non intersection phase1
2025-02-05 18:54:48,426 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:54:48,426 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:54:48,426 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:54:48,426 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:54:48,429 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 18:54:48,430 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:54:48,431 - params: {'set_expr': "col_1 = 'LqlEX'", 'v1': '1', 'v2': '2', 'table': 'table_0'}
2025-02-05 18:54:48,434 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 18:54:48,435 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:54:48,436 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 18:54:48,436 - non intersection phase1 end
2025-02-05 18:54:48,436 - 
2025-02-05 18:54:48,436 - non intersection phase2
2025-02-05 18:54:48,439 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 18:54:48,441 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:54:48,441 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 18:54:48,445 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:54:48,446 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:54:48,447 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:54:48,447 - non intersection phase2 end
2025-02-05 18:54:48,448 - 
2025-02-05 18:54:48,448 - 生成死锁事务序列成功如下
2025-02-05 18:54:48,448 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_1 = 'LqlEX' WHERE id BETWEEN 1 AND 2"), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:54:50,021 - 创建事务1连接成功
2025-02-05 18:54:50,022 - 执行事务1语句: BEGIN
2025-02-05 18:54:50,023 - 执行事务1语句: UPDATE table_0 SET col_1 = 'LqlEX' WHERE id BETWEEN 1 AND 2
2025-02-05 18:54:50,024 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 18:54:50,026 - 执行事务1语句: COMMIT;
2025-02-05 18:54:50,031 - 执行事务1成功
2025-02-05 18:54:52,680 - 恢复初始状态成功
2025-02-05 18:54:53,464 - 创建事务2连接成功
2025-02-05 18:54:53,465 - 执行事务2语句: BEGIN
2025-02-05 18:54:53,466 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 18:54:53,467 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:54:53,467 - 执行事务2语句: COMMIT;
2025-02-05 18:54:53,472 - 执行事务2成功
2025-02-05 18:54:58,396 - 
2025-02-05 18:54:58,397 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_1 = 'LqlEX' WHERE id BETWEEN 1 AND 2", <Thread(Thread-1, started 37228)>, 1738752898.3967512)}
2025-02-05 18:54:58,505 - stmt_idx: 2, status: success, result: None
2025-02-05 18:54:58,505 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'LqlEX' WHERE id BETWEEN 1 AND 2
2025-02-05 18:54:58,505 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:54:58,505 - 
2025-02-05 18:54:58,614 - 
2025-02-05 18:54:58,614 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-2, started 27536)>, 1738752898.614508)}
2025-02-05 18:54:58,723 - stmt_idx: 3, status: success, result: None
2025-02-05 18:54:58,723 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 18:54:58,723 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:54:58,723 - 
2025-02-05 18:54:58,831 - 
2025-02-05 18:54:58,832 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-3, started 31184)>, 1738752898.8312094)}
2025-02-05 18:54:58,939 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:54:58,939 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-3, started 31184)>, 1738752898.8312094)}
2025-02-05 18:54:58,939 - 
2025-02-05 18:54:59,048 - 
2025-02-05 18:54:59,049 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-3, started 31184)>, 1738752898.8312094), 5: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-4, started 28184)>, 1738752899.0484798)}
2025-02-05 18:54:59,051 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:54:59,157 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:54:59,158 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:54:59,158 - 错误: dictionary changed size during iteration
2025-02-05 18:54:59,161 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-4, stopped 28184)>, 1738752899.0484798)}
2025-02-05 18:54:59,161 - 
2025-02-05 18:54:59,161 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-4, stopped 28184)>, 1738752899.0484798)}
2025-02-05 18:54:59,266 - stmt_idx: 5, status: success, result: None
2025-02-05 18:54:59,266 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 18:54:59,266 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:54:59,266 - 
2025-02-05 18:54:59,375 - 执行序列成功
2025-02-05 18:55:00,136 - is_atomic: True
2025-02-05 18:55:00,137 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:55:00,137 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_1 = 'LqlEX' WHERE id BETWEEN 1 AND 2"), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE')]
2025-02-05 18:55:00,137 - snapshots: {'before': {'table_0': [(1, 55, 'cgcli'), (2, 20, 'qstpi'), (3, 49, 'exvnp'), (4, 32, 'wefvn'), (5, 60, 'roysh')]}, 'trx1': {'table_0': [(1, 55, 'LqlEX'), (2, 20, 'LqlEX'), (3, 49, 'exvnp'), (4, 32, 'wefvn'), (5, 60, 'roysh')]}, 'trx2': {'table_0': [(1, 55, 'cgcli'), (2, 20, 'qstpi'), (3, 49, 'exvnp'), (4, 32, 'wefvn'), (5, 60, 'roysh')]}, 'serial': {'table_0': [(1, 55, 'LqlEX'), (2, 20, 'LqlEX'), (3, 49, 'exvnp'), (4, 32, 'wefvn'), (5, 60, 'roysh')]}}
2025-02-05 18:55:00,137 - 
2025-02-05 18:55:00,149 - iter: 1
2025-02-05 18:55:01,639 - table table_0 has 10 rows
2025-02-05 18:55:01,639 - res_dict: {'trx1_lock_row_ids': [1, 2, 3], 'trx2_lock_row_ids': [4, 5, 6, 7, 8], 'intersection_row_ids': []}
2025-02-05 18:55:01,639 - lock_same_resource: False
2025-02-05 18:55:01,639 - 
2025-02-05 18:55:01,639 - non intersection phase1
2025-02-05 18:55:01,640 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:55:01,640 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:55:01,640 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 18:55:01,640 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:55:01,643 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=3
2025-02-05 18:55:01,644 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:01,644 - params: {'v1': '1', 'v2': '3', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_313', 'table': 'table_0'}
2025-02-05 18:55:01,646 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:55:01,648 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:55:01,648 - params: {'cond': '(col_3 = 49) AND (col_1 = 69) AND (col_0 = 85)', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 18:55:01,651 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:55:01,652 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:01,652 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 18:55:01,656 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:55:01,657 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:01,657 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 18:55:01,661 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:55:01,662 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:55:01,662 - params: {'cond': '(col_0 = 24) AND (col_313 IS NULL)', 'select_cols': 'id, col_2, col_313', 'table': 'table_0'}
2025-02-05 18:55:01,667 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:55:01,668 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:55:01,669 - params: {'cond': '(col_3 = 56) AND (col_1 = 53)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:55:01,669 - non intersection phase1 end
2025-02-05 18:55:01,669 - 
2025-02-05 18:55:01,669 - non intersection phase2
2025-02-05 18:55:01,672 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:55:01,673 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:55:01,673 - params: {'cond': '(id = 5)', 'select_cols': 'col_0, col_1, col_3', 'table': 'table_0'}
2025-02-05 18:55:01,677 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:55:01,678 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:01,679 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 18:55:01,679 - non intersection phase2 end
2025-02-05 18:55:01,679 - 
2025-02-05 18:55:01,679 - 生成死锁事务序列成功如下
2025-02-05 18:55:01,679 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE (col_3 = 49) AND (col_1 = 69) AND (col_0 = 85) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id, col_2, col_313 FROM table_0 WHERE (col_0 = 24) AND (col_313 IS NULL) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (col_3 = 56) AND (col_1 = 53) LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT col_0, col_1, col_3 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:55:03,192 - 创建事务1连接成功
2025-02-05 18:55:03,193 - 执行事务1语句: BEGIN
2025-02-05 18:55:03,194 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-05 18:55:03,195 - 执行事务1语句: SELECT col_0, col_1, col_3 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 18:55:03,195 - 执行事务1语句: COMMIT;
2025-02-05 18:55:03,199 - 执行事务1成功
2025-02-05 18:55:05,774 - 恢复初始状态成功
2025-02-05 18:55:06,526 - 创建事务2连接成功
2025-02-05 18:55:06,528 - 执行事务2语句: BEGIN
2025-02-05 18:55:06,528 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_3 = 49) AND (col_1 = 69) AND (col_0 = 85) LOCK IN SHARE MODE
2025-02-05 18:55:06,529 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 18:55:06,530 - 执行事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:55:06,530 - 执行事务2语句: SELECT id, col_2, col_313 FROM table_0 WHERE (col_0 = 24) AND (col_313 IS NULL) LOCK IN SHARE MODE
2025-02-05 18:55:06,531 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_3 = 56) AND (col_1 = 53) LOCK IN SHARE MODE
2025-02-05 18:55:06,532 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 18:55:06,532 - 执行事务2语句: COMMIT;
2025-02-05 18:55:06,537 - 执行事务2成功
2025-02-05 18:55:11,418 - 
2025-02-05 18:55:11,418 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0 FROM table_0 WHERE (col_3 = 49) AND (col_1 = 69) AND (col_0 = 85) LOCK IN SHARE MODE', <Thread(Thread-5, started 39908)>, 1738752911.4181511)}
2025-02-05 18:55:11,523 - stmt_idx: 2, status: success, result: None
2025-02-05 18:55:11,523 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_3 = 49) AND (col_1 = 69) AND (col_0 = 85) LOCK IN SHARE MODE
2025-02-05 18:55:11,523 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:55:11,523 - 
2025-02-05 18:55:11,630 - 
2025-02-05 18:55:11,631 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-6, started 38016)>, 1738752911.6308308)}
2025-02-05 18:55:11,735 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-05 18:55:11,736 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-6, started 38016)>, 1738752911.6308308)}
2025-02-05 18:55:11,736 - 
2025-02-05 18:55:11,843 - 
2025-02-05 18:55:11,844 - 执行前idx: 5, pending_stmts: {3: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-6, started 38016)>, 1738752911.6308308), 4: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-7, started 31024)>, 1738752911.8437998)}
2025-02-05 18:55:11,950 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-05 18:55:12,058 - stmt_idx: 4, status: success, result: None
2025-02-05 18:55:12,058 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 18:55:12,058 - 执行后idx: 5, pending_stmts: {3: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-6, started 38016)>, 1738752911.6308308)}
2025-02-05 18:55:12,058 - 
2025-02-05 18:55:12,165 - 
2025-02-05 18:55:12,165 - 执行前idx: 6, pending_stmts: {3: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-6, started 38016)>, 1738752911.6308308), 5: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-8, started 39416)>, 1738752912.165465)}
2025-02-05 18:55:12,271 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-05 18:55:12,379 - stmt_idx: 5, status: success, result: None
2025-02-05 18:55:12,379 - 成功执行序列中事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:55:12,379 - 执行后idx: 6, pending_stmts: {3: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-6, started 38016)>, 1738752911.6308308)}
2025-02-05 18:55:12,379 - 
2025-02-05 18:55:12,487 - 
2025-02-05 18:55:12,488 - 执行前idx: 7, pending_stmts: {3: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-6, started 38016)>, 1738752911.6308308), 6: (2, 'SELECT id, col_2, col_313 FROM table_0 WHERE (col_0 = 24) AND (col_313 IS NULL) LOCK IN SHARE MODE', <Thread(Thread-9, started 42916)>, 1738752912.4877677)}
2025-02-05 18:55:12,491 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_2, col_313 FROM table_0 WHERE (col_0 = 24) AND (col_313 IS NULL) LOCK IN SHARE MODE
2025-02-05 18:55:12,595 - stmt_idx: 3, status: success, result: None
2025-02-05 18:55:12,595 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-05 18:55:12,595 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-05 18:55:12,705 - stmt_idx: 6, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:55:12,705 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_2, col_313 FROM table_0 WHERE (col_0 = 24) AND (col_313 IS NULL) LOCK IN SHARE MODE
2025-02-05 18:55:12,705 - 错误: dictionary changed size during iteration
2025-02-05 18:55:12,705 - 
2025-02-05 18:55:12,705 - 执行前idx: 10, pending_stmts: {9: (1, 'SELECT col_0, col_1, col_3 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-10, started 41292)>, 1738752912.7056582)}
2025-02-05 18:55:12,814 - stmt_idx: 9, status: success, result: None
2025-02-05 18:55:12,814 - 成功执行序列中事务1语句: SELECT col_0, col_1, col_3 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 18:55:12,814 - 执行后idx: 10, pending_stmts: {}
2025-02-05 18:55:12,814 - 
2025-02-05 18:55:12,925 - 执行序列成功
2025-02-05 18:55:13,720 - is_atomic: True
2025-02-05 18:55:13,720 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:55:13,720 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE (col_3 = 49) AND (col_1 = 69) AND (col_0 = 85) LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_313 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: SELECT * FROM table_0 WHERE (col_3 = 56) AND (col_1 = 53) LOCK IN SHARE MODE'), (2, '--Skipped, trx_id: 2, stmt: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT col_0, col_1, col_3 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 18:55:13,720 - snapshots: {'before': {'table_0': [(1, 81, 48, 29.97, 46, None), (2, 10, 64, 89.97, 27, None), (3, 4, 25, 37.88, 92, None), (4, 85, 69, 22.16, 49, None), (5, 94, 2, 83.05, 51, None), (6, 81, 62, 9.98, 61, None), (7, 24, 88, 51.51, 19, None), (8, 29, 53, 62.02, 56, None), (9, 15, 58, 48.6, 6, None), (10, 37, 45, 74.49, 13, None)]}, 'trx1': {'table_0': [(1, 81, 48, 29.97, 46, None), (2, 10, 64, 89.97, 27, None), (3, 4, 25, 37.88, 92, None), (4, 85, 69, 22.16, 49, None), (5, 94, 2, 83.05, 51, None), (6, 81, 62, 9.98, 61, None), (7, 24, 88, 51.51, 19, None), (8, 29, 53, 62.02, 56, None), (9, 15, 58, 48.6, 6, None), (10, 37, 45, 74.49, 13, None)]}, 'trx2': {'table_0': [(1, 81, 48, 29.97, 46, None), (2, 10, 64, 89.97, 27, None), (3, 4, 25, 37.88, 92, None), (4, 85, 69, 22.16, 49, None), (5, 94, 2, 83.05, 51, None), (6, 81, 62, 9.98, 61, None), (7, 24, 88, 51.51, 19, None), (8, 29, 53, 62.02, 56, None), (9, 15, 58, 48.6, 6, None), (10, 37, 45, 74.49, 13, None)]}, 'serial': {'table_0': [(1, 81, 48, 29.97, 46, None), (2, 10, 64, 89.97, 27, None), (3, 4, 25, 37.88, 92, None), (4, 85, 69, 22.16, 49, None), (5, 94, 2, 83.05, 51, None), (6, 81, 62, 9.98, 61, None), (7, 24, 88, 51.51, 19, None), (8, 29, 53, 62.02, 56, None), (9, 15, 58, 48.6, 6, None), (10, 37, 45, 74.49, 13, None)]}}
2025-02-05 18:55:13,720 - 
2025-02-05 18:55:13,733 - iter: 2
2025-02-05 18:55:15,241 - table table_0 has 15 rows
2025-02-05 18:55:15,242 - trx1_lock_row_ids: [4, 7, 8, 10, 11, 12, 15]
2025-02-05 18:55:15,242 - trx2_lock_row_ids: [7, 8, 9, 10, 11]
2025-02-05 18:55:15,242 - intersection_row_ids: [7, 8, 10, 11]
2025-02-05 18:55:15,242 - trx1_exclusive_ids: [4, 12, 15]
2025-02-05 18:55:15,242 - trx2_exclusive_ids: [9]
2025-02-05 18:55:15,242 - res_dict: {'trx1_lock_row_ids': [4, 7, 8, 10, 11, 12, 15], 'trx2_lock_row_ids': [7, 8, 9, 10, 11], 'intersection_row_ids': [7, 8, 10, 11]}
2025-02-05 18:55:15,242 - lock_same_resource: True
2025-02-05 18:55:15,242 - 
2025-02-05 18:55:15,242 - intersection phase1
2025-02-05 18:55:15,245 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=7, is_continuous=True, range_end_idx=11
2025-02-05 18:55:15,247 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:15,247 - params: {'v1': '7', 'v2': '11', 'select_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 18:55:15,249 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,251 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:55:15,251 - params: {'vals': "NULL, 'ylCfd', 'DtvNk', 25.96", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 18:55:15,255 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,256 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:55:15,256 - params: {'set_expr': 'col_2 = 22.41', 'cond': '(id = 8)', 'table': 'table_0'}
2025-02-05 18:55:15,259 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,260 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:55:15,260 - params: {'vals': "NULL, 'VoiSF', 'ahwap', 30.22", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 18:55:15,264 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,265 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:55:15,265 - params: {'vals': "NULL, 'cepxI', 'LziZJ', 27.75", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 18:55:15,265 - intersection phase1 end
2025-02-05 18:55:15,265 - 
2025-02-05 18:55:15,266 - intersection phase2
2025-02-05 18:55:15,266 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:55:15,266 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:55:15,266 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:55:15,266 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:55:15,269 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,270 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:15,270 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 18:55:15,274 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,276 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:55:15,276 - params: {'set_expr': "col_1 = 'zCWcC', col_2 = 99.25", 'cond': "(col_1 = 'ggznp') AND (col_2 = 25.9)", 'table': 'table_0'}
2025-02-05 18:55:15,279 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,281 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:55:15,281 - params: {'cond': "(col_1 = 'auonx')", 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 18:55:15,284 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,286 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:15,286 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 18:55:15,286 - intersection phase2 end
2025-02-05 18:55:15,286 - 
2025-02-05 18:55:15,286 - intersection phase3
2025-02-05 18:55:15,290 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:55:15,291 - needed_params: {'cond', 'table'}
2025-02-05 18:55:15,291 - params: {'cond': "(col_0 = 'dqltp') AND (col_1 = 'tgwfz') AND (col_2 = 81.12)", 'table': 'table_0'}
2025-02-05 18:55:15,291 - intersection phase3 end
2025-02-05 18:55:15,291 - 
2025-02-05 18:55:15,292 - 生成死锁事务序列成功如下
2025-02-05 18:55:15,292 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ylCfd', 'DtvNk', 25.96)"), (1, 'UPDATE table_0 SET col_2 = 22.41 WHERE (id = 8)'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'VoiSF', 'ahwap', 30.22)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'cepxI', 'LziZJ', 27.75)"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'zCWcC', col_2 = 99.25 WHERE (col_1 = 'ggznp') AND (col_2 = 25.9)"), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'auonx') FOR UPDATE"), (1, "DELETE FROM table_0 WHERE (col_0 = 'dqltp') AND (col_1 = 'tgwfz') AND (col_2 = 81.12)"), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:55:16,887 - 创建事务1连接成功
2025-02-05 18:55:16,889 - 执行事务1语句: BEGIN
2025-02-05 18:55:16,890 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ylCfd', 'DtvNk', 25.96)
2025-02-05 18:55:16,891 - 执行事务1语句: UPDATE table_0 SET col_2 = 22.41 WHERE (id = 8)
2025-02-05 18:55:16,891 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'VoiSF', 'ahwap', 30.22)
2025-02-05 18:55:16,892 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'cepxI', 'LziZJ', 27.75)
2025-02-05 18:55:16,893 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 18:55:16,893 - 执行事务1语句: UPDATE table_0 SET col_1 = 'zCWcC', col_2 = 99.25 WHERE (col_1 = 'ggznp') AND (col_2 = 25.9)
2025-02-05 18:55:16,894 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'auonx') FOR UPDATE
2025-02-05 18:55:16,895 - 执行事务1语句: DELETE FROM table_0 WHERE (col_0 = 'dqltp') AND (col_1 = 'tgwfz') AND (col_2 = 81.12)
2025-02-05 18:55:16,897 - 执行事务1语句: COMMIT;
2025-02-05 18:55:16,901 - 执行事务1成功
2025-02-05 18:55:19,476 - 恢复初始状态成功
2025-02-05 18:55:20,234 - 创建事务2连接成功
2025-02-05 18:55:20,236 - 执行事务2语句: BEGIN
2025-02-05 18:55:20,237 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:20,238 - 执行事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 18:55:20,239 - 执行事务2语句: COMMIT;
2025-02-05 18:55:20,243 - 执行事务2成功
2025-02-05 18:55:25,108 - 
2025-02-05 18:55:25,108 - 执行前idx: 3, pending_stmts: {2: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ylCfd', 'DtvNk', 25.96)", <Thread(Thread-11, started 35360)>, 1738752925.1081226)}
2025-02-05 18:55:25,217 - stmt_idx: 2, status: success, result: None
2025-02-05 18:55:25,217 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ylCfd', 'DtvNk', 25.96)
2025-02-05 18:55:25,217 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:55:25,218 - 
2025-02-05 18:55:25,328 - 
2025-02-05 18:55:25,328 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 22.41 WHERE (id = 8)', <Thread(Thread-12, started 44884)>, 1738752925.3285334)}
2025-02-05 18:55:25,436 - stmt_idx: 3, status: success, result: None
2025-02-05 18:55:25,436 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 22.41 WHERE (id = 8)
2025-02-05 18:55:25,436 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:55:25,436 - 
2025-02-05 18:55:25,546 - 
2025-02-05 18:55:25,547 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599)}
2025-02-05 18:55:25,654 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:25,654 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599)}
2025-02-05 18:55:25,654 - 
2025-02-05 18:55:25,763 - 
2025-02-05 18:55:25,765 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599), 5: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'VoiSF', 'ahwap', 30.22)", <Thread(Thread-14, started 27712)>, 1738752925.7639844)}
2025-02-05 18:55:25,870 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:25,978 - stmt_idx: 5, status: success, result: None
2025-02-05 18:55:25,978 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'VoiSF', 'ahwap', 30.22)
2025-02-05 18:55:25,978 - 执行后idx: 6, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599)}
2025-02-05 18:55:25,978 - 
2025-02-05 18:55:26,087 - 
2025-02-05 18:55:26,087 - 执行前idx: 7, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599), 6: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'cepxI', 'LziZJ', 27.75)", <Thread(Thread-15, started 32280)>, 1738752926.0876586)}
2025-02-05 18:55:26,195 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:26,303 - stmt_idx: 6, status: success, result: None
2025-02-05 18:55:26,303 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'cepxI', 'LziZJ', 27.75)
2025-02-05 18:55:26,303 - 执行后idx: 7, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599)}
2025-02-05 18:55:26,303 - 
2025-02-05 18:55:26,409 - 
2025-02-05 18:55:26,410 - 执行前idx: 8, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599), 7: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-16, started 11996)>, 1738752926.4092054)}
2025-02-05 18:55:26,515 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:26,621 - stmt_idx: 7, status: success, result: None
2025-02-05 18:55:26,622 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 18:55:26,622 - 执行后idx: 8, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599)}
2025-02-05 18:55:26,622 - 
2025-02-05 18:55:26,730 - 
2025-02-05 18:55:26,731 - 执行前idx: 9, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599), 8: (1, "UPDATE table_0 SET col_1 = 'zCWcC', col_2 = 99.25 WHERE (col_1 = 'ggznp') AND (col_2 = 25.9)", <Thread(Thread-17, started 20908)>, 1738752926.7304924)}
2025-02-05 18:55:26,836 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:26,942 - stmt_idx: 8, status: success, result: None
2025-02-05 18:55:26,942 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'zCWcC', col_2 = 99.25 WHERE (col_1 = 'ggznp') AND (col_2 = 25.9)
2025-02-05 18:55:26,942 - 执行后idx: 9, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599)}
2025-02-05 18:55:26,942 - 
2025-02-05 18:55:27,048 - 
2025-02-05 18:55:27,049 - 执行前idx: 11, pending_stmts: {4: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-13, started 27068)>, 1738752925.5469599), 10: (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'auonx') FOR UPDATE", <Thread(Thread-18, started 37036)>, 1738752927.0487099)}
2025-02-05 18:55:27,051 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:27,154 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:55:27,154 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:27,154 - 错误: dictionary changed size during iteration
2025-02-05 18:55:27,155 - 
2025-02-05 18:55:27,155 - 执行前idx: 12, pending_stmts: {10: (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'auonx') FOR UPDATE", <Thread(Thread-18, stopped 37036)>, 1738752927.0487099), 11: (1, "DELETE FROM table_0 WHERE (col_0 = 'dqltp') AND (col_1 = 'tgwfz') AND (col_2 = 81.12)", <Thread(Thread-19, started 44292)>, 1738752927.1559885)}
2025-02-05 18:55:27,264 - stmt_idx: 10, status: success, result: None
2025-02-05 18:55:27,264 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'auonx') FOR UPDATE
2025-02-05 18:55:27,371 - stmt_idx: 11, status: success, result: None
2025-02-05 18:55:27,372 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_0 = 'dqltp') AND (col_1 = 'tgwfz') AND (col_2 = 81.12)
2025-02-05 18:55:27,372 - 执行后idx: 12, pending_stmts: {}
2025-02-05 18:55:27,372 - 
2025-02-05 18:55:27,483 - stmt为None, trx_id: 2, stmt: None
2025-02-05 18:55:27,488 - 执行序列成功
2025-02-05 18:55:28,256 - is_atomic: True
2025-02-05 18:55:28,256 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:55:28,256 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ylCfd', 'DtvNk', 25.96)"), (1, 'UPDATE table_0 SET col_2 = 22.41 WHERE (id = 8)'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'VoiSF', 'ahwap', 30.22)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'cepxI', 'LziZJ', 27.75)"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'zCWcC', col_2 = 99.25 WHERE (col_1 = 'ggznp') AND (col_2 = 25.9)"), (2, 'ROLLBACK'), (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'auonx') FOR UPDATE"), (1, "DELETE FROM table_0 WHERE (col_0 = 'dqltp') AND (col_1 = 'tgwfz') AND (col_2 = 81.12)"), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 18:55:28,257 - snapshots: {'before': {'table_0': [(1, 'xcoky', 'nrmrl', 79.09), (2, 'dhuwl', 'xkjoa', 67.22), (3, 'dqruz', 'wbmrm', 59.45), (4, 'krgta', 'nmlar', 34.75), (5, 'cgbfy', 'zxybf', 49.85), (6, 'bhowc', 'jkazc', 30.0), (7, 'vgwcr', 'hwsju', 69.45), (8, 'gpaic', 'pcjvr', 58.61), (9, 'dqltp', 'tgwfz', 81.12), (10, 'cfjgj', 'esdkd', 40.32), (11, 'qwvln', 'bhluz', 88.85), (12, 'emrnw', 'ggznp', 25.9), (13, 'iqgot', 'mlils', 90.51), (14, 'hrpux', 'nhfzv', 27.51), (15, 'afldq', 'auonx', 50.4)]}, 'trx1': {'table_0': [(1, 'xcoky', 'nrmrl', 79.09), (2, 'dhuwl', 'xkjoa', 67.22), (3, 'dqruz', 'wbmrm', 59.45), (4, 'krgta', 'nmlar', 34.75), (5, 'cgbfy', 'zxybf', 49.85), (6, 'bhowc', 'jkazc', 30.0), (7, 'vgwcr', 'hwsju', 69.45), (8, 'gpaic', 'pcjvr', 22.41), (10, 'cfjgj', 'esdkd', 40.32), (11, 'qwvln', 'bhluz', 88.85), (12, 'emrnw', 'zCWcC', 99.25), (13, 'iqgot', 'mlils', 90.51), (14, 'hrpux', 'nhfzv', 27.51), (15, 'afldq', 'auonx', 50.4), (16, 'ylCfd', 'DtvNk', 25.96), (17, 'VoiSF', 'ahwap', 30.22), (18, 'cepxI', 'LziZJ', 27.75)]}, 'trx2': {'table_0': [(1, 'xcoky', 'nrmrl', 79.09), (2, 'dhuwl', 'xkjoa', 67.22), (3, 'dqruz', 'wbmrm', 59.45), (4, 'krgta', 'nmlar', 34.75), (5, 'cgbfy', 'zxybf', 49.85), (6, 'bhowc', 'jkazc', 30.0), (7, 'vgwcr', 'hwsju', 69.45), (8, 'gpaic', 'pcjvr', 58.61), (9, 'dqltp', 'tgwfz', 81.12), (10, 'cfjgj', 'esdkd', 40.32), (11, 'qwvln', 'bhluz', 88.85), (12, 'emrnw', 'ggznp', 25.9), (13, 'iqgot', 'mlils', 90.51), (14, 'hrpux', 'nhfzv', 27.51), (15, 'afldq', 'auonx', 50.4)]}, 'serial': {'table_0': [(1, 'xcoky', 'nrmrl', 79.09), (2, 'dhuwl', 'xkjoa', 67.22), (3, 'dqruz', 'wbmrm', 59.45), (4, 'krgta', 'nmlar', 34.75), (5, 'cgbfy', 'zxybf', 49.85), (6, 'bhowc', 'jkazc', 30.0), (7, 'vgwcr', 'hwsju', 69.45), (8, 'gpaic', 'pcjvr', 22.41), (10, 'cfjgj', 'esdkd', 40.32), (11, 'qwvln', 'bhluz', 88.85), (12, 'emrnw', 'zCWcC', 99.25), (13, 'iqgot', 'mlils', 90.51), (14, 'hrpux', 'nhfzv', 27.51), (15, 'afldq', 'auonx', 50.4), (19, 'ylCfd', 'DtvNk', 25.96), (20, 'VoiSF', 'ahwap', 30.22), (21, 'cepxI', 'LziZJ', 27.75)]}}
2025-02-05 18:55:28,257 - 
2025-02-05 18:55:28,269 - iter: 3
2025-02-05 18:55:29,818 - table table_0 has 15 rows
2025-02-05 18:55:29,818 - trx1_start_id: 4
2025-02-05 18:55:29,818 - trx1_end_id: 7
2025-02-05 18:55:29,818 - trx1_exclusive_start_id: 4
2025-02-05 18:55:29,818 - trx1_exclusive_end_id: 6
2025-02-05 18:55:29,818 - trx1_exclusive_ids: [4, 5, 6]
2025-02-05 18:55:29,819 - trx2_start_id: 7
2025-02-05 18:55:29,819 - trx2_end_id: 11
2025-02-05 18:55:29,819 - trx2_exclusive_start_id: 8
2025-02-05 18:55:29,819 - trx2_exclusive_end_id: 11
2025-02-05 18:55:29,819 - trx2_exclusive_ids: [8, 9, 10, 11]
2025-02-05 18:55:29,819 - intersection_ids: [7]
2025-02-05 18:55:29,819 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7], 'trx2_lock_row_ids': [7, 8, 9, 10, 11], 'intersection_row_ids': [7]}
2025-02-05 18:55:29,819 - lock_same_resource: True
2025-02-05 18:55:29,819 - 
2025-02-05 18:55:29,819 - intersection phase1
2025-02-05 18:55:29,822 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=4, is_continuous=True, range_end_idx=7
2025-02-05 18:55:29,823 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:29,823 - params: {'v1': '4', 'v2': '7', 'select_cols': 'id, col_4', 'table': 'table_0'}
2025-02-05 18:55:29,826 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=7, is_continuous=True, range_end_idx=11
2025-02-05 18:55:29,827 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:29,827 - params: {'v1': '7', 'v2': '11', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 18:55:29,828 - intersection phase1 end
2025-02-05 18:55:29,828 - 
2025-02-05 18:55:29,828 - intersection phase2
2025-02-05 18:55:29,829 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:55:29,829 - 事务2在第二阶段自己加的锁: S
2025-02-05 18:55:29,829 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 18:55:29,829 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:55:29,832 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=6
2025-02-05 18:55:29,834 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:29,834 - params: {'v1': '4', 'v2': '6', 'select_cols': 'col_0, col_1, col_2, col_405', 'table': 'table_0'}
2025-02-05 18:55:29,837 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=8, is_continuous=True, range_end_idx=11
2025-02-05 18:55:29,838 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:29,838 - params: {'v1': '8', 'v2': '11', 'select_cols': 'id, col_1, col_2, col_4, col_405', 'table': 'table_0'}
2025-02-05 18:55:29,838 - intersection phase2 end
2025-02-05 18:55:29,839 - 
2025-02-05 18:55:29,839 - intersection phase3
2025-02-05 18:55:29,841 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:55:29,843 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:29,843 - params: {'v1': '10', 'v2': '10', 'select_cols': 'id, col_0, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:55:29,846 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=6
2025-02-05 18:55:29,847 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:29,848 - params: {'v1': '4', 'v2': '6', 'select_cols': 'id, col_1, col_2, col_4, col_405', 'table': 'table_0'}
2025-02-05 18:55:29,848 - intersection phase3 end
2025-02-05 18:55:29,848 - 
2025-02-05 18:55:29,848 - 生成死锁事务序列成功如下
2025-02-05 18:55:29,848 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE'), (2, 'SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 8 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:55:31,385 - 创建事务1连接成功
2025-02-05 18:55:31,386 - 执行事务1语句: BEGIN
2025-02-05 18:55:31,387 - 执行事务1语句: SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE
2025-02-05 18:55:31,388 - 执行事务1语句: SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 18:55:31,389 - 执行事务1语句: SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 18:55:31,389 - 执行事务1语句: COMMIT;
2025-02-05 18:55:31,394 - 执行事务1成功
2025-02-05 18:55:33,965 - 恢复初始状态成功
2025-02-05 18:55:34,732 - 创建事务2连接成功
2025-02-05 18:55:34,734 - 执行事务2语句: BEGIN
2025-02-05 18:55:34,734 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:34,735 - 执行事务2语句: SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 8 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:34,736 - 执行事务2语句: SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 18:55:34,737 - 执行事务2语句: COMMIT;
2025-02-05 18:55:34,741 - 执行事务2成功
2025-02-05 18:55:39,671 - 
2025-02-05 18:55:39,671 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE', <Thread(Thread-20, started 36044)>, 1738752939.671665)}
2025-02-05 18:55:39,772 - stmt_idx: 2, status: success, result: None
2025-02-05 18:55:39,772 - 成功执行序列中事务1语句: SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE
2025-02-05 18:55:39,772 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:55:39,772 - 
2025-02-05 18:55:39,882 - 
2025-02-05 18:55:39,882 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE', <Thread(Thread-21, started 44488)>, 1738752939.8822312)}
2025-02-05 18:55:39,989 - stmt_idx: 3, status: success, result: None
2025-02-05 18:55:39,990 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:39,990 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:55:39,990 - 
2025-02-05 18:55:40,098 - 
2025-02-05 18:55:40,100 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE', <Thread(Thread-22, started 44732)>, 1738752940.0989099)}
2025-02-05 18:55:40,206 - wait for lock, trx_id: 1, stmt: SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 18:55:40,206 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE', <Thread(Thread-22, started 44732)>, 1738752940.0989099)}
2025-02-05 18:55:40,206 - 
2025-02-05 18:55:40,312 - 
2025-02-05 18:55:40,313 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE', <Thread(Thread-22, started 44732)>, 1738752940.0989099), 5: (2, 'SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 8 AND 11 LOCK IN SHARE MODE', <Thread(Thread-23, started 6156)>, 1738752940.3127606)}
2025-02-05 18:55:40,419 - wait for lock, trx_id: 1, stmt: SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 18:55:40,526 - stmt_idx: 5, status: success, result: None
2025-02-05 18:55:40,526 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 8 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:40,526 - 执行后idx: 6, pending_stmts: {4: (1, 'SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE', <Thread(Thread-22, started 44732)>, 1738752940.0989099)}
2025-02-05 18:55:40,526 - 
2025-02-05 18:55:40,633 - 
2025-02-05 18:55:40,634 - 执行前idx: 8, pending_stmts: {4: (1, 'SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE', <Thread(Thread-22, started 44732)>, 1738752940.0989099), 7: (2, 'SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE', <Thread(Thread-24, started 44460)>, 1738752940.6337385)}
2025-02-05 18:55:40,637 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 18:55:40,740 - stmt_idx: 4, status: success, result: None
2025-02-05 18:55:40,740 - 成功执行序列中事务1语句: SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 18:55:40,740 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 18:55:40,849 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:55:40,849 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 18:55:40,849 - 错误: dictionary changed size during iteration
2025-02-05 18:55:40,851 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-25, stopped 22088)>, 1738752940.7407043)}
2025-02-05 18:55:40,852 - 
2025-02-05 18:55:40,852 - 执行前idx: 10, pending_stmts: {6: (1, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-25, stopped 22088)>, 1738752940.7407043)}
2025-02-05 18:55:40,956 - stmt_idx: 6, status: success, result: None
2025-02-05 18:55:40,956 - 成功执行序列中事务1语句: SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 18:55:40,956 - 执行后idx: 10, pending_stmts: {}
2025-02-05 18:55:40,956 - 
2025-02-05 18:55:41,064 - 执行序列成功
2025-02-05 18:55:41,840 - is_atomic: True
2025-02-05 18:55:41,841 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:55:41,841 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_4 FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 11 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_4, col_405 FROM table_0 WHERE id BETWEEN 8 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT col_0, col_1, col_2, col_405 FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'SELECT id, col_0, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE')]
2025-02-05 18:55:41,841 - snapshots: {'before': {'table_0': [(1, 70, 'vyugl', 53.43, 'kienk', 78.81, None), (2, 34, 'cwkgx', 17.69, 'gxsmg', 30.18, None), (3, 93, 'pfxss', 84.01, 'xcvyo', 47.55, None), (4, 42, 'fionz', 64.32, 'wbxjj', 39.92, None), (5, 94, 'rwdem', 5.29, 'ehsks', 89.4, None), (6, 28, 'qyqyz', 69.27, 'jkcxo', 54.27, None), (7, 5, 'ptiaw', 33.42, 'xjttj', 48.8, None), (8, 72, 'ckdcv', 87.36, 'vjkem', 34.89, None), (9, 29, 'huztx', 41.92, 'qrold', 10.9, None), (10, 52, 'iudyp', 64.73, 'sicln', 97.04, None), (11, 54, 'zxnlw', 56.65, 'oeuog', 21.67, None), (12, 78, 'laaoi', 67.29, 'mbmgl', 72.4, None), (13, 24, 'puiot', 57.85, 'ozqnu', 99.88, None), (14, 57, 'rzktq', 31.71, 'rdnlr', 5.08, None), (15, 30, 'juftz', 32.85, 'xyyqs', 98.77, None)]}, 'trx1': {'table_0': [(1, 70, 'vyugl', 53.43, 'kienk', 78.81, None), (2, 34, 'cwkgx', 17.69, 'gxsmg', 30.18, None), (3, 93, 'pfxss', 84.01, 'xcvyo', 47.55, None), (4, 42, 'fionz', 64.32, 'wbxjj', 39.92, None), (5, 94, 'rwdem', 5.29, 'ehsks', 89.4, None), (6, 28, 'qyqyz', 69.27, 'jkcxo', 54.27, None), (7, 5, 'ptiaw', 33.42, 'xjttj', 48.8, None), (8, 72, 'ckdcv', 87.36, 'vjkem', 34.89, None), (9, 29, 'huztx', 41.92, 'qrold', 10.9, None), (10, 52, 'iudyp', 64.73, 'sicln', 97.04, None), (11, 54, 'zxnlw', 56.65, 'oeuog', 21.67, None), (12, 78, 'laaoi', 67.29, 'mbmgl', 72.4, None), (13, 24, 'puiot', 57.85, 'ozqnu', 99.88, None), (14, 57, 'rzktq', 31.71, 'rdnlr', 5.08, None), (15, 30, 'juftz', 32.85, 'xyyqs', 98.77, None)]}, 'trx2': {'table_0': [(1, 70, 'vyugl', 53.43, 'kienk', 78.81, None), (2, 34, 'cwkgx', 17.69, 'gxsmg', 30.18, None), (3, 93, 'pfxss', 84.01, 'xcvyo', 47.55, None), (4, 42, 'fionz', 64.32, 'wbxjj', 39.92, None), (5, 94, 'rwdem', 5.29, 'ehsks', 89.4, None), (6, 28, 'qyqyz', 69.27, 'jkcxo', 54.27, None), (7, 5, 'ptiaw', 33.42, 'xjttj', 48.8, None), (8, 72, 'ckdcv', 87.36, 'vjkem', 34.89, None), (9, 29, 'huztx', 41.92, 'qrold', 10.9, None), (10, 52, 'iudyp', 64.73, 'sicln', 97.04, None), (11, 54, 'zxnlw', 56.65, 'oeuog', 21.67, None), (12, 78, 'laaoi', 67.29, 'mbmgl', 72.4, None), (13, 24, 'puiot', 57.85, 'ozqnu', 99.88, None), (14, 57, 'rzktq', 31.71, 'rdnlr', 5.08, None), (15, 30, 'juftz', 32.85, 'xyyqs', 98.77, None)]}, 'serial': {'table_0': [(1, 70, 'vyugl', 53.43, 'kienk', 78.81, None), (2, 34, 'cwkgx', 17.69, 'gxsmg', 30.18, None), (3, 93, 'pfxss', 84.01, 'xcvyo', 47.55, None), (4, 42, 'fionz', 64.32, 'wbxjj', 39.92, None), (5, 94, 'rwdem', 5.29, 'ehsks', 89.4, None), (6, 28, 'qyqyz', 69.27, 'jkcxo', 54.27, None), (7, 5, 'ptiaw', 33.42, 'xjttj', 48.8, None), (8, 72, 'ckdcv', 87.36, 'vjkem', 34.89, None), (9, 29, 'huztx', 41.92, 'qrold', 10.9, None), (10, 52, 'iudyp', 64.73, 'sicln', 97.04, None), (11, 54, 'zxnlw', 56.65, 'oeuog', 21.67, None), (12, 78, 'laaoi', 67.29, 'mbmgl', 72.4, None), (13, 24, 'puiot', 57.85, 'ozqnu', 99.88, None), (14, 57, 'rzktq', 31.71, 'rdnlr', 5.08, None), (15, 30, 'juftz', 32.85, 'xyyqs', 98.77, None)]}}
2025-02-05 18:55:41,841 - 
2025-02-05 18:55:41,852 - iter: 4
2025-02-05 18:55:43,389 - table table_0 has 14 rows
2025-02-05 18:55:43,390 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 13, 14], 'trx2_lock_row_ids': [6, 7, 8, 9, 10, 11], 'intersection_row_ids': []}
2025-02-05 18:55:43,390 - lock_same_resource: False
2025-02-05 18:55:43,390 - 
2025-02-05 18:55:43,390 - non intersection phase1
2025-02-05 18:55:43,390 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:55:43,391 - 事务2在第一阶段自己加的锁: S
2025-02-05 18:55:43,391 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:55:43,391 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:55:43,393 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:55:43,395 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:55:43,395 - params: {'set_expr': "col_0 = 49.11, col_4 = 'dqwtt', col_2 = 'yAMAJ', col_1 = 'ltioO'", 'cond': "(col_1 = 'cuwvr') AND (col_4 = 'bdkvu') AND (col_3 = 'hkvxy')", 'table': 'table_0'}
2025-02-05 18:55:43,398 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:55:43,400 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:55:43,400 - params: {'set_expr': "col_2 = 'zDgEO', col_3 = 'CikMu'", 'v1': '4', 'v2': '4', 'table': 'table_0'}
2025-02-05 18:55:43,403 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:55:43,404 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:55:43,405 - params: {'vals': "NULL, 55.81, 'Rtwkl', 'JZHlu', 'hXkrJ', 'hPxgK'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:55:43,408 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:55:43,409 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:55:43,409 - params: {'vals': "NULL, 82.09, 'FitCl', 'JbHce', 'hhXMI', 'hiptW'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:55:43,413 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 18:55:43,414 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:55:43,414 - params: {'set_expr': "col_3 = 'rgTrv', col_2 = 'BxlVZ'", 'v1': '14', 'v2': '14', 'table': 'table_0'}
2025-02-05 18:55:43,418 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=6, is_continuous=True, range_end_idx=11
2025-02-05 18:55:43,419 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:43,420 - params: {'v1': '6', 'v2': '11', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:55:43,420 - non intersection phase1 end
2025-02-05 18:55:43,420 - 
2025-02-05 18:55:43,421 - non intersection phase2
2025-02-05 18:55:43,424 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 18:55:43,426 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:43,427 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0'}
2025-02-05 18:55:43,430 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:55:43,432 - needed_params: {'cond', 'table'}
2025-02-05 18:55:43,432 - params: {'cond': '(id = 5)', 'table': 'table_0'}
2025-02-05 18:55:43,432 - non intersection phase2 end
2025-02-05 18:55:43,432 - 
2025-02-05 18:55:43,432 - 生成死锁事务序列成功如下
2025-02-05 18:55:43,432 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 49.11, col_4 = 'dqwtt', col_2 = 'yAMAJ', col_1 = 'ltioO' WHERE (col_1 = 'cuwvr') AND (col_4 = 'bdkvu') AND (col_3 = 'hkvxy')"), (1, "UPDATE table_0 SET col_2 = 'zDgEO', col_3 = 'CikMu' WHERE id BETWEEN 4 AND 4"), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55.81, 'Rtwkl', 'JZHlu', 'hXkrJ', 'hPxgK')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 82.09, 'FitCl', 'JbHce', 'hhXMI', 'hiptW')"), (1, "UPDATE table_0 SET col_3 = 'rgTrv', col_2 = 'BxlVZ' WHERE id BETWEEN 14 AND 14"), (2, 'DELETE FROM table_0 WHERE (id = 5)'), (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:55:44,973 - 创建事务1连接成功
2025-02-05 18:55:44,974 - 执行事务1语句: BEGIN
2025-02-05 18:55:44,975 - 执行事务1语句: UPDATE table_0 SET col_0 = 49.11, col_4 = 'dqwtt', col_2 = 'yAMAJ', col_1 = 'ltioO' WHERE (col_1 = 'cuwvr') AND (col_4 = 'bdkvu') AND (col_3 = 'hkvxy')
2025-02-05 18:55:44,976 - 执行事务1语句: UPDATE table_0 SET col_2 = 'zDgEO', col_3 = 'CikMu' WHERE id BETWEEN 4 AND 4
2025-02-05 18:55:44,976 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55.81, 'Rtwkl', 'JZHlu', 'hXkrJ', 'hPxgK')
2025-02-05 18:55:44,977 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 82.09, 'FitCl', 'JbHce', 'hhXMI', 'hiptW')
2025-02-05 18:55:44,977 - 执行事务1语句: UPDATE table_0 SET col_3 = 'rgTrv', col_2 = 'BxlVZ' WHERE id BETWEEN 14 AND 14
2025-02-05 18:55:44,978 - 执行事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:55:44,981 - 执行事务1语句: COMMIT;
2025-02-05 18:55:44,985 - 执行事务1成功
2025-02-05 18:55:47,562 - 恢复初始状态成功
2025-02-05 18:55:48,329 - 创建事务2连接成功
2025-02-05 18:55:48,331 - 执行事务2语句: BEGIN
2025-02-05 18:55:48,332 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:48,332 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 5)
2025-02-05 18:55:48,334 - 执行事务2语句: COMMIT;
2025-02-05 18:55:48,338 - 执行事务2成功
2025-02-05 18:55:53,236 - 
2025-02-05 18:55:53,236 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_0 = 49.11, col_4 = 'dqwtt', col_2 = 'yAMAJ', col_1 = 'ltioO' WHERE (col_1 = 'cuwvr') AND (col_4 = 'bdkvu') AND (col_3 = 'hkvxy')", <Thread(Thread-26, started 38248)>, 1738752953.2362018)}
2025-02-05 18:55:53,340 - stmt_idx: 2, status: success, result: None
2025-02-05 18:55:53,340 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 49.11, col_4 = 'dqwtt', col_2 = 'yAMAJ', col_1 = 'ltioO' WHERE (col_1 = 'cuwvr') AND (col_4 = 'bdkvu') AND (col_3 = 'hkvxy')
2025-02-05 18:55:53,340 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:55:53,340 - 
2025-02-05 18:55:53,448 - 
2025-02-05 18:55:53,449 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 'zDgEO', col_3 = 'CikMu' WHERE id BETWEEN 4 AND 4", <Thread(Thread-27, started 7512)>, 1738752953.4483538)}
2025-02-05 18:55:53,555 - stmt_idx: 3, status: success, result: None
2025-02-05 18:55:53,555 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'zDgEO', col_3 = 'CikMu' WHERE id BETWEEN 4 AND 4
2025-02-05 18:55:53,555 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:55:53,555 - 
2025-02-05 18:55:53,664 - 
2025-02-05 18:55:53,664 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE', <Thread(Thread-28, started 45036)>, 1738752953.664168)}
2025-02-05 18:55:53,772 - stmt_idx: 4, status: success, result: None
2025-02-05 18:55:53,772 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE
2025-02-05 18:55:53,772 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:55:53,772 - 
2025-02-05 18:55:53,880 - 
2025-02-05 18:55:53,881 - 执行前idx: 6, pending_stmts: {5: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55.81, 'Rtwkl', 'JZHlu', 'hXkrJ', 'hPxgK')", <Thread(Thread-29, started 13160)>, 1738752953.8800645)}
2025-02-05 18:55:53,988 - stmt_idx: 5, status: success, result: None
2025-02-05 18:55:53,988 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55.81, 'Rtwkl', 'JZHlu', 'hXkrJ', 'hPxgK')
2025-02-05 18:55:53,988 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:55:53,988 - 
2025-02-05 18:55:54,098 - 
2025-02-05 18:55:54,098 - 执行前idx: 7, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 82.09, 'FitCl', 'JbHce', 'hhXMI', 'hiptW')", <Thread(Thread-30, started 22684)>, 1738752954.098322)}
2025-02-05 18:55:54,207 - stmt_idx: 6, status: success, result: None
2025-02-05 18:55:54,207 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 82.09, 'FitCl', 'JbHce', 'hhXMI', 'hiptW')
2025-02-05 18:55:54,207 - 执行后idx: 7, pending_stmts: {}
2025-02-05 18:55:54,207 - 
2025-02-05 18:55:54,314 - 
2025-02-05 18:55:54,315 - 执行前idx: 8, pending_stmts: {7: (1, "UPDATE table_0 SET col_3 = 'rgTrv', col_2 = 'BxlVZ' WHERE id BETWEEN 14 AND 14", <Thread(Thread-31, started 14988)>, 1738752954.3148737)}
2025-02-05 18:55:54,422 - stmt_idx: 7, status: success, result: None
2025-02-05 18:55:54,422 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 'rgTrv', col_2 = 'BxlVZ' WHERE id BETWEEN 14 AND 14
2025-02-05 18:55:54,422 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:55:54,422 - 
2025-02-05 18:55:54,529 - 
2025-02-05 18:55:54,531 - 执行前idx: 9, pending_stmts: {8: (2, 'DELETE FROM table_0 WHERE (id = 5)', <Thread(Thread-32, started 29024)>, 1738752954.5299964)}
2025-02-05 18:55:54,638 - stmt_idx: 8, status: success, result: None
2025-02-05 18:55:54,638 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 5)
2025-02-05 18:55:54,638 - 执行后idx: 9, pending_stmts: {}
2025-02-05 18:55:54,638 - 
2025-02-05 18:55:54,748 - 
2025-02-05 18:55:54,749 - 执行前idx: 10, pending_stmts: {9: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-33, started 42208)>, 1738752954.7482512)}
2025-02-05 18:55:54,854 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:55:54,854 - 执行后idx: 10, pending_stmts: {9: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-33, started 42208)>, 1738752954.7482512)}
2025-02-05 18:55:54,854 - 
2025-02-05 18:55:54,966 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-33, started 42208)>, 1738752954.7482512)}
2025-02-05 18:55:54,966 - 
2025-02-05 18:55:54,967 - 执行前idx: 12, pending_stmts: {9: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-33, stopped 42208)>, 1738752954.7482512)}
2025-02-05 18:55:55,069 - stmt_idx: 9, status: success, result: None
2025-02-05 18:55:55,069 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:55:55,069 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:55:55,070 - 执行后idx: 12, pending_stmts: {11: (1, 'COMMIT', <Thread(Thread-34, started 5708)>, 1738752955.0707204)}
2025-02-05 18:55:55,070 - 
2025-02-05 18:55:55,176 - 序列遍历完成，开始查看剩余阻塞的语句：{11: (1, 'COMMIT', <Thread(Thread-34, stopped 5708)>, 1738752955.0707204)}
2025-02-05 18:55:55,176 - 
2025-02-05 18:55:55,176 - 执行前idx: 12, pending_stmts: {11: (1, 'COMMIT', <Thread(Thread-34, stopped 5708)>, 1738752955.0707204)}
2025-02-05 18:55:55,283 - stmt_idx: 11, status: success, result: None
2025-02-05 18:55:55,283 - 成功执行序列中事务1语句: COMMIT
2025-02-05 18:55:55,284 - 执行后idx: 12, pending_stmts: {}
2025-02-05 18:55:55,284 - 
2025-02-05 18:55:55,392 - 执行序列成功
2025-02-05 18:55:56,163 - is_atomic: True
2025-02-05 18:55:56,163 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:55:56,163 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 49.11, col_4 = 'dqwtt', col_2 = 'yAMAJ', col_1 = 'ltioO' WHERE (col_1 = 'cuwvr') AND (col_4 = 'bdkvu') AND (col_3 = 'hkvxy')"), (1, "UPDATE table_0 SET col_2 = 'zDgEO', col_3 = 'CikMu' WHERE id BETWEEN 4 AND 4"), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 11 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 55.81, 'Rtwkl', 'JZHlu', 'hXkrJ', 'hPxgK')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 82.09, 'FitCl', 'JbHce', 'hhXMI', 'hiptW')"), (1, "UPDATE table_0 SET col_3 = 'rgTrv', col_2 = 'BxlVZ' WHERE id BETWEEN 14 AND 14"), (2, 'DELETE FROM table_0 WHERE (id = 5)'), (2, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 18:55:56,163 - snapshots: {'before': {'table_0': [(1, 83.13, 'mnwhu', 'gnqbg', 'oyexc', 'qpsug'), (2, 81.24, 'fopcm', 'isqbk', 'mqesy', 'jxjxm'), (3, 40.24, 'cuwvr', 'umcxe', 'hkvxy', 'bdkvu'), (4, 18.87, 'cdlop', 'phixq', 'bdetm', 'jfbuk'), (5, 84.38, 'rkrqh', 'bzzyh', 'isglu', 'rbbod'), (6, 89.44, 'afsgw', 'fzxzl', 'kpvaz', 'whyps'), (7, 10.86, 'adkim', 'sogbm', 'upbjv', 'edfep'), (8, 69.39, 'ajsud', 'zxqni', 'pyjly', 'yciev'), (9, 6.85, 'qprsd', 'tmgxg', 'ykeqx', 'hapln'), (10, 89.99, 'shkbv', 'pqnrm', 'yspap', 'mfwug'), (11, 94.27, 'hdnzj', 'estgc', 'zqbth', 'lscsb'), (12, 75.68, 'wjilf', 'gupix', 'uiynd', 'wgbtw'), (13, 92.42, 'vqwqk', 'cnfbr', 'gmscs', 'jkkyj'), (14, 13.78, 'vylis', 'mjecz', 'ukedo', 'koomt')]}, 'trx1': {'table_0': [(1, 83.13, 'mnwhu', 'gnqbg', 'oyexc', 'qpsug'), (2, 81.24, 'fopcm', 'isqbk', 'mqesy', 'jxjxm'), (3, 49.11, 'ltioO', 'yAMAJ', 'hkvxy', 'dqwtt'), (4, 18.87, 'cdlop', 'zDgEO', 'CikMu', 'jfbuk'), (5, 84.38, 'rkrqh', 'bzzyh', 'isglu', 'rbbod'), (6, 89.44, 'afsgw', 'fzxzl', 'kpvaz', 'whyps'), (7, 10.86, 'adkim', 'sogbm', 'upbjv', 'edfep'), (8, 69.39, 'ajsud', 'zxqni', 'pyjly', 'yciev'), (9, 6.85, 'qprsd', 'tmgxg', 'ykeqx', 'hapln'), (10, 89.99, 'shkbv', 'pqnrm', 'yspap', 'mfwug'), (11, 94.27, 'hdnzj', 'estgc', 'zqbth', 'lscsb'), (12, 75.68, 'wjilf', 'gupix', 'uiynd', 'wgbtw'), (13, 92.42, 'vqwqk', 'cnfbr', 'gmscs', 'jkkyj'), (14, 13.78, 'vylis', 'BxlVZ', 'rgTrv', 'koomt'), (15, 55.81, 'Rtwkl', 'JZHlu', 'hXkrJ', 'hPxgK'), (16, 82.09, 'FitCl', 'JbHce', 'hhXMI', 'hiptW')]}, 'trx2': {'table_0': [(1, 83.13, 'mnwhu', 'gnqbg', 'oyexc', 'qpsug'), (2, 81.24, 'fopcm', 'isqbk', 'mqesy', 'jxjxm'), (3, 40.24, 'cuwvr', 'umcxe', 'hkvxy', 'bdkvu'), (4, 18.87, 'cdlop', 'phixq', 'bdetm', 'jfbuk'), (6, 89.44, 'afsgw', 'fzxzl', 'kpvaz', 'whyps'), (7, 10.86, 'adkim', 'sogbm', 'upbjv', 'edfep'), (8, 69.39, 'ajsud', 'zxqni', 'pyjly', 'yciev'), (9, 6.85, 'qprsd', 'tmgxg', 'ykeqx', 'hapln'), (10, 89.99, 'shkbv', 'pqnrm', 'yspap', 'mfwug'), (11, 94.27, 'hdnzj', 'estgc', 'zqbth', 'lscsb'), (12, 75.68, 'wjilf', 'gupix', 'uiynd', 'wgbtw'), (13, 92.42, 'vqwqk', 'cnfbr', 'gmscs', 'jkkyj'), (14, 13.78, 'vylis', 'mjecz', 'ukedo', 'koomt')]}, 'serial': {'table_0': [(1, 83.13, 'mnwhu', 'gnqbg', 'oyexc', 'qpsug'), (2, 81.24, 'fopcm', 'isqbk', 'mqesy', 'jxjxm'), (3, 49.11, 'ltioO', 'yAMAJ', 'hkvxy', 'dqwtt'), (4, 18.87, 'cdlop', 'zDgEO', 'CikMu', 'jfbuk'), (6, 89.44, 'afsgw', 'fzxzl', 'kpvaz', 'whyps'), (7, 10.86, 'adkim', 'sogbm', 'upbjv', 'edfep'), (8, 69.39, 'ajsud', 'zxqni', 'pyjly', 'yciev'), (9, 6.85, 'qprsd', 'tmgxg', 'ykeqx', 'hapln'), (10, 89.99, 'shkbv', 'pqnrm', 'yspap', 'mfwug'), (11, 94.27, 'hdnzj', 'estgc', 'zqbth', 'lscsb'), (12, 75.68, 'wjilf', 'gupix', 'uiynd', 'wgbtw'), (13, 92.42, 'vqwqk', 'cnfbr', 'gmscs', 'jkkyj'), (14, 13.78, 'vylis', 'BxlVZ', 'rgTrv', 'koomt'), (17, 55.81, 'Rtwkl', 'JZHlu', 'hXkrJ', 'hPxgK'), (18, 82.09, 'FitCl', 'JbHce', 'hhXMI', 'hiptW')]}}
2025-02-05 18:55:56,163 - 
2025-02-05 18:55:56,176 - iter: 5
2025-02-05 18:55:57,669 - table table_0 has 10 rows
2025-02-05 18:55:57,669 - trx1_lock_row_ids: [6, 7, 8, 9]
2025-02-05 18:55:57,669 - trx2_lock_row_ids: [3, 4, 5, 6, 7, 8, 9]
2025-02-05 18:55:57,669 - intersection_row_ids: [6, 7, 8, 9]
2025-02-05 18:55:57,669 - trx1_exclusive_ids: []
2025-02-05 18:55:57,669 - trx2_exclusive_ids: [3, 4, 5]
2025-02-05 18:55:57,669 - res_dict: {'trx1_lock_row_ids': [6, 7, 8, 9], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8, 9], 'intersection_row_ids': [6, 7, 8, 9]}
2025-02-05 18:55:57,669 - lock_same_resource: True
2025-02-05 18:55:57,669 - 
2025-02-05 18:55:57,670 - intersection phase1
2025-02-05 18:55:57,673 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=6, is_continuous=True, range_end_idx=9
2025-02-05 18:55:57,674 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:55:57,674 - params: {'set_expr': "col_4 = 17.83, col_2 = 'jdRbB', col_3 = 40.16", 'v1': '6', 'v2': '9', 'table': 'table_0'}
2025-02-05 18:55:57,676 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,679 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:55:57,679 - params: {'cond': '(id = 6)', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:55:57,683 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,685 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:55:57,685 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0'}
2025-02-05 18:55:57,687 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,689 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:55:57,689 - params: {'cond': '(id = 8)', 'select_cols': 'id, col_4', 'table': 'table_0'}
2025-02-05 18:55:57,692 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,693 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:55:57,694 - params: {'cond': '(id = 9)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:55:57,694 - intersection phase1 end
2025-02-05 18:55:57,694 - 
2025-02-05 18:55:57,694 - intersection phase2
2025-02-05 18:55:57,694 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:55:57,694 - 事务2在第二阶段自己加的锁: II
2025-02-05 18:55:57,694 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:55:57,694 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:55:57,698 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,700 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:55:57,701 - params: {'set_expr': 'col_1 = 33.6, col_3 = 59.48, col_4 = 23.63', 'v1': '3', 'v2': '3', 'table': 'table_0'}
2025-02-05 18:55:57,704 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,705 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:55:57,705 - params: {'vals': "NULL, 7.74, 65.15, 'erUJn', 10.46, 2.98", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:55:57,709 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,710 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:55:57,710 - params: {'set_expr': 'col_3 = 47.2, col_0 = 23.14', 'cond': '(id = 5)', 'table': 'table_0'}
2025-02-05 18:55:57,711 - intersection phase2 end
2025-02-05 18:55:57,711 - 
2025-02-05 18:55:57,711 - intersection phase3
2025-02-05 18:55:57,714 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,715 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:55:57,715 - params: {'set_expr': 'col_1 = 63.8', 'cond': '(id = 5)', 'table': 'table_0'}
2025-02-05 18:55:57,718 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:55:57,719 - needed_params: {'cond', 'table'}
2025-02-05 18:55:57,720 - params: {'cond': '(id = 9) AND (col_1 = 81.85) AND (col_3 = 11.04) AND (col_4 = 28.48)', 'table': 'table_0'}
2025-02-05 18:55:57,720 - intersection phase3 end
2025-02-05 18:55:57,720 - 
2025-02-05 18:55:57,720 - 生成死锁事务序列成功如下
2025-02-05 18:55:57,720 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_4 = 17.83, col_2 = 'jdRbB', col_3 = 40.16 WHERE id BETWEEN 6 AND 9"), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id, col_4 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_1 = 33.6, col_3 = 59.48, col_4 = 23.63 WHERE id BETWEEN 3 AND 3'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 7.74, 65.15, 'erUJn', 10.46, 2.98)"), (2, 'UPDATE table_0 SET col_3 = 47.2, col_0 = 23.14 WHERE (id = 5)'), (2, 'DELETE FROM table_0 WHERE (id = 9) AND (col_1 = 81.85) AND (col_3 = 11.04) AND (col_4 = 28.48)'), (1, 'UPDATE table_0 SET col_1 = 63.8 WHERE (id = 5)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:55:59,268 - 创建事务1连接成功
2025-02-05 18:55:59,270 - 执行事务1语句: BEGIN
2025-02-05 18:55:59,271 - 执行事务1语句: UPDATE table_0 SET col_4 = 17.83, col_2 = 'jdRbB', col_3 = 40.16 WHERE id BETWEEN 6 AND 9
2025-02-05 18:55:59,271 - 执行事务1语句: UPDATE table_0 SET col_1 = 63.8 WHERE (id = 5)
2025-02-05 18:55:59,274 - 执行事务1语句: COMMIT;
2025-02-05 18:55:59,278 - 执行事务1成功
2025-02-05 18:56:01,888 - 恢复初始状态成功
2025-02-05 18:56:02,663 - 创建事务2连接成功
2025-02-05 18:56:02,664 - 执行事务2语句: BEGIN
2025-02-05 18:56:02,666 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 18:56:02,666 - 执行事务2语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:02,667 - 执行事务2语句: SELECT id, col_4 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 18:56:02,668 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE
2025-02-05 18:56:02,669 - 执行事务2语句: UPDATE table_0 SET col_1 = 33.6, col_3 = 59.48, col_4 = 23.63 WHERE id BETWEEN 3 AND 3
2025-02-05 18:56:02,669 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 7.74, 65.15, 'erUJn', 10.46, 2.98)
2025-02-05 18:56:02,670 - 执行事务2语句: UPDATE table_0 SET col_3 = 47.2, col_0 = 23.14 WHERE (id = 5)
2025-02-05 18:56:02,670 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 9) AND (col_1 = 81.85) AND (col_3 = 11.04) AND (col_4 = 28.48)
2025-02-05 18:56:02,673 - 执行事务2语句: COMMIT;
2025-02-05 18:56:02,677 - 执行事务2成功
2025-02-05 18:56:07,577 - 
2025-02-05 18:56:07,577 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_4 = 17.83, col_2 = 'jdRbB', col_3 = 40.16 WHERE id BETWEEN 6 AND 9", <Thread(Thread-35, started 38468)>, 1738752967.5770721)}
2025-02-05 18:56:07,678 - stmt_idx: 2, status: success, result: None
2025-02-05 18:56:07,678 - 成功执行序列中事务1语句: UPDATE table_0 SET col_4 = 17.83, col_2 = 'jdRbB', col_3 = 40.16 WHERE id BETWEEN 6 AND 9
2025-02-05 18:56:07,678 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:56:07,678 - 
2025-02-05 18:56:07,787 - 
2025-02-05 18:56:07,788 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-36, started 9288)>, 1738752967.7871103)}
2025-02-05 18:56:07,894 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 18:56:07,894 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-36, started 9288)>, 1738752967.7871103)}
2025-02-05 18:56:07,894 - 
2025-02-05 18:56:08,001 - 
2025-02-05 18:56:08,001 - 执行前idx: 12, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-36, started 9288)>, 1738752967.7871103), 11: (1, 'UPDATE table_0 SET col_1 = 63.8 WHERE (id = 5)', <Thread(Thread-37, started 31996)>, 1738752968.0019264)}
2025-02-05 18:56:08,106 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 18:56:08,214 - stmt_idx: 11, status: success, result: None
2025-02-05 18:56:08,214 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 63.8 WHERE (id = 5)
2025-02-05 18:56:08,214 - 执行后idx: 12, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-36, started 9288)>, 1738752967.7871103)}
2025-02-05 18:56:08,214 - 
2025-02-05 18:56:08,324 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-36, started 9288)>, 1738752967.7871103)}
2025-02-05 18:56:08,324 - 
2025-02-05 18:56:08,325 - 执行前idx: 14, pending_stmts: {3: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-36, stopped 9288)>, 1738752967.7871103)}
2025-02-05 18:56:08,427 - stmt_idx: 3, status: success, result: None
2025-02-05 18:56:08,427 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 18:56:08,427 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 18:56:08,430 - 执行后idx: 14, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-38, started 44184)>, 1738752968.428589), 5: (2, 'SELECT id, col_4 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-39, started 37392)>, 1738752968.4290612), 6: (2, 'SELECT * FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE', <Thread(Thread-40, started 31368)>, 1738752968.4290612), 7: (2, 'UPDATE table_0 SET col_1 = 33.6, col_3 = 59.48, col_4 = 23.63 WHERE id BETWEEN 3 AND 3', <Thread(Thread-41, started 37456)>, 1738752968.4290612), 8: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 7.74, 65.15, 'erUJn', 10.46, 2.98)", <Thread(Thread-42, started 42812)>, 1738752968.4295666), 9: (2, 'UPDATE table_0 SET col_3 = 47.2, col_0 = 23.14 WHERE (id = 5)', <Thread(Thread-43, started 6356)>, 1738752968.4298148), 10: (2, 'DELETE FROM table_0 WHERE (id = 9) AND (col_1 = 81.85) AND (col_3 = 11.04) AND (col_4 = 28.48)', <Thread(Thread-44, started 27072)>, 1738752968.4298148), 13: (2, 'COMMIT', <Thread(Thread-45, started 34268)>, 1738752968.4303195)}
2025-02-05 18:56:08,430 - 
2025-02-05 18:56:08,535 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-38, stopped 44184)>, 1738752968.428589), 5: (2, 'SELECT id, col_4 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-39, stopped 37392)>, 1738752968.4290612), 6: (2, 'SELECT * FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE', <Thread(Thread-40, stopped 31368)>, 1738752968.4290612), 7: (2, 'UPDATE table_0 SET col_1 = 33.6, col_3 = 59.48, col_4 = 23.63 WHERE id BETWEEN 3 AND 3', <Thread(Thread-41, stopped 37456)>, 1738752968.4290612), 8: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 7.74, 65.15, 'erUJn', 10.46, 2.98)", <Thread(Thread-42, stopped 42812)>, 1738752968.4295666), 9: (2, 'UPDATE table_0 SET col_3 = 47.2, col_0 = 23.14 WHERE (id = 5)', <Thread(Thread-43, stopped 6356)>, 1738752968.4298148), 10: (2, 'DELETE FROM table_0 WHERE (id = 9) AND (col_1 = 81.85) AND (col_3 = 11.04) AND (col_4 = 28.48)', <Thread(Thread-44, stopped 27072)>, 1738752968.4298148), 13: (2, 'COMMIT', <Thread(Thread-45, stopped 34268)>, 1738752968.4303195)}
2025-02-05 18:56:08,535 - 
2025-02-05 18:56:08,535 - 执行前idx: 14, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-38, stopped 44184)>, 1738752968.428589), 5: (2, 'SELECT id, col_4 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-39, stopped 37392)>, 1738752968.4290612), 6: (2, 'SELECT * FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE', <Thread(Thread-40, stopped 31368)>, 1738752968.4290612), 7: (2, 'UPDATE table_0 SET col_1 = 33.6, col_3 = 59.48, col_4 = 23.63 WHERE id BETWEEN 3 AND 3', <Thread(Thread-41, stopped 37456)>, 1738752968.4290612), 8: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 7.74, 65.15, 'erUJn', 10.46, 2.98)", <Thread(Thread-42, stopped 42812)>, 1738752968.4295666), 9: (2, 'UPDATE table_0 SET col_3 = 47.2, col_0 = 23.14 WHERE (id = 5)', <Thread(Thread-43, stopped 6356)>, 1738752968.4298148), 10: (2, 'DELETE FROM table_0 WHERE (id = 9) AND (col_1 = 81.85) AND (col_3 = 11.04) AND (col_4 = 28.48)', <Thread(Thread-44, stopped 27072)>, 1738752968.4298148), 13: (2, 'COMMIT', <Thread(Thread-45, stopped 34268)>, 1738752968.4303195)}
2025-02-05 18:56:08,641 - stmt_idx: 4, status: success, result: None
2025-02-05 18:56:08,641 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:08,747 - stmt_idx: 5, status: success, result: None
2025-02-05 18:56:08,747 - 成功执行序列中事务2语句: SELECT id, col_4 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 18:56:08,854 - stmt_idx: 6, status: success, result: None
2025-02-05 18:56:08,854 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE
2025-02-05 18:56:08,962 - stmt_idx: 7, status: success, result: None
2025-02-05 18:56:08,962 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 33.6, col_3 = 59.48, col_4 = 23.63 WHERE id BETWEEN 3 AND 3
2025-02-05 18:56:09,069 - stmt_idx: 8, status: success, result: None
2025-02-05 18:56:09,069 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 7.74, 65.15, 'erUJn', 10.46, 2.98)
2025-02-05 18:56:09,176 - stmt_idx: 9, status: success, result: None
2025-02-05 18:56:09,177 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 47.2, col_0 = 23.14 WHERE (id = 5)
2025-02-05 18:56:09,285 - stmt_idx: 10, status: success, result: None
2025-02-05 18:56:09,285 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 9) AND (col_1 = 81.85) AND (col_3 = 11.04) AND (col_4 = 28.48)
2025-02-05 18:56:09,394 - stmt_idx: 13, status: success, result: None
2025-02-05 18:56:09,394 - 成功执行序列中事务2语句: COMMIT
2025-02-05 18:56:09,394 - 执行后idx: 14, pending_stmts: {}
2025-02-05 18:56:09,394 - 
2025-02-05 18:56:09,501 - 执行序列成功
2025-02-05 18:56:10,265 - is_atomic: True
2025-02-05 18:56:10,265 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:56:10,265 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_4 = 17.83, col_2 = 'jdRbB', col_3 = 40.16 WHERE id BETWEEN 6 AND 9"), (1, 'UPDATE table_0 SET col_1 = 63.8 WHERE (id = 5)'), (1, 'COMMIT'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id, col_4 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 9) LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_1 = 33.6, col_3 = 59.48, col_4 = 23.63 WHERE id BETWEEN 3 AND 3'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 7.74, 65.15, 'erUJn', 10.46, 2.98)"), (2, 'UPDATE table_0 SET col_3 = 47.2, col_0 = 23.14 WHERE (id = 5)'), (2, 'DELETE FROM table_0 WHERE (id = 9) AND (col_1 = 81.85) AND (col_3 = 11.04) AND (col_4 = 28.48)'), (2, 'COMMIT')]
2025-02-05 18:56:10,265 - snapshots: {'before': {'table_0': [(1, 46.22, 87.89, 'zbvcr', 96.81, 37.72), (2, 79.36, 65.76, 'sligv', 93.37, 64.09), (3, 71.08, 78.28, 'ylvmj', 59.1, 73.75), (4, 88.61, 27.31, 'flkko', 95.59, 47.91), (5, 79.29, 38.71, 'dhmnr', 85.88, 47.24), (6, 28.46, 89.48, 'yivog', 14.52, 77.28), (7, 92.21, 4.18, 'cjdwj', 1.06, 12.14), (8, 57.85, 82.65, 'lujki', 56.85, 86.77), (9, 97.46, 81.85, 'xphag', 11.04, 28.48), (10, 94.24, 95.56, 'uqgvr', 67.99, 63.77)]}, 'trx1': {'table_0': [(1, 46.22, 87.89, 'zbvcr', 96.81, 37.72), (2, 79.36, 65.76, 'sligv', 93.37, 64.09), (3, 71.08, 78.28, 'ylvmj', 59.1, 73.75), (4, 88.61, 27.31, 'flkko', 95.59, 47.91), (5, 79.29, 63.8, 'dhmnr', 85.88, 47.24), (6, 28.46, 89.48, 'jdRbB', 40.16, 17.83), (7, 92.21, 4.18, 'jdRbB', 40.16, 17.83), (8, 57.85, 82.65, 'jdRbB', 40.16, 17.83), (9, 97.46, 81.85, 'jdRbB', 40.16, 17.83), (10, 94.24, 95.56, 'uqgvr', 67.99, 63.77)]}, 'trx2': {'table_0': [(1, 46.22, 87.89, 'zbvcr', 96.81, 37.72), (2, 79.36, 65.76, 'sligv', 93.37, 64.09), (3, 71.08, 33.6, 'ylvmj', 59.48, 23.63), (4, 88.61, 27.31, 'flkko', 95.59, 47.91), (5, 23.14, 38.71, 'dhmnr', 47.2, 47.24), (6, 28.46, 89.48, 'yivog', 14.52, 77.28), (7, 92.21, 4.18, 'cjdwj', 1.06, 12.14), (8, 57.85, 82.65, 'lujki', 56.85, 86.77), (10, 94.24, 95.56, 'uqgvr', 67.99, 63.77), (11, 7.74, 65.15, 'erUJn', 10.46, 2.98)]}, 'serial': {'table_0': [(1, 46.22, 87.89, 'zbvcr', 96.81, 37.72), (2, 79.36, 65.76, 'sligv', 93.37, 64.09), (3, 71.08, 33.6, 'ylvmj', 59.48, 23.63), (4, 88.61, 27.31, 'flkko', 95.59, 47.91), (5, 23.14, 63.8, 'dhmnr', 47.2, 47.24), (6, 28.46, 89.48, 'jdRbB', 40.16, 17.83), (7, 92.21, 4.18, 'jdRbB', 40.16, 17.83), (8, 57.85, 82.65, 'jdRbB', 40.16, 17.83), (9, 97.46, 81.85, 'jdRbB', 40.16, 17.83), (10, 94.24, 95.56, 'uqgvr', 67.99, 63.77), (12, 7.74, 65.15, 'erUJn', 10.46, 2.98)]}}
2025-02-05 18:56:10,265 - 
2025-02-05 18:56:10,277 - iter: 6
2025-02-05 18:56:11,752 - table table_0 has 8 rows
2025-02-05 18:56:11,752 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 18:56:11,752 - trx2_lock_row_ids: [4, 6, 7, 8]
2025-02-05 18:56:11,752 - intersection_row_ids: [4, 6, 7, 8]
2025-02-05 18:56:11,752 - trx1_exclusive_ids: [1, 2, 3, 5]
2025-02-05 18:56:11,752 - trx2_exclusive_ids: []
2025-02-05 18:56:11,752 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'trx2_lock_row_ids': [4, 6, 7, 8], 'intersection_row_ids': [4, 6, 7, 8]}
2025-02-05 18:56:11,752 - lock_same_resource: True
2025-02-05 18:56:11,752 - 
2025-02-05 18:56:11,753 - intersection phase1
2025-02-05 18:56:11,755 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,756 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:56:11,756 - params: {'cond': '(col_1 = 68.16)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 18:56:11,759 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,761 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:11,761 - params: {'v1': '6', 'v2': '6', 'select_cols': 'col_1', 'table': 'table_0'}
2025-02-05 18:56:11,765 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,766 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:11,766 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 18:56:11,769 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,770 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:11,771 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 18:56:11,774 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,776 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:11,776 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 18:56:11,780 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,781 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:11,781 - params: {'v1': '6', 'v2': '6', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:11,785 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,787 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:11,787 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 18:56:11,790 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,791 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:56:11,791 - params: {'cond': '(id = 8)', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 18:56:11,791 - intersection phase1 end
2025-02-05 18:56:11,791 - 
2025-02-05 18:56:11,792 - intersection phase2
2025-02-05 18:56:11,792 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:56:11,792 - 事务2在第二阶段自己加的锁: II
2025-02-05 18:56:11,792 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 18:56:11,792 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:56:11,796 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,797 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:11,797 - params: {'v1': '1', 'v2': '1', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:11,800 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,801 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:56:11,801 - params: {'set_expr': 'col_2 = 71, col_0 = 71', 'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 18:56:11,804 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,805 - needed_params: {'cond', 'table'}
2025-02-05 18:56:11,805 - params: {'cond': '(col_1 = 74.49) AND (col_0 = 75)', 'table': 'table_0'}
2025-02-05 18:56:11,809 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,811 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:56:11,811 - params: {'cond': '(id = 5)', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 18:56:11,812 - intersection phase2 end
2025-02-05 18:56:11,812 - 
2025-02-05 18:56:11,812 - intersection phase3
2025-02-05 18:56:11,815 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:56:11,817 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:56:11,817 - params: {'set_expr': 'col_0 = 83', 'cond': '(col_1 = 28.59) AND (col_0 = 57)', 'table': 'table_0'}
2025-02-05 18:56:11,817 - intersection phase3 end
2025-02-05 18:56:11,817 - 
2025-02-05 18:56:11,817 - 生成死锁事务序列成功如下
2025-02-05 18:56:11,817 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (col_1 = 68.16) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'UPDATE table_0 SET col_2 = 71, col_0 = 71 WHERE (id = 2)'), (1, 'DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) FOR UPDATE'), (2, None), (1, 'UPDATE table_0 SET col_0 = 83 WHERE (col_1 = 28.59) AND (col_0 = 57)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:56:13,350 - 创建事务1连接成功
2025-02-05 18:56:13,352 - 执行事务1语句: BEGIN
2025-02-05 18:56:13,353 - 执行事务1语句: SELECT id FROM table_0 WHERE (col_1 = 68.16) LOCK IN SHARE MODE
2025-02-05 18:56:13,353 - 执行事务1语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:56:13,354 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:13,355 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 18:56:13,355 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:56:13,356 - 执行事务1语句: UPDATE table_0 SET col_2 = 71, col_0 = 71 WHERE (id = 2)
2025-02-05 18:56:13,357 - 执行事务1语句: DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)
2025-02-05 18:56:13,357 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 18:56:13,358 - 执行事务1语句: UPDATE table_0 SET col_0 = 83 WHERE (col_1 = 28.59) AND (col_0 = 57)
2025-02-05 18:56:13,360 - 执行事务1语句: COMMIT;
2025-02-05 18:56:13,364 - 执行事务1成功
2025-02-05 18:56:15,946 - 恢复初始状态成功
2025-02-05 18:56:16,702 - 创建事务2连接成功
2025-02-05 18:56:16,704 - 执行事务2语句: BEGIN
2025-02-05 18:56:16,705 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 18:56:16,705 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:56:16,706 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:16,707 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 18:56:16,707 - 执行事务2语句: COMMIT;
2025-02-05 18:56:16,711 - 执行事务2成功
2025-02-05 18:56:21,640 - 
2025-02-05 18:56:21,640 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-46, started 42008)>, 1738752981.6406784)}
2025-02-05 18:56:21,755 - stmt_idx: 2, status: success, result: None
2025-02-05 18:56:21,755 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 18:56:21,755 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:56:21,755 - 
2025-02-05 18:56:21,864 - 
2025-02-05 18:56:21,865 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE (col_1 = 68.16) LOCK IN SHARE MODE', <Thread(Thread-47, started 42884)>, 1738752981.864183)}
2025-02-05 18:56:21,971 - stmt_idx: 3, status: success, result: None
2025-02-05 18:56:21,971 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (col_1 = 68.16) LOCK IN SHARE MODE
2025-02-05 18:56:21,971 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:56:21,971 - 
2025-02-05 18:56:22,079 - 
2025-02-05 18:56:22,079 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-48, started 35760)>, 1738752982.0794113)}
2025-02-05 18:56:22,185 - stmt_idx: 4, status: success, result: None
2025-02-05 18:56:22,185 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:56:22,185 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:56:22,186 - 
2025-02-05 18:56:22,292 - 
2025-02-05 18:56:22,293 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-49, started 36404)>, 1738752982.2925975)}
2025-02-05 18:56:22,399 - stmt_idx: 5, status: success, result: None
2025-02-05 18:56:22,399 - 成功执行序列中事务1语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 18:56:22,399 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:56:22,399 - 
2025-02-05 18:56:22,508 - 
2025-02-05 18:56:22,509 - 执行前idx: 7, pending_stmts: {6: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-50, started 27160)>, 1738752982.508937)}
2025-02-05 18:56:22,615 - stmt_idx: 6, status: success, result: None
2025-02-05 18:56:22,615 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:22,615 - 执行后idx: 7, pending_stmts: {}
2025-02-05 18:56:22,615 - 
2025-02-05 18:56:22,724 - 
2025-02-05 18:56:22,725 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-51, started 38544)>, 1738752982.7242596)}
2025-02-05 18:56:22,831 - stmt_idx: 7, status: success, result: None
2025-02-05 18:56:22,831 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:22,831 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:56:22,831 - 
2025-02-05 18:56:22,942 - 
2025-02-05 18:56:22,942 - 执行前idx: 9, pending_stmts: {8: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-52, started 43376)>, 1738752982.9424448)}
2025-02-05 18:56:23,048 - stmt_idx: 8, status: success, result: None
2025-02-05 18:56:23,048 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 18:56:23,048 - 执行后idx: 9, pending_stmts: {}
2025-02-05 18:56:23,048 - 
2025-02-05 18:56:23,154 - 
2025-02-05 18:56:23,154 - 执行前idx: 10, pending_stmts: {9: (2, 'SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-53, started 32440)>, 1738752983.1543663)}
2025-02-05 18:56:23,260 - stmt_idx: 9, status: success, result: None
2025-02-05 18:56:23,260 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 18:56:23,260 - 执行后idx: 10, pending_stmts: {}
2025-02-05 18:56:23,260 - 
2025-02-05 18:56:23,367 - 
2025-02-05 18:56:23,368 - 执行前idx: 11, pending_stmts: {10: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-54, started 36976)>, 1738752983.3673453)}
2025-02-05 18:56:23,474 - stmt_idx: 10, status: success, result: None
2025-02-05 18:56:23,474 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:56:23,474 - 执行后idx: 11, pending_stmts: {}
2025-02-05 18:56:23,474 - 
2025-02-05 18:56:23,582 - 
2025-02-05 18:56:23,582 - 执行前idx: 12, pending_stmts: {11: (1, 'UPDATE table_0 SET col_2 = 71, col_0 = 71 WHERE (id = 2)', <Thread(Thread-55, started 41140)>, 1738752983.5822785)}
2025-02-05 18:56:23,688 - stmt_idx: 11, status: success, result: None
2025-02-05 18:56:23,688 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 71, col_0 = 71 WHERE (id = 2)
2025-02-05 18:56:23,688 - 执行后idx: 12, pending_stmts: {}
2025-02-05 18:56:23,688 - 
2025-02-05 18:56:23,795 - 
2025-02-05 18:56:23,796 - 执行前idx: 13, pending_stmts: {12: (1, 'DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)', <Thread(Thread-56, started 41768)>, 1738752983.7957957)}
2025-02-05 18:56:23,903 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)
2025-02-05 18:56:23,903 - 执行后idx: 13, pending_stmts: {12: (1, 'DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)', <Thread(Thread-56, started 41768)>, 1738752983.7957957)}
2025-02-05 18:56:23,903 - 
2025-02-05 18:56:24,009 - stmt为None, trx_id: 2, stmt: None
2025-02-05 18:56:24,011 - 序列遍历完成，开始查看剩余阻塞的语句：{12: (1, 'DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)', <Thread(Thread-56, started 41768)>, 1738752983.7957957)}
2025-02-05 18:56:24,012 - 
2025-02-05 18:56:24,012 - 执行前idx: 18, pending_stmts: {12: (1, 'DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)', <Thread(Thread-56, stopped 41768)>, 1738752983.7957957)}
2025-02-05 18:56:24,119 - stmt_idx: 12, status: success, result: None
2025-02-05 18:56:24,119 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)
2025-02-05 18:56:24,119 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)
2025-02-05 18:56:24,120 - 执行后idx: 18, pending_stmts: {13: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-57, started 29096)>, 1738752984.1206126), 15: (1, 'UPDATE table_0 SET col_0 = 83 WHERE (col_1 = 28.59) AND (col_0 = 57)', <Thread(Thread-58, started 16252)>, 1738752984.1208947), 17: (1, 'COMMIT', <Thread(Thread-59, started 12800)>, 1738752984.1208947)}
2025-02-05 18:56:24,120 - 
2025-02-05 18:56:24,226 - 序列遍历完成，开始查看剩余阻塞的语句：{13: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-57, stopped 29096)>, 1738752984.1206126), 15: (1, 'UPDATE table_0 SET col_0 = 83 WHERE (col_1 = 28.59) AND (col_0 = 57)', <Thread(Thread-58, stopped 16252)>, 1738752984.1208947), 17: (1, 'COMMIT', <Thread(Thread-59, stopped 12800)>, 1738752984.1208947)}
2025-02-05 18:56:24,226 - 
2025-02-05 18:56:24,226 - 执行前idx: 18, pending_stmts: {13: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-57, stopped 29096)>, 1738752984.1206126), 15: (1, 'UPDATE table_0 SET col_0 = 83 WHERE (col_1 = 28.59) AND (col_0 = 57)', <Thread(Thread-58, stopped 16252)>, 1738752984.1208947), 17: (1, 'COMMIT', <Thread(Thread-59, stopped 12800)>, 1738752984.1208947)}
2025-02-05 18:56:24,336 - stmt_idx: 13, status: success, result: None
2025-02-05 18:56:24,336 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 18:56:24,443 - stmt_idx: 15, status: success, result: None
2025-02-05 18:56:24,443 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 83 WHERE (col_1 = 28.59) AND (col_0 = 57)
2025-02-05 18:56:24,551 - stmt_idx: 17, status: success, result: None
2025-02-05 18:56:24,551 - 成功执行序列中事务1语句: COMMIT
2025-02-05 18:56:24,551 - 执行后idx: 18, pending_stmts: {}
2025-02-05 18:56:24,551 - 
2025-02-05 18:56:24,659 - 执行序列成功
2025-02-05 18:56:25,445 - is_atomic: True
2025-02-05 18:56:25,445 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:56:25,445 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (col_1 = 68.16) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'UPDATE table_0 SET col_2 = 71, col_0 = 71 WHERE (id = 2)'), (2, 'COMMIT'), (1, 'DELETE FROM table_0 WHERE (col_1 = 74.49) AND (col_0 = 75)'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 83 WHERE (col_1 = 28.59) AND (col_0 = 57)'), (1, 'COMMIT')]
2025-02-05 18:56:25,445 - snapshots: {'before': {'table_0': [(1, 37, 86.45, 89), (2, 76, 52.11, 19), (3, 75, 74.49, 78), (4, 51, 68.16, 30), (5, 40, 36.15, 49), (6, 45, 72.76, 7), (7, 57, 28.59, 44), (8, 74, 74.39, 26)]}, 'trx1': {'table_0': [(1, 37, 86.45, 89), (2, 71, 52.11, 71), (3, 75, 74.49, 78), (4, 51, 68.16, 30), (5, 40, 36.15, 49), (6, 45, 72.76, 7), (7, 57, 28.59, 44), (8, 74, 74.39, 26)]}, 'trx2': {'table_0': [(1, 37, 86.45, 89), (2, 76, 52.11, 19), (3, 75, 74.49, 78), (4, 51, 68.16, 30), (5, 40, 36.15, 49), (6, 45, 72.76, 7), (7, 57, 28.59, 44), (8, 74, 74.39, 26)]}, 'serial': {'table_0': [(1, 37, 86.45, 89), (2, 71, 52.11, 71), (3, 75, 74.49, 78), (4, 51, 68.16, 30), (5, 40, 36.15, 49), (6, 45, 72.76, 7), (7, 57, 28.59, 44), (8, 74, 74.39, 26)]}}
2025-02-05 18:56:25,445 - 
2025-02-05 18:56:25,458 - iter: 7
2025-02-05 18:56:26,973 - table table_0 has 7 rows
2025-02-05 18:56:26,974 - trx1_start_id: 2
2025-02-05 18:56:26,974 - trx1_end_id: 2
2025-02-05 18:56:26,974 - trx1_exclusive_start_id: 2
2025-02-05 18:56:26,974 - trx1_exclusive_end_id: 1
2025-02-05 18:56:26,974 - trx1_exclusive_ids: []
2025-02-05 18:56:26,974 - trx2_start_id: 2
2025-02-05 18:56:26,974 - trx2_end_id: 6
2025-02-05 18:56:26,974 - trx2_exclusive_start_id: 3
2025-02-05 18:56:26,974 - trx2_exclusive_end_id: 6
2025-02-05 18:56:26,974 - trx2_exclusive_ids: [3, 4, 5, 6]
2025-02-05 18:56:26,974 - intersection_ids: [2]
2025-02-05 18:56:26,974 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [2, 3, 4, 5, 6], 'intersection_row_ids': [2]}
2025-02-05 18:56:26,974 - lock_same_resource: True
2025-02-05 18:56:26,974 - 
2025-02-05 18:56:26,974 - intersection phase1
2025-02-05 18:56:26,977 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:56:26,979 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:26,979 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id, col_0, col_3', 'table': 'table_0'}
2025-02-05 18:56:26,982 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 18:56:26,984 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:26,984 - params: {'v1': '2', 'v2': '6', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 18:56:26,984 - intersection phase1 end
2025-02-05 18:56:26,984 - 
2025-02-05 18:56:26,984 - intersection phase2
2025-02-05 18:56:26,985 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:56:26,985 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:56:26,985 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 18:56:26,985 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 18:56:26,988 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=1
2025-02-05 18:56:26,989 - 生成连续锁定SQL失败: 找不到从2到1的行
2025-02-05 18:56:26,989 - 生成锁SQL失败: 找不到从2到1的行
2025-02-05 18:56:26,989 - 生成死锁事务序列失败: 找不到从2到1的行
2025-02-05 18:56:26,989 - 
2025-02-05 18:56:26,989 - Error in iteration 7: 找不到从2到1的行
2025-02-05 18:56:26,990 - 
2025-02-05 18:56:26,997 - iter: 8
2025-02-05 18:56:28,494 - table table_0 has 8 rows
2025-02-05 18:56:28,494 - trx1_lock_row_ids: [1, 2, 3]
2025-02-05 18:56:28,494 - trx2_lock_row_ids: [1, 3, 4, 6, 7, 8]
2025-02-05 18:56:28,495 - intersection_row_ids: [1, 3]
2025-02-05 18:56:28,495 - trx1_exclusive_ids: [2]
2025-02-05 18:56:28,495 - trx2_exclusive_ids: [4, 6, 7, 8]
2025-02-05 18:56:28,495 - res_dict: {'trx1_lock_row_ids': [1, 2, 3], 'trx2_lock_row_ids': [1, 3, 4, 6, 7, 8], 'intersection_row_ids': [1, 3]}
2025-02-05 18:56:28,495 - lock_same_resource: True
2025-02-05 18:56:28,495 - 
2025-02-05 18:56:28,495 - intersection phase1
2025-02-05 18:56:28,498 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,499 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:56:28,499 - params: {'set_expr': 'col_3 = 48', 'v1': '1', 'v2': '1', 'table': 'table_0'}
2025-02-05 18:56:28,502 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,504 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:56:28,504 - params: {'set_expr': 'col_3 = 19, col_2 = 12.07, col_1 = 44.44', 'v1': '3', 'v2': '3', 'table': 'table_0'}
2025-02-05 18:56:28,506 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,507 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:28,507 - params: {'v1': '1', 'v2': '1', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:28,510 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,511 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:56:28,511 - params: {'cond': '(id = 3) AND (col_1 = 82.91) AND (col_2 = 31.29) AND (col_3 = 30)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:28,512 - intersection phase1 end
2025-02-05 18:56:28,512 - 
2025-02-05 18:56:28,512 - intersection phase2
2025-02-05 18:56:28,512 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:56:28,512 - 事务2在第二阶段自己加的锁: X
2025-02-05 18:56:28,512 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:56:28,512 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 18:56:28,516 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,517 - needed_params: {'cond', 'table'}
2025-02-05 18:56:28,517 - params: {'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 18:56:28,521 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,522 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:28,523 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 18:56:28,526 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,528 - needed_params: {'cond', 'table'}
2025-02-05 18:56:28,528 - params: {'cond': '(id = 6)', 'table': 'table_0'}
2025-02-05 18:56:28,532 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,533 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:28,533 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 18:56:28,537 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,539 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:28,539 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 18:56:28,539 - intersection phase2 end
2025-02-05 18:56:28,539 - 
2025-02-05 18:56:28,539 - intersection phase3
2025-02-05 18:56:28,542 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:56:28,544 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:56:28,544 - params: {'set_expr': 'col_3 = 85, col_2 = 64.85, col_1 = 59.7', 'cond': '(id = 4)', 'table': 'table_0'}
2025-02-05 18:56:28,544 - intersection phase3 end
2025-02-05 18:56:28,544 - 
2025-02-05 18:56:28,544 - 生成死锁事务序列成功如下
2025-02-05 18:56:28,544 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1'), (2, 'SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 82.91) AND (col_2 = 31.29) AND (col_3 = 30) LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_3 = 19, col_2 = 12.07, col_1 = 44.44 WHERE id BETWEEN 3 AND 3'), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 6)'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, 'UPDATE table_0 SET col_3 = 85, col_2 = 64.85, col_1 = 59.7 WHERE (id = 4)'), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:56:30,092 - 创建事务1连接成功
2025-02-05 18:56:30,094 - 执行事务1语句: BEGIN
2025-02-05 18:56:30,095 - 执行事务1语句: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:30,095 - 执行事务1语句: UPDATE table_0 SET col_3 = 19, col_2 = 12.07, col_1 = 44.44 WHERE id BETWEEN 3 AND 3
2025-02-05 18:56:30,096 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 18:56:30,096 - 执行事务1语句: UPDATE table_0 SET col_3 = 85, col_2 = 64.85, col_1 = 59.7 WHERE (id = 4)
2025-02-05 18:56:30,098 - 执行事务1语句: COMMIT;
2025-02-05 18:56:30,102 - 执行事务1成功
2025-02-05 18:56:32,672 - 恢复初始状态成功
2025-02-05 18:56:33,419 - 创建事务2连接成功
2025-02-05 18:56:33,420 - 执行事务2语句: BEGIN
2025-02-05 18:56:33,421 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 18:56:33,422 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 82.91) AND (col_2 = 31.29) AND (col_3 = 30) LOCK IN SHARE MODE
2025-02-05 18:56:33,423 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 18:56:33,424 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 6)
2025-02-05 18:56:33,424 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:56:33,425 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 18:56:33,427 - 执行事务2语句: COMMIT;
2025-02-05 18:56:33,431 - 执行事务2成功
2025-02-05 18:56:38,292 - 
2025-02-05 18:56:38,292 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-60, started 4244)>, 1738752998.2923524)}
2025-02-05 18:56:38,402 - stmt_idx: 2, status: success, result: None
2025-02-05 18:56:38,402 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 18:56:38,402 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:56:38,402 - 
2025-02-05 18:56:38,510 - 
2025-02-05 18:56:38,511 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999)}
2025-02-05 18:56:38,617 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:38,618 - 执行后idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999)}
2025-02-05 18:56:38,618 - 
2025-02-05 18:56:38,723 - 
2025-02-05 18:56:38,724 - 执行前idx: 5, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999), 4: (2, 'SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 82.91) AND (col_2 = 31.29) AND (col_3 = 30) LOCK IN SHARE MODE', <Thread(Thread-62, started 11948)>, 1738752998.7234051)}
2025-02-05 18:56:38,831 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:38,940 - stmt_idx: 4, status: success, result: None
2025-02-05 18:56:38,940 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 82.91) AND (col_2 = 31.29) AND (col_3 = 30) LOCK IN SHARE MODE
2025-02-05 18:56:38,940 - 执行后idx: 5, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999)}
2025-02-05 18:56:38,940 - 
2025-02-05 18:56:39,051 - 
2025-02-05 18:56:39,052 - 执行前idx: 8, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999), 7: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-63, started 22460)>, 1738752999.0518138)}
2025-02-05 18:56:39,158 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:39,266 - stmt_idx: 7, status: success, result: None
2025-02-05 18:56:39,266 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 18:56:39,266 - 执行后idx: 8, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999)}
2025-02-05 18:56:39,266 - 
2025-02-05 18:56:39,374 - 
2025-02-05 18:56:39,375 - 执行前idx: 9, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999), 8: (2, 'DELETE FROM table_0 WHERE (id = 6)', <Thread(Thread-64, started 43520)>, 1738752999.3741517)}
2025-02-05 18:56:39,481 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:39,589 - stmt_idx: 8, status: success, result: None
2025-02-05 18:56:39,589 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 6)
2025-02-05 18:56:39,589 - 执行后idx: 9, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999)}
2025-02-05 18:56:39,589 - 
2025-02-05 18:56:39,698 - 
2025-02-05 18:56:39,699 - 执行前idx: 10, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999), 9: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-65, started 22004)>, 1738752999.6979208)}
2025-02-05 18:56:39,805 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:39,913 - stmt_idx: 9, status: success, result: None
2025-02-05 18:56:39,913 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:56:39,913 - 执行后idx: 10, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999)}
2025-02-05 18:56:39,913 - 
2025-02-05 18:56:40,022 - 
2025-02-05 18:56:40,023 - 执行前idx: 11, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999), 10: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-66, started 44468)>, 1738753000.022544)}
2025-02-05 18:56:40,129 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:40,237 - stmt_idx: 10, status: success, result: None
2025-02-05 18:56:40,237 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 18:56:40,237 - 执行后idx: 11, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999)}
2025-02-05 18:56:40,237 - 
2025-02-05 18:56:40,346 - stmt为None, trx_id: 2, stmt: None
2025-02-05 18:56:40,350 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, started 43752)>, 1738752998.510999)}
2025-02-05 18:56:40,351 - 
2025-02-05 18:56:40,351 - 执行前idx: 15, pending_stmts: {3: (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1', <Thread(Thread-61, stopped 43752)>, 1738752998.510999)}
2025-02-05 18:56:40,457 - stmt_idx: 3, status: success, result: None
2025-02-05 18:56:40,457 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:40,457 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1
2025-02-05 18:56:40,459 - 执行后idx: 15, pending_stmts: {5: (1, 'UPDATE table_0 SET col_3 = 19, col_2 = 12.07, col_1 = 44.44 WHERE id BETWEEN 3 AND 3', <Thread(Thread-67, started 44472)>, 1738753000.458313), 6: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-68, started 41180)>, 1738753000.458313), 11: (1, 'UPDATE table_0 SET col_3 = 85, col_2 = 64.85, col_1 = 59.7 WHERE (id = 4)', <Thread(Thread-69, started 42284)>, 1738753000.4588103), 14: (1, 'COMMIT', <Thread(Thread-70, started 44848)>, 1738753000.459328)}
2025-02-05 18:56:40,459 - 
2025-02-05 18:56:40,565 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'UPDATE table_0 SET col_3 = 19, col_2 = 12.07, col_1 = 44.44 WHERE id BETWEEN 3 AND 3', <Thread(Thread-67, stopped 44472)>, 1738753000.458313), 6: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-68, stopped 41180)>, 1738753000.458313), 11: (1, 'UPDATE table_0 SET col_3 = 85, col_2 = 64.85, col_1 = 59.7 WHERE (id = 4)', <Thread(Thread-69, stopped 42284)>, 1738753000.4588103), 14: (1, 'COMMIT', <Thread(Thread-70, stopped 44848)>, 1738753000.459328)}
2025-02-05 18:56:40,565 - 
2025-02-05 18:56:40,565 - 执行前idx: 15, pending_stmts: {5: (1, 'UPDATE table_0 SET col_3 = 19, col_2 = 12.07, col_1 = 44.44 WHERE id BETWEEN 3 AND 3', <Thread(Thread-67, stopped 44472)>, 1738753000.458313), 6: (1, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-68, stopped 41180)>, 1738753000.458313), 11: (1, 'UPDATE table_0 SET col_3 = 85, col_2 = 64.85, col_1 = 59.7 WHERE (id = 4)', <Thread(Thread-69, stopped 42284)>, 1738753000.4588103), 14: (1, 'COMMIT', <Thread(Thread-70, stopped 44848)>, 1738753000.459328)}
2025-02-05 18:56:40,674 - stmt_idx: 5, status: success, result: None
2025-02-05 18:56:40,674 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 19, col_2 = 12.07, col_1 = 44.44 WHERE id BETWEEN 3 AND 3
2025-02-05 18:56:40,784 - stmt_idx: 6, status: success, result: None
2025-02-05 18:56:40,784 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 18:56:40,894 - stmt_idx: 11, status: success, result: None
2025-02-05 18:56:40,894 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 85, col_2 = 64.85, col_1 = 59.7 WHERE (id = 4)
2025-02-05 18:56:41,003 - stmt_idx: 14, status: success, result: None
2025-02-05 18:56:41,003 - 成功执行序列中事务1语句: COMMIT
2025-02-05 18:56:41,003 - 执行后idx: 15, pending_stmts: {}
2025-02-05 18:56:41,003 - 
2025-02-05 18:56:41,112 - 执行序列成功
2025-02-05 18:56:41,884 - is_atomic: True
2025-02-05 18:56:41,884 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:56:41,884 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 82.91) AND (col_2 = 31.29) AND (col_3 = 30) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 6)'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'COMMIT'), (1, 'UPDATE table_0 SET col_3 = 48 WHERE id BETWEEN 1 AND 1'), (1, 'UPDATE table_0 SET col_3 = 19, col_2 = 12.07, col_1 = 44.44 WHERE id BETWEEN 3 AND 3'), (1, 'DELETE FROM table_0 WHERE (id = 2)'), (1, 'UPDATE table_0 SET col_3 = 85, col_2 = 64.85, col_1 = 59.7 WHERE (id = 4)'), (1, 'COMMIT')]
2025-02-05 18:56:41,884 - snapshots: {'before': {'table_0': [(1, 69.77, 70.97, 83), (2, 62.25, 1.73, 96), (3, 82.91, 31.29, 30), (4, 61.61, 79.01, 18), (5, 41.52, 59.33, 14), (6, 99.32, 37.07, 86), (7, 33.98, 9.84, 65), (8, 72.32, 17.46, 59)]}, 'trx1': {'table_0': [(1, 69.77, 70.97, 48), (3, 44.44, 12.07, 19), (4, 59.7, 64.85, 85), (5, 41.52, 59.33, 14), (6, 99.32, 37.07, 86), (7, 33.98, 9.84, 65), (8, 72.32, 17.46, 59)]}, 'trx2': {'table_0': [(1, 69.77, 70.97, 83), (2, 62.25, 1.73, 96), (3, 82.91, 31.29, 30), (4, 61.61, 79.01, 18), (5, 41.52, 59.33, 14), (7, 33.98, 9.84, 65), (8, 72.32, 17.46, 59)]}, 'serial': {'table_0': [(1, 69.77, 70.97, 48), (3, 44.44, 12.07, 19), (4, 59.7, 64.85, 85), (5, 41.52, 59.33, 14), (7, 33.98, 9.84, 65), (8, 72.32, 17.46, 59)]}}
2025-02-05 18:56:41,884 - 
2025-02-05 18:56:41,898 - iter: 9
2025-02-05 18:56:43,389 - table table_0 has 7 rows
2025-02-05 18:56:43,389 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [7], 'intersection_row_ids': []}
2025-02-05 18:56:43,389 - lock_same_resource: False
2025-02-05 18:56:43,389 - 
2025-02-05 18:56:43,389 - non intersection phase1
2025-02-05 18:56:43,390 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:56:43,390 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:56:43,390 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 18:56:43,390 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 18:56:43,393 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 18:56:43,394 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:43,394 - params: {'v1': '1', 'v2': '2', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:43,397 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 18:56:43,398 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:43,398 - params: {'v1': '7', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:43,398 - non intersection phase1 end
2025-02-05 18:56:43,399 - 
2025-02-05 18:56:43,399 - non intersection phase2
2025-02-05 18:56:43,403 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 18:56:43,404 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:43,404 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 18:56:43,406 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=2
2025-02-05 18:56:43,408 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:43,408 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:56:43,409 - non intersection phase2 end
2025-02-05 18:56:43,409 - 
2025-02-05 18:56:43,409 - 生成死锁事务序列成功如下
2025-02-05 18:56:43,409 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:56:44,941 - 创建事务1连接成功
2025-02-05 18:56:44,942 - 执行事务1语句: BEGIN
2025-02-05 18:56:44,943 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 18:56:44,944 - 执行事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:44,945 - 执行事务1语句: COMMIT;
2025-02-05 18:56:44,949 - 执行事务1成功
2025-02-05 18:56:47,530 - 恢复初始状态成功
2025-02-05 18:56:48,275 - 创建事务2连接成功
2025-02-05 18:56:48,277 - 执行事务2语句: BEGIN
2025-02-05 18:56:48,277 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:56:48,278 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 18:56:48,279 - 执行事务2语句: COMMIT;
2025-02-05 18:56:48,283 - 执行事务2成功
2025-02-05 18:56:53,132 - 
2025-02-05 18:56:53,132 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-71, started 35532)>, 1738753013.1329865)}
2025-02-05 18:56:53,249 - stmt_idx: 2, status: success, result: None
2025-02-05 18:56:53,249 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 18:56:53,249 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:56:53,249 - 
2025-02-05 18:56:53,356 - 
2025-02-05 18:56:53,357 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-72, started 18252)>, 1738753013.3566658)}
2025-02-05 18:56:53,463 - stmt_idx: 3, status: success, result: None
2025-02-05 18:56:53,463 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:56:53,463 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:56:53,463 - 
2025-02-05 18:56:53,570 - 
2025-02-05 18:56:53,571 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-73, started 17424)>, 1738753013.5707197)}
2025-02-05 18:56:53,676 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 18:56:53,676 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-73, started 17424)>, 1738753013.5707197)}
2025-02-05 18:56:53,676 - 
2025-02-05 18:56:53,781 - 
2025-02-05 18:56:53,782 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-73, started 17424)>, 1738753013.5707197), 5: (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-74, started 39840)>, 1738753013.7813022)}
2025-02-05 18:56:53,784 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:53,889 - stmt_idx: 4, status: success, result: None
2025-02-05 18:56:53,889 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 18:56:53,889 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 18:56:53,996 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:56:53,996 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 18:56:53,996 - 错误: dictionary changed size during iteration
2025-02-05 18:56:53,999 - 执行序列成功
2025-02-05 18:56:54,753 - is_atomic: True
2025-02-05 18:56:54,753 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 18:56:54,753 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 18:56:54,753 - snapshots: {'before': {'table_0': [(1, 'vqnlk', 'etnpq', 'zcekt', 'vazrd'), (2, 'yehrr', 'pyggy', 'bqkew', 'zwbyd'), (3, 'edsix', 'xtmbd', 'vajdf', 'jmcqt'), (4, 'mldlt', 'qtxsw', 'ipbtw', 'ikdda'), (5, 'worus', 'mkbba', 'gpsoc', 'ceiab'), (6, 'msqnw', 'niqfk', 'vkcqm', 'dqrhl'), (7, 'qbond', 'mhndi', 'eooww', 'auwte')]}, 'trx1': {'table_0': [(1, 'vqnlk', 'etnpq', 'zcekt', 'vazrd'), (2, 'yehrr', 'pyggy', 'bqkew', 'zwbyd'), (3, 'edsix', 'xtmbd', 'vajdf', 'jmcqt'), (4, 'mldlt', 'qtxsw', 'ipbtw', 'ikdda'), (5, 'worus', 'mkbba', 'gpsoc', 'ceiab'), (6, 'msqnw', 'niqfk', 'vkcqm', 'dqrhl'), (7, 'qbond', 'mhndi', 'eooww', 'auwte')]}, 'trx2': {'table_0': [(1, 'vqnlk', 'etnpq', 'zcekt', 'vazrd'), (2, 'yehrr', 'pyggy', 'bqkew', 'zwbyd'), (3, 'edsix', 'xtmbd', 'vajdf', 'jmcqt'), (4, 'mldlt', 'qtxsw', 'ipbtw', 'ikdda'), (5, 'worus', 'mkbba', 'gpsoc', 'ceiab'), (6, 'msqnw', 'niqfk', 'vkcqm', 'dqrhl'), (7, 'qbond', 'mhndi', 'eooww', 'auwte')]}, 'serial': {'table_0': [(1, 'vqnlk', 'etnpq', 'zcekt', 'vazrd'), (2, 'yehrr', 'pyggy', 'bqkew', 'zwbyd'), (3, 'edsix', 'xtmbd', 'vajdf', 'jmcqt'), (4, 'mldlt', 'qtxsw', 'ipbtw', 'ikdda'), (5, 'worus', 'mkbba', 'gpsoc', 'ceiab'), (6, 'msqnw', 'niqfk', 'vkcqm', 'dqrhl'), (7, 'qbond', 'mhndi', 'eooww', 'auwte')]}}
2025-02-05 18:56:54,753 - 
2025-02-05 18:56:54,767 - iter: 10
2025-02-05 18:56:56,271 - table table_0 has 13 rows
2025-02-05 18:56:56,271 - trx1_start_id: 1
2025-02-05 18:56:56,271 - trx1_end_id: 13
2025-02-05 18:56:56,271 - trx1_exclusive_start_id: 1
2025-02-05 18:56:56,271 - trx1_exclusive_end_id: 8
2025-02-05 18:56:56,271 - trx1_exclusive_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 18:56:56,271 - trx2_start_id: 9
2025-02-05 18:56:56,271 - trx2_end_id: 13
2025-02-05 18:56:56,271 - trx2_exclusive_start_id: 14
2025-02-05 18:56:56,271 - trx2_exclusive_end_id: 13
2025-02-05 18:56:56,271 - trx2_exclusive_ids: []
2025-02-05 18:56:56,271 - intersection_ids: [9, 10, 11, 12, 13]
2025-02-05 18:56:56,271 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'trx2_lock_row_ids': [9, 10, 11, 12, 13], 'intersection_row_ids': [9, 10, 11, 12, 13]}
2025-02-05 18:56:56,271 - lock_same_resource: True
2025-02-05 18:56:56,271 - 
2025-02-05 18:56:56,271 - intersection phase1
2025-02-05 18:56:56,275 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=13
2025-02-05 18:56:56,276 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:56,276 - params: {'v1': '1', 'v2': '13', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 18:56:56,279 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=9, is_continuous=True, range_end_idx=13
2025-02-05 18:56:56,280 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:56:56,280 - params: {'set_expr': "col_1 = 'PBJKZ'", 'v1': '9', 'v2': '13', 'table': 'table_0'}
2025-02-05 18:56:56,280 - intersection phase1 end
2025-02-05 18:56:56,280 - 
2025-02-05 18:56:56,280 - intersection phase2
2025-02-05 18:56:56,281 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:56:56,281 - 事务2在第二阶段自己加的锁: S
2025-02-05 18:56:56,281 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 18:56:56,281 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:56:56,284 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=8
2025-02-05 18:56:56,286 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:56,286 - params: {'v1': '1', 'v2': '8', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:56,289 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=14, is_continuous=True, range_end_idx=13
2025-02-05 18:56:56,290 - 生成连续锁定SQL失败: 找不到从14到13的行
2025-02-05 18:56:56,290 - 生成锁SQL失败: 找不到从14到13的行
2025-02-05 18:56:56,290 - 生成死锁事务序列失败: 找不到从14到13的行
2025-02-05 18:56:56,290 - 
2025-02-05 18:56:56,290 - Error in iteration 10: 找不到从14到13的行
2025-02-05 18:56:56,290 - 
2025-02-05 18:56:56,297 - iter: 11
2025-02-05 18:56:57,774 - table table_0 has 5 rows
2025-02-05 18:56:57,774 - trx1_lock_row_ids: [1, 2, 3, 4, 5]
2025-02-05 18:56:57,774 - trx2_lock_row_ids: [1, 2, 4]
2025-02-05 18:56:57,774 - intersection_row_ids: [1, 2, 4]
2025-02-05 18:56:57,774 - trx1_exclusive_ids: [3, 5]
2025-02-05 18:56:57,774 - trx2_exclusive_ids: []
2025-02-05 18:56:57,775 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [1, 2, 4], 'intersection_row_ids': [1, 2, 4]}
2025-02-05 18:56:57,775 - lock_same_resource: True
2025-02-05 18:56:57,775 - 
2025-02-05 18:56:57,775 - intersection phase1
2025-02-05 18:56:57,779 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 18:56:57,780 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:56:57,780 - params: {'set_expr': 'col_2 = 99, col_0 = 25.88', 'v1': '1', 'v2': '5', 'table': 'table_0'}
2025-02-05 18:56:57,783 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:56:57,784 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:57,784 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_2, col_3, col_787', 'table': 'table_0'}
2025-02-05 18:56:57,787 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:56:57,789 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:57,789 - params: {'v1': '2', 'v2': '2', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:57,792 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:56:57,793 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:56:57,793 - params: {'cond': '(id = 4)', 'select_cols': 'id, col_1, col_3, col_787', 'table': 'table_0'}
2025-02-05 18:56:57,794 - intersection phase1 end
2025-02-05 18:56:57,794 - 
2025-02-05 18:56:57,794 - intersection phase2
2025-02-05 18:56:57,794 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:56:57,794 - 事务2在第二阶段自己加的锁: S
2025-02-05 18:56:57,794 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:56:57,794 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:56:57,797 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:56:57,798 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:56:57,798 - params: {'cond': '(id = 3) AND (col_0 = 64.56) AND (col_787 IS NULL)', 'select_cols': 'col_1, col_3', 'table': 'table_0'}
2025-02-05 18:56:57,802 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:56:57,803 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:57,803 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:57,803 - intersection phase2 end
2025-02-05 18:56:57,803 - 
2025-02-05 18:56:57,803 - intersection phase3
2025-02-05 18:56:57,807 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:56:57,808 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:56:57,809 - params: {'cond': '(id = 4)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:56:57,811 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=4
2025-02-05 18:56:57,812 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:56:57,812 - params: {'v1': '3', 'v2': '4', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 18:56:57,815 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:56:57,817 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:56:57,817 - params: {'cond': "(col_1 = 77.16) AND (col_3 = 'chpvy') AND (col_0 = 94.86)", 'select_cols': 'col_3, col_787', 'table': 'table_0'}
2025-02-05 18:56:57,817 - intersection phase3 end
2025-02-05 18:56:57,817 - 
2025-02-05 18:56:57,817 - 生成死锁事务序列成功如下
2025-02-05 18:56:57,817 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_2, col_3, col_787 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_3, col_787 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5'), (1, 'SELECT col_1, col_3 FROM table_0 WHERE (id = 3) AND (col_0 = 64.56) AND (col_787 IS NULL) FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE'), (2, "SELECT col_3, col_787 FROM table_0 WHERE (col_1 = 77.16) AND (col_3 = 'chpvy') AND (col_0 = 94.86) FOR UPDATE"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:56:59,352 - 创建事务1连接成功
2025-02-05 18:56:59,353 - 执行事务1语句: BEGIN
2025-02-05 18:56:59,354 - 执行事务1语句: UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5
2025-02-05 18:56:59,355 - 执行事务1语句: SELECT col_1, col_3 FROM table_0 WHERE (id = 3) AND (col_0 = 64.56) AND (col_787 IS NULL) FOR UPDATE
2025-02-05 18:56:59,356 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 18:56:59,357 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE
2025-02-05 18:56:59,359 - 执行事务1语句: COMMIT;
2025-02-05 18:56:59,363 - 执行事务1成功
2025-02-05 18:57:01,968 - 恢复初始状态成功
2025-02-05 18:57:02,739 - 创建事务2连接成功
2025-02-05 18:57:02,740 - 执行事务2语句: BEGIN
2025-02-05 18:57:02,741 - 执行事务2语句: SELECT id, col_2, col_3, col_787 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 18:57:02,742 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 18:57:02,742 - 执行事务2语句: SELECT id, col_1, col_3, col_787 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 18:57:02,744 - 执行事务2语句: SELECT col_3, col_787 FROM table_0 WHERE (col_1 = 77.16) AND (col_3 = 'chpvy') AND (col_0 = 94.86) FOR UPDATE
2025-02-05 18:57:02,744 - 执行事务2语句: COMMIT;
2025-02-05 18:57:02,748 - 执行事务2成功
2025-02-05 18:57:07,588 - 
2025-02-05 18:57:07,589 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_2, col_3, col_787 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-75, started 8172)>, 1738753027.5884953)}
2025-02-05 18:57:07,699 - stmt_idx: 2, status: success, result: None
2025-02-05 18:57:07,700 - 成功执行序列中事务2语句: SELECT id, col_2, col_3, col_787 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 18:57:07,700 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:57:07,700 - 
2025-02-05 18:57:07,808 - 
2025-02-05 18:57:07,808 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-76, started 33240)>, 1738753027.8071897)}
2025-02-05 18:57:07,917 - stmt_idx: 3, status: success, result: None
2025-02-05 18:57:07,917 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 18:57:07,917 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:57:07,917 - 
2025-02-05 18:57:08,025 - 
2025-02-05 18:57:08,026 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_3, col_787 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-77, started 33488)>, 1738753028.0252404)}
2025-02-05 18:57:08,132 - stmt_idx: 4, status: success, result: None
2025-02-05 18:57:08,132 - 成功执行序列中事务2语句: SELECT id, col_1, col_3, col_787 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 18:57:08,132 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:57:08,132 - 
2025-02-05 18:57:08,241 - 
2025-02-05 18:57:08,242 - 执行前idx: 6, pending_stmts: {5: (1, 'UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5', <Thread(Thread-78, started 37884)>, 1738753028.24189)}
2025-02-05 18:57:08,351 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5
2025-02-05 18:57:08,351 - 执行后idx: 6, pending_stmts: {5: (1, 'UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5', <Thread(Thread-78, started 37884)>, 1738753028.24189)}
2025-02-05 18:57:08,351 - 
2025-02-05 18:57:08,458 - 
2025-02-05 18:57:08,459 - 执行前idx: 10, pending_stmts: {5: (1, 'UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5', <Thread(Thread-78, started 37884)>, 1738753028.24189), 9: (2, "SELECT col_3, col_787 FROM table_0 WHERE (col_1 = 77.16) AND (col_3 = 'chpvy') AND (col_0 = 94.86) FOR UPDATE", <Thread(Thread-79, started 35860)>, 1738753028.4584548)}
2025-02-05 18:57:08,568 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5
2025-02-05 18:57:08,677 - stmt_idx: 9, status: success, result: None
2025-02-05 18:57:08,677 - 成功执行序列中事务2语句: SELECT col_3, col_787 FROM table_0 WHERE (col_1 = 77.16) AND (col_3 = 'chpvy') AND (col_0 = 94.86) FOR UPDATE
2025-02-05 18:57:08,677 - 执行后idx: 10, pending_stmts: {5: (1, 'UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5', <Thread(Thread-78, started 37884)>, 1738753028.24189)}
2025-02-05 18:57:08,677 - 
2025-02-05 18:57:08,787 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5', <Thread(Thread-78, started 37884)>, 1738753028.24189)}
2025-02-05 18:57:08,788 - 
2025-02-05 18:57:08,788 - 执行前idx: 12, pending_stmts: {5: (1, 'UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5', <Thread(Thread-78, stopped 37884)>, 1738753028.24189)}
2025-02-05 18:57:08,892 - stmt_idx: 5, status: success, result: None
2025-02-05 18:57:08,892 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5
2025-02-05 18:57:08,892 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5
2025-02-05 18:57:08,894 - 执行后idx: 12, pending_stmts: {6: (1, 'SELECT col_1, col_3 FROM table_0 WHERE (id = 3) AND (col_0 = 64.56) AND (col_787 IS NULL) FOR UPDATE', <Thread(Thread-80, started 15688)>, 1738753028.8937573), 7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-81, started 34008)>, 1738753028.8937573), 8: (1, 'SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE', <Thread(Thread-82, started 43844)>, 1738753028.894282), 10: (1, 'COMMIT', <Thread(Thread-83, started 24780)>, 1738753028.894282)}
2025-02-05 18:57:08,894 - 
2025-02-05 18:57:09,000 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'SELECT col_1, col_3 FROM table_0 WHERE (id = 3) AND (col_0 = 64.56) AND (col_787 IS NULL) FOR UPDATE', <Thread(Thread-80, stopped 15688)>, 1738753028.8937573), 7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-81, stopped 34008)>, 1738753028.8937573), 8: (1, 'SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE', <Thread(Thread-82, stopped 43844)>, 1738753028.894282), 10: (1, 'COMMIT', <Thread(Thread-83, stopped 24780)>, 1738753028.894282)}
2025-02-05 18:57:09,000 - 
2025-02-05 18:57:09,000 - 执行前idx: 12, pending_stmts: {6: (1, 'SELECT col_1, col_3 FROM table_0 WHERE (id = 3) AND (col_0 = 64.56) AND (col_787 IS NULL) FOR UPDATE', <Thread(Thread-80, stopped 15688)>, 1738753028.8937573), 7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-81, stopped 34008)>, 1738753028.8937573), 8: (1, 'SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE', <Thread(Thread-82, stopped 43844)>, 1738753028.894282), 10: (1, 'COMMIT', <Thread(Thread-83, stopped 24780)>, 1738753028.894282)}
2025-02-05 18:57:09,109 - stmt_idx: 6, status: success, result: None
2025-02-05 18:57:09,109 - 成功执行序列中事务1语句: SELECT col_1, col_3 FROM table_0 WHERE (id = 3) AND (col_0 = 64.56) AND (col_787 IS NULL) FOR UPDATE
2025-02-05 18:57:09,216 - stmt_idx: 7, status: success, result: None
2025-02-05 18:57:09,216 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 18:57:09,325 - stmt_idx: 8, status: success, result: None
2025-02-05 18:57:09,325 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE
2025-02-05 18:57:09,432 - stmt_idx: 10, status: success, result: None
2025-02-05 18:57:09,432 - 成功执行序列中事务1语句: COMMIT
2025-02-05 18:57:09,432 - 执行后idx: 12, pending_stmts: {}
2025-02-05 18:57:09,432 - 
2025-02-05 18:57:09,540 - 执行序列成功
2025-02-05 18:57:10,305 - is_atomic: True
2025-02-05 18:57:10,305 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:57:10,305 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_2, col_3, col_787 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_3, col_787 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (2, "SELECT col_3, col_787 FROM table_0 WHERE (col_1 = 77.16) AND (col_3 = 'chpvy') AND (col_0 = 94.86) FOR UPDATE"), (2, 'COMMIT'), (1, 'UPDATE table_0 SET col_2 = 99, col_0 = 25.88 WHERE id BETWEEN 1 AND 5'), (1, 'SELECT col_1, col_3 FROM table_0 WHERE (id = 3) AND (col_0 = 64.56) AND (col_787 IS NULL) FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE (id = 4) FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 18:57:10,305 - snapshots: {'before': {'table_0': [(1, 91.01, 46.83, 39, 'koqjg', None), (2, 59.66, 28.97, 32, 'mzbcm', None), (3, 64.56, 77.64, 16, 'aeqcj', None), (4, 91.24, 55.63, 74, 'ryada', None), (5, 94.86, 77.16, 31, 'chpvy', None)]}, 'trx1': {'table_0': [(1, 25.88, 46.83, 99, 'koqjg', None), (2, 25.88, 28.97, 99, 'mzbcm', None), (3, 25.88, 77.64, 99, 'aeqcj', None), (4, 25.88, 55.63, 99, 'ryada', None), (5, 25.88, 77.16, 99, 'chpvy', None)]}, 'trx2': {'table_0': [(1, 91.01, 46.83, 39, 'koqjg', None), (2, 59.66, 28.97, 32, 'mzbcm', None), (3, 64.56, 77.64, 16, 'aeqcj', None), (4, 91.24, 55.63, 74, 'ryada', None), (5, 94.86, 77.16, 31, 'chpvy', None)]}, 'serial': {'table_0': [(1, 25.88, 46.83, 99, 'koqjg', None), (2, 25.88, 28.97, 99, 'mzbcm', None), (3, 25.88, 77.64, 99, 'aeqcj', None), (4, 25.88, 55.63, 99, 'ryada', None), (5, 25.88, 77.16, 99, 'chpvy', None)]}}
2025-02-05 18:57:10,305 - 
2025-02-05 18:57:10,318 - iter: 12
2025-02-05 18:57:11,845 - table table_0 has 10 rows
2025-02-05 18:57:11,845 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [6], 'intersection_row_ids': []}
2025-02-05 18:57:11,845 - lock_same_resource: False
2025-02-05 18:57:11,845 - 
2025-02-05 18:57:11,845 - non intersection phase1
2025-02-05 18:57:11,845 - 事务1在第一阶段自己加的锁: X
2025-02-05 18:57:11,845 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:57:11,846 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:57:11,846 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 18:57:11,849 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 18:57:11,850 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:57:11,850 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_0, col_2, col_971, col_888', 'table': 'table_0'}
2025-02-05 18:57:11,853 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 18:57:11,855 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:57:11,855 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_953, col_971, col_888', 'table': 'table_0'}
2025-02-05 18:57:11,855 - non intersection phase1 end
2025-02-05 18:57:11,855 - 
2025-02-05 18:57:11,855 - non intersection phase2
2025-02-05 18:57:11,859 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 18:57:11,860 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:57:11,860 - params: {'v1': '6', 'v2': '6', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:57:11,863 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 18:57:11,864 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:11,864 - params: {'set_expr': "col_3 = 56, col_4 = 35, col_888 = 83.44, col_2 = 89.12, col_971 = 'IvQbH'", 'v1': '1', 'v2': '1', 'table': 'table_0'}
2025-02-05 18:57:11,865 - non intersection phase2 end
2025-02-05 18:57:11,865 - 
2025-02-05 18:57:11,865 - 生成死锁事务序列成功如下
2025-02-05 18:57:11,865 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_953, col_971, col_888 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT id, col_0, col_2, col_971, col_888 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, "UPDATE table_0 SET col_3 = 56, col_4 = 35, col_888 = 83.44, col_2 = 89.12, col_971 = 'IvQbH' WHERE id BETWEEN 1 AND 1"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:57:13,404 - 创建事务1连接成功
2025-02-05 18:57:13,406 - 执行事务1语句: BEGIN
2025-02-05 18:57:13,407 - 执行事务1语句: SELECT id, col_0, col_2, col_971, col_888 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:57:13,408 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:57:13,408 - 执行事务1语句: COMMIT;
2025-02-05 18:57:13,413 - 执行事务1成功
2025-02-05 18:57:15,981 - 恢复初始状态成功
2025-02-05 18:57:16,753 - 创建事务2连接成功
2025-02-05 18:57:16,754 - 执行事务2语句: BEGIN
2025-02-05 18:57:16,755 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_953, col_971, col_888 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:57:16,756 - 执行事务2语句: UPDATE table_0 SET col_3 = 56, col_4 = 35, col_888 = 83.44, col_2 = 89.12, col_971 = 'IvQbH' WHERE id BETWEEN 1 AND 1
2025-02-05 18:57:16,759 - 执行事务2语句: COMMIT;
2025-02-05 18:57:16,763 - 执行事务2成功
2025-02-05 18:57:21,700 - 
2025-02-05 18:57:21,701 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_953, col_971, col_888 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-84, started 13368)>, 1738753041.700833)}
2025-02-05 18:57:21,810 - stmt_idx: 2, status: success, result: None
2025-02-05 18:57:21,810 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_953, col_971, col_888 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:57:21,810 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:57:21,810 - 
2025-02-05 18:57:21,918 - 
2025-02-05 18:57:21,919 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_2, col_971, col_888 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-85, started 41420)>, 1738753041.918435)}
2025-02-05 18:57:22,026 - stmt_idx: 3, status: success, result: None
2025-02-05 18:57:22,026 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_971, col_888 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:57:22,026 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:57:22,026 - 
2025-02-05 18:57:22,134 - 
2025-02-05 18:57:22,135 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-86, started 42044)>, 1738753042.1346977)}
2025-02-05 18:57:22,242 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:57:22,242 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-86, started 42044)>, 1738753042.1346977)}
2025-02-05 18:57:22,242 - 
2025-02-05 18:57:22,352 - 
2025-02-05 18:57:22,353 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-86, started 42044)>, 1738753042.1346977), 5: (2, "UPDATE table_0 SET col_3 = 56, col_4 = 35, col_888 = 83.44, col_2 = 89.12, col_971 = 'IvQbH' WHERE id BETWEEN 1 AND 1", <Thread(Thread-87, started 45000)>, 1738753042.3522303)}
2025-02-05 18:57:22,355 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_3 = 56, col_4 = 35, col_888 = 83.44, col_2 = 89.12, col_971 = 'IvQbH' WHERE id BETWEEN 1 AND 1
2025-02-05 18:57:22,462 - stmt_idx: 4, status: success, result: None
2025-02-05 18:57:22,462 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:57:22,462 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 18:57:22,571 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:57:22,571 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: UPDATE table_0 SET col_3 = 56, col_4 = 35, col_888 = 83.44, col_2 = 89.12, col_971 = 'IvQbH' WHERE id BETWEEN 1 AND 1
2025-02-05 18:57:22,571 - 错误: dictionary changed size during iteration
2025-02-05 18:57:22,574 - 执行序列成功
2025-02-05 18:57:23,338 - is_atomic: True
2025-02-05 18:57:23,338 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 18:57:23,338 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_953, col_971, col_888 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT id, col_0, col_2, col_971, col_888 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 18:57:23,338 - snapshots: {'before': {'table_0': [(1, 40.45, 'zjyxv', 58.43, 92, 58, None, None, None), (2, 78.95, 'fhony', 55.95, 71, 100, None, None, None), (3, 30.76, 'mlojn', 20.69, 64, 65, None, None, None), (4, 29.39, 'gahvw', 63.56, 34, 23, None, None, None), (5, 42.99, 'lzsqo', 26.17, 42, 68, None, None, None), (6, 29.03, 'frzqi', 12.5, 43, 95, None, None, None), (7, 39.82, 'shgyy', 88.89, 44, 65, None, None, None), (8, 21.17, 'kuevc', 73.78, 54, 11, None, None, None), (9, 1.64, 'fnskf', 12.11, 39, 87, None, None, None), (10, 52.72, 'depqa', 36.49, 43, 17, None, None, None)]}, 'trx1': {'table_0': [(1, 40.45, 'zjyxv', 58.43, 92, 58, None, None, None), (2, 78.95, 'fhony', 55.95, 71, 100, None, None, None), (3, 30.76, 'mlojn', 20.69, 64, 65, None, None, None), (4, 29.39, 'gahvw', 63.56, 34, 23, None, None, None), (5, 42.99, 'lzsqo', 26.17, 42, 68, None, None, None), (6, 29.03, 'frzqi', 12.5, 43, 95, None, None, None), (7, 39.82, 'shgyy', 88.89, 44, 65, None, None, None), (8, 21.17, 'kuevc', 73.78, 54, 11, None, None, None), (9, 1.64, 'fnskf', 12.11, 39, 87, None, None, None), (10, 52.72, 'depqa', 36.49, 43, 17, None, None, None)]}, 'trx2': {'table_0': [(1, 40.45, 'zjyxv', 89.12, 56, 35, None, 'IvQbH', 83.44), (2, 78.95, 'fhony', 55.95, 71, 100, None, None, None), (3, 30.76, 'mlojn', 20.69, 64, 65, None, None, None), (4, 29.39, 'gahvw', 63.56, 34, 23, None, None, None), (5, 42.99, 'lzsqo', 26.17, 42, 68, None, None, None), (6, 29.03, 'frzqi', 12.5, 43, 95, None, None, None), (7, 39.82, 'shgyy', 88.89, 44, 65, None, None, None), (8, 21.17, 'kuevc', 73.78, 54, 11, None, None, None), (9, 1.64, 'fnskf', 12.11, 39, 87, None, None, None), (10, 52.72, 'depqa', 36.49, 43, 17, None, None, None)]}, 'serial': {'table_0': [(1, 40.45, 'zjyxv', 58.43, 92, 58, None, None, None), (2, 78.95, 'fhony', 55.95, 71, 100, None, None, None), (3, 30.76, 'mlojn', 20.69, 64, 65, None, None, None), (4, 29.39, 'gahvw', 63.56, 34, 23, None, None, None), (5, 42.99, 'lzsqo', 26.17, 42, 68, None, None, None), (6, 29.03, 'frzqi', 12.5, 43, 95, None, None, None), (7, 39.82, 'shgyy', 88.89, 44, 65, None, None, None), (8, 21.17, 'kuevc', 73.78, 54, 11, None, None, None), (9, 1.64, 'fnskf', 12.11, 39, 87, None, None, None), (10, 52.72, 'depqa', 36.49, 43, 17, None, None, None)]}}
2025-02-05 18:57:23,338 - 
2025-02-05 18:57:23,353 - iter: 13
2025-02-05 18:57:24,868 - table table_0 has 15 rows
2025-02-05 18:57:24,868 - trx1_lock_row_ids: [4]
2025-02-05 18:57:24,868 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 15]
2025-02-05 18:57:24,868 - intersection_row_ids: [4]
2025-02-05 18:57:24,868 - trx1_exclusive_ids: []
2025-02-05 18:57:24,868 - trx2_exclusive_ids: [1, 2, 3, 5, 6, 10, 11, 12, 13, 15]
2025-02-05 18:57:24,869 - res_dict: {'trx1_lock_row_ids': [4], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 15], 'intersection_row_ids': [4]}
2025-02-05 18:57:24,869 - lock_same_resource: True
2025-02-05 18:57:24,869 - 
2025-02-05 18:57:24,869 - intersection phase1
2025-02-05 18:57:24,872 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 18:57:24,873 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:24,873 - params: {'set_expr': 'col_2 = 7.78', 'v1': '4', 'v2': '4', 'table': 'table_0'}
2025-02-05 18:57:24,876 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,878 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:24,878 - params: {'vals': "NULL, 93.16, 'FUYkq', 75.35, 33", 'insert_cols': 'id, col_0, col_1, col_2, col_660', 'table': 'table_0'}
2025-02-05 18:57:24,878 - intersection phase1 end
2025-02-05 18:57:24,878 - 
2025-02-05 18:57:24,878 - intersection phase2
2025-02-05 18:57:24,879 - 事务1在第二阶段自己加的锁: X
2025-02-05 18:57:24,879 - 事务2在第二阶段自己加的锁: II
2025-02-05 18:57:24,879 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:57:24,879 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:57:24,883 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,884 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:24,884 - params: {'vals': "NULL, 15.64, 'yPebX', 50.11, 37", 'insert_cols': 'id, col_0, col_1, col_2, col_660', 'table': 'table_0'}
2025-02-05 18:57:24,888 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,889 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:24,890 - params: {'vals': "NULL, 19.44, 'MJMJu', 18.58, 78", 'insert_cols': 'id, col_0, col_1, col_2, col_660', 'table': 'table_0'}
2025-02-05 18:57:24,892 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,893 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:24,893 - params: {'vals': "NULL, 7.52, 'pgoyF', 6.46, 22", 'insert_cols': 'id, col_0, col_1, col_2, col_660', 'table': 'table_0'}
2025-02-05 18:57:24,897 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,898 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:24,899 - params: {'vals': "NULL, 24.85, 'MYSry', 97.78, 40", 'insert_cols': 'id, col_0, col_1, col_2, col_660', 'table': 'table_0'}
2025-02-05 18:57:24,903 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,905 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:24,905 - params: {'set_expr': 'col_0 = 82.17, col_660 = 28', 'v1': '6', 'v2': '6', 'table': 'table_0'}
2025-02-05 18:57:24,908 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,910 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:24,910 - params: {'vals': "NULL, 44.01, 'LIiGl', 5.83, 51", 'insert_cols': 'id, col_0, col_1, col_2, col_660', 'table': 'table_0'}
2025-02-05 18:57:24,914 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,916 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:24,916 - params: {'vals': "NULL, 76.39, 'kAJIg', 49.99, 81", 'insert_cols': 'id, col_0, col_1, col_2, col_660', 'table': 'table_0'}
2025-02-05 18:57:24,921 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,922 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:24,922 - params: {'set_expr': "col_0 = 50.0, col_660 = 10, col_2 = 44.46, col_1 = 'IehUC'", 'v1': '12', 'v2': '12', 'table': 'table_0'}
2025-02-05 18:57:24,925 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,926 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:57:24,926 - params: {'set_expr': "col_2 = 86.61, col_1 = 'iZchm'", 'cond': '(id = 13)', 'table': 'table_0'}
2025-02-05 18:57:24,930 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,931 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:24,932 - params: {'vals': "NULL, 7.13, 'OKmxG', 88.8, 35", 'insert_cols': 'id, col_0, col_1, col_2, col_660', 'table': 'table_0'}
2025-02-05 18:57:24,932 - intersection phase2 end
2025-02-05 18:57:24,932 - 
2025-02-05 18:57:24,932 - intersection phase3
2025-02-05 18:57:24,936 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,938 - needed_params: {'cond', 'table'}
2025-02-05 18:57:24,939 - params: {'cond': '(id = 3)', 'table': 'table_0'}
2025-02-05 18:57:24,942 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:57:24,943 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:57:24,943 - params: {'set_expr': 'col_2 = 31.65, col_660 = 96', 'cond': '(col_660 IS NULL)', 'table': 'table_0'}
2025-02-05 18:57:24,943 - intersection phase3 end
2025-02-05 18:57:24,943 - 
2025-02-05 18:57:24,943 - 生成死锁事务序列成功如下
2025-02-05 18:57:24,943 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 93.16, 'FUYkq', 75.35, 33)"), (1, 'UPDATE table_0 SET col_2 = 7.78 WHERE id BETWEEN 4 AND 4'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 15.64, 'yPebX', 50.11, 37)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 19.44, 'MJMJu', 18.58, 78)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.52, 'pgoyF', 6.46, 22)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 24.85, 'MYSry', 97.78, 40)"), (2, 'UPDATE table_0 SET col_0 = 82.17, col_660 = 28 WHERE id BETWEEN 6 AND 6'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 44.01, 'LIiGl', 5.83, 51)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 76.39, 'kAJIg', 49.99, 81)"), (2, "UPDATE table_0 SET col_0 = 50.0, col_660 = 10, col_2 = 44.46, col_1 = 'IehUC' WHERE id BETWEEN 12 AND 12"), (2, "UPDATE table_0 SET col_2 = 86.61, col_1 = 'iZchm' WHERE (id = 13)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.13, 'OKmxG', 88.8, 35)"), (2, 'UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)'), (1, 'DELETE FROM table_0 WHERE (id = 3)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:57:26,490 - 创建事务1连接成功
2025-02-05 18:57:26,492 - 执行事务1语句: BEGIN
2025-02-05 18:57:26,493 - 执行事务1语句: UPDATE table_0 SET col_2 = 7.78 WHERE id BETWEEN 4 AND 4
2025-02-05 18:57:26,493 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 3)
2025-02-05 18:57:26,496 - 执行事务1语句: COMMIT;
2025-02-05 18:57:26,500 - 执行事务1成功
2025-02-05 18:57:29,133 - 恢复初始状态成功
2025-02-05 18:57:29,903 - 创建事务2连接成功
2025-02-05 18:57:29,906 - 执行事务2语句: BEGIN
2025-02-05 18:57:29,907 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 93.16, 'FUYkq', 75.35, 33)
2025-02-05 18:57:29,907 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 15.64, 'yPebX', 50.11, 37)
2025-02-05 18:57:29,908 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 19.44, 'MJMJu', 18.58, 78)
2025-02-05 18:57:29,908 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.52, 'pgoyF', 6.46, 22)
2025-02-05 18:57:29,909 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 24.85, 'MYSry', 97.78, 40)
2025-02-05 18:57:29,910 - 执行事务2语句: UPDATE table_0 SET col_0 = 82.17, col_660 = 28 WHERE id BETWEEN 6 AND 6
2025-02-05 18:57:29,910 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 44.01, 'LIiGl', 5.83, 51)
2025-02-05 18:57:29,911 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 76.39, 'kAJIg', 49.99, 81)
2025-02-05 18:57:29,911 - 执行事务2语句: UPDATE table_0 SET col_0 = 50.0, col_660 = 10, col_2 = 44.46, col_1 = 'IehUC' WHERE id BETWEEN 12 AND 12
2025-02-05 18:57:29,912 - 执行事务2语句: UPDATE table_0 SET col_2 = 86.61, col_1 = 'iZchm' WHERE (id = 13)
2025-02-05 18:57:29,913 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.13, 'OKmxG', 88.8, 35)
2025-02-05 18:57:29,914 - 执行事务2语句: UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)
2025-02-05 18:57:29,916 - 执行事务2语句: COMMIT;
2025-02-05 18:57:29,921 - 执行事务2成功
2025-02-05 18:57:34,847 - 
2025-02-05 18:57:34,847 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 93.16, 'FUYkq', 75.35, 33)", <Thread(Thread-88, started 41916)>, 1738753054.8473842)}
2025-02-05 18:57:34,952 - stmt_idx: 2, status: success, result: None
2025-02-05 18:57:34,952 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 93.16, 'FUYkq', 75.35, 33)
2025-02-05 18:57:34,952 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:57:34,952 - 
2025-02-05 18:57:35,061 - 
2025-02-05 18:57:35,061 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 7.78 WHERE id BETWEEN 4 AND 4', <Thread(Thread-89, started 37784)>, 1738753055.0606291)}
2025-02-05 18:57:35,168 - stmt_idx: 3, status: success, result: None
2025-02-05 18:57:35,168 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 7.78 WHERE id BETWEEN 4 AND 4
2025-02-05 18:57:35,168 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:57:35,168 - 
2025-02-05 18:57:35,274 - 
2025-02-05 18:57:35,276 - 执行前idx: 5, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 15.64, 'yPebX', 50.11, 37)", <Thread(Thread-90, started 44448)>, 1738753055.2749982)}
2025-02-05 18:57:35,382 - stmt_idx: 4, status: success, result: None
2025-02-05 18:57:35,382 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 15.64, 'yPebX', 50.11, 37)
2025-02-05 18:57:35,382 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:57:35,382 - 
2025-02-05 18:57:35,490 - 
2025-02-05 18:57:35,491 - 执行前idx: 6, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 19.44, 'MJMJu', 18.58, 78)", <Thread(Thread-91, started 36348)>, 1738753055.4903293)}
2025-02-05 18:57:35,598 - stmt_idx: 5, status: success, result: None
2025-02-05 18:57:35,598 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 19.44, 'MJMJu', 18.58, 78)
2025-02-05 18:57:35,598 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:57:35,598 - 
2025-02-05 18:57:35,704 - 
2025-02-05 18:57:35,705 - 执行前idx: 7, pending_stmts: {6: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.52, 'pgoyF', 6.46, 22)", <Thread(Thread-92, started 23892)>, 1738753055.7045834)}
2025-02-05 18:57:35,809 - stmt_idx: 6, status: success, result: None
2025-02-05 18:57:35,809 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.52, 'pgoyF', 6.46, 22)
2025-02-05 18:57:35,809 - 执行后idx: 7, pending_stmts: {}
2025-02-05 18:57:35,809 - 
2025-02-05 18:57:35,917 - 
2025-02-05 18:57:35,918 - 执行前idx: 8, pending_stmts: {7: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 24.85, 'MYSry', 97.78, 40)", <Thread(Thread-93, started 16208)>, 1738753055.9175358)}
2025-02-05 18:57:36,025 - stmt_idx: 7, status: success, result: None
2025-02-05 18:57:36,025 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 24.85, 'MYSry', 97.78, 40)
2025-02-05 18:57:36,025 - 执行后idx: 8, pending_stmts: {}
2025-02-05 18:57:36,025 - 
2025-02-05 18:57:36,133 - 
2025-02-05 18:57:36,134 - 执行前idx: 9, pending_stmts: {8: (2, 'UPDATE table_0 SET col_0 = 82.17, col_660 = 28 WHERE id BETWEEN 6 AND 6', <Thread(Thread-94, started 44228)>, 1738753056.1331322)}
2025-02-05 18:57:36,242 - stmt_idx: 8, status: success, result: None
2025-02-05 18:57:36,242 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 82.17, col_660 = 28 WHERE id BETWEEN 6 AND 6
2025-02-05 18:57:36,242 - 执行后idx: 9, pending_stmts: {}
2025-02-05 18:57:36,242 - 
2025-02-05 18:57:36,351 - 
2025-02-05 18:57:36,352 - 执行前idx: 10, pending_stmts: {9: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 44.01, 'LIiGl', 5.83, 51)", <Thread(Thread-95, started 36560)>, 1738753056.3519747)}
2025-02-05 18:57:36,458 - stmt_idx: 9, status: success, result: None
2025-02-05 18:57:36,458 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 44.01, 'LIiGl', 5.83, 51)
2025-02-05 18:57:36,458 - 执行后idx: 10, pending_stmts: {}
2025-02-05 18:57:36,458 - 
2025-02-05 18:57:36,567 - 
2025-02-05 18:57:36,568 - 执行前idx: 11, pending_stmts: {10: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 76.39, 'kAJIg', 49.99, 81)", <Thread(Thread-96, started 31332)>, 1738753056.5677047)}
2025-02-05 18:57:36,673 - stmt_idx: 10, status: success, result: None
2025-02-05 18:57:36,673 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 76.39, 'kAJIg', 49.99, 81)
2025-02-05 18:57:36,673 - 执行后idx: 11, pending_stmts: {}
2025-02-05 18:57:36,673 - 
2025-02-05 18:57:36,780 - 
2025-02-05 18:57:36,781 - 执行前idx: 12, pending_stmts: {11: (2, "UPDATE table_0 SET col_0 = 50.0, col_660 = 10, col_2 = 44.46, col_1 = 'IehUC' WHERE id BETWEEN 12 AND 12", <Thread(Thread-97, started 4284)>, 1738753056.7807608)}
2025-02-05 18:57:36,887 - stmt_idx: 11, status: success, result: None
2025-02-05 18:57:36,887 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 50.0, col_660 = 10, col_2 = 44.46, col_1 = 'IehUC' WHERE id BETWEEN 12 AND 12
2025-02-05 18:57:36,887 - 执行后idx: 12, pending_stmts: {}
2025-02-05 18:57:36,887 - 
2025-02-05 18:57:36,997 - 
2025-02-05 18:57:36,998 - 执行前idx: 13, pending_stmts: {12: (2, "UPDATE table_0 SET col_2 = 86.61, col_1 = 'iZchm' WHERE (id = 13)", <Thread(Thread-98, started 17716)>, 1738753056.997179)}
2025-02-05 18:57:37,104 - stmt_idx: 12, status: success, result: None
2025-02-05 18:57:37,104 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 86.61, col_1 = 'iZchm' WHERE (id = 13)
2025-02-05 18:57:37,104 - 执行后idx: 13, pending_stmts: {}
2025-02-05 18:57:37,104 - 
2025-02-05 18:57:37,211 - 
2025-02-05 18:57:37,212 - 执行前idx: 14, pending_stmts: {13: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.13, 'OKmxG', 88.8, 35)", <Thread(Thread-99, started 44976)>, 1738753057.2115166)}
2025-02-05 18:57:37,320 - stmt_idx: 13, status: success, result: None
2025-02-05 18:57:37,320 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.13, 'OKmxG', 88.8, 35)
2025-02-05 18:57:37,320 - 执行后idx: 14, pending_stmts: {}
2025-02-05 18:57:37,320 - 
2025-02-05 18:57:37,427 - 
2025-02-05 18:57:37,428 - 执行前idx: 15, pending_stmts: {14: (2, 'UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)', <Thread(Thread-100, started 41028)>, 1738753057.4272182)}
2025-02-05 18:57:37,532 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)
2025-02-05 18:57:37,532 - 执行后idx: 15, pending_stmts: {14: (2, 'UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)', <Thread(Thread-100, started 41028)>, 1738753057.4272182)}
2025-02-05 18:57:37,532 - 
2025-02-05 18:57:37,640 - 
2025-02-05 18:57:37,640 - 执行前idx: 16, pending_stmts: {14: (2, 'UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)', <Thread(Thread-100, started 41028)>, 1738753057.4272182), 15: (1, 'DELETE FROM table_0 WHERE (id = 3)', <Thread(Thread-101, started 40132)>, 1738753057.640006)}
2025-02-05 18:57:37,643 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (id = 3)
2025-02-05 18:57:37,747 - stmt_idx: 14, status: success, result: None
2025-02-05 18:57:37,747 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)
2025-02-05 18:57:37,747 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)
2025-02-05 18:57:37,855 - stmt_idx: 15, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:57:37,855 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: DELETE FROM table_0 WHERE (id = 3)
2025-02-05 18:57:37,855 - 错误: dictionary changed size during iteration
2025-02-05 18:57:37,860 - 执行序列成功
2025-02-05 18:57:38,654 - is_atomic: True
2025-02-05 18:57:38,654 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 18:57:38,654 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 93.16, 'FUYkq', 75.35, 33)"), (1, 'UPDATE table_0 SET col_2 = 7.78 WHERE id BETWEEN 4 AND 4'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 15.64, 'yPebX', 50.11, 37)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 19.44, 'MJMJu', 18.58, 78)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.52, 'pgoyF', 6.46, 22)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 24.85, 'MYSry', 97.78, 40)"), (2, 'UPDATE table_0 SET col_0 = 82.17, col_660 = 28 WHERE id BETWEEN 6 AND 6'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 44.01, 'LIiGl', 5.83, 51)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 76.39, 'kAJIg', 49.99, 81)"), (2, "UPDATE table_0 SET col_0 = 50.0, col_660 = 10, col_2 = 44.46, col_1 = 'IehUC' WHERE id BETWEEN 12 AND 12"), (2, "UPDATE table_0 SET col_2 = 86.61, col_1 = 'iZchm' WHERE (id = 13)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_660) VALUES (NULL, 7.13, 'OKmxG', 88.8, 35)"), (2, 'UPDATE table_0 SET col_2 = 31.65, col_660 = 96 WHERE (col_660 IS NULL)'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 18:57:38,654 - snapshots: {'before': {'table_0': [(1, 90.35, 'vqzcu', 92.38, None), (2, 14.97, 'urnqw', 71.91, None), (3, 92.54, 'wqpts', 72.42, None), (4, 17.54, 'omuxr', 51.37, None), (5, 47.15, 'foimn', 24.96, None), (6, 26.41, 'dhbne', 55.27, None), (7, 7.32, 'vwqxx', 81.16, None), (8, 81.45, 'btnin', 67.58, None), (9, 48.75, 'znyeo', 20.29, None), (10, 87.5, 'kvzyd', 85.14, None), (11, 64.4, 'odkex', 5.78, None), (12, 47.36, 'djycp', 18.24, None), (13, 37.41, 'teknc', 72.86, None), (14, 88.75, 'wivdp', 76.29, None), (15, 49.93, 'djrom', 69.8, None)]}, 'trx1': {'table_0': [(1, 90.35, 'vqzcu', 92.38, None), (2, 14.97, 'urnqw', 71.91, None), (4, 17.54, 'omuxr', 7.78, None), (5, 47.15, 'foimn', 24.96, None), (6, 26.41, 'dhbne', 55.27, None), (7, 7.32, 'vwqxx', 81.16, None), (8, 81.45, 'btnin', 67.58, None), (9, 48.75, 'znyeo', 20.29, None), (10, 87.5, 'kvzyd', 85.14, None), (11, 64.4, 'odkex', 5.78, None), (12, 47.36, 'djycp', 18.24, None), (13, 37.41, 'teknc', 72.86, None), (14, 88.75, 'wivdp', 76.29, None), (15, 49.93, 'djrom', 69.8, None)]}, 'trx2': {'table_0': [(1, 90.35, 'vqzcu', 31.65, 96), (2, 14.97, 'urnqw', 31.65, 96), (3, 92.54, 'wqpts', 31.65, 96), (4, 17.54, 'omuxr', 31.65, 96), (5, 47.15, 'foimn', 31.65, 96), (6, 82.17, 'dhbne', 55.27, 28), (7, 7.32, 'vwqxx', 31.65, 96), (8, 81.45, 'btnin', 31.65, 96), (9, 48.75, 'znyeo', 31.65, 96), (10, 87.5, 'kvzyd', 31.65, 96), (11, 64.4, 'odkex', 31.65, 96), (12, 50.0, 'IehUC', 44.46, 10), (13, 37.41, 'iZchm', 31.65, 96), (14, 88.75, 'wivdp', 31.65, 96), (15, 49.93, 'djrom', 31.65, 96), (16, 93.16, 'FUYkq', 75.35, 33), (17, 15.64, 'yPebX', 50.11, 37), (18, 19.44, 'MJMJu', 18.58, 78), (19, 7.52, 'pgoyF', 6.46, 22), (20, 24.85, 'MYSry', 97.78, 40), (21, 44.01, 'LIiGl', 5.83, 51), (22, 76.39, 'kAJIg', 49.99, 81), (23, 7.13, 'OKmxG', 88.8, 35)]}, 'serial': {'table_0': [(1, 90.35, 'vqzcu', 31.65, 96), (2, 14.97, 'urnqw', 31.65, 96), (3, 92.54, 'wqpts', 31.65, 96), (4, 17.54, 'omuxr', 31.65, 96), (5, 47.15, 'foimn', 31.65, 96), (6, 82.17, 'dhbne', 55.27, 28), (7, 7.32, 'vwqxx', 31.65, 96), (8, 81.45, 'btnin', 31.65, 96), (9, 48.75, 'znyeo', 31.65, 96), (10, 87.5, 'kvzyd', 31.65, 96), (11, 64.4, 'odkex', 31.65, 96), (12, 50.0, 'IehUC', 44.46, 10), (13, 37.41, 'iZchm', 31.65, 96), (14, 88.75, 'wivdp', 31.65, 96), (15, 49.93, 'djrom', 31.65, 96), (24, 93.16, 'FUYkq', 75.35, 33), (25, 15.64, 'yPebX', 50.11, 37), (26, 19.44, 'MJMJu', 18.58, 78), (27, 7.52, 'pgoyF', 6.46, 22), (28, 24.85, 'MYSry', 97.78, 40), (29, 44.01, 'LIiGl', 5.83, 51), (30, 76.39, 'kAJIg', 49.99, 81), (31, 7.13, 'OKmxG', 88.8, 35)]}}
2025-02-05 18:57:38,654 - 
2025-02-05 18:57:38,666 - iter: 14
2025-02-05 18:57:40,178 - table table_0 has 8 rows
2025-02-05 18:57:40,178 - trx1_start_id: 1
2025-02-05 18:57:40,179 - trx1_end_id: 4
2025-02-05 18:57:40,179 - trx1_exclusive_start_id: 1
2025-02-05 18:57:40,179 - trx1_exclusive_end_id: 1
2025-02-05 18:57:40,179 - trx1_exclusive_ids: [1]
2025-02-05 18:57:40,179 - trx2_start_id: 2
2025-02-05 18:57:40,179 - trx2_end_id: 8
2025-02-05 18:57:40,179 - trx2_exclusive_start_id: 5
2025-02-05 18:57:40,179 - trx2_exclusive_end_id: 8
2025-02-05 18:57:40,179 - trx2_exclusive_ids: [5, 6, 7, 8]
2025-02-05 18:57:40,179 - intersection_ids: [2, 3, 4]
2025-02-05 18:57:40,179 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': [2, 3, 4]}
2025-02-05 18:57:40,179 - lock_same_resource: True
2025-02-05 18:57:40,179 - 
2025-02-05 18:57:40,179 - intersection phase1
2025-02-05 18:57:40,182 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 18:57:40,183 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:57:40,183 - params: {'v1': '1', 'v2': '4', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 18:57:40,185 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=8
2025-02-05 18:57:40,187 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:57:40,187 - params: {'v1': '2', 'v2': '8', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 18:57:40,188 - intersection phase1 end
2025-02-05 18:57:40,188 - 
2025-02-05 18:57:40,188 - intersection phase2
2025-02-05 18:57:40,188 - 事务1在第二阶段自己加的锁: S
2025-02-05 18:57:40,188 - 事务2在第二阶段自己加的锁: II
2025-02-05 18:57:40,188 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:57:40,188 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:57:40,191 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 18:57:40,192 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:57:40,193 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 18:57:40,196 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=8
2025-02-05 18:57:40,197 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:40,197 - params: {'set_expr': 'col_2 = 21.46, col_1 = 94.0', 'v1': '5', 'v2': '8', 'table': 'table_0'}
2025-02-05 18:57:40,197 - intersection phase2 end
2025-02-05 18:57:40,197 - 
2025-02-05 18:57:40,198 - intersection phase3
2025-02-05 18:57:40,200 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:57:40,201 - needed_params: {'cond', 'table'}
2025-02-05 18:57:40,201 - params: {'cond': '(col_1 = 46.09) AND (col_2 = 99.68)', 'table': 'table_0'}
2025-02-05 18:57:40,204 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 18:57:40,206 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:57:40,206 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 18:57:40,207 - intersection phase3 end
2025-02-05 18:57:40,207 - 
2025-02-05 18:57:40,207 - 生成死锁事务序列成功如下
2025-02-05 18:57:40,207 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_2 = 21.46, col_1 = 94.0 WHERE id BETWEEN 5 AND 8'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (col_1 = 46.09) AND (col_2 = 99.68)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 18:57:41,739 - 创建事务1连接成功
2025-02-05 18:57:41,740 - 执行事务1语句: BEGIN
2025-02-05 18:57:41,741 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE
2025-02-05 18:57:41,742 - 执行事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 18:57:41,743 - 执行事务1语句: DELETE FROM table_0 WHERE (col_1 = 46.09) AND (col_2 = 99.68)
2025-02-05 18:57:41,744 - 执行事务1语句: COMMIT;
2025-02-05 18:57:41,747 - 执行事务1成功
2025-02-05 18:57:44,331 - 恢复初始状态成功
2025-02-05 18:57:45,115 - 创建事务2连接成功
2025-02-05 18:57:45,117 - 执行事务2语句: BEGIN
2025-02-05 18:57:45,118 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 8 LOCK IN SHARE MODE
2025-02-05 18:57:45,119 - 执行事务2语句: UPDATE table_0 SET col_2 = 21.46, col_1 = 94.0 WHERE id BETWEEN 5 AND 8
2025-02-05 18:57:45,119 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:57:45,121 - 执行事务2语句: COMMIT;
2025-02-05 18:57:45,126 - 执行事务2成功
2025-02-05 18:57:50,071 - 
2025-02-05 18:57:50,071 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 8 LOCK IN SHARE MODE', <Thread(Thread-102, started 32884)>, 1738753070.0714774)}
2025-02-05 18:57:50,186 - stmt_idx: 2, status: success, result: None
2025-02-05 18:57:50,186 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 8 LOCK IN SHARE MODE
2025-02-05 18:57:50,186 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:57:50,186 - 
2025-02-05 18:57:50,295 - 
2025-02-05 18:57:50,296 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE', <Thread(Thread-103, started 36884)>, 1738753070.2950275)}
2025-02-05 18:57:50,404 - stmt_idx: 3, status: success, result: None
2025-02-05 18:57:50,404 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE
2025-02-05 18:57:50,404 - 执行后idx: 4, pending_stmts: {}
2025-02-05 18:57:50,404 - 
2025-02-05 18:57:50,516 - 
2025-02-05 18:57:50,516 - 执行前idx: 5, pending_stmts: {4: (2, 'UPDATE table_0 SET col_2 = 21.46, col_1 = 94.0 WHERE id BETWEEN 5 AND 8', <Thread(Thread-104, started 40328)>, 1738753070.5166228)}
2025-02-05 18:57:50,625 - stmt_idx: 4, status: success, result: None
2025-02-05 18:57:50,625 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 21.46, col_1 = 94.0 WHERE id BETWEEN 5 AND 8
2025-02-05 18:57:50,625 - 执行后idx: 5, pending_stmts: {}
2025-02-05 18:57:50,625 - 
2025-02-05 18:57:50,734 - 
2025-02-05 18:57:50,735 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-105, started 38388)>, 1738753070.7344599)}
2025-02-05 18:57:50,845 - stmt_idx: 5, status: success, result: None
2025-02-05 18:57:50,845 - 成功执行序列中事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 18:57:50,845 - 执行后idx: 6, pending_stmts: {}
2025-02-05 18:57:50,845 - 
2025-02-05 18:57:50,954 - 
2025-02-05 18:57:50,954 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-106, started 32172)>, 1738753070.9546304)}
2025-02-05 18:57:51,064 - wait for lock, trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:57:51,064 - 执行后idx: 7, pending_stmts: {6: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-106, started 32172)>, 1738753070.9546304)}
2025-02-05 18:57:51,064 - 
2025-02-05 18:57:51,171 - 
2025-02-05 18:57:51,172 - 执行前idx: 8, pending_stmts: {6: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-106, started 32172)>, 1738753070.9546304), 7: (1, 'DELETE FROM table_0 WHERE (col_1 = 46.09) AND (col_2 = 99.68)', <Thread(Thread-107, started 20076)>, 1738753071.1718554)}
2025-02-05 18:57:51,174 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (col_1 = 46.09) AND (col_2 = 99.68)
2025-02-05 18:57:51,278 - stmt_idx: 6, status: success, result: None
2025-02-05 18:57:51,278 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:57:51,278 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 18:57:51,386 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 18:57:51,386 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: DELETE FROM table_0 WHERE (col_1 = 46.09) AND (col_2 = 99.68)
2025-02-05 18:57:51,386 - 错误: dictionary changed size during iteration
2025-02-05 18:57:51,390 - 执行序列成功
2025-02-05 18:57:52,180 - is_atomic: True
2025-02-05 18:57:52,181 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 18:57:52,181 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_2 = 21.46, col_1 = 94.0 WHERE id BETWEEN 5 AND 8'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 18:57:52,181 - snapshots: {'before': {'table_0': [(1, 6.41, 60.16), (2, 16.84, 46.12), (3, 19.68, 62.26), (4, 55.19, 62.59), (5, 47.99, 73.26), (6, 40.78, 16.07), (7, 22.51, 81.63), (8, 46.09, 99.68)]}, 'trx1': {'table_0': [(1, 6.41, 60.16), (2, 16.84, 46.12), (3, 19.68, 62.26), (4, 55.19, 62.59), (5, 47.99, 73.26), (6, 40.78, 16.07), (7, 22.51, 81.63), (8, 46.09, 99.68)]}, 'trx2': {'table_0': [(1, 6.41, 60.16), (2, 16.84, 46.12), (3, 19.68, 62.26), (4, 55.19, 62.59), (5, 94.0, 21.46), (6, 94.0, 21.46), (7, 94.0, 21.46), (8, 94.0, 21.46)]}, 'serial': {'table_0': [(1, 6.41, 60.16), (2, 16.84, 46.12), (3, 19.68, 62.26), (4, 55.19, 62.59), (5, 94.0, 21.46), (6, 94.0, 21.46), (7, 94.0, 21.46), (8, 94.0, 21.46)]}}
2025-02-05 18:57:52,181 - 
2025-02-05 18:57:52,192 - iter: 15
2025-02-05 18:57:53,953 - table table_0 has 12 rows
2025-02-05 18:57:53,953 - trx1_lock_row_ids: [9, 10, 11, 12]
2025-02-05 18:57:53,953 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 9, 10, 12]
2025-02-05 18:57:53,953 - intersection_row_ids: [9, 10, 12]
2025-02-05 18:57:53,953 - trx1_exclusive_ids: [11]
2025-02-05 18:57:53,953 - trx2_exclusive_ids: [1, 2, 3, 4, 5, 6, 7]
2025-02-05 18:57:53,953 - res_dict: {'trx1_lock_row_ids': [9, 10, 11, 12], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 9, 10, 12], 'intersection_row_ids': [9, 10, 12]}
2025-02-05 18:57:53,953 - lock_same_resource: True
2025-02-05 18:57:53,953 - 
2025-02-05 18:57:53,953 - intersection phase1
2025-02-05 18:57:53,956 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=9, is_continuous=True, range_end_idx=12
2025-02-05 18:57:53,957 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:53,957 - params: {'set_expr': "col_0 = 61, col_1 = 'mcGcU'", 'v1': '9', 'v2': '12', 'table': 'table_0'}
2025-02-05 18:57:53,961 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,962 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:53,962 - params: {'set_expr': "col_1 = 'kNjDE', col_0 = 77", 'v1': '9', 'v2': '9', 'table': 'table_0'}
2025-02-05 18:57:53,965 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,966 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:53,966 - params: {'set_expr': 'col_0 = 42', 'v1': '10', 'v2': '10', 'table': 'table_0'}
2025-02-05 18:57:53,968 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,970 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:53,970 - params: {'set_expr': "col_0 = 42, col_1 = 'DFUds'", 'v1': '12', 'v2': '12', 'table': 'table_0'}
2025-02-05 18:57:53,971 - intersection phase1 end
2025-02-05 18:57:53,971 - 
2025-02-05 18:57:53,971 - intersection phase2
2025-02-05 18:57:53,971 - 事务1在第二阶段自己加的锁: II
2025-02-05 18:57:53,971 - 事务2在第二阶段自己加的锁: II
2025-02-05 18:57:53,971 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 18:57:53,971 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 18:57:53,974 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,975 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:53,975 - params: {'vals': "NULL, 20, 'RNCHT'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:57:53,977 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,979 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:53,979 - params: {'vals': "NULL, 36, 'NYhDb'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:57:53,982 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,984 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:57:53,984 - params: {'set_expr': "col_1 = 'drefb'", 'cond': "(id = 2) AND (col_1 = 'jeuyy') AND (col_0 = 92)", 'table': 'table_0'}
2025-02-05 18:57:53,987 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,988 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:53,988 - params: {'vals': "NULL, 62, 'aKuvN'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:57:53,991 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,992 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 18:57:53,992 - params: {'set_expr': 'col_0 = 68', 'v1': '4', 'v2': '4', 'table': 'table_0'}
2025-02-05 18:57:53,996 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:57:53,997 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:53,997 - params: {'vals': "NULL, 82, 'kHolJ'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:57:54,001 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 18:57:54,002 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 18:57:54,002 - params: {'vals': "NULL, 52, 'vrnLg'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:57:54,005 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 18:57:54,006 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:57:54,006 - params: {'set_expr': 'col_0 = 22', 'cond': '(id = 7)', 'table': 'table_0'}
2025-02-05 18:57:54,006 - intersection phase2 end
2025-02-05 18:57:54,006 - 
2025-02-05 18:57:54,006 - intersection phase3
2025-02-05 18:57:54,009 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 18:57:54,010 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:57:54,010 - params: {'cond': '(id = 5)', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 18:57:54,013 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=10, is_continuous=True, range_end_idx=12
2025-02-05 18:57:54,014 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:57:54,014 - params: {'v1': '10', 'v2': '12', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 18:57:54,016 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 18:57:54,017 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 18:57:54,017 - params: {'cond': "(col_0 = 80) AND (col_1 = 'bjcga')", 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 18:57:54,018 - intersection phase3 end
2025-02-05 18:57:54,018 - 
2025-02-05 18:57:54,018 - 生成死锁事务序列成功如下
2025-02-05 18:57:54,018 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 61, col_1 = 'mcGcU' WHERE id BETWEEN 9 AND 12"), (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9"), (2, 'UPDATE table_0 SET col_0 = 42 WHERE id BETWEEN 10 AND 10'), (2, "UPDATE table_0 SET col_0 = 42, col_1 = 'DFUds' WHERE id BETWEEN 12 AND 12"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 36, 'NYhDb')"), (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 20, 'RNCHT')"), (2, "UPDATE table_0 SET col_1 = 'drefb' WHERE (id = 2) AND (col_1 = 'jeuyy') AND (col_0 = 92)"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 62, 'aKuvN')"), (2, 'UPDATE table_0 SET col_0 = 68 WHERE id BETWEEN 4 AND 4'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 82, 'kHolJ')"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 52, 'vrnLg')"), (2, 'UPDATE table_0 SET col_0 = 22 WHERE (id = 7)'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE'), (2, "SELECT id, col_1 FROM table_0 WHERE (col_0 = 80) AND (col_1 = 'bjcga') FOR UPDATE"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:57:55,608 - 创建事务1连接成功
2025-02-05 18:57:55,610 - 执行事务1语句: BEGIN
2025-02-05 18:57:55,611 - 执行事务1语句: UPDATE table_0 SET col_0 = 61, col_1 = 'mcGcU' WHERE id BETWEEN 9 AND 12
2025-02-05 18:57:55,611 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 20, 'RNCHT')
2025-02-05 18:57:55,612 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 18:57:55,614 - 执行事务1语句: COMMIT;
2025-02-05 18:57:55,619 - 执行事务1成功
2025-02-05 18:57:58,312 - 恢复初始状态成功
2025-02-05 18:57:59,141 - 创建事务2连接成功
2025-02-05 18:57:59,142 - 执行事务2语句: BEGIN
2025-02-05 18:57:59,143 - 执行事务2语句: UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9
2025-02-05 18:57:59,144 - 执行事务2语句: UPDATE table_0 SET col_0 = 42 WHERE id BETWEEN 10 AND 10
2025-02-05 18:57:59,144 - 执行事务2语句: UPDATE table_0 SET col_0 = 42, col_1 = 'DFUds' WHERE id BETWEEN 12 AND 12
2025-02-05 18:57:59,145 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 36, 'NYhDb')
2025-02-05 18:57:59,146 - 执行事务2语句: UPDATE table_0 SET col_1 = 'drefb' WHERE (id = 2) AND (col_1 = 'jeuyy') AND (col_0 = 92)
2025-02-05 18:57:59,147 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 62, 'aKuvN')
2025-02-05 18:57:59,147 - 执行事务2语句: UPDATE table_0 SET col_0 = 68 WHERE id BETWEEN 4 AND 4
2025-02-05 18:57:59,148 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 82, 'kHolJ')
2025-02-05 18:57:59,148 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 52, 'vrnLg')
2025-02-05 18:57:59,149 - 执行事务2语句: UPDATE table_0 SET col_0 = 22 WHERE (id = 7)
2025-02-05 18:57:59,150 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE (col_0 = 80) AND (col_1 = 'bjcga') FOR UPDATE
2025-02-05 18:57:59,152 - 执行事务2语句: COMMIT;
2025-02-05 18:57:59,157 - 执行事务2成功
2025-02-05 18:58:04,154 - 
2025-02-05 18:58:04,154 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_0 = 61, col_1 = 'mcGcU' WHERE id BETWEEN 9 AND 12", <Thread(Thread-108, started 42656)>, 1738753084.154299)}
2025-02-05 18:58:04,264 - stmt_idx: 2, status: success, result: None
2025-02-05 18:58:04,264 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 61, col_1 = 'mcGcU' WHERE id BETWEEN 9 AND 12
2025-02-05 18:58:04,264 - 执行后idx: 3, pending_stmts: {}
2025-02-05 18:58:04,264 - 
2025-02-05 18:58:04,370 - 
2025-02-05 18:58:04,371 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9", <Thread(Thread-109, started 32932)>, 1738753084.3702874)}
2025-02-05 18:58:04,475 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9
2025-02-05 18:58:04,475 - 执行后idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9", <Thread(Thread-109, started 32932)>, 1738753084.3702874)}
2025-02-05 18:58:04,475 - 
2025-02-05 18:58:04,583 - 
2025-02-05 18:58:04,584 - 执行前idx: 8, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9", <Thread(Thread-109, started 32932)>, 1738753084.3702874), 7: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 20, 'RNCHT')", <Thread(Thread-110, started 10080)>, 1738753084.5832703)}
2025-02-05 18:58:04,691 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9
2025-02-05 18:58:04,799 - stmt_idx: 7, status: success, result: None
2025-02-05 18:58:04,799 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 20, 'RNCHT')
2025-02-05 18:58:04,799 - 执行后idx: 8, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9", <Thread(Thread-109, started 32932)>, 1738753084.3702874)}
2025-02-05 18:58:04,799 - 
2025-02-05 18:58:04,909 - 
2025-02-05 18:58:04,910 - 执行前idx: 15, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9", <Thread(Thread-109, started 32932)>, 1738753084.3702874), 14: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-111, started 27880)>, 1738753084.909224)}
2025-02-05 18:58:05,017 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9
2025-02-05 18:58:05,124 - stmt_idx: 14, status: success, result: None
2025-02-05 18:58:05,124 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 18:58:05,124 - 执行后idx: 15, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9", <Thread(Thread-109, started 32932)>, 1738753084.3702874)}
2025-02-05 18:58:05,124 - 
2025-02-05 18:58:05,237 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9", <Thread(Thread-109, started 32932)>, 1738753084.3702874)}
2025-02-05 18:58:05,237 - 
2025-02-05 18:58:05,237 - 执行前idx: 18, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9", <Thread(Thread-109, stopped 32932)>, 1738753084.3702874)}
2025-02-05 18:58:05,340 - stmt_idx: 3, status: success, result: None
2025-02-05 18:58:05,340 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9
2025-02-05 18:58:05,340 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9
2025-02-05 18:58:05,344 - 执行后idx: 18, pending_stmts: {4: (2, 'UPDATE table_0 SET col_0 = 42 WHERE id BETWEEN 10 AND 10', <Thread(Thread-112, started 37668)>, 1738753085.3419523), 5: (2, "UPDATE table_0 SET col_0 = 42, col_1 = 'DFUds' WHERE id BETWEEN 12 AND 12", <Thread(Thread-113, started 42760)>, 1738753085.3419523), 6: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 36, 'NYhDb')", <Thread(Thread-114, started 12276)>, 1738753085.342731), 8: (2, "UPDATE table_0 SET col_1 = 'drefb' WHERE (id = 2) AND (col_1 = 'jeuyy') AND (col_0 = 92)", <Thread(Thread-115, started 4172)>, 1738753085.342731), 9: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 62, 'aKuvN')", <Thread(Thread-116, started 41576)>, 1738753085.3432388), 10: (2, 'UPDATE table_0 SET col_0 = 68 WHERE id BETWEEN 4 AND 4', <Thread(Thread-117, started 32144)>, 1738753085.3432388), 11: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 82, 'kHolJ')", <Thread(Thread-118, started 32308)>, 1738753085.3437474), 12: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 52, 'vrnLg')", <Thread(Thread-119, started 39360)>, 1738753085.3437474), 13: (2, 'UPDATE table_0 SET col_0 = 22 WHERE (id = 7)', <Thread(Thread-120, started 39980)>, 1738753085.3437474), 15: (2, "SELECT id, col_1 FROM table_0 WHERE (col_0 = 80) AND (col_1 = 'bjcga') FOR UPDATE", <Thread(Thread-121, started 35624)>, 1738753085.3442516), 16: (2, 'COMMIT', <Thread(Thread-122, started 44364)>, 1738753085.3442516)}
2025-02-05 18:58:05,344 - 
2025-02-05 18:58:05,449 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'UPDATE table_0 SET col_0 = 42 WHERE id BETWEEN 10 AND 10', <Thread(Thread-112, stopped 37668)>, 1738753085.3419523), 5: (2, "UPDATE table_0 SET col_0 = 42, col_1 = 'DFUds' WHERE id BETWEEN 12 AND 12", <Thread(Thread-113, stopped 42760)>, 1738753085.3419523), 6: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 36, 'NYhDb')", <Thread(Thread-114, stopped 12276)>, 1738753085.342731), 8: (2, "UPDATE table_0 SET col_1 = 'drefb' WHERE (id = 2) AND (col_1 = 'jeuyy') AND (col_0 = 92)", <Thread(Thread-115, stopped 4172)>, 1738753085.342731), 9: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 62, 'aKuvN')", <Thread(Thread-116, stopped 41576)>, 1738753085.3432388), 10: (2, 'UPDATE table_0 SET col_0 = 68 WHERE id BETWEEN 4 AND 4', <Thread(Thread-117, stopped 32144)>, 1738753085.3432388), 11: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 82, 'kHolJ')", <Thread(Thread-118, stopped 32308)>, 1738753085.3437474), 12: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 52, 'vrnLg')", <Thread(Thread-119, stopped 39360)>, 1738753085.3437474), 13: (2, 'UPDATE table_0 SET col_0 = 22 WHERE (id = 7)', <Thread(Thread-120, stopped 39980)>, 1738753085.3437474), 15: (2, "SELECT id, col_1 FROM table_0 WHERE (col_0 = 80) AND (col_1 = 'bjcga') FOR UPDATE", <Thread(Thread-121, stopped 35624)>, 1738753085.3442516), 16: (2, 'COMMIT', <Thread(Thread-122, stopped 44364)>, 1738753085.3442516)}
2025-02-05 18:58:05,449 - 
2025-02-05 18:58:05,449 - 执行前idx: 18, pending_stmts: {4: (2, 'UPDATE table_0 SET col_0 = 42 WHERE id BETWEEN 10 AND 10', <Thread(Thread-112, stopped 37668)>, 1738753085.3419523), 5: (2, "UPDATE table_0 SET col_0 = 42, col_1 = 'DFUds' WHERE id BETWEEN 12 AND 12", <Thread(Thread-113, stopped 42760)>, 1738753085.3419523), 6: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 36, 'NYhDb')", <Thread(Thread-114, stopped 12276)>, 1738753085.342731), 8: (2, "UPDATE table_0 SET col_1 = 'drefb' WHERE (id = 2) AND (col_1 = 'jeuyy') AND (col_0 = 92)", <Thread(Thread-115, stopped 4172)>, 1738753085.342731), 9: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 62, 'aKuvN')", <Thread(Thread-116, stopped 41576)>, 1738753085.3432388), 10: (2, 'UPDATE table_0 SET col_0 = 68 WHERE id BETWEEN 4 AND 4', <Thread(Thread-117, stopped 32144)>, 1738753085.3432388), 11: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 82, 'kHolJ')", <Thread(Thread-118, stopped 32308)>, 1738753085.3437474), 12: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 52, 'vrnLg')", <Thread(Thread-119, stopped 39360)>, 1738753085.3437474), 13: (2, 'UPDATE table_0 SET col_0 = 22 WHERE (id = 7)', <Thread(Thread-120, stopped 39980)>, 1738753085.3437474), 15: (2, "SELECT id, col_1 FROM table_0 WHERE (col_0 = 80) AND (col_1 = 'bjcga') FOR UPDATE", <Thread(Thread-121, stopped 35624)>, 1738753085.3442516), 16: (2, 'COMMIT', <Thread(Thread-122, stopped 44364)>, 1738753085.3442516)}
2025-02-05 18:58:05,555 - stmt_idx: 4, status: success, result: None
2025-02-05 18:58:05,555 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 42 WHERE id BETWEEN 10 AND 10
2025-02-05 18:58:05,663 - stmt_idx: 5, status: success, result: None
2025-02-05 18:58:05,664 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 42, col_1 = 'DFUds' WHERE id BETWEEN 12 AND 12
2025-02-05 18:58:05,770 - stmt_idx: 6, status: success, result: None
2025-02-05 18:58:05,770 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 36, 'NYhDb')
2025-02-05 18:58:05,875 - stmt_idx: 8, status: success, result: None
2025-02-05 18:58:05,875 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'drefb' WHERE (id = 2) AND (col_1 = 'jeuyy') AND (col_0 = 92)
2025-02-05 18:58:05,982 - stmt_idx: 9, status: success, result: None
2025-02-05 18:58:05,982 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 62, 'aKuvN')
2025-02-05 18:58:06,090 - stmt_idx: 10, status: success, result: None
2025-02-05 18:58:06,091 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 68 WHERE id BETWEEN 4 AND 4
2025-02-05 18:58:06,198 - stmt_idx: 11, status: success, result: None
2025-02-05 18:58:06,199 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 82, 'kHolJ')
2025-02-05 18:58:06,308 - stmt_idx: 12, status: success, result: None
2025-02-05 18:58:06,308 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 52, 'vrnLg')
2025-02-05 18:58:06,416 - stmt_idx: 13, status: success, result: None
2025-02-05 18:58:06,416 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 22 WHERE (id = 7)
2025-02-05 18:58:06,525 - stmt_idx: 15, status: success, result: None
2025-02-05 18:58:06,526 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE (col_0 = 80) AND (col_1 = 'bjcga') FOR UPDATE
2025-02-05 18:58:06,633 - stmt_idx: 16, status: success, result: None
2025-02-05 18:58:06,633 - 成功执行序列中事务2语句: COMMIT
2025-02-05 18:58:06,633 - 执行后idx: 18, pending_stmts: {}
2025-02-05 18:58:06,633 - 
2025-02-05 18:58:06,744 - 执行序列成功
2025-02-05 18:58:07,539 - is_atomic: True
2025-02-05 18:58:07,539 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 18:58:07,539 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 61, col_1 = 'mcGcU' WHERE id BETWEEN 9 AND 12"), (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 20, 'RNCHT')"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_1 = 'kNjDE', col_0 = 77 WHERE id BETWEEN 9 AND 9"), (2, 'UPDATE table_0 SET col_0 = 42 WHERE id BETWEEN 10 AND 10'), (2, "UPDATE table_0 SET col_0 = 42, col_1 = 'DFUds' WHERE id BETWEEN 12 AND 12"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 36, 'NYhDb')"), (2, "UPDATE table_0 SET col_1 = 'drefb' WHERE (id = 2) AND (col_1 = 'jeuyy') AND (col_0 = 92)"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 62, 'aKuvN')"), (2, 'UPDATE table_0 SET col_0 = 68 WHERE id BETWEEN 4 AND 4'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 82, 'kHolJ')"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 52, 'vrnLg')"), (2, 'UPDATE table_0 SET col_0 = 22 WHERE (id = 7)'), (2, "SELECT id, col_1 FROM table_0 WHERE (col_0 = 80) AND (col_1 = 'bjcga') FOR UPDATE"), (2, 'COMMIT')]
2025-02-05 18:58:07,539 - snapshots: {'before': {'table_0': [(1, 57, 'clehk'), (2, 92, 'jeuyy'), (3, 81, 'sbmki'), (4, 95, 'mrcxu'), (5, 20, 'giqdg'), (6, 69, 'wajaq'), (7, 32, 'iyzkd'), (8, 11, 'vryxq'), (9, 75, 'tacsc'), (10, 41, 'ysqsg'), (11, 80, 'bjcga'), (12, 64, 'uqdjo')]}, 'trx1': {'table_0': [(1, 57, 'clehk'), (2, 92, 'jeuyy'), (3, 81, 'sbmki'), (4, 95, 'mrcxu'), (5, 20, 'giqdg'), (6, 69, 'wajaq'), (7, 32, 'iyzkd'), (8, 11, 'vryxq'), (9, 61, 'mcGcU'), (10, 61, 'mcGcU'), (11, 61, 'mcGcU'), (12, 61, 'mcGcU'), (13, 20, 'RNCHT')]}, 'trx2': {'table_0': [(1, 57, 'clehk'), (2, 92, 'drefb'), (3, 81, 'sbmki'), (4, 68, 'mrcxu'), (5, 20, 'giqdg'), (6, 69, 'wajaq'), (7, 22, 'iyzkd'), (8, 11, 'vryxq'), (9, 77, 'kNjDE'), (10, 42, 'ysqsg'), (11, 80, 'bjcga'), (12, 42, 'DFUds'), (14, 36, 'NYhDb'), (15, 62, 'aKuvN'), (16, 82, 'kHolJ'), (17, 52, 'vrnLg')]}, 'serial': {'table_0': [(1, 57, 'clehk'), (2, 92, 'drefb'), (3, 81, 'sbmki'), (4, 68, 'mrcxu'), (5, 20, 'giqdg'), (6, 69, 'wajaq'), (7, 22, 'iyzkd'), (8, 11, 'vryxq'), (9, 77, 'kNjDE'), (10, 42, 'mcGcU'), (11, 61, 'mcGcU'), (12, 42, 'DFUds'), (18, 20, 'RNCHT'), (19, 36, 'NYhDb'), (20, 62, 'aKuvN'), (21, 82, 'kHolJ'), (22, 52, 'vrnLg')]}}
2025-02-05 18:58:07,539 - 
2025-02-05 18:58:07,552 - iter: 16
2025-02-05 18:58:09,113 - table table_0 has 8 rows
2025-02-05 18:58:09,114 - res_dict: {'trx1_lock_row_ids': [8], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-05 18:58:09,114 - lock_same_resource: False
2025-02-05 18:58:09,114 - 
2025-02-05 18:58:09,114 - non intersection phase1
2025-02-05 18:58:09,114 - 事务1在第一阶段自己加的锁: II
2025-02-05 18:58:09,114 - 事务2在第一阶段自己加的锁: X
2025-02-05 18:58:09,114 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 18:58:09,114 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 18:58:09,118 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:58:09,119 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 18:58:09,119 - params: {'set_expr': "col_1 = 'WuRMK', col_232 = 'sqOVf', col_4 = 'XKIIO', col_2 = 20", 'cond': '(id = 8)', 'table': 'table_0'}
2025-02-05 18:58:09,122 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=7
2025-02-05 18:58:09,124 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:58:09,124 - params: {'v1': '1', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 18:58:09,124 - non intersection phase1 end
2025-02-05 18:58:09,125 - 
2025-02-05 18:58:09,125 - non intersection phase2
2025-02-05 18:58:09,128 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 18:58:09,129 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 18:58:09,129 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 18:58:09,131 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 18:58:09,132 - needed_params: {'cond', 'table'}
2025-02-05 18:58:09,133 - params: {'cond': '(id = 8)', 'table': 'table_0'}
2025-02-05 18:58:09,133 - non intersection phase2 end
2025-02-05 18:58:09,133 - 
2025-02-05 18:58:09,133 - 生成死锁事务序列成功如下
2025-02-05 18:58:09,133 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_1 = 'WuRMK', col_232 = 'sqOVf', col_4 = 'XKIIO', col_2 = 20 WHERE (id = 8)"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 8)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 18:58:10,671 - 创建事务1连接成功
2025-02-05 18:58:10,672 - 执行事务1语句: BEGIN
2025-02-05 18:58:10,673 - 执行事务1语句: UPDATE table_0 SET col_1 = 'WuRMK', col_232 = 'sqOVf', col_4 = 'XKIIO', col_2 = 20 WHERE (id = 8)
2025-02-05 18:58:10,674 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 18:58:10,676 - 执行事务1语句: COMMIT;
2025-02-05 18:58:10,681 - 执行事务1成功
2025-02-05 18:58:13,270 - 恢复初始状态成功
2025-02-05 18:58:14,024 - 创建事务2连接成功
2025-02-05 18:58:14,026 - 执行事务2语句: BEGIN
2025-02-05 18:58:14,027 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 7 FOR UPDATE
2025-02-05 18:58:14,028 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 8)
2025-02-05 18:58:14,030 - 执行事务2语句: COMMIT;
2025-02-05 18:58:14,034 - 执行事务2成功
2025-02-05 19:35:54,711 - 
2025-02-05 19:35:54,711 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_1 = 'WuRMK', col_232 = 'sqOVf', col_4 = 'XKIIO', col_2 = 20 WHERE (id = 8)", <Thread(Thread-123, started 38448)>, 1738755354.7113101)}
2025-02-05 19:35:54,816 - stmt_idx: 2, status: success, result: None
2025-02-05 19:35:54,816 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'WuRMK', col_232 = 'sqOVf', col_4 = 'XKIIO', col_2 = 20 WHERE (id = 8)
2025-02-05 19:35:54,817 - 执行后idx: 3, pending_stmts: {}
2025-02-05 19:35:54,817 - 
2025-02-05 19:35:54,922 - 
2025-02-05 19:35:54,922 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 7 FOR UPDATE', <Thread(Thread-124, started 42464)>, 1738755354.9222198)}
2025-02-05 19:35:55,027 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 7 FOR UPDATE
2025-02-05 19:35:55,027 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 7 FOR UPDATE', <Thread(Thread-124, started 42464)>, 1738755354.9222198)}
2025-02-05 19:35:55,027 - 
2025-02-05 19:35:55,133 - 
2025-02-05 19:35:55,134 - 执行前idx: 5, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 7 FOR UPDATE', <Thread(Thread-124, started 42464)>, 1738755354.9222198), 4: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-125, started 44232)>, 1738755355.133023)}
2025-02-05 19:35:55,137 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 7 FOR UPDATE
2025-02-05 19:35:55,240 - stmt_idx: 3, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 19:35:55,240 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 7 FOR UPDATE
2025-02-05 19:35:55,240 - 错误: dictionary changed size during iteration
2025-02-05 19:35:55,246 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-125, stopped 44232)>, 1738755355.133023)}
2025-02-05 19:35:55,246 - 
2025-02-05 19:35:55,247 - 执行前idx: 8, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-125, stopped 44232)>, 1738755355.133023)}
2025-02-05 19:35:55,360 - stmt_idx: 4, status: success, result: None
2025-02-05 19:35:55,360 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 19:35:55,360 - 执行后idx: 8, pending_stmts: {}
2025-02-05 19:35:55,360 - 
2025-02-05 19:35:55,467 - 执行序列成功
2025-02-05 19:35:56,371 - is_atomic: True
2025-02-05 19:35:56,371 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 19:35:56,371 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_1 = 'WuRMK', col_232 = 'sqOVf', col_4 = 'XKIIO', col_2 = 20 WHERE (id = 8)"), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: DELETE FROM table_0 WHERE (id = 8)'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE')]
2025-02-05 19:35:56,371 - snapshots: {'before': {'table_0': [(1, 12.28, 'mdxtz', 53, 'cnpow', 'srjjs', None), (2, 58.5, 'hropb', 63, 'yordf', 'jdvpm', None), (3, 18.96, 'cmqpd', 30, 'qtkxl', 'gzbdi', None), (4, 62.94, 'rtoyg', 74, 'pbnez', 'vcimp', None), (5, 57.09, 'itxav', 57, 'iwvra', 'lzpor', None), (6, 1.33, 'ogzfb', 7, 'liggq', 'uwyhi', None), (7, 43.88, 'tjbci', 99, 'vwttv', 'tusyc', None), (8, 26.73, 'egovt', 65, 'kmtgp', 'girup', None)]}, 'trx1': {'table_0': [(1, 12.28, 'mdxtz', 53, 'cnpow', 'srjjs', None), (2, 58.5, 'hropb', 63, 'yordf', 'jdvpm', None), (3, 18.96, 'cmqpd', 30, 'qtkxl', 'gzbdi', None), (4, 62.94, 'rtoyg', 74, 'pbnez', 'vcimp', None), (5, 57.09, 'itxav', 57, 'iwvra', 'lzpor', None), (6, 1.33, 'ogzfb', 7, 'liggq', 'uwyhi', None), (7, 43.88, 'tjbci', 99, 'vwttv', 'tusyc', None), (8, 26.73, 'WuRMK', 20, 'kmtgp', 'XKIIO', 'sqOVf')]}, 'trx2': {'table_0': [(1, 12.28, 'mdxtz', 53, 'cnpow', 'srjjs', None), (2, 58.5, 'hropb', 63, 'yordf', 'jdvpm', None), (3, 18.96, 'cmqpd', 30, 'qtkxl', 'gzbdi', None), (4, 62.94, 'rtoyg', 74, 'pbnez', 'vcimp', None), (5, 57.09, 'itxav', 57, 'iwvra', 'lzpor', None), (6, 1.33, 'ogzfb', 7, 'liggq', 'uwyhi', None), (7, 43.88, 'tjbci', 99, 'vwttv', 'tusyc', None)]}, 'serial': {'table_0': [(1, 12.28, 'mdxtz', 53, 'cnpow', 'srjjs', None), (2, 58.5, 'hropb', 63, 'yordf', 'jdvpm', None), (3, 18.96, 'cmqpd', 30, 'qtkxl', 'gzbdi', None), (4, 62.94, 'rtoyg', 74, 'pbnez', 'vcimp', None), (5, 57.09, 'itxav', 57, 'iwvra', 'lzpor', None), (6, 1.33, 'ogzfb', 7, 'liggq', 'uwyhi', None), (7, 43.88, 'tjbci', 99, 'vwttv', 'tusyc', None), (8, 26.73, 'WuRMK', 20, 'kmtgp', 'XKIIO', 'sqOVf')]}}
2025-02-05 19:35:56,371 - 
2025-02-05 19:35:56,383 - iter: 17
2025-02-05 19:35:57,899 - table table_0 has 10 rows
2025-02-05 19:35:57,899 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [10], 'intersection_row_ids': []}
2025-02-05 19:35:57,899 - lock_same_resource: False
2025-02-05 19:35:57,899 - 
2025-02-05 19:35:57,899 - non intersection phase1
2025-02-05 19:35:57,900 - 事务1在第一阶段自己加的锁: S
2025-02-05 19:35:57,900 - 事务2在第一阶段自己加的锁: X
2025-02-05 19:35:57,900 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 19:35:57,900 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 19:35:57,903 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 19:35:57,905 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 19:35:57,905 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 19:35:57,909 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 19:35:57,910 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 19:35:57,910 - params: {'v1': '10', 'v2': '10', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 19:35:57,910 - non intersection phase1 end
2025-02-05 19:35:57,910 - 
2025-02-05 19:35:57,910 - non intersection phase2
2025-02-05 19:35:57,914 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 19:35:57,915 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 19:35:57,916 - params: {'v1': '10', 'v2': '10', 'select_cols': 'id, col_0, col_1, col_568', 'table': 'table_0'}
2025-02-05 19:35:57,919 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 19:35:57,920 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 19:35:57,920 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_1, col_568', 'table': 'table_0'}
2025-02-05 19:35:57,920 - non intersection phase2 end
2025-02-05 19:35:57,920 - 
2025-02-05 19:35:57,920 - 生成死锁事务序列成功如下
2025-02-05 19:35:57,920 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_568 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_568 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 19:35:59,488 - 创建事务1连接成功
2025-02-05 19:35:59,490 - 执行事务1语句: BEGIN
2025-02-05 19:35:59,491 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 19:35:59,492 - 执行事务1语句: SELECT id, col_0, col_1, col_568 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 19:35:59,492 - 执行事务1语句: COMMIT;
2025-02-05 19:35:59,497 - 执行事务1成功
2025-02-05 19:36:02,128 - 恢复初始状态成功
2025-02-05 19:36:02,923 - 创建事务2连接成功
2025-02-05 19:36:02,925 - 执行事务2语句: BEGIN
2025-02-05 19:36:02,926 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 19:36:02,927 - 执行事务2语句: SELECT id, col_1, col_568 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 19:36:02,927 - 执行事务2语句: COMMIT;
2025-02-05 19:36:02,932 - 执行事务2成功
2025-02-05 19:36:07,972 - 
2025-02-05 19:36:07,972 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-126, started 11536)>, 1738755367.972704)}
2025-02-05 19:36:08,077 - stmt_idx: 2, status: success, result: None
2025-02-05 19:36:08,077 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 19:36:08,077 - 执行后idx: 3, pending_stmts: {}
2025-02-05 19:36:08,077 - 
2025-02-05 19:36:08,188 - 
2025-02-05 19:36:08,189 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-127, started 40188)>, 1738755368.1886723)}
2025-02-05 19:36:08,296 - stmt_idx: 3, status: success, result: None
2025-02-05 19:36:08,296 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 19:36:08,296 - 执行后idx: 4, pending_stmts: {}
2025-02-05 19:36:08,296 - 
2025-02-05 19:36:08,405 - 
2025-02-05 19:36:08,405 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_568 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-128, started 35448)>, 1738755368.405666)}
2025-02-05 19:36:08,514 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_568 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 19:36:08,514 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_568 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-128, started 35448)>, 1738755368.405666)}
2025-02-05 19:36:08,515 - 
2025-02-05 19:36:08,623 - 
2025-02-05 19:36:08,623 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_1, col_568 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-128, started 35448)>, 1738755368.405666), 5: (1, 'SELECT id, col_0, col_1, col_568 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-129, started 35000)>, 1738755368.6232839)}
2025-02-05 19:36:08,626 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1, col_568 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 19:36:08,729 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 19:36:08,729 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_1, col_568 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 19:36:08,729 - 错误: dictionary changed size during iteration
2025-02-05 19:36:08,732 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0, col_1, col_568 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-129, stopped 35000)>, 1738755368.6232839)}
2025-02-05 19:36:08,732 - 
2025-02-05 19:36:08,732 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_568 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-129, stopped 35000)>, 1738755368.6232839)}
2025-02-05 19:36:08,835 - stmt_idx: 5, status: success, result: None
2025-02-05 19:36:08,835 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_568 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 19:36:08,835 - 执行后idx: 8, pending_stmts: {}
2025-02-05 19:36:08,835 - 
2025-02-05 19:36:08,945 - 执行序列成功
2025-02-05 19:36:09,734 - is_atomic: True
2025-02-05 19:36:09,735 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 19:36:09,735 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_568 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE')]
2025-02-05 19:36:09,735 - snapshots: {'before': {'table_0': [(1, 'kvjbj', 'orknl', None), (2, 'txbxy', 'cmnoz', None), (3, 'htqvh', 'yxlhi', None), (4, 'ziaqh', 'etidg', None), (5, 'lkhjz', 'psvni', None), (6, 'zjgpx', 'ejopa', None), (7, 'xetes', 'rnzag', None), (8, 'jqogy', 'tdhao', None), (9, 'cgyjs', 'yvqox', None), (10, 'sombd', 'hgznk', None)]}, 'trx1': {'table_0': [(1, 'kvjbj', 'orknl', None), (2, 'txbxy', 'cmnoz', None), (3, 'htqvh', 'yxlhi', None), (4, 'ziaqh', 'etidg', None), (5, 'lkhjz', 'psvni', None), (6, 'zjgpx', 'ejopa', None), (7, 'xetes', 'rnzag', None), (8, 'jqogy', 'tdhao', None), (9, 'cgyjs', 'yvqox', None), (10, 'sombd', 'hgznk', None)]}, 'trx2': {'table_0': [(1, 'kvjbj', 'orknl', None), (2, 'txbxy', 'cmnoz', None), (3, 'htqvh', 'yxlhi', None), (4, 'ziaqh', 'etidg', None), (5, 'lkhjz', 'psvni', None), (6, 'zjgpx', 'ejopa', None), (7, 'xetes', 'rnzag', None), (8, 'jqogy', 'tdhao', None), (9, 'cgyjs', 'yvqox', None), (10, 'sombd', 'hgznk', None)]}, 'serial': {'table_0': [(1, 'kvjbj', 'orknl', None), (2, 'txbxy', 'cmnoz', None), (3, 'htqvh', 'yxlhi', None), (4, 'ziaqh', 'etidg', None), (5, 'lkhjz', 'psvni', None), (6, 'zjgpx', 'ejopa', None), (7, 'xetes', 'rnzag', None), (8, 'jqogy', 'tdhao', None), (9, 'cgyjs', 'yvqox', None), (10, 'sombd', 'hgznk', None)]}}
2025-02-05 19:36:09,735 - 
2025-02-05 19:36:09,750 - iter: 18
2025-02-05 19:36:11,356 - table table_0 has 14 rows
2025-02-05 19:36:11,356 - res_dict: {'trx1_lock_row_ids': [5], 'trx2_lock_row_ids': [11], 'intersection_row_ids': []}
2025-02-05 19:36:11,356 - lock_same_resource: False
2025-02-05 19:36:11,356 - 
2025-02-05 19:36:11,356 - non intersection phase1
2025-02-05 19:36:11,357 - 事务1在第一阶段自己加的锁: X
2025-02-05 19:36:11,357 - 事务2在第一阶段自己加的锁: X
2025-02-05 19:36:11,357 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 19:36:11,357 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 19:36:11,361 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 19:36:11,363 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 19:36:11,363 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_3', 'table': 'table_0'}
2025-02-05 19:36:11,368 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=11, is_continuous=True, range_end_idx=11
2025-02-05 19:36:11,369 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 19:36:11,369 - params: {'v1': '11', 'v2': '11', 'select_cols': 'id, col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 19:36:11,370 - non intersection phase1 end
2025-02-05 19:36:11,370 - 
2025-02-05 19:36:11,370 - non intersection phase2
2025-02-05 19:36:11,374 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=11, is_continuous=True, range_end_idx=11
2025-02-05 19:36:11,377 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 19:36:11,377 - params: {'v1': '11', 'v2': '11', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 19:36:11,380 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 19:36:11,382 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 19:36:11,382 - params: {'set_expr': "col_3 = 'FRyAX', col_0 = 93", 'v1': '5', 'v2': '5', 'table': 'table_0'}
2025-02-05 19:36:11,383 - non intersection phase2 end
2025-02-05 19:36:11,383 - 
2025-02-05 19:36:11,383 - 生成死锁事务序列成功如下
2025-02-05 19:36:11,383 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (2, "UPDATE table_0 SET col_3 = 'FRyAX', col_0 = 93 WHERE id BETWEEN 5 AND 5"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 19:36:13,047 - 创建事务1连接成功
2025-02-05 19:36:13,049 - 执行事务1语句: BEGIN
2025-02-05 19:36:13,050 - 执行事务1语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 19:36:13,050 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 19:36:13,051 - 执行事务1语句: COMMIT;
2025-02-05 19:36:13,056 - 执行事务1成功
2025-02-05 23:33:28,884 - 恢复初始状态成功
2025-02-05 23:33:30,825 - 创建事务2连接成功
2025-02-05 23:33:30,840 - 执行事务2语句: BEGIN
2025-02-05 23:33:30,843 - 执行事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:33:30,847 - 执行事务2语句: UPDATE table_0 SET col_3 = 'FRyAX', col_0 = 93 WHERE id BETWEEN 5 AND 5
2025-02-05 23:33:30,855 - 执行事务2语句: COMMIT;
2025-02-05 23:33:30,886 - 执行事务2成功
2025-02-05 23:33:39,244 - 
2025-02-05 23:33:39,244 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-130, started 26244)>, 1738769619.24401)}
2025-02-05 23:33:39,356 - stmt_idx: 2, status: success, result: None
2025-02-05 23:33:39,356 - 成功执行序列中事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:33:39,356 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:33:39,356 - 
2025-02-05 23:33:39,463 - 
2025-02-05 23:33:39,464 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-131, started 37172)>, 1738769619.4635696)}
2025-02-05 23:33:39,569 - stmt_idx: 3, status: success, result: None
2025-02-05 23:33:39,569 - 成功执行序列中事务1语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:33:39,569 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:33:39,569 - 
2025-02-05 23:33:39,671 - 
2025-02-05 23:33:39,672 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-132, started 24648)>, 1738769619.6713805)}
2025-02-05 23:33:39,776 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:33:39,776 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-132, started 24648)>, 1738769619.6713805)}
2025-02-05 23:33:39,776 - 
2025-02-05 23:33:39,881 - 
2025-02-05 23:33:39,882 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-132, started 24648)>, 1738769619.6713805), 5: (2, "UPDATE table_0 SET col_3 = 'FRyAX', col_0 = 93 WHERE id BETWEEN 5 AND 5", <Thread(Thread-133, started 14392)>, 1738769619.881363)}
2025-02-05 23:33:39,884 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_3 = 'FRyAX', col_0 = 93 WHERE id BETWEEN 5 AND 5
2025-02-05 23:33:39,986 - stmt_idx: 4, status: success, result: None
2025-02-05 23:33:39,986 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:33:39,986 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:33:40,096 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:33:40,096 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: UPDATE table_0 SET col_3 = 'FRyAX', col_0 = 93 WHERE id BETWEEN 5 AND 5
2025-02-05 23:33:40,096 - 错误: dictionary changed size during iteration
2025-02-05 23:33:40,099 - 执行序列成功
2025-02-05 23:33:40,957 - is_atomic: True
2025-02-05 23:33:40,957 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:33:40,957 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 23:33:40,957 - snapshots: {'before': {'table_0': [(1, 53, 42.8, 'njyvz'), (2, 31, 42.95, 'frkkg'), (3, 96, 90.49, 'axueu'), (4, 50, 6.12, 'fkkvb'), (5, 40, 27.63, 'dbypr'), (6, 71, 16.67, 'qafrz'), (7, 40, 97.32, 'zoglh'), (8, 63, 26.92, 'wfkju'), (9, 18, 64.98, 'usmnt'), (10, 67, 35.31, 'quwkm'), (11, 7, 20.14, 'mevue'), (12, 33, 68.18, 'nqeyv'), (13, 86, 52.77, 'ywytm'), (14, 61, 83.78, 'uhzsv')]}, 'trx1': {'table_0': [(1, 53, 42.8, 'njyvz'), (2, 31, 42.95, 'frkkg'), (3, 96, 90.49, 'axueu'), (4, 50, 6.12, 'fkkvb'), (5, 40, 27.63, 'dbypr'), (6, 71, 16.67, 'qafrz'), (7, 40, 97.32, 'zoglh'), (8, 63, 26.92, 'wfkju'), (9, 18, 64.98, 'usmnt'), (10, 67, 35.31, 'quwkm'), (11, 7, 20.14, 'mevue'), (12, 33, 68.18, 'nqeyv'), (13, 86, 52.77, 'ywytm'), (14, 61, 83.78, 'uhzsv')]}, 'trx2': {'table_0': [(1, 53, 42.8, 'njyvz'), (2, 31, 42.95, 'frkkg'), (3, 96, 90.49, 'axueu'), (4, 50, 6.12, 'fkkvb'), (5, 93, 27.63, 'FRyAX'), (6, 71, 16.67, 'qafrz'), (7, 40, 97.32, 'zoglh'), (8, 63, 26.92, 'wfkju'), (9, 18, 64.98, 'usmnt'), (10, 67, 35.31, 'quwkm'), (11, 7, 20.14, 'mevue'), (12, 33, 68.18, 'nqeyv'), (13, 86, 52.77, 'ywytm'), (14, 61, 83.78, 'uhzsv')]}, 'serial': {'table_0': [(1, 53, 42.8, 'njyvz'), (2, 31, 42.95, 'frkkg'), (3, 96, 90.49, 'axueu'), (4, 50, 6.12, 'fkkvb'), (5, 40, 27.63, 'dbypr'), (6, 71, 16.67, 'qafrz'), (7, 40, 97.32, 'zoglh'), (8, 63, 26.92, 'wfkju'), (9, 18, 64.98, 'usmnt'), (10, 67, 35.31, 'quwkm'), (11, 7, 20.14, 'mevue'), (12, 33, 68.18, 'nqeyv'), (13, 86, 52.77, 'ywytm'), (14, 61, 83.78, 'uhzsv')]}}
2025-02-05 23:33:40,957 - 
2025-02-05 23:33:40,973 - iter: 19
2025-02-05 23:33:42,562 - table table_0 has 5 rows
2025-02-05 23:33:42,562 - trx1_start_id: 2
2025-02-05 23:33:42,562 - trx1_end_id: 3
2025-02-05 23:33:42,562 - trx1_exclusive_start_id: 2
2025-02-05 23:33:42,562 - trx1_exclusive_end_id: 1
2025-02-05 23:33:42,562 - trx1_exclusive_ids: []
2025-02-05 23:33:42,562 - trx2_start_id: 2
2025-02-05 23:33:42,562 - trx2_end_id: 4
2025-02-05 23:33:42,562 - trx2_exclusive_start_id: 4
2025-02-05 23:33:42,562 - trx2_exclusive_end_id: 4
2025-02-05 23:33:42,562 - trx2_exclusive_ids: [4]
2025-02-05 23:33:42,562 - intersection_ids: [2, 3]
2025-02-05 23:33:42,562 - res_dict: {'trx1_lock_row_ids': [2, 3], 'trx2_lock_row_ids': [2, 3, 4], 'intersection_row_ids': [2, 3]}
2025-02-05 23:33:42,562 - lock_same_resource: True
2025-02-05 23:33:42,562 - 
2025-02-05 23:33:42,562 - intersection phase1
2025-02-05 23:33:42,567 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-05 23:33:42,568 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:33:42,568 - params: {'set_expr': "col_0 = 'alGup'", 'v1': '2', 'v2': '3', 'table': 'table_0'}
2025-02-05 23:33:42,570 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=4
2025-02-05 23:33:42,571 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:33:42,571 - params: {'v1': '2', 'v2': '4', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:33:42,571 - intersection phase1 end
2025-02-05 23:33:42,572 - 
2025-02-05 23:33:42,572 - intersection phase2
2025-02-05 23:33:42,572 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:33:42,572 - 事务2在第二阶段自己加的锁: S
2025-02-05 23:33:42,572 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:33:42,572 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:33:42,577 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=1
2025-02-05 23:33:42,578 - 生成连续锁定SQL失败: 找不到从2到1的行
2025-02-05 23:33:42,578 - 生成锁SQL失败: 找不到从2到1的行
2025-02-05 23:33:42,578 - 生成死锁事务序列失败: 找不到从2到1的行
2025-02-05 23:33:42,578 - 
2025-02-05 23:33:42,579 - Error in iteration 19: 找不到从2到1的行
2025-02-05 23:33:42,579 - 
2025-02-05 23:33:42,588 - iter: 20
2025-02-05 23:33:44,174 - table table_0 has 12 rows
2025-02-05 23:33:44,174 - res_dict: {'trx1_lock_row_ids': [1, 9], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7, 10, 11, 12], 'intersection_row_ids': []}
2025-02-05 23:33:44,175 - lock_same_resource: False
2025-02-05 23:33:44,175 - 
2025-02-05 23:33:44,175 - non intersection phase1
2025-02-05 23:33:44,175 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:33:44,175 - 事务2在第一阶段自己加的锁: II
2025-02-05 23:33:44,175 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:33:44,175 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:33:44,181 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,182 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:33:44,183 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:33:44,188 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,190 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:33:44,190 - params: {'cond': "(id = 9) AND (col_1 = 'kqocd')", 'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0'}
2025-02-05 23:33:44,196 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,198 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:33:44,198 - params: {'vals': "NULL, 55.99, 'UUKrG', 21, 'KpWls', 44.22", 'insert_cols': 'id, col_0, col_1, col_3, col_4, col_941', 'table': 'table_0'}
2025-02-05 23:33:44,202 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,204 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:33:44,204 - params: {'set_expr': "col_1 = 'pDDuf', col_0 = 25.51, col_4 = 'fWtYN', col_3 = 72, col_941 = 33.38", 'cond': '(id = 3)', 'table': 'table_0'}
2025-02-05 23:33:44,209 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,211 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:33:44,212 - params: {'vals': "NULL, 77.47, 'gPQaU', 93, 'aLMCR', 96.92", 'insert_cols': 'id, col_0, col_1, col_3, col_4, col_941', 'table': 'table_0'}
2025-02-05 23:33:44,215 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,218 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:33:44,218 - params: {'vals': "NULL, 20.79, 'TXrth', 34, 'bRLWx', 35.15", 'insert_cols': 'id, col_0, col_1, col_3, col_4, col_941', 'table': 'table_0'}
2025-02-05 23:33:44,223 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,224 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:33:44,224 - params: {'vals': "NULL, 78.83, 'Ppqqo', 85, 'JPdfe', 88.66", 'insert_cols': 'id, col_0, col_1, col_3, col_4, col_941', 'table': 'table_0'}
2025-02-05 23:33:44,231 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,233 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:33:44,233 - params: {'vals': "NULL, 69.18, 'tCcnS', 65, 'doQNf', 40.97", 'insert_cols': 'id, col_0, col_1, col_3, col_4, col_941', 'table': 'table_0'}
2025-02-05 23:33:44,239 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,241 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:33:44,241 - params: {'set_expr': "col_3 = 100, col_941 = 25.43, col_1 = 'FZodX', col_4 = 'LSPVJ', col_0 = 42.75", 'v1': '10', 'v2': '10', 'table': 'table_0'}
2025-02-05 23:33:44,246 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,249 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:33:44,249 - params: {'set_expr': "col_4 = 'FnkTE', col_3 = 21, col_0 = 56.45, col_941 = 49.68", 'cond': "(id = 11) AND (col_1 = 'qteeb') AND (col_3 = 48)", 'table': 'table_0'}
2025-02-05 23:33:44,253 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,256 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:33:44,256 - params: {'vals': "NULL, 38.13, 'sZnGz', 19, 'MphaD', 36.05", 'insert_cols': 'id, col_0, col_1, col_3, col_4, col_941', 'table': 'table_0'}
2025-02-05 23:33:44,256 - non intersection phase1 end
2025-02-05 23:33:44,256 - 
2025-02-05 23:33:44,257 - non intersection phase2
2025-02-05 23:33:44,262 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,264 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:33:44,264 - params: {'vals': "NULL, 60.32, 'lyALO', 52, 'ZMnRI', 3.62", 'insert_cols': 'id, col_0, col_1, col_3, col_4, col_941', 'table': 'table_0'}
2025-02-05 23:33:44,267 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:33:44,270 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:33:44,270 - params: {'v1': '9', 'v2': '9', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:33:44,270 - non intersection phase2 end
2025-02-05 23:33:44,270 - 
2025-02-05 23:33:44,270 - 生成死锁事务序列成功如下
2025-02-05 23:33:44,270 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 55.99, 'UUKrG', 21, 'KpWls', 44.22)"), (2, "UPDATE table_0 SET col_1 = 'pDDuf', col_0 = 25.51, col_4 = 'fWtYN', col_3 = 72, col_941 = 33.38 WHERE (id = 3)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 77.47, 'gPQaU', 93, 'aLMCR', 96.92)"), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 20.79, 'TXrth', 34, 'bRLWx', 35.15)"), (1, "SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 9) AND (col_1 = 'kqocd') FOR UPDATE"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 78.83, 'Ppqqo', 85, 'JPdfe', 88.66)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 69.18, 'tCcnS', 65, 'doQNf', 40.97)"), (2, "UPDATE table_0 SET col_3 = 100, col_941 = 25.43, col_1 = 'FZodX', col_4 = 'LSPVJ', col_0 = 42.75 WHERE id BETWEEN 10 AND 10"), (2, "UPDATE table_0 SET col_4 = 'FnkTE', col_3 = 21, col_0 = 56.45, col_941 = 49.68 WHERE (id = 11) AND (col_1 = 'qteeb') AND (col_3 = 48)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 38.13, 'sZnGz', 19, 'MphaD', 36.05)"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 60.32, 'lyALO', 52, 'ZMnRI', 3.62)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:33:45,866 - 创建事务1连接成功
2025-02-05 23:33:45,867 - 执行事务1语句: BEGIN
2025-02-05 23:33:45,869 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:33:45,870 - 执行事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 9) AND (col_1 = 'kqocd') FOR UPDATE
2025-02-05 23:33:45,871 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 60.32, 'lyALO', 52, 'ZMnRI', 3.62)
2025-02-05 23:33:45,873 - 执行事务1语句: COMMIT;
2025-02-05 23:33:45,879 - 执行事务1成功
2025-02-05 23:33:48,501 - 恢复初始状态成功
2025-02-05 23:33:49,296 - 创建事务2连接成功
2025-02-05 23:33:49,298 - 执行事务2语句: BEGIN
2025-02-05 23:33:49,299 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 55.99, 'UUKrG', 21, 'KpWls', 44.22)
2025-02-05 23:33:49,300 - 执行事务2语句: UPDATE table_0 SET col_1 = 'pDDuf', col_0 = 25.51, col_4 = 'fWtYN', col_3 = 72, col_941 = 33.38 WHERE (id = 3)
2025-02-05 23:33:49,301 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 77.47, 'gPQaU', 93, 'aLMCR', 96.92)
2025-02-05 23:33:49,302 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 20.79, 'TXrth', 34, 'bRLWx', 35.15)
2025-02-05 23:33:49,302 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 78.83, 'Ppqqo', 85, 'JPdfe', 88.66)
2025-02-05 23:33:49,304 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 69.18, 'tCcnS', 65, 'doQNf', 40.97)
2025-02-05 23:33:49,304 - 执行事务2语句: UPDATE table_0 SET col_3 = 100, col_941 = 25.43, col_1 = 'FZodX', col_4 = 'LSPVJ', col_0 = 42.75 WHERE id BETWEEN 10 AND 10
2025-02-05 23:33:49,305 - 执行事务2语句: UPDATE table_0 SET col_4 = 'FnkTE', col_3 = 21, col_0 = 56.45, col_941 = 49.68 WHERE (id = 11) AND (col_1 = 'qteeb') AND (col_3 = 48)
2025-02-05 23:33:49,305 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 38.13, 'sZnGz', 19, 'MphaD', 36.05)
2025-02-05 23:33:49,306 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:33:49,308 - 执行事务2语句: COMMIT;
2025-02-05 23:33:49,314 - 执行事务2成功
2025-02-05 23:33:54,373 - 
2025-02-05 23:33:54,373 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 55.99, 'UUKrG', 21, 'KpWls', 44.22)", <Thread(Thread-134, started 43548)>, 1738769634.3737524)}
2025-02-05 23:33:54,477 - stmt_idx: 2, status: success, result: None
2025-02-05 23:33:54,477 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 55.99, 'UUKrG', 21, 'KpWls', 44.22)
2025-02-05 23:33:54,477 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:33:54,477 - 
2025-02-05 23:33:54,589 - 
2025-02-05 23:33:54,589 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'pDDuf', col_0 = 25.51, col_4 = 'fWtYN', col_3 = 72, col_941 = 33.38 WHERE (id = 3)", <Thread(Thread-135, started 32096)>, 1738769634.5891206)}
2025-02-05 23:33:54,698 - stmt_idx: 3, status: success, result: None
2025-02-05 23:33:54,698 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'pDDuf', col_0 = 25.51, col_4 = 'fWtYN', col_3 = 72, col_941 = 33.38 WHERE (id = 3)
2025-02-05 23:33:54,698 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:33:54,698 - 
2025-02-05 23:33:54,806 - 
2025-02-05 23:33:54,806 - 执行前idx: 5, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 77.47, 'gPQaU', 93, 'aLMCR', 96.92)", <Thread(Thread-136, started 27184)>, 1738769634.8063707)}
2025-02-05 23:33:54,912 - stmt_idx: 4, status: success, result: None
2025-02-05 23:33:54,912 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 77.47, 'gPQaU', 93, 'aLMCR', 96.92)
2025-02-05 23:33:54,912 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:33:54,912 - 
2025-02-05 23:33:55,020 - 
2025-02-05 23:33:55,020 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-137, started 7896)>, 1738769635.0202632)}
2025-02-05 23:33:55,136 - stmt_idx: 5, status: success, result: None
2025-02-05 23:33:55,136 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:33:55,136 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:33:55,136 - 
2025-02-05 23:33:55,245 - 
2025-02-05 23:33:55,245 - 执行前idx: 7, pending_stmts: {6: (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 20.79, 'TXrth', 34, 'bRLWx', 35.15)", <Thread(Thread-138, started 37316)>, 1738769635.2457876)}
2025-02-05 23:33:55,357 - stmt_idx: 6, status: success, result: None
2025-02-05 23:33:55,357 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 20.79, 'TXrth', 34, 'bRLWx', 35.15)
2025-02-05 23:33:55,357 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:33:55,357 - 
2025-02-05 23:33:55,463 - 
2025-02-05 23:33:55,464 - 执行前idx: 8, pending_stmts: {7: (1, "SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 9) AND (col_1 = 'kqocd') FOR UPDATE", <Thread(Thread-139, started 39964)>, 1738769635.4635594)}
2025-02-05 23:33:55,569 - stmt_idx: 7, status: success, result: None
2025-02-05 23:33:55,569 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 9) AND (col_1 = 'kqocd') FOR UPDATE
2025-02-05 23:33:55,569 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:33:55,569 - 
2025-02-05 23:33:55,678 - 
2025-02-05 23:33:55,679 - 执行前idx: 9, pending_stmts: {8: (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 78.83, 'Ppqqo', 85, 'JPdfe', 88.66)", <Thread(Thread-140, started 44808)>, 1738769635.6788895)}
2025-02-05 23:33:55,786 - stmt_idx: 8, status: success, result: None
2025-02-05 23:33:55,786 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 78.83, 'Ppqqo', 85, 'JPdfe', 88.66)
2025-02-05 23:33:55,787 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:33:55,787 - 
2025-02-05 23:33:55,895 - 
2025-02-05 23:33:55,896 - 执行前idx: 10, pending_stmts: {9: (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 69.18, 'tCcnS', 65, 'doQNf', 40.97)", <Thread(Thread-141, started 21404)>, 1738769635.8952396)}
2025-02-05 23:33:56,003 - stmt_idx: 9, status: success, result: None
2025-02-05 23:33:56,004 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 69.18, 'tCcnS', 65, 'doQNf', 40.97)
2025-02-05 23:33:56,004 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:33:56,004 - 
2025-02-05 23:33:56,112 - 
2025-02-05 23:33:56,112 - 执行前idx: 11, pending_stmts: {10: (2, "UPDATE table_0 SET col_3 = 100, col_941 = 25.43, col_1 = 'FZodX', col_4 = 'LSPVJ', col_0 = 42.75 WHERE id BETWEEN 10 AND 10", <Thread(Thread-142, started 40516)>, 1738769636.1120317)}
2025-02-05 23:33:56,221 - stmt_idx: 10, status: success, result: None
2025-02-05 23:33:56,221 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 100, col_941 = 25.43, col_1 = 'FZodX', col_4 = 'LSPVJ', col_0 = 42.75 WHERE id BETWEEN 10 AND 10
2025-02-05 23:33:56,221 - 执行后idx: 11, pending_stmts: {}
2025-02-05 23:33:56,221 - 
2025-02-05 23:33:56,330 - 
2025-02-05 23:33:56,330 - 执行前idx: 12, pending_stmts: {11: (2, "UPDATE table_0 SET col_4 = 'FnkTE', col_3 = 21, col_0 = 56.45, col_941 = 49.68 WHERE (id = 11) AND (col_1 = 'qteeb') AND (col_3 = 48)", <Thread(Thread-143, started 14036)>, 1738769636.330475)}
2025-02-05 23:33:56,432 - stmt_idx: 11, status: success, result: None
2025-02-05 23:33:56,433 - 成功执行序列中事务2语句: UPDATE table_0 SET col_4 = 'FnkTE', col_3 = 21, col_0 = 56.45, col_941 = 49.68 WHERE (id = 11) AND (col_1 = 'qteeb') AND (col_3 = 48)
2025-02-05 23:33:56,433 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:33:56,433 - 
2025-02-05 23:33:56,540 - 
2025-02-05 23:33:56,540 - 执行前idx: 13, pending_stmts: {12: (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 38.13, 'sZnGz', 19, 'MphaD', 36.05)", <Thread(Thread-144, started 39108)>, 1738769636.5405014)}
2025-02-05 23:33:56,652 - stmt_idx: 12, status: success, result: None
2025-02-05 23:33:56,652 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 38.13, 'sZnGz', 19, 'MphaD', 36.05)
2025-02-05 23:33:56,654 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:33:56,654 - 
2025-02-05 23:33:56,761 - 
2025-02-05 23:33:56,761 - 执行前idx: 14, pending_stmts: {13: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-145, started 6060)>, 1738769636.7611308)}
2025-02-05 23:33:56,862 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:33:56,862 - 执行后idx: 14, pending_stmts: {13: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-145, started 6060)>, 1738769636.7611308)}
2025-02-05 23:33:56,862 - 
2025-02-05 23:33:56,977 - 
2025-02-05 23:33:56,978 - 执行前idx: 15, pending_stmts: {13: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-145, started 6060)>, 1738769636.7611308), 14: (1, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 60.32, 'lyALO', 52, 'ZMnRI', 3.62)", <Thread(Thread-146, started 32340)>, 1738769636.9774413)}
2025-02-05 23:33:57,092 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:33:57,198 - stmt_idx: 14, status: success, result: None
2025-02-05 23:33:57,198 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 60.32, 'lyALO', 52, 'ZMnRI', 3.62)
2025-02-05 23:33:57,198 - 执行后idx: 15, pending_stmts: {13: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-145, started 6060)>, 1738769636.7611308)}
2025-02-05 23:33:57,198 - 
2025-02-05 23:33:57,313 - 序列遍历完成，开始查看剩余阻塞的语句：{13: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-145, started 6060)>, 1738769636.7611308)}
2025-02-05 23:33:57,313 - 
2025-02-05 23:33:57,313 - 执行前idx: 17, pending_stmts: {13: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-145, stopped 6060)>, 1738769636.7611308)}
2025-02-05 23:33:57,416 - stmt_idx: 13, status: success, result: None
2025-02-05 23:33:57,416 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:33:57,417 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:33:57,417 - 执行后idx: 17, pending_stmts: {16: (2, 'COMMIT', <Thread(Thread-147, started 12208)>, 1738769637.4174802)}
2025-02-05 23:33:57,417 - 
2025-02-05 23:33:57,529 - 序列遍历完成，开始查看剩余阻塞的语句：{16: (2, 'COMMIT', <Thread(Thread-147, stopped 12208)>, 1738769637.4174802)}
2025-02-05 23:33:57,530 - 
2025-02-05 23:33:57,530 - 执行前idx: 17, pending_stmts: {16: (2, 'COMMIT', <Thread(Thread-147, stopped 12208)>, 1738769637.4174802)}
2025-02-05 23:33:57,637 - stmt_idx: 16, status: success, result: None
2025-02-05 23:33:57,637 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:33:57,637 - 执行后idx: 17, pending_stmts: {}
2025-02-05 23:33:57,637 - 
2025-02-05 23:33:57,750 - 执行序列成功
2025-02-05 23:33:58,534 - is_atomic: True
2025-02-05 23:33:58,534 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:33:58,534 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 55.99, 'UUKrG', 21, 'KpWls', 44.22)"), (2, "UPDATE table_0 SET col_1 = 'pDDuf', col_0 = 25.51, col_4 = 'fWtYN', col_3 = 72, col_941 = 33.38 WHERE (id = 3)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 77.47, 'gPQaU', 93, 'aLMCR', 96.92)"), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 20.79, 'TXrth', 34, 'bRLWx', 35.15)"), (1, "SELECT id, col_0, col_1, col_3 FROM table_0 WHERE (id = 9) AND (col_1 = 'kqocd') FOR UPDATE"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 78.83, 'Ppqqo', 85, 'JPdfe', 88.66)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 69.18, 'tCcnS', 65, 'doQNf', 40.97)"), (2, "UPDATE table_0 SET col_3 = 100, col_941 = 25.43, col_1 = 'FZodX', col_4 = 'LSPVJ', col_0 = 42.75 WHERE id BETWEEN 10 AND 10"), (2, "UPDATE table_0 SET col_4 = 'FnkTE', col_3 = 21, col_0 = 56.45, col_941 = 49.68 WHERE (id = 11) AND (col_1 = 'qteeb') AND (col_3 = 48)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 38.13, 'sZnGz', 19, 'MphaD', 36.05)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_3, col_4, col_941) VALUES (NULL, 60.32, 'lyALO', 52, 'ZMnRI', 3.62)"), (1, 'COMMIT'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 23:33:58,535 - snapshots: {'before': {'table_0': [(1, 41.73, 'qlhue', 67, 'jepwe', None), (2, 35.25, 'rcxwg', 8, 'kdetl', None), (3, 15.75, 'fmysd', 84, 'npchf', None), (4, 65.43, 'cavfa', 76, 'yhjxp', None), (5, 64.94, 'kovsl', 58, 'atuuq', None), (6, 16.09, 'lqpqa', 84, 'qfuyu', None), (7, 42.15, 'zuyxf', 28, 'wfodd', None), (8, 91.14, 'bicop', 94, 'ghsuq', None), (9, 31.97, 'kqocd', 85, 'kvaow', None), (10, 75.31, 'qtwwr', 72, 'lbgop', None), (11, 86.54, 'qteeb', 48, 'zjfax', None), (12, 51.95, 'rkfcy', 13, 'kuvum', None)]}, 'trx1': {'table_0': [(1, 41.73, 'qlhue', 67, 'jepwe', None), (2, 35.25, 'rcxwg', 8, 'kdetl', None), (3, 15.75, 'fmysd', 84, 'npchf', None), (4, 65.43, 'cavfa', 76, 'yhjxp', None), (5, 64.94, 'kovsl', 58, 'atuuq', None), (6, 16.09, 'lqpqa', 84, 'qfuyu', None), (7, 42.15, 'zuyxf', 28, 'wfodd', None), (8, 91.14, 'bicop', 94, 'ghsuq', None), (9, 31.97, 'kqocd', 85, 'kvaow', None), (10, 75.31, 'qtwwr', 72, 'lbgop', None), (11, 86.54, 'qteeb', 48, 'zjfax', None), (12, 51.95, 'rkfcy', 13, 'kuvum', None), (13, 60.32, 'lyALO', 52, 'ZMnRI', 3.62)]}, 'trx2': {'table_0': [(1, 41.73, 'qlhue', 67, 'jepwe', None), (2, 35.25, 'rcxwg', 8, 'kdetl', None), (3, 25.51, 'pDDuf', 72, 'fWtYN', 33.38), (4, 65.43, 'cavfa', 76, 'yhjxp', None), (5, 64.94, 'kovsl', 58, 'atuuq', None), (6, 16.09, 'lqpqa', 84, 'qfuyu', None), (7, 42.15, 'zuyxf', 28, 'wfodd', None), (8, 91.14, 'bicop', 94, 'ghsuq', None), (9, 31.97, 'kqocd', 85, 'kvaow', None), (10, 42.75, 'FZodX', 100, 'LSPVJ', 25.43), (11, 56.45, 'qteeb', 21, 'FnkTE', 49.68), (12, 51.95, 'rkfcy', 13, 'kuvum', None), (14, 55.99, 'UUKrG', 21, 'KpWls', 44.22), (15, 77.47, 'gPQaU', 93, 'aLMCR', 96.92), (16, 20.79, 'TXrth', 34, 'bRLWx', 35.15), (17, 78.83, 'Ppqqo', 85, 'JPdfe', 88.66), (18, 69.18, 'tCcnS', 65, 'doQNf', 40.97), (19, 38.13, 'sZnGz', 19, 'MphaD', 36.05)]}, 'serial': {'table_0': [(1, 41.73, 'qlhue', 67, 'jepwe', None), (2, 35.25, 'rcxwg', 8, 'kdetl', None), (3, 25.51, 'pDDuf', 72, 'fWtYN', 33.38), (4, 65.43, 'cavfa', 76, 'yhjxp', None), (5, 64.94, 'kovsl', 58, 'atuuq', None), (6, 16.09, 'lqpqa', 84, 'qfuyu', None), (7, 42.15, 'zuyxf', 28, 'wfodd', None), (8, 91.14, 'bicop', 94, 'ghsuq', None), (9, 31.97, 'kqocd', 85, 'kvaow', None), (10, 42.75, 'FZodX', 100, 'LSPVJ', 25.43), (11, 56.45, 'qteeb', 21, 'FnkTE', 49.68), (12, 51.95, 'rkfcy', 13, 'kuvum', None), (20, 55.99, 'UUKrG', 21, 'KpWls', 44.22), (21, 77.47, 'gPQaU', 93, 'aLMCR', 96.92), (22, 20.79, 'TXrth', 34, 'bRLWx', 35.15), (23, 78.83, 'Ppqqo', 85, 'JPdfe', 88.66), (24, 69.18, 'tCcnS', 65, 'doQNf', 40.97), (25, 38.13, 'sZnGz', 19, 'MphaD', 36.05), (26, 60.32, 'lyALO', 52, 'ZMnRI', 3.62)]}}
2025-02-05 23:33:58,535 - 
2025-02-05 23:33:58,546 - iter: 21
2025-02-05 23:34:00,070 - table table_0 has 12 rows
2025-02-05 23:34:00,070 - res_dict: {'trx1_lock_row_ids': [11], 'trx2_lock_row_ids': [9, 10], 'intersection_row_ids': []}
2025-02-05 23:34:00,070 - lock_same_resource: False
2025-02-05 23:34:00,071 - 
2025-02-05 23:34:00,071 - non intersection phase1
2025-02-05 23:34:00,071 - 事务1在第一阶段自己加的锁: II
2025-02-05 23:34:00,071 - 事务2在第一阶段自己加的锁: S
2025-02-05 23:34:00,071 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:34:00,071 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:34:00,074 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:34:00,075 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:34:00,075 - params: {'vals': "NULL, 6, 'jqYUS'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:34:00,078 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=9, is_continuous=True, range_end_idx=10
2025-02-05 23:34:00,079 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:00,079 - params: {'v1': '9', 'v2': '10', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:34:00,080 - non intersection phase1 end
2025-02-05 23:34:00,080 - 
2025-02-05 23:34:00,080 - non intersection phase2
2025-02-05 23:34:00,084 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 23:34:00,085 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:00,085 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:34:00,088 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:34:00,089 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:00,089 - params: {'v1': '11', 'v2': '11', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:34:00,090 - non intersection phase2 end
2025-02-05 23:34:00,090 - 
2025-02-05 23:34:00,090 - 生成死锁事务序列成功如下
2025-02-05 23:34:00,090 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 6, 'jqYUS')"), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:34:01,644 - 创建事务1连接成功
2025-02-05 23:34:01,645 - 执行事务1语句: BEGIN
2025-02-05 23:34:01,646 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 6, 'jqYUS')
2025-02-05 23:34:01,647 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:34:01,649 - 执行事务1语句: COMMIT;
2025-02-05 23:34:01,654 - 执行事务1成功
2025-02-05 23:34:04,264 - 恢复初始状态成功
2025-02-05 23:34:05,038 - 创建事务2连接成功
2025-02-05 23:34:05,040 - 执行事务2语句: BEGIN
2025-02-05 23:34:05,041 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 LOCK IN SHARE MODE
2025-02-05 23:34:05,042 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:34:05,043 - 执行事务2语句: COMMIT;
2025-02-05 23:34:05,048 - 执行事务2成功
2025-02-05 23:34:10,029 - 
2025-02-05 23:34:10,029 - 执行前idx: 3, pending_stmts: {2: (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 6, 'jqYUS')", <Thread(Thread-148, started 10048)>, 1738769650.029409)}
2025-02-05 23:34:10,144 - stmt_idx: 2, status: success, result: None
2025-02-05 23:34:10,144 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 6, 'jqYUS')
2025-02-05 23:34:10,144 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:34:10,144 - 
2025-02-05 23:34:10,259 - 
2025-02-05 23:34:10,259 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 LOCK IN SHARE MODE', <Thread(Thread-149, started 22640)>, 1738769650.2590709)}
2025-02-05 23:34:10,368 - stmt_idx: 3, status: success, result: None
2025-02-05 23:34:10,368 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 LOCK IN SHARE MODE
2025-02-05 23:34:10,368 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:34:10,368 - 
2025-02-05 23:34:10,475 - 
2025-02-05 23:34:10,476 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-150, started 23228)>, 1738769650.47577)}
2025-02-05 23:34:10,585 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:34:10,585 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-150, started 23228)>, 1738769650.47577)}
2025-02-05 23:34:10,585 - 
2025-02-05 23:34:10,695 - 
2025-02-05 23:34:10,696 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-150, started 23228)>, 1738769650.47577), 5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-151, started 34628)>, 1738769650.695752)}
2025-02-05 23:34:10,803 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:34:10,915 - stmt_idx: 5, status: success, result: None
2025-02-05 23:34:10,915 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:34:10,915 - 执行后idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-150, started 23228)>, 1738769650.47577)}
2025-02-05 23:34:10,915 - 
2025-02-05 23:34:11,026 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-150, started 23228)>, 1738769650.47577)}
2025-02-05 23:34:11,026 - 
2025-02-05 23:34:11,027 - 执行前idx: 8, pending_stmts: {4: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-150, stopped 23228)>, 1738769650.47577)}
2025-02-05 23:34:11,134 - stmt_idx: 4, status: success, result: None
2025-02-05 23:34:11,134 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:34:11,134 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:34:11,135 - 执行后idx: 8, pending_stmts: {7: (1, 'COMMIT', <Thread(Thread-152, started 4468)>, 1738769651.1356974)}
2025-02-05 23:34:11,135 - 
2025-02-05 23:34:11,257 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'COMMIT', <Thread(Thread-152, stopped 4468)>, 1738769651.1356974)}
2025-02-05 23:34:11,258 - 
2025-02-05 23:34:11,258 - 执行前idx: 8, pending_stmts: {7: (1, 'COMMIT', <Thread(Thread-152, stopped 4468)>, 1738769651.1356974)}
2025-02-05 23:34:11,364 - stmt_idx: 7, status: success, result: None
2025-02-05 23:34:11,364 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:34:11,364 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:34:11,364 - 
2025-02-05 23:34:11,466 - 执行序列成功
2025-02-05 23:34:12,245 - is_atomic: True
2025-02-05 23:34:12,245 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:34:12,245 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 6, 'jqYUS')"), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 9 AND 10 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 23:34:12,245 - snapshots: {'before': {'table_0': [(1, 28, 'shrij'), (2, 93, 'lhhcr'), (3, 31, 'vrrfc'), (4, 15, 'bmmbw'), (5, 5, 'zkcjn'), (6, 96, 'hxcyf'), (7, 36, 'kzlca'), (8, 71, 'tnhyj'), (9, 32, 'siocs'), (10, 60, 'bemhp'), (11, 6, 'vbgcu'), (12, 86, 'dvani')]}, 'trx1': {'table_0': [(1, 28, 'shrij'), (2, 93, 'lhhcr'), (3, 31, 'vrrfc'), (4, 15, 'bmmbw'), (5, 5, 'zkcjn'), (6, 96, 'hxcyf'), (7, 36, 'kzlca'), (8, 71, 'tnhyj'), (9, 32, 'siocs'), (10, 60, 'bemhp'), (11, 6, 'vbgcu'), (12, 86, 'dvani'), (13, 6, 'jqYUS')]}, 'trx2': {'table_0': [(1, 28, 'shrij'), (2, 93, 'lhhcr'), (3, 31, 'vrrfc'), (4, 15, 'bmmbw'), (5, 5, 'zkcjn'), (6, 96, 'hxcyf'), (7, 36, 'kzlca'), (8, 71, 'tnhyj'), (9, 32, 'siocs'), (10, 60, 'bemhp'), (11, 6, 'vbgcu'), (12, 86, 'dvani')]}, 'serial': {'table_0': [(1, 28, 'shrij'), (2, 93, 'lhhcr'), (3, 31, 'vrrfc'), (4, 15, 'bmmbw'), (5, 5, 'zkcjn'), (6, 96, 'hxcyf'), (7, 36, 'kzlca'), (8, 71, 'tnhyj'), (9, 32, 'siocs'), (10, 60, 'bemhp'), (11, 6, 'vbgcu'), (12, 86, 'dvani'), (14, 6, 'jqYUS')]}}
2025-02-05 23:34:12,245 - 
2025-02-05 23:34:12,257 - iter: 22
2025-02-05 23:34:13,757 - table table_0 has 5 rows
2025-02-05 23:34:13,757 - trx1_start_id: 1
2025-02-05 23:34:13,757 - trx1_end_id: 1
2025-02-05 23:34:13,757 - trx1_exclusive_start_id: 1
2025-02-05 23:34:13,757 - trx1_exclusive_end_id: 0
2025-02-05 23:34:13,757 - trx1_exclusive_ids: []
2025-02-05 23:34:13,757 - trx2_start_id: 1
2025-02-05 23:34:13,757 - trx2_end_id: 2
2025-02-05 23:34:13,757 - trx2_exclusive_start_id: 2
2025-02-05 23:34:13,757 - trx2_exclusive_end_id: 2
2025-02-05 23:34:13,757 - trx2_exclusive_ids: [2]
2025-02-05 23:34:13,757 - intersection_ids: [1]
2025-02-05 23:34:13,758 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [1, 2], 'intersection_row_ids': [1]}
2025-02-05 23:34:13,758 - lock_same_resource: True
2025-02-05 23:34:13,758 - 
2025-02-05 23:34:13,758 - intersection phase1
2025-02-05 23:34:13,761 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 23:34:13,762 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:34:13,763 - params: {'set_expr': "col_1 = 'zrQtW'", 'v1': '1', 'v2': '1', 'table': 'table_0'}
2025-02-05 23:34:13,765 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 23:34:13,767 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:34:13,767 - params: {'set_expr': "col_0 = 'HibCV', col_1 = 'ZkNyL'", 'v1': '1', 'v2': '2', 'table': 'table_0'}
2025-02-05 23:34:13,767 - intersection phase1 end
2025-02-05 23:34:13,767 - 
2025-02-05 23:34:13,767 - intersection phase2
2025-02-05 23:34:13,768 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:34:13,768 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:34:13,768 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:34:13,768 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:34:13,771 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=0
2025-02-05 23:34:13,773 - 生成连续锁定SQL失败: 找不到从1到0的行
2025-02-05 23:34:13,773 - 生成锁SQL失败: 找不到从1到0的行
2025-02-05 23:34:13,773 - 生成死锁事务序列失败: 找不到从1到0的行
2025-02-05 23:34:13,773 - 
2025-02-05 23:34:13,773 - Error in iteration 22: 找不到从1到0的行
2025-02-05 23:34:13,773 - 
2025-02-05 23:34:13,780 - iter: 23
2025-02-05 23:34:15,273 - table table_0 has 10 rows
2025-02-05 23:34:15,273 - trx1_start_id: 1
2025-02-05 23:34:15,273 - trx1_end_id: 5
2025-02-05 23:34:15,273 - trx1_exclusive_start_id: 1
2025-02-05 23:34:15,273 - trx1_exclusive_end_id: 0
2025-02-05 23:34:15,273 - trx1_exclusive_ids: []
2025-02-05 23:34:15,273 - trx2_start_id: 1
2025-02-05 23:34:15,273 - trx2_end_id: 5
2025-02-05 23:34:15,273 - trx2_exclusive_start_id: 6
2025-02-05 23:34:15,273 - trx2_exclusive_end_id: 5
2025-02-05 23:34:15,273 - trx2_exclusive_ids: []
2025-02-05 23:34:15,273 - intersection_ids: [1, 2, 3, 4, 5]
2025-02-05 23:34:15,274 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [1, 2, 3, 4, 5], 'intersection_row_ids': [1, 2, 3, 4, 5]}
2025-02-05 23:34:15,274 - lock_same_resource: True
2025-02-05 23:34:15,274 - 
2025-02-05 23:34:15,274 - intersection phase1
2025-02-05 23:34:15,277 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 23:34:15,278 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:34:15,278 - params: {'set_expr': "col_0 = 97.64, col_1 = 'ZQCBU', col_4 = 'feKtg'", 'v1': '1', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:34:15,281 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 23:34:15,283 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:15,283 - params: {'v1': '1', 'v2': '5', 'select_cols': 'col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:34:15,283 - intersection phase1 end
2025-02-05 23:34:15,283 - 
2025-02-05 23:34:15,283 - intersection phase2
2025-02-05 23:34:15,283 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:34:15,283 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:34:15,284 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:34:15,284 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:34:15,287 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=0
2025-02-05 23:34:15,288 - 生成连续锁定SQL失败: 找不到从1到0的行
2025-02-05 23:34:15,288 - 生成锁SQL失败: 找不到从1到0的行
2025-02-05 23:34:15,288 - 生成死锁事务序列失败: 找不到从1到0的行
2025-02-05 23:34:15,288 - 
2025-02-05 23:34:15,288 - Error in iteration 23: 找不到从1到0的行
2025-02-05 23:34:15,288 - 
2025-02-05 23:34:15,295 - iter: 24
2025-02-05 23:34:16,777 - table table_0 has 12 rows
2025-02-05 23:34:16,778 - res_dict: {'trx1_lock_row_ids': [5, 6, 7, 8, 9, 10, 11], 'trx2_lock_row_ids': [1, 2, 3, 4, 12], 'intersection_row_ids': []}
2025-02-05 23:34:16,778 - lock_same_resource: False
2025-02-05 23:34:16,778 - 
2025-02-05 23:34:16,778 - non intersection phase1
2025-02-05 23:34:16,778 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:34:16,779 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:34:16,779 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:34:16,779 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:34:16,782 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=11
2025-02-05 23:34:16,783 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:16,783 - params: {'v1': '5', 'v2': '11', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:34:16,786 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:34:16,787 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:16,787 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:34:16,790 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:34:16,792 - needed_params: {'cond', 'table'}
2025-02-05 23:34:16,792 - params: {'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 23:34:16,795 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:34:16,796 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:34:16,796 - params: {'set_expr': "col_0 = 'uSCqk', col_1 = 48", 'cond': '(col_1 = 12)', 'table': 'table_0'}
2025-02-05 23:34:16,799 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:34:16,800 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:34:16,800 - params: {'cond': "(col_0 = 'qijmi') AND (col_1 = 86)", 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:34:16,804 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:34:16,805 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:34:16,805 - params: {'cond': "(col_0 = 'yokwi')", 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:34:16,806 - non intersection phase1 end
2025-02-05 23:34:16,806 - 
2025-02-05 23:34:16,806 - non intersection phase2
2025-02-05 23:34:16,810 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:34:16,811 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:34:16,811 - params: {'set_expr': "col_0 = 'XGQGa', col_1 = 80", 'v1': '2', 'v2': '2', 'table': 'table_0'}
2025-02-05 23:34:16,815 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 23:34:16,816 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:16,817 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:34:16,817 - non intersection phase2 end
2025-02-05 23:34:16,817 - 
2025-02-05 23:34:16,817 - 生成死锁事务序列成功如下
2025-02-05 23:34:16,817 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 11 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 2)'), (2, "UPDATE table_0 SET col_0 = 'uSCqk', col_1 = 48 WHERE (col_1 = 12)"), (2, "SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE"), (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'yokwi') FOR UPDATE"), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_0 = 'XGQGa', col_1 = 80 WHERE id BETWEEN 2 AND 2"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:34:18,339 - 创建事务1连接成功
2025-02-05 23:34:18,340 - 执行事务1语句: BEGIN
2025-02-05 23:34:18,342 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 11 FOR UPDATE
2025-02-05 23:34:18,342 - 执行事务1语句: UPDATE table_0 SET col_0 = 'XGQGa', col_1 = 80 WHERE id BETWEEN 2 AND 2
2025-02-05 23:34:18,344 - 执行事务1语句: COMMIT;
2025-02-05 23:34:18,349 - 执行事务1成功
2025-02-05 23:34:20,961 - 恢复初始状态成功
2025-02-05 23:34:21,744 - 创建事务2连接成功
2025-02-05 23:34:21,746 - 执行事务2语句: BEGIN
2025-02-05 23:34:21,747 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:34:21,748 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 23:34:21,749 - 执行事务2语句: UPDATE table_0 SET col_0 = 'uSCqk', col_1 = 48 WHERE (col_1 = 12)
2025-02-05 23:34:21,749 - 执行事务2语句: SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE
2025-02-05 23:34:21,750 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'yokwi') FOR UPDATE
2025-02-05 23:34:21,751 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:34:21,753 - 执行事务2语句: COMMIT;
2025-02-05 23:34:21,758 - 执行事务2成功
2025-02-05 23:34:26,877 - 
2025-02-05 23:34:26,877 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-153, started 3160)>, 1738769666.8774753)}
2025-02-05 23:34:26,992 - stmt_idx: 2, status: success, result: None
2025-02-05 23:34:26,992 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:34:26,992 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:34:26,992 - 
2025-02-05 23:34:27,107 - 
2025-02-05 23:34:27,108 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 11 FOR UPDATE', <Thread(Thread-154, started 37276)>, 1738769667.1075568)}
2025-02-05 23:34:27,216 - stmt_idx: 3, status: success, result: None
2025-02-05 23:34:27,216 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 11 FOR UPDATE
2025-02-05 23:34:27,216 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:34:27,216 - 
2025-02-05 23:34:27,323 - 
2025-02-05 23:34:27,323 - 执行前idx: 5, pending_stmts: {4: (2, 'DELETE FROM table_0 WHERE (id = 2)', <Thread(Thread-155, started 27656)>, 1738769667.3237355)}
2025-02-05 23:34:27,429 - stmt_idx: 4, status: success, result: None
2025-02-05 23:34:27,430 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 2)
2025-02-05 23:34:27,430 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:34:27,430 - 
2025-02-05 23:34:27,530 - 
2025-02-05 23:34:27,531 - 执行前idx: 6, pending_stmts: {5: (2, "UPDATE table_0 SET col_0 = 'uSCqk', col_1 = 48 WHERE (col_1 = 12)", <Thread(Thread-156, started 8628)>, 1738769667.5306478)}
2025-02-05 23:34:27,637 - stmt_idx: 5, status: success, result: None
2025-02-05 23:34:27,637 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'uSCqk', col_1 = 48 WHERE (col_1 = 12)
2025-02-05 23:34:27,637 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:34:27,638 - 
2025-02-05 23:34:27,738 - 
2025-02-05 23:34:27,739 - 执行前idx: 7, pending_stmts: {6: (2, "SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE", <Thread(Thread-157, started 36212)>, 1738769667.738079)}
2025-02-05 23:34:27,847 - wait for lock, trx_id: 2, stmt: SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE
2025-02-05 23:34:27,847 - 执行后idx: 7, pending_stmts: {6: (2, "SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE", <Thread(Thread-157, started 36212)>, 1738769667.738079)}
2025-02-05 23:34:27,847 - 
2025-02-05 23:34:27,954 - 
2025-02-05 23:34:27,954 - 执行前idx: 10, pending_stmts: {6: (2, "SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE", <Thread(Thread-157, started 36212)>, 1738769667.738079), 9: (1, "UPDATE table_0 SET col_0 = 'XGQGa', col_1 = 80 WHERE id BETWEEN 2 AND 2", <Thread(Thread-158, started 42420)>, 1738769667.9541576)}
2025-02-05 23:34:27,957 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_0 = 'XGQGa', col_1 = 80 WHERE id BETWEEN 2 AND 2
2025-02-05 23:34:28,060 - stmt_idx: 6, status: success, result: None
2025-02-05 23:34:28,060 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE
2025-02-05 23:34:28,060 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE
2025-02-05 23:34:28,171 - stmt_idx: 9, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:34:28,171 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_0 = 'XGQGa', col_1 = 80 WHERE id BETWEEN 2 AND 2
2025-02-05 23:34:28,171 - 错误: dictionary changed size during iteration
2025-02-05 23:34:28,175 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'yokwi') FOR UPDATE", <Thread(Thread-159, stopped 30580)>, 1738769668.0614429), 8: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-160, stopped 8816)>, 1738769668.061736)}
2025-02-05 23:34:28,176 - 
2025-02-05 23:34:28,176 - 执行前idx: 12, pending_stmts: {7: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'yokwi') FOR UPDATE", <Thread(Thread-159, stopped 30580)>, 1738769668.0614429), 8: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-160, stopped 8816)>, 1738769668.061736)}
2025-02-05 23:34:28,281 - stmt_idx: 7, status: success, result: None
2025-02-05 23:34:28,281 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'yokwi') FOR UPDATE
2025-02-05 23:34:28,387 - stmt_idx: 8, status: success, result: None
2025-02-05 23:34:28,387 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:34:28,387 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:34:28,387 - 
2025-02-05 23:34:28,495 - 执行序列成功
2025-02-05 23:34:29,399 - is_atomic: True
2025-02-05 23:34:29,399 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:34:29,399 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 11 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 2)'), (2, "UPDATE table_0 SET col_0 = 'uSCqk', col_1 = 48 WHERE (col_1 = 12)"), (2, "SELECT id FROM table_0 WHERE (col_0 = 'qijmi') AND (col_1 = 86) FOR UPDATE"), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_0 = 'yokwi') FOR UPDATE"), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE')]
2025-02-05 23:34:29,400 - snapshots: {'before': {'table_0': [(1, 'oxakw', 83), (2, 'mnyfw', 94), (3, 'iibff', 12), (4, 'qijmi', 86), (5, 'pmoqn', 52), (6, 'jawdq', 46), (7, 'vckbr', 46), (8, 'qfwco', 53), (9, 'ugqpy', 22), (10, 'eosko', 81), (11, 'kulxc', 79), (12, 'yokwi', 3)]}, 'trx1': {'table_0': [(1, 'oxakw', 83), (2, 'XGQGa', 80), (3, 'iibff', 12), (4, 'qijmi', 86), (5, 'pmoqn', 52), (6, 'jawdq', 46), (7, 'vckbr', 46), (8, 'qfwco', 53), (9, 'ugqpy', 22), (10, 'eosko', 81), (11, 'kulxc', 79), (12, 'yokwi', 3)]}, 'trx2': {'table_0': [(1, 'oxakw', 83), (3, 'uSCqk', 48), (4, 'qijmi', 86), (5, 'pmoqn', 52), (6, 'jawdq', 46), (7, 'vckbr', 46), (8, 'qfwco', 53), (9, 'ugqpy', 22), (10, 'eosko', 81), (11, 'kulxc', 79), (12, 'yokwi', 3)]}, 'serial': {'table_0': [(1, 'oxakw', 83), (3, 'uSCqk', 48), (4, 'qijmi', 86), (5, 'pmoqn', 52), (6, 'jawdq', 46), (7, 'vckbr', 46), (8, 'qfwco', 53), (9, 'ugqpy', 22), (10, 'eosko', 81), (11, 'kulxc', 79), (12, 'yokwi', 3)]}}
2025-02-05 23:34:29,400 - 
2025-02-05 23:34:29,416 - iter: 25
2025-02-05 23:34:31,556 - table table_0 has 8 rows
2025-02-05 23:34:31,556 - trx1_lock_row_ids: [8]
2025-02-05 23:34:31,556 - trx2_lock_row_ids: [5, 8]
2025-02-05 23:34:31,556 - intersection_row_ids: [8]
2025-02-05 23:34:31,556 - trx1_exclusive_ids: []
2025-02-05 23:34:31,556 - trx2_exclusive_ids: [5]
2025-02-05 23:34:31,557 - res_dict: {'trx1_lock_row_ids': [8], 'trx2_lock_row_ids': [5, 8], 'intersection_row_ids': [8]}
2025-02-05 23:34:31,557 - lock_same_resource: True
2025-02-05 23:34:31,557 - 
2025-02-05 23:34:31,557 - intersection phase1
2025-02-05 23:34:31,562 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=8, is_continuous=True, range_end_idx=8
2025-02-05 23:34:31,564 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:34:31,565 - params: {'set_expr': "col_1 = 'EHJQX', col_3 = 'WDsgw'", 'v1': '8', 'v2': '8', 'table': 'table_0'}
2025-02-05 23:34:31,569 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:34:31,571 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:34:31,572 - params: {'cond': '(id = 8)', 'select_cols': 'col_0, col_3', 'table': 'table_0'}
2025-02-05 23:34:31,572 - intersection phase1 end
2025-02-05 23:34:31,572 - 
2025-02-05 23:34:31,572 - intersection phase2
2025-02-05 23:34:31,573 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:34:31,573 - 事务2在第二阶段自己加的锁: S
2025-02-05 23:34:31,573 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:34:31,573 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:34:31,579 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:34:31,581 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:31,581 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:34:31,582 - intersection phase2 end
2025-02-05 23:34:31,582 - 
2025-02-05 23:34:31,582 - intersection phase3
2025-02-05 23:34:31,587 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:34:31,590 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:31,590 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_3', 'table': 'table_0'}
2025-02-05 23:34:31,597 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:34:31,601 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:31,601 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id, col_1, col_3', 'table': 'table_0'}
2025-02-05 23:34:31,602 - intersection phase3 end
2025-02-05 23:34:31,602 - 
2025-02-05 23:34:31,602 - 生成死锁事务序列成功如下
2025-02-05 23:34:31,602 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0, col_3 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:34:33,574 - 创建事务1连接成功
2025-02-05 23:34:33,575 - 执行事务1语句: BEGIN
2025-02-05 23:34:33,576 - 执行事务1语句: UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8
2025-02-05 23:34:33,577 - 执行事务1语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:34:33,580 - 执行事务1语句: COMMIT;
2025-02-05 23:34:33,585 - 执行事务1成功
2025-02-05 23:34:36,223 - 恢复初始状态成功
2025-02-05 23:34:37,011 - 创建事务2连接成功
2025-02-05 23:34:37,014 - 执行事务2语句: BEGIN
2025-02-05 23:34:37,015 - 执行事务2语句: SELECT col_0, col_3 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 23:34:37,016 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:34:37,017 - 执行事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:34:37,018 - 执行事务2语句: COMMIT;
2025-02-05 23:34:37,023 - 执行事务2成功
2025-02-05 23:34:42,064 - 
2025-02-05 23:34:42,064 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT col_0, col_3 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-161, started 33816)>, 1738769682.0640192)}
2025-02-05 23:34:42,174 - stmt_idx: 2, status: success, result: None
2025-02-05 23:34:42,174 - 成功执行序列中事务2语句: SELECT col_0, col_3 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 23:34:42,174 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:34:42,174 - 
2025-02-05 23:34:42,282 - 
2025-02-05 23:34:42,283 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8", <Thread(Thread-162, started 8572)>, 1738769682.282679)}
2025-02-05 23:34:42,392 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8
2025-02-05 23:34:42,392 - 执行后idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8", <Thread(Thread-162, started 8572)>, 1738769682.282679)}
2025-02-05 23:34:42,392 - 
2025-02-05 23:34:42,497 - 
2025-02-05 23:34:42,498 - 执行前idx: 5, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8", <Thread(Thread-162, started 8572)>, 1738769682.282679), 4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-163, started 17440)>, 1738769682.4975808)}
2025-02-05 23:34:42,606 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8
2025-02-05 23:34:42,712 - stmt_idx: 4, status: success, result: None
2025-02-05 23:34:42,712 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:34:42,712 - 执行后idx: 5, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8", <Thread(Thread-162, started 8572)>, 1738769682.282679)}
2025-02-05 23:34:42,712 - 
2025-02-05 23:34:42,819 - 
2025-02-05 23:34:42,820 - 执行前idx: 7, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8", <Thread(Thread-162, started 8572)>, 1738769682.282679), 6: (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-164, started 30048)>, 1738769682.819535)}
2025-02-05 23:34:42,921 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8
2025-02-05 23:34:43,027 - stmt_idx: 6, status: success, result: None
2025-02-05 23:34:43,027 - 成功执行序列中事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:34:43,027 - 执行后idx: 7, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8", <Thread(Thread-162, started 8572)>, 1738769682.282679)}
2025-02-05 23:34:43,027 - 
2025-02-05 23:34:43,136 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8", <Thread(Thread-162, started 8572)>, 1738769682.282679)}
2025-02-05 23:34:43,136 - 
2025-02-05 23:34:43,136 - 执行前idx: 9, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8", <Thread(Thread-162, stopped 8572)>, 1738769682.282679)}
2025-02-05 23:34:43,236 - stmt_idx: 3, status: success, result: None
2025-02-05 23:34:43,236 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8
2025-02-05 23:34:43,236 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8
2025-02-05 23:34:43,238 - 执行后idx: 9, pending_stmts: {5: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-165, started 35136)>, 1738769683.2380836), 7: (1, 'COMMIT', <Thread(Thread-166, started 34692)>, 1738769683.2386463)}
2025-02-05 23:34:43,238 - 
2025-02-05 23:34:43,342 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-165, stopped 35136)>, 1738769683.2380836), 7: (1, 'COMMIT', <Thread(Thread-166, stopped 34692)>, 1738769683.2386463)}
2025-02-05 23:34:43,342 - 
2025-02-05 23:34:43,342 - 执行前idx: 9, pending_stmts: {5: (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-165, stopped 35136)>, 1738769683.2380836), 7: (1, 'COMMIT', <Thread(Thread-166, stopped 34692)>, 1738769683.2386463)}
2025-02-05 23:34:43,448 - stmt_idx: 5, status: success, result: None
2025-02-05 23:34:43,448 - 成功执行序列中事务1语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:34:43,554 - stmt_idx: 7, status: success, result: None
2025-02-05 23:34:43,554 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:34:43,554 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:34:43,554 - 
2025-02-05 23:34:43,665 - 执行序列成功
2025-02-05 23:34:44,432 - is_atomic: True
2025-02-05 23:34:44,432 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:34:44,432 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT col_0, col_3 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'COMMIT'), (1, "UPDATE table_0 SET col_1 = 'EHJQX', col_3 = 'WDsgw' WHERE id BETWEEN 8 AND 8"), (1, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 23:34:44,432 - snapshots: {'before': {'table_0': [(1, 'kshig', 'dxqym', 'ukfui', 17.14), (2, 'ymjss', 'gqqnx', 'rklce', 17.4), (3, 'bjbsq', 'csszp', 'fzkib', 14.29), (4, 'pkldq', 'zhqml', 'lgeei', 73.75), (5, 'vesjc', 'uvooo', 'wmebe', 19.96), (6, 'vsdzl', 'gacil', 'shyvd', 26.12), (7, 'xscot', 'azonm', 'rznli', 43.43), (8, 'hwuef', 'kjqpq', 'dbxqx', 42.65)]}, 'trx1': {'table_0': [(1, 'kshig', 'dxqym', 'ukfui', 17.14), (2, 'ymjss', 'gqqnx', 'rklce', 17.4), (3, 'bjbsq', 'csszp', 'fzkib', 14.29), (4, 'pkldq', 'zhqml', 'lgeei', 73.75), (5, 'vesjc', 'uvooo', 'wmebe', 19.96), (6, 'vsdzl', 'gacil', 'shyvd', 26.12), (7, 'xscot', 'azonm', 'rznli', 43.43), (8, 'hwuef', 'EHJQX', 'WDsgw', 42.65)]}, 'trx2': {'table_0': [(1, 'kshig', 'dxqym', 'ukfui', 17.14), (2, 'ymjss', 'gqqnx', 'rklce', 17.4), (3, 'bjbsq', 'csszp', 'fzkib', 14.29), (4, 'pkldq', 'zhqml', 'lgeei', 73.75), (5, 'vesjc', 'uvooo', 'wmebe', 19.96), (6, 'vsdzl', 'gacil', 'shyvd', 26.12), (7, 'xscot', 'azonm', 'rznli', 43.43), (8, 'hwuef', 'kjqpq', 'dbxqx', 42.65)]}, 'serial': {'table_0': [(1, 'kshig', 'dxqym', 'ukfui', 17.14), (2, 'ymjss', 'gqqnx', 'rklce', 17.4), (3, 'bjbsq', 'csszp', 'fzkib', 14.29), (4, 'pkldq', 'zhqml', 'lgeei', 73.75), (5, 'vesjc', 'uvooo', 'wmebe', 19.96), (6, 'vsdzl', 'gacil', 'shyvd', 26.12), (7, 'xscot', 'azonm', 'rznli', 43.43), (8, 'hwuef', 'EHJQX', 'WDsgw', 42.65)]}}
2025-02-05 23:34:44,432 - 
2025-02-05 23:34:44,443 - iter: 26
2025-02-05 23:34:45,926 - table table_0 has 6 rows
2025-02-05 23:34:45,926 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6], 'trx2_lock_row_ids': [1, 2], 'intersection_row_ids': []}
2025-02-05 23:34:45,926 - lock_same_resource: False
2025-02-05 23:34:45,926 - 
2025-02-05 23:34:45,926 - non intersection phase1
2025-02-05 23:34:45,927 - 事务1在第一阶段自己加的锁: II
2025-02-05 23:34:45,927 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:34:45,927 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:34:45,927 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:34:45,930 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=3, is_continuous=True, range_end_idx=6
2025-02-05 23:34:45,931 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:34:45,931 - params: {'set_expr': "col_0 = 'grBYZ'", 'v1': '3', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:34:45,934 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:34:45,936 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:34:45,936 - params: {'set_expr': "col_1 = 51.58, col_0 = 'YQvzp', col_2 = 'QEJlF'", 'cond': "(id = 1) AND (col_0 = 'gpjja') AND (col_2 = 'lqwxa') AND (col_1 = 73.91)", 'table': 'table_0'}
2025-02-05 23:34:45,938 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:34:45,939 - needed_params: {'cond', 'table'}
2025-02-05 23:34:45,939 - params: {'cond': "(col_2 = 'cetgv') AND (col_1 = 51.4)", 'table': 'table_0'}
2025-02-05 23:34:45,939 - non intersection phase1 end
2025-02-05 23:34:45,939 - 
2025-02-05 23:34:45,939 - non intersection phase2
2025-02-05 23:34:45,942 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:34:45,944 - needed_params: {'cond', 'table'}
2025-02-05 23:34:45,944 - params: {'cond': "(col_0 = 'gpjja')", 'table': 'table_0'}
2025-02-05 23:34:45,947 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:34:45,949 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:45,949 - params: {'v1': '4', 'v2': '5', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:34:45,949 - non intersection phase2 end
2025-02-05 23:34:45,949 - 
2025-02-05 23:34:45,949 - 生成死锁事务序列成功如下
2025-02-05 23:34:45,949 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 'grBYZ' WHERE id BETWEEN 3 AND 6"), (2, "UPDATE table_0 SET col_1 = 51.58, col_0 = 'YQvzp', col_2 = 'QEJlF' WHERE (id = 1) AND (col_0 = 'gpjja') AND (col_2 = 'lqwxa') AND (col_1 = 73.91)"), (2, "DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)"), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE'), (1, "DELETE FROM table_0 WHERE (col_0 = 'gpjja')"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:34:47,471 - 创建事务1连接成功
2025-02-05 23:34:47,472 - 执行事务1语句: BEGIN
2025-02-05 23:34:47,473 - 执行事务1语句: UPDATE table_0 SET col_0 = 'grBYZ' WHERE id BETWEEN 3 AND 6
2025-02-05 23:34:47,474 - 执行事务1语句: DELETE FROM table_0 WHERE (col_0 = 'gpjja')
2025-02-05 23:34:47,476 - 执行事务1语句: COMMIT;
2025-02-05 23:34:47,480 - 执行事务1成功
2025-02-05 23:34:50,077 - 恢复初始状态成功
2025-02-05 23:34:50,840 - 创建事务2连接成功
2025-02-05 23:34:50,842 - 执行事务2语句: BEGIN
2025-02-05 23:34:50,843 - 执行事务2语句: UPDATE table_0 SET col_1 = 51.58, col_0 = 'YQvzp', col_2 = 'QEJlF' WHERE (id = 1) AND (col_0 = 'gpjja') AND (col_2 = 'lqwxa') AND (col_1 = 73.91)
2025-02-05 23:34:50,844 - 执行事务2语句: DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)
2025-02-05 23:34:50,845 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE
2025-02-05 23:34:50,845 - 执行事务2语句: COMMIT;
2025-02-05 23:34:50,849 - 执行事务2成功
2025-02-05 23:34:55,718 - 
2025-02-05 23:34:55,718 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_0 = 'grBYZ' WHERE id BETWEEN 3 AND 6", <Thread(Thread-167, started 44328)>, 1738769695.7187479)}
2025-02-05 23:34:55,822 - stmt_idx: 2, status: success, result: None
2025-02-05 23:34:55,822 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'grBYZ' WHERE id BETWEEN 3 AND 6
2025-02-05 23:34:55,822 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:34:55,822 - 
2025-02-05 23:34:55,933 - 
2025-02-05 23:34:55,933 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 51.58, col_0 = 'YQvzp', col_2 = 'QEJlF' WHERE (id = 1) AND (col_0 = 'gpjja') AND (col_2 = 'lqwxa') AND (col_1 = 73.91)", <Thread(Thread-168, started 34072)>, 1738769695.9333966)}
2025-02-05 23:34:56,038 - stmt_idx: 3, status: success, result: None
2025-02-05 23:34:56,038 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 51.58, col_0 = 'YQvzp', col_2 = 'QEJlF' WHERE (id = 1) AND (col_0 = 'gpjja') AND (col_2 = 'lqwxa') AND (col_1 = 73.91)
2025-02-05 23:34:56,038 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:34:56,038 - 
2025-02-05 23:34:56,145 - 
2025-02-05 23:34:56,146 - 执行前idx: 5, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)", <Thread(Thread-169, started 37012)>, 1738769696.1457448)}
2025-02-05 23:34:56,252 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)
2025-02-05 23:34:56,252 - 执行后idx: 5, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)", <Thread(Thread-169, started 37012)>, 1738769696.1457448)}
2025-02-05 23:34:56,252 - 
2025-02-05 23:34:56,361 - 
2025-02-05 23:34:56,361 - 执行前idx: 7, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)", <Thread(Thread-169, started 37012)>, 1738769696.1457448), 6: (1, "DELETE FROM table_0 WHERE (col_0 = 'gpjja')", <Thread(Thread-170, started 1564)>, 1738769696.3612297)}
2025-02-05 23:34:56,470 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)
2025-02-05 23:34:56,580 - stmt_idx: 6, status: success, result: None
2025-02-05 23:34:56,580 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_0 = 'gpjja')
2025-02-05 23:34:56,580 - 执行后idx: 7, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)", <Thread(Thread-169, started 37012)>, 1738769696.1457448)}
2025-02-05 23:34:56,580 - 
2025-02-05 23:34:56,691 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, "DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)", <Thread(Thread-169, started 37012)>, 1738769696.1457448)}
2025-02-05 23:34:56,691 - 
2025-02-05 23:34:56,691 - 执行前idx: 9, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)", <Thread(Thread-169, stopped 37012)>, 1738769696.1457448)}
2025-02-05 23:34:56,792 - stmt_idx: 4, status: success, result: None
2025-02-05 23:34:56,792 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)
2025-02-05 23:34:56,793 - 结束了阻塞，blocked_trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)
2025-02-05 23:34:56,794 - 执行后idx: 9, pending_stmts: {5: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE', <Thread(Thread-171, started 41076)>, 1738769696.7937827), 8: (2, 'COMMIT', <Thread(Thread-172, started 6004)>, 1738769696.794417)}
2025-02-05 23:34:56,794 - 
2025-02-05 23:34:56,899 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE', <Thread(Thread-171, stopped 41076)>, 1738769696.7937827), 8: (2, 'COMMIT', <Thread(Thread-172, stopped 6004)>, 1738769696.794417)}
2025-02-05 23:34:56,899 - 
2025-02-05 23:34:56,899 - 执行前idx: 9, pending_stmts: {5: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE', <Thread(Thread-171, stopped 41076)>, 1738769696.7937827), 8: (2, 'COMMIT', <Thread(Thread-172, stopped 6004)>, 1738769696.794417)}
2025-02-05 23:34:57,008 - stmt_idx: 5, status: success, result: None
2025-02-05 23:34:57,009 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE
2025-02-05 23:34:57,112 - stmt_idx: 8, status: success, result: None
2025-02-05 23:34:57,112 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:34:57,112 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:34:57,112 - 
2025-02-05 23:34:57,220 - 执行序列成功
2025-02-05 23:34:57,994 - is_atomic: True
2025-02-05 23:34:57,995 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:34:57,995 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 'grBYZ' WHERE id BETWEEN 3 AND 6"), (2, "UPDATE table_0 SET col_1 = 51.58, col_0 = 'YQvzp', col_2 = 'QEJlF' WHERE (id = 1) AND (col_0 = 'gpjja') AND (col_2 = 'lqwxa') AND (col_1 = 73.91)"), (1, "DELETE FROM table_0 WHERE (col_0 = 'gpjja')"), (1, 'COMMIT'), (2, "DELETE FROM table_0 WHERE (col_2 = 'cetgv') AND (col_1 = 51.4)"), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE'), (2, 'COMMIT')]
2025-02-05 23:34:57,995 - snapshots: {'before': {'table_0': [(1, 'gpjja', 73.91, 'lqwxa'), (2, 'khgar', 51.4, 'cetgv'), (3, 'lkmxv', 12.08, 'uolsf'), (4, 'jkecr', 21.69, 'kbwvw'), (5, 'rxyqy', 5.8, 'txfsj'), (6, 'bzryv', 34.68, 'beesc')]}, 'trx1': {'table_0': [(2, 'khgar', 51.4, 'cetgv'), (3, 'grBYZ', 12.08, 'uolsf'), (4, 'grBYZ', 21.69, 'kbwvw'), (5, 'grBYZ', 5.8, 'txfsj'), (6, 'grBYZ', 34.68, 'beesc')]}, 'trx2': {'table_0': [(1, 'gpjja', 73.91, 'lqwxa'), (2, 'khgar', 51.4, 'cetgv'), (3, 'lkmxv', 12.08, 'uolsf'), (4, 'jkecr', 21.69, 'kbwvw'), (5, 'rxyqy', 5.8, 'txfsj'), (6, 'bzryv', 34.68, 'beesc')]}, 'serial': {'table_0': [(2, 'khgar', 51.4, 'cetgv'), (3, 'grBYZ', 12.08, 'uolsf'), (4, 'grBYZ', 21.69, 'kbwvw'), (5, 'grBYZ', 5.8, 'txfsj'), (6, 'grBYZ', 34.68, 'beesc')]}}
2025-02-05 23:34:57,995 - 
2025-02-05 23:34:58,007 - iter: 27
2025-02-05 23:34:59,518 - table table_0 has 7 rows
2025-02-05 23:34:59,518 - res_dict: {'trx1_lock_row_ids': [1, 2, 3], 'trx2_lock_row_ids': [4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-05 23:34:59,518 - lock_same_resource: False
2025-02-05 23:34:59,518 - 
2025-02-05 23:34:59,519 - non intersection phase1
2025-02-05 23:34:59,519 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:34:59,519 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:34:59,519 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:34:59,519 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:34:59,522 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=3
2025-02-05 23:34:59,523 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:59,523 - params: {'v1': '1', 'v2': '3', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:34:59,527 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:34:59,528 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:34:59,528 - params: {'cond': '(id = 4)', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:34:59,531 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:34:59,532 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:59,532 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:34:59,535 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:34:59,536 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:34:59,536 - params: {'set_expr': 'col_1 = 30, col_0 = 41', 'cond': '(id = 6)', 'table': 'table_0'}
2025-02-05 23:34:59,539 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:34:59,540 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:34:59,540 - params: {'set_expr': 'col_1 = 99, col_0 = 96', 'cond': '(col_0 = 31) AND (col_1 = 61)', 'table': 'table_0'}
2025-02-05 23:34:59,541 - non intersection phase1 end
2025-02-05 23:34:59,541 - 
2025-02-05 23:34:59,541 - non intersection phase2
2025-02-05 23:34:59,544 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:34:59,545 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:34:59,545 - params: {'set_expr': 'col_1 = 96', 'cond': '(col_2 = 70) AND (col_0 = 31) AND (col_1 = 61)', 'table': 'table_0'}
2025-02-05 23:34:59,549 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 23:34:59,550 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:34:59,550 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:34:59,551 - non intersection phase2 end
2025-02-05 23:34:59,551 - 
2025-02-05 23:34:59,551 - 生成死锁事务序列成功如下
2025-02-05 23:34:59,551 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE'), (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 4) FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 30, col_0 = 41 WHERE (id = 6)'), (2, 'UPDATE table_0 SET col_1 = 99, col_0 = 96 WHERE (col_0 = 31) AND (col_1 = 61)'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'UPDATE table_0 SET col_1 = 96 WHERE (col_2 = 70) AND (col_0 = 31) AND (col_1 = 61)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:35:01,086 - 创建事务1连接成功
2025-02-05 23:35:01,088 - 执行事务1语句: BEGIN
2025-02-05 23:35:01,089 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-05 23:35:01,090 - 执行事务1语句: UPDATE table_0 SET col_1 = 96 WHERE (col_2 = 70) AND (col_0 = 31) AND (col_1 = 61)
2025-02-05 23:35:01,092 - 执行事务1语句: COMMIT;
2025-02-05 23:35:01,096 - 执行事务1成功
2025-02-05 23:35:03,683 - 恢复初始状态成功
2025-02-05 23:35:04,461 - 创建事务2连接成功
2025-02-05 23:35:04,462 - 执行事务2语句: BEGIN
2025-02-05 23:35:04,463 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE (id = 4) FOR UPDATE
2025-02-05 23:35:04,464 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:35:04,465 - 执行事务2语句: UPDATE table_0 SET col_1 = 30, col_0 = 41 WHERE (id = 6)
2025-02-05 23:35:04,465 - 执行事务2语句: UPDATE table_0 SET col_1 = 99, col_0 = 96 WHERE (col_0 = 31) AND (col_1 = 61)
2025-02-05 23:35:04,466 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:35:04,468 - 执行事务2语句: COMMIT;
2025-02-05 23:35:04,473 - 执行事务2成功
2025-02-05 23:35:09,300 - 
2025-02-05 23:35:09,300 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE', <Thread(Thread-173, started 11924)>, 1738769709.3003821)}
2025-02-05 23:35:09,411 - stmt_idx: 2, status: success, result: None
2025-02-05 23:35:09,412 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE
2025-02-05 23:35:09,412 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:35:09,412 - 
2025-02-05 23:35:09,520 - 
2025-02-05 23:35:09,521 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 4) FOR UPDATE', <Thread(Thread-174, started 23768)>, 1738769709.5201654)}
2025-02-05 23:35:09,628 - stmt_idx: 3, status: success, result: None
2025-02-05 23:35:09,628 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE (id = 4) FOR UPDATE
2025-02-05 23:35:09,629 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:35:09,629 - 
2025-02-05 23:35:09,738 - 
2025-02-05 23:35:09,738 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-175, started 44692)>, 1738769709.7373383)}
2025-02-05 23:35:09,843 - stmt_idx: 4, status: success, result: None
2025-02-05 23:35:09,843 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:35:09,843 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:35:09,843 - 
2025-02-05 23:35:09,953 - 
2025-02-05 23:35:09,953 - 执行前idx: 6, pending_stmts: {5: (2, 'UPDATE table_0 SET col_1 = 30, col_0 = 41 WHERE (id = 6)', <Thread(Thread-176, started 37804)>, 1738769709.953459)}
2025-02-05 23:35:10,059 - stmt_idx: 5, status: success, result: None
2025-02-05 23:35:10,059 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 30, col_0 = 41 WHERE (id = 6)
2025-02-05 23:35:10,059 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:35:10,059 - 
2025-02-05 23:35:10,168 - 
2025-02-05 23:35:10,169 - 执行前idx: 7, pending_stmts: {6: (2, 'UPDATE table_0 SET col_1 = 99, col_0 = 96 WHERE (col_0 = 31) AND (col_1 = 61)', <Thread(Thread-177, started 36696)>, 1738769710.1682913)}
2025-02-05 23:35:10,274 - stmt_idx: 6, status: success, result: None
2025-02-05 23:35:10,274 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 99, col_0 = 96 WHERE (col_0 = 31) AND (col_1 = 61)
2025-02-05 23:35:10,274 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:35:10,274 - 
2025-02-05 23:35:10,381 - 
2025-02-05 23:35:10,382 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-178, started 20580)>, 1738769710.3817747)}
2025-02-05 23:35:10,492 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:35:10,492 - 执行后idx: 8, pending_stmts: {7: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-178, started 20580)>, 1738769710.3817747)}
2025-02-05 23:35:10,492 - 
2025-02-05 23:35:10,600 - 
2025-02-05 23:35:10,602 - 执行前idx: 9, pending_stmts: {7: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-178, started 20580)>, 1738769710.3817747), 8: (1, 'UPDATE table_0 SET col_1 = 96 WHERE (col_2 = 70) AND (col_0 = 31) AND (col_1 = 61)', <Thread(Thread-179, started 42212)>, 1738769710.6009405)}
2025-02-05 23:35:10,604 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_1 = 96 WHERE (col_2 = 70) AND (col_0 = 31) AND (col_1 = 61)
2025-02-05 23:35:10,708 - stmt_idx: 7, status: success, result: None
2025-02-05 23:35:10,708 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:35:10,708 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:35:10,812 - stmt_idx: 8, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:35:10,812 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_1 = 96 WHERE (col_2 = 70) AND (col_0 = 31) AND (col_1 = 61)
2025-02-05 23:35:10,812 - 错误: dictionary changed size during iteration
2025-02-05 23:35:10,817 - 执行序列成功
2025-02-05 23:35:11,582 - is_atomic: True
2025-02-05 23:35:11,582 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:35:11,582 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 3 FOR UPDATE'), (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 4) FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 30, col_0 = 41 WHERE (id = 6)'), (2, 'UPDATE table_0 SET col_1 = 99, col_0 = 96 WHERE (col_0 = 31) AND (col_1 = 61)'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 23:35:11,582 - snapshots: {'before': {'table_0': [(1, 72, 81, 35), (2, 77, 25, 58), (3, 76, 25, 63), (4, 40, 97, 88), (5, 51, 74, 51), (6, 69, 1, 52), (7, 31, 61, 70)]}, 'trx1': {'table_0': [(1, 72, 81, 35), (2, 77, 25, 58), (3, 76, 25, 63), (4, 40, 97, 88), (5, 51, 74, 51), (6, 69, 1, 52), (7, 31, 96, 70)]}, 'trx2': {'table_0': [(1, 72, 81, 35), (2, 77, 25, 58), (3, 76, 25, 63), (4, 40, 97, 88), (5, 51, 74, 51), (6, 41, 30, 52), (7, 96, 99, 70)]}, 'serial': {'table_0': [(1, 72, 81, 35), (2, 77, 25, 58), (3, 76, 25, 63), (4, 40, 97, 88), (5, 51, 74, 51), (6, 41, 30, 52), (7, 96, 99, 70)]}}
2025-02-05 23:35:11,582 - 
2025-02-05 23:35:11,595 - iter: 28
2025-02-05 23:35:13,063 - table table_0 has 10 rows
2025-02-05 23:35:13,064 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 9]
2025-02-05 23:35:13,064 - trx2_lock_row_ids: [6, 7, 8]
2025-02-05 23:35:13,064 - intersection_row_ids: [6, 7]
2025-02-05 23:35:13,064 - trx1_exclusive_ids: [1, 2, 3, 4, 5, 9]
2025-02-05 23:35:13,064 - trx2_exclusive_ids: [8]
2025-02-05 23:35:13,064 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 9], 'trx2_lock_row_ids': [6, 7, 8], 'intersection_row_ids': [6, 7]}
2025-02-05 23:35:13,064 - lock_same_resource: True
2025-02-05 23:35:13,064 - 
2025-02-05 23:35:13,064 - intersection phase1
2025-02-05 23:35:13,067 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=6, is_continuous=True, range_end_idx=8
2025-02-05 23:35:13,068 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:13,068 - params: {'v1': '6', 'v2': '8', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:35:13,071 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,072 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:13,073 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:35:13,076 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,077 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:13,077 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:35:13,077 - intersection phase1 end
2025-02-05 23:35:13,077 - 
2025-02-05 23:35:13,078 - intersection phase2
2025-02-05 23:35:13,078 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:35:13,078 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:35:13,078 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:35:13,078 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:35:13,081 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,082 - needed_params: {'cond', 'table'}
2025-02-05 23:35:13,082 - params: {'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:35:13,084 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,086 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:13,086 - params: {'v1': '2', 'v2': '2', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:35:13,090 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,092 - needed_params: {'cond', 'table'}
2025-02-05 23:35:13,092 - params: {'cond': "(col_3 = 'wakoo')", 'table': 'table_0'}
2025-02-05 23:35:13,096 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,098 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:35:13,098 - params: {'set_expr': "col_2 = 'JnGlD', col_0 = 'NvmBA', col_1 = 98.82", 'cond': "(col_3 = 'cbeam')", 'table': 'table_0'}
2025-02-05 23:35:13,103 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,104 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:13,104 - params: {'cond': '(id = 5)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:35:13,107 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,109 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:35:13,109 - params: {'set_expr': "col_0 = 'vKyVX'", 'cond': '(id = 9)', 'table': 'table_0'}
2025-02-05 23:35:13,112 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:35:13,114 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:13,114 - params: {'cond': '(id = 8)', 'select_cols': 'id, col_3', 'table': 'table_0'}
2025-02-05 23:35:13,114 - intersection phase2 end
2025-02-05 23:35:13,114 - 
2025-02-05 23:35:13,114 - intersection phase3
2025-02-05 23:35:13,119 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=7, is_continuous=True, range_end_idx=8
2025-02-05 23:35:13,120 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:35:13,120 - params: {'set_expr': "col_3 = 'VGkQF'", 'v1': '7', 'v2': '8', 'table': 'table_0'}
2025-02-05 23:35:13,120 - intersection phase3 end
2025-02-05 23:35:13,121 - 
2025-02-05 23:35:13,121 - 生成死锁事务序列成功如下
2025-02-05 23:35:13,121 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id, col_3 FROM table_0 WHERE (id = 8) FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (col_3 = 'wakoo')"), (1, "UPDATE table_0 SET col_2 = 'JnGlD', col_0 = 'NvmBA', col_1 = 98.82 WHERE (col_3 = 'cbeam')"), (1, 'SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 'vKyVX' WHERE (id = 9)"), (2, None), (1, "UPDATE table_0 SET col_3 = 'VGkQF' WHERE id BETWEEN 7 AND 8"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:35:14,675 - 创建事务1连接成功
2025-02-05 23:35:14,677 - 执行事务1语句: BEGIN
2025-02-05 23:35:14,678 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:35:14,679 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:35:14,679 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 23:35:14,680 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 23:35:14,681 - 执行事务1语句: DELETE FROM table_0 WHERE (col_3 = 'wakoo')
2025-02-05 23:35:14,681 - 执行事务1语句: UPDATE table_0 SET col_2 = 'JnGlD', col_0 = 'NvmBA', col_1 = 98.82 WHERE (col_3 = 'cbeam')
2025-02-05 23:35:14,682 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 23:35:14,683 - 执行事务1语句: UPDATE table_0 SET col_0 = 'vKyVX' WHERE (id = 9)
2025-02-05 23:35:14,683 - 执行事务1语句: UPDATE table_0 SET col_3 = 'VGkQF' WHERE id BETWEEN 7 AND 8
2025-02-05 23:35:14,685 - 执行事务1语句: COMMIT;
2025-02-05 23:35:14,690 - 执行事务1成功
2025-02-05 23:35:17,289 - 恢复初始状态成功
2025-02-05 23:35:18,061 - 创建事务2连接成功
2025-02-05 23:35:18,062 - 执行事务2语句: BEGIN
2025-02-05 23:35:18,063 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 8 LOCK IN SHARE MODE
2025-02-05 23:35:18,064 - 执行事务2语句: SELECT id, col_3 FROM table_0 WHERE (id = 8) FOR UPDATE
2025-02-05 23:35:18,064 - 执行事务2语句: COMMIT;
2025-02-05 23:35:18,069 - 执行事务2成功
2025-02-05 23:35:22,971 - 
2025-02-05 23:35:22,972 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 8 LOCK IN SHARE MODE', <Thread(Thread-180, started 6336)>, 1738769722.9717622)}
2025-02-05 23:35:23,073 - stmt_idx: 2, status: success, result: None
2025-02-05 23:35:23,073 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 8 LOCK IN SHARE MODE
2025-02-05 23:35:23,073 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:35:23,073 - 
2025-02-05 23:35:23,177 - 
2025-02-05 23:35:23,178 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-181, started 24456)>, 1738769723.1778061)}
2025-02-05 23:35:23,281 - stmt_idx: 3, status: success, result: None
2025-02-05 23:35:23,281 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:35:23,281 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:35:23,281 - 
2025-02-05 23:35:23,389 - 
2025-02-05 23:35:23,390 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-182, started 42540)>, 1738769723.3895404)}
2025-02-05 23:35:23,495 - stmt_idx: 4, status: success, result: None
2025-02-05 23:35:23,495 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:35:23,495 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:35:23,495 - 
2025-02-05 23:35:23,604 - 
2025-02-05 23:35:23,604 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE (id = 8) FOR UPDATE', <Thread(Thread-183, started 40200)>, 1738769723.6049361)}
2025-02-05 23:35:23,714 - stmt_idx: 5, status: success, result: None
2025-02-05 23:35:23,714 - 成功执行序列中事务2语句: SELECT id, col_3 FROM table_0 WHERE (id = 8) FOR UPDATE
2025-02-05 23:35:23,714 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:35:23,714 - 
2025-02-05 23:35:23,820 - 
2025-02-05 23:35:23,821 - 执行前idx: 7, pending_stmts: {6: (1, 'DELETE FROM table_0 WHERE (id = 1)', <Thread(Thread-184, started 30028)>, 1738769723.820955)}
2025-02-05 23:35:23,924 - stmt_idx: 6, status: success, result: None
2025-02-05 23:35:23,924 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 23:35:23,924 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:35:23,924 - 
2025-02-05 23:35:24,035 - 
2025-02-05 23:35:24,036 - 执行前idx: 8, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-185, started 42884)>, 1738769724.035596)}
2025-02-05 23:35:24,143 - stmt_idx: 7, status: success, result: None
2025-02-05 23:35:24,143 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 23:35:24,143 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:35:24,143 - 
2025-02-05 23:35:24,254 - 
2025-02-05 23:35:24,255 - 执行前idx: 9, pending_stmts: {8: (1, "DELETE FROM table_0 WHERE (col_3 = 'wakoo')", <Thread(Thread-186, started 32484)>, 1738769724.2542715)}
2025-02-05 23:35:24,360 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_3 = 'wakoo')
2025-02-05 23:35:24,360 - 执行后idx: 9, pending_stmts: {8: (1, "DELETE FROM table_0 WHERE (col_3 = 'wakoo')", <Thread(Thread-186, started 32484)>, 1738769724.2542715)}
2025-02-05 23:35:24,360 - 
2025-02-05 23:35:24,466 - stmt为None, trx_id: 2, stmt: None
2025-02-05 23:35:24,468 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (1, "DELETE FROM table_0 WHERE (col_3 = 'wakoo')", <Thread(Thread-186, started 32484)>, 1738769724.2542715)}
2025-02-05 23:35:24,468 - 
2025-02-05 23:35:24,469 - 执行前idx: 16, pending_stmts: {8: (1, "DELETE FROM table_0 WHERE (col_3 = 'wakoo')", <Thread(Thread-186, stopped 32484)>, 1738769724.2542715)}
2025-02-05 23:35:24,574 - stmt_idx: 8, status: success, result: None
2025-02-05 23:35:24,574 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_3 = 'wakoo')
2025-02-05 23:35:24,574 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_3 = 'wakoo')
2025-02-05 23:35:24,576 - 执行后idx: 16, pending_stmts: {9: (1, "UPDATE table_0 SET col_2 = 'JnGlD', col_0 = 'NvmBA', col_1 = 98.82 WHERE (col_3 = 'cbeam')", <Thread(Thread-187, started 23076)>, 1738769724.5756366), 10: (1, 'SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-188, started 28072)>, 1738769724.5758984), 11: (1, "UPDATE table_0 SET col_0 = 'vKyVX' WHERE (id = 9)", <Thread(Thread-189, started 40884)>, 1738769724.5758984), 13: (1, "UPDATE table_0 SET col_3 = 'VGkQF' WHERE id BETWEEN 7 AND 8", <Thread(Thread-190, started 17360)>, 1738769724.5758984), 14: (1, 'COMMIT', <Thread(Thread-191, started 32108)>, 1738769724.5764027)}
2025-02-05 23:35:24,576 - 
2025-02-05 23:35:24,680 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (1, "UPDATE table_0 SET col_2 = 'JnGlD', col_0 = 'NvmBA', col_1 = 98.82 WHERE (col_3 = 'cbeam')", <Thread(Thread-187, stopped 23076)>, 1738769724.5756366), 10: (1, 'SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-188, stopped 28072)>, 1738769724.5758984), 11: (1, "UPDATE table_0 SET col_0 = 'vKyVX' WHERE (id = 9)", <Thread(Thread-189, stopped 40884)>, 1738769724.5758984), 13: (1, "UPDATE table_0 SET col_3 = 'VGkQF' WHERE id BETWEEN 7 AND 8", <Thread(Thread-190, stopped 17360)>, 1738769724.5758984), 14: (1, 'COMMIT', <Thread(Thread-191, stopped 32108)>, 1738769724.5764027)}
2025-02-05 23:35:24,680 - 
2025-02-05 23:35:24,680 - 执行前idx: 16, pending_stmts: {9: (1, "UPDATE table_0 SET col_2 = 'JnGlD', col_0 = 'NvmBA', col_1 = 98.82 WHERE (col_3 = 'cbeam')", <Thread(Thread-187, stopped 23076)>, 1738769724.5756366), 10: (1, 'SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-188, stopped 28072)>, 1738769724.5758984), 11: (1, "UPDATE table_0 SET col_0 = 'vKyVX' WHERE (id = 9)", <Thread(Thread-189, stopped 40884)>, 1738769724.5758984), 13: (1, "UPDATE table_0 SET col_3 = 'VGkQF' WHERE id BETWEEN 7 AND 8", <Thread(Thread-190, stopped 17360)>, 1738769724.5758984), 14: (1, 'COMMIT', <Thread(Thread-191, stopped 32108)>, 1738769724.5764027)}
2025-02-05 23:35:24,790 - stmt_idx: 9, status: success, result: None
2025-02-05 23:35:24,790 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'JnGlD', col_0 = 'NvmBA', col_1 = 98.82 WHERE (col_3 = 'cbeam')
2025-02-05 23:35:24,900 - stmt_idx: 10, status: success, result: None
2025-02-05 23:35:24,900 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 23:35:25,006 - stmt_idx: 11, status: success, result: None
2025-02-05 23:35:25,006 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'vKyVX' WHERE (id = 9)
2025-02-05 23:35:25,116 - stmt_idx: 13, status: success, result: None
2025-02-05 23:35:25,116 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 'VGkQF' WHERE id BETWEEN 7 AND 8
2025-02-05 23:35:25,220 - stmt_idx: 14, status: success, result: None
2025-02-05 23:35:25,220 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:35:25,220 - 执行后idx: 16, pending_stmts: {}
2025-02-05 23:35:25,220 - 
2025-02-05 23:35:25,327 - 执行序列成功
2025-02-05 23:35:26,135 - is_atomic: True
2025-02-05 23:35:26,135 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:35:26,135 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, 'SELECT id, col_3 FROM table_0 WHERE (id = 8) FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, 'COMMIT'), (1, "DELETE FROM table_0 WHERE (col_3 = 'wakoo')"), (1, "UPDATE table_0 SET col_2 = 'JnGlD', col_0 = 'NvmBA', col_1 = 98.82 WHERE (col_3 = 'cbeam')"), (1, 'SELECT id FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 'vKyVX' WHERE (id = 9)"), (1, "UPDATE table_0 SET col_3 = 'VGkQF' WHERE id BETWEEN 7 AND 8"), (1, 'COMMIT')]
2025-02-05 23:35:26,135 - snapshots: {'before': {'table_0': [(1, 'irhuo', 52.88, 'cvagw', 'uceom'), (2, 'nkngw', 14.19, 'kxkco', 'wpxdz'), (3, 'lxpvp', 24.84, 'pujjj', 'wakoo'), (4, 'wsyyu', 32.12, 'gfkmc', 'cbeam'), (5, 'xzqhw', 98.81, 'cbhyo', 'pvhvm'), (6, 'gdrwk', 71.08, 'twiiu', 'mpwxj'), (7, 'osuhi', 14.69, 'qfwie', 'mjzuf'), (8, 'afbvg', 17.89, 'rqara', 'wvrby'), (9, 'amhns', 13.49, 'biawb', 'xbhyw'), (10, 'ztycg', 24.1, 'yseya', 'rljae')]}, 'trx1': {'table_0': [(2, 'nkngw', 14.19, 'kxkco', 'wpxdz'), (4, 'NvmBA', 98.82, 'JnGlD', 'cbeam'), (5, 'xzqhw', 98.81, 'cbhyo', 'pvhvm'), (6, 'gdrwk', 71.08, 'twiiu', 'mpwxj'), (7, 'osuhi', 14.69, 'qfwie', 'VGkQF'), (8, 'afbvg', 17.89, 'rqara', 'VGkQF'), (9, 'vKyVX', 13.49, 'biawb', 'xbhyw'), (10, 'ztycg', 24.1, 'yseya', 'rljae')]}, 'trx2': {'table_0': [(1, 'irhuo', 52.88, 'cvagw', 'uceom'), (2, 'nkngw', 14.19, 'kxkco', 'wpxdz'), (3, 'lxpvp', 24.84, 'pujjj', 'wakoo'), (4, 'wsyyu', 32.12, 'gfkmc', 'cbeam'), (5, 'xzqhw', 98.81, 'cbhyo', 'pvhvm'), (6, 'gdrwk', 71.08, 'twiiu', 'mpwxj'), (7, 'osuhi', 14.69, 'qfwie', 'mjzuf'), (8, 'afbvg', 17.89, 'rqara', 'wvrby'), (9, 'amhns', 13.49, 'biawb', 'xbhyw'), (10, 'ztycg', 24.1, 'yseya', 'rljae')]}, 'serial': {'table_0': [(2, 'nkngw', 14.19, 'kxkco', 'wpxdz'), (4, 'NvmBA', 98.82, 'JnGlD', 'cbeam'), (5, 'xzqhw', 98.81, 'cbhyo', 'pvhvm'), (6, 'gdrwk', 71.08, 'twiiu', 'mpwxj'), (7, 'osuhi', 14.69, 'qfwie', 'VGkQF'), (8, 'afbvg', 17.89, 'rqara', 'VGkQF'), (9, 'vKyVX', 13.49, 'biawb', 'xbhyw'), (10, 'ztycg', 24.1, 'yseya', 'rljae')]}}
2025-02-05 23:35:26,135 - 
2025-02-05 23:35:26,146 - iter: 29
2025-02-05 23:35:27,624 - table table_0 has 5 rows
2025-02-05 23:35:27,624 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 23:35:27,624 - lock_same_resource: False
2025-02-05 23:35:27,624 - 
2025-02-05 23:35:27,624 - non intersection phase1
2025-02-05 23:35:27,624 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:35:27,625 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:35:27,625 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 23:35:27,625 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:35:27,627 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 23:35:27,629 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:27,629 - params: {'v1': '1', 'v2': '4', 'select_cols': 'id, col_0, col_1, col_783, col_931', 'table': 'table_0'}
2025-02-05 23:35:27,631 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:35:27,633 - needed_params: {'cond', 'table'}
2025-02-05 23:35:27,633 - params: {'cond': '(id = 5) AND (col_783 IS NULL) AND (col_1 = 99.46) AND (col_931 IS NULL)', 'table': 'table_0'}
2025-02-05 23:35:27,633 - non intersection phase1 end
2025-02-05 23:35:27,633 - 
2025-02-05 23:35:27,633 - non intersection phase2
2025-02-05 23:35:27,636 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:35:27,637 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:27,637 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_0, col_1, col_783, col_931', 'table': 'table_0'}
2025-02-05 23:35:27,640 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 23:35:27,641 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:27,642 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:35:27,642 - non intersection phase2 end
2025-02-05 23:35:27,642 - 
2025-02-05 23:35:27,642 - 生成死锁事务序列成功如下
2025-02-05 23:35:27,642 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 5) AND (col_783 IS NULL) AND (col_1 = 99.46) AND (col_931 IS NULL)'), (1, 'SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:35:29,188 - 创建事务1连接成功
2025-02-05 23:35:29,190 - 执行事务1语句: BEGIN
2025-02-05 23:35:29,191 - 执行事务1语句: SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE
2025-02-05 23:35:29,192 - 执行事务1语句: SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:35:29,193 - 执行事务1语句: COMMIT;
2025-02-05 23:35:29,197 - 执行事务1成功
2025-02-05 23:35:31,789 - 恢复初始状态成功
2025-02-05 23:35:32,548 - 创建事务2连接成功
2025-02-05 23:35:32,550 - 执行事务2语句: BEGIN
2025-02-05 23:35:32,551 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 5) AND (col_783 IS NULL) AND (col_1 = 99.46) AND (col_931 IS NULL)
2025-02-05 23:35:32,552 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:35:32,554 - 执行事务2语句: COMMIT;
2025-02-05 23:35:32,559 - 执行事务2成功
2025-02-05 23:35:37,519 - 
2025-02-05 23:35:37,519 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE', <Thread(Thread-192, started 44884)>, 1738769737.5198808)}
2025-02-05 23:35:37,622 - stmt_idx: 2, status: success, result: None
2025-02-05 23:35:37,623 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE
2025-02-05 23:35:37,623 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:35:37,623 - 
2025-02-05 23:35:37,731 - 
2025-02-05 23:35:37,731 - 执行前idx: 4, pending_stmts: {3: (2, 'DELETE FROM table_0 WHERE (id = 5) AND (col_783 IS NULL) AND (col_1 = 99.46) AND (col_931 IS NULL)', <Thread(Thread-193, started 31784)>, 1738769737.731254)}
2025-02-05 23:35:37,836 - stmt_idx: 3, status: success, result: None
2025-02-05 23:35:37,836 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 5) AND (col_783 IS NULL) AND (col_1 = 99.46) AND (col_931 IS NULL)
2025-02-05 23:35:37,836 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:35:37,836 - 
2025-02-05 23:35:37,943 - 
2025-02-05 23:35:37,943 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-194, started 11912)>, 1738769737.943146)}
2025-02-05 23:35:38,050 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:35:38,051 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-194, started 11912)>, 1738769737.943146)}
2025-02-05 23:35:38,051 - 
2025-02-05 23:35:38,157 - 
2025-02-05 23:35:38,158 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-194, started 11912)>, 1738769737.943146), 5: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-195, started 37696)>, 1738769738.1574223)}
2025-02-05 23:35:38,160 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:35:38,262 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:35:38,262 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:35:38,262 - 错误: dictionary changed size during iteration
2025-02-05 23:35:38,266 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-195, stopped 37696)>, 1738769738.1574223)}
2025-02-05 23:35:38,266 - 
2025-02-05 23:35:38,266 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-195, stopped 37696)>, 1738769738.1574223)}
2025-02-05 23:35:38,381 - stmt_idx: 5, status: success, result: None
2025-02-05 23:35:38,381 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:35:38,381 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:35:38,381 - 
2025-02-05 23:35:38,489 - 执行序列成功
2025-02-05 23:35:39,296 - is_atomic: True
2025-02-05 23:35:39,296 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:35:39,296 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_783, col_931 FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 5) AND (col_783 IS NULL) AND (col_1 = 99.46) AND (col_931 IS NULL)'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE')]
2025-02-05 23:35:39,296 - snapshots: {'before': {'table_0': [(1, 79, 96.2, None, None), (2, 41, 29.16, None, None), (3, 92, 99.05, None, None), (4, 3, 66.98, None, None), (5, 37, 99.46, None, None)]}, 'trx1': {'table_0': [(1, 79, 96.2, None, None), (2, 41, 29.16, None, None), (3, 92, 99.05, None, None), (4, 3, 66.98, None, None), (5, 37, 99.46, None, None)]}, 'trx2': {'table_0': [(1, 79, 96.2, None, None), (2, 41, 29.16, None, None), (3, 92, 99.05, None, None), (4, 3, 66.98, None, None)]}, 'serial': {'table_0': [(1, 79, 96.2, None, None), (2, 41, 29.16, None, None), (3, 92, 99.05, None, None), (4, 3, 66.98, None, None)]}}
2025-02-05 23:35:39,296 - 
2025-02-05 23:35:39,307 - iter: 30
2025-02-05 23:35:40,867 - table table_0 has 7 rows
2025-02-05 23:35:40,867 - trx1_lock_row_ids: [3]
2025-02-05 23:35:40,867 - trx2_lock_row_ids: [2, 3, 4]
2025-02-05 23:35:40,867 - intersection_row_ids: [3]
2025-02-05 23:35:40,867 - trx1_exclusive_ids: []
2025-02-05 23:35:40,867 - trx2_exclusive_ids: [2, 4]
2025-02-05 23:35:40,867 - res_dict: {'trx1_lock_row_ids': [3], 'trx2_lock_row_ids': [2, 3, 4], 'intersection_row_ids': [3]}
2025-02-05 23:35:40,867 - lock_same_resource: True
2025-02-05 23:35:40,867 - 
2025-02-05 23:35:40,867 - intersection phase1
2025-02-05 23:35:40,870 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=4
2025-02-05 23:35:40,871 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:40,871 - params: {'v1': '2', 'v2': '4', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:35:40,875 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:35:40,876 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:40,877 - params: {'cond': "(id = 3) AND (col_1 = 52) AND (col_2 = 89.29) AND (col_0 = 'pdqbq')", 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:40,877 - intersection phase1 end
2025-02-05 23:35:40,877 - 
2025-02-05 23:35:40,878 - intersection phase2
2025-02-05 23:35:40,878 - 事务1在第二阶段自己加的锁: II
2025-02-05 23:35:40,878 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:35:40,878 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:35:40,878 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:35:40,881 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:35:40,882 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:40,882 - params: {'cond': "(col_1 = 59) AND (col_0 = 'tnrvh')", 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:35:40,885 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:35:40,886 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:35:40,886 - params: {'set_expr': 'col_2 = 45.02, col_1 = 80', 'cond': '(id = 4)', 'table': 'table_0'}
2025-02-05 23:35:40,887 - intersection phase2 end
2025-02-05 23:35:40,887 - 
2025-02-05 23:35:40,887 - intersection phase3
2025-02-05 23:35:40,891 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 23:35:40,893 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:40,893 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:40,897 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:35:40,898 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:40,899 - params: {'cond': "(col_0 = 'pdqbq') AND (col_2 = 89.29)", 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:40,899 - intersection phase3 end
2025-02-05 23:35:40,899 - 
2025-02-05 23:35:40,899 - 生成死锁事务序列成功如下
2025-02-05 23:35:40,899 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 3) AND (col_1 = 52) AND (col_2 = 89.29) AND (col_0 = 'pdqbq') LOCK IN SHARE MODE"), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE"), (2, 'UPDATE table_0 SET col_2 = 45.02, col_1 = 80 WHERE (id = 4)'), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'pdqbq') AND (col_2 = 89.29) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:35:42,491 - 创建事务1连接成功
2025-02-05 23:35:42,492 - 执行事务1语句: BEGIN
2025-02-05 23:35:42,493 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 3) AND (col_1 = 52) AND (col_2 = 89.29) AND (col_0 = 'pdqbq') LOCK IN SHARE MODE
2025-02-05 23:35:42,494 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:35:42,495 - 执行事务1语句: COMMIT;
2025-02-05 23:35:42,500 - 执行事务1成功
2025-02-05 23:35:45,098 - 恢复初始状态成功
2025-02-05 23:35:45,889 - 创建事务2连接成功
2025-02-05 23:35:45,890 - 执行事务2语句: BEGIN
2025-02-05 23:35:45,891 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE
2025-02-05 23:35:45,892 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE
2025-02-05 23:35:45,893 - 执行事务2语句: UPDATE table_0 SET col_2 = 45.02, col_1 = 80 WHERE (id = 4)
2025-02-05 23:35:45,894 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'pdqbq') AND (col_2 = 89.29) LOCK IN SHARE MODE
2025-02-05 23:35:45,896 - 执行事务2语句: COMMIT;
2025-02-05 23:35:45,901 - 执行事务2成功
2025-02-05 23:35:51,081 - 
2025-02-05 23:35:51,081 - 执行前idx: 3, pending_stmts: {2: (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 3) AND (col_1 = 52) AND (col_2 = 89.29) AND (col_0 = 'pdqbq') LOCK IN SHARE MODE", <Thread(Thread-196, started 25636)>, 1738769751.0816832)}
2025-02-05 23:35:51,194 - stmt_idx: 2, status: success, result: None
2025-02-05 23:35:51,194 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 3) AND (col_1 = 52) AND (col_2 = 89.29) AND (col_0 = 'pdqbq') LOCK IN SHARE MODE
2025-02-05 23:35:51,194 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:35:51,194 - 
2025-02-05 23:35:51,300 - 
2025-02-05 23:35:51,301 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE', <Thread(Thread-197, started 38116)>, 1738769751.3001478)}
2025-02-05 23:35:51,406 - stmt_idx: 3, status: success, result: None
2025-02-05 23:35:51,406 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE
2025-02-05 23:35:51,406 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:35:51,406 - 
2025-02-05 23:35:51,516 - 
2025-02-05 23:35:51,517 - 执行前idx: 5, pending_stmts: {4: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE", <Thread(Thread-198, started 37728)>, 1738769751.5166624)}
2025-02-05 23:35:51,623 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE
2025-02-05 23:35:51,623 - 执行后idx: 5, pending_stmts: {4: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE", <Thread(Thread-198, started 37728)>, 1738769751.5166624)}
2025-02-05 23:35:51,624 - 
2025-02-05 23:35:51,733 - 
2025-02-05 23:35:51,734 - 执行前idx: 8, pending_stmts: {4: (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE", <Thread(Thread-198, started 37728)>, 1738769751.5166624), 7: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-199, started 30816)>, 1738769751.7334275)}
2025-02-05 23:35:51,736 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:35:51,843 - stmt_idx: 4, status: success, result: None
2025-02-05 23:35:51,843 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE
2025-02-05 23:35:51,843 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE
2025-02-05 23:35:51,950 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:35:51,950 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:35:51,950 - 错误: dictionary changed size during iteration
2025-02-05 23:35:51,954 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'UPDATE table_0 SET col_2 = 45.02, col_1 = 80 WHERE (id = 4)', <Thread(Thread-200, stopped 428)>, 1738769751.8442757), 6: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'pdqbq') AND (col_2 = 89.29) LOCK IN SHARE MODE", <Thread(Thread-201, stopped 18252)>, 1738769751.844548)}
2025-02-05 23:35:51,954 - 
2025-02-05 23:35:51,954 - 执行前idx: 10, pending_stmts: {5: (2, 'UPDATE table_0 SET col_2 = 45.02, col_1 = 80 WHERE (id = 4)', <Thread(Thread-200, stopped 428)>, 1738769751.8442757), 6: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'pdqbq') AND (col_2 = 89.29) LOCK IN SHARE MODE", <Thread(Thread-201, stopped 18252)>, 1738769751.844548)}
2025-02-05 23:35:52,060 - stmt_idx: 5, status: success, result: None
2025-02-05 23:35:52,060 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 45.02, col_1 = 80 WHERE (id = 4)
2025-02-05 23:35:52,167 - stmt_idx: 6, status: success, result: None
2025-02-05 23:35:52,167 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'pdqbq') AND (col_2 = 89.29) LOCK IN SHARE MODE
2025-02-05 23:35:52,167 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:35:52,167 - 
2025-02-05 23:35:52,274 - 执行序列成功
2025-02-05 23:35:53,111 - is_atomic: True
2025-02-05 23:35:53,111 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:35:53,111 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 3) AND (col_1 = 52) AND (col_2 = 89.29) AND (col_0 = 'pdqbq') LOCK IN SHARE MODE"), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 59) AND (col_0 = 'tnrvh') FOR UPDATE"), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'UPDATE table_0 SET col_2 = 45.02, col_1 = 80 WHERE (id = 4)'), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'pdqbq') AND (col_2 = 89.29) LOCK IN SHARE MODE")]
2025-02-05 23:35:53,111 - snapshots: {'before': {'table_0': [(1, 'ovqbo', 56, 46.92), (2, 'tnrvh', 59, 87.68), (3, 'pdqbq', 52, 89.29), (4, 'elkrw', 52, 1.94), (5, 'woovn', 80, 88.17), (6, 'axxsp', 33, 64.66), (7, 'rcprx', 87, 93.38)]}, 'trx1': {'table_0': [(1, 'ovqbo', 56, 46.92), (2, 'tnrvh', 59, 87.68), (3, 'pdqbq', 52, 89.29), (4, 'elkrw', 52, 1.94), (5, 'woovn', 80, 88.17), (6, 'axxsp', 33, 64.66), (7, 'rcprx', 87, 93.38)]}, 'trx2': {'table_0': [(1, 'ovqbo', 56, 46.92), (2, 'tnrvh', 59, 87.68), (3, 'pdqbq', 52, 89.29), (4, 'elkrw', 80, 45.02), (5, 'woovn', 80, 88.17), (6, 'axxsp', 33, 64.66), (7, 'rcprx', 87, 93.38)]}, 'serial': {'table_0': [(1, 'ovqbo', 56, 46.92), (2, 'tnrvh', 59, 87.68), (3, 'pdqbq', 52, 89.29), (4, 'elkrw', 80, 45.02), (5, 'woovn', 80, 88.17), (6, 'axxsp', 33, 64.66), (7, 'rcprx', 87, 93.38)]}}
2025-02-05 23:35:53,111 - 
2025-02-05 23:35:53,124 - iter: 31
2025-02-05 23:35:54,696 - table table_0 has 5 rows
2025-02-05 23:35:54,696 - trx1_lock_row_ids: [1, 2, 3, 4, 5]
2025-02-05 23:35:54,696 - trx2_lock_row_ids: [3, 4, 5]
2025-02-05 23:35:54,697 - intersection_row_ids: [3, 4, 5]
2025-02-05 23:35:54,697 - trx1_exclusive_ids: [1, 2]
2025-02-05 23:35:54,697 - trx2_exclusive_ids: []
2025-02-05 23:35:54,697 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [3, 4, 5], 'intersection_row_ids': [3, 4, 5]}
2025-02-05 23:35:54,697 - lock_same_resource: True
2025-02-05 23:35:54,697 - 
2025-02-05 23:35:54,697 - intersection phase1
2025-02-05 23:35:54,701 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 23:35:54,704 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:35:54,704 - params: {'set_expr': 'col_2 = 58.72, col_0 = 84.16, col_1 = 56', 'v1': '1', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:35:54,708 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:35:54,710 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:35:54,710 - params: {'vals': 'NULL, 30.75, 2, 83.95', 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:54,717 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:35:54,719 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:35:54,719 - params: {'set_expr': 'col_0 = 68.93, col_1 = 78', 'cond': '(id = 4)', 'table': 'table_0'}
2025-02-05 23:35:54,723 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:35:54,725 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:35:54,725 - params: {'vals': 'NULL, 74.79, 1, 2.94', 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:54,725 - intersection phase1 end
2025-02-05 23:35:54,725 - 
2025-02-05 23:35:54,726 - intersection phase2
2025-02-05 23:35:54,726 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:35:54,726 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:35:54,726 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:35:54,726 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:35:54,730 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:35:54,732 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:35:54,732 - params: {'set_expr': 'col_0 = 46.06', 'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:35:54,735 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:35:54,737 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:54,737 - params: {'v1': '2', 'v2': '2', 'select_cols': 'col_0', 'table': 'table_0'}
2025-02-05 23:35:54,737 - intersection phase2 end
2025-02-05 23:35:54,737 - 
2025-02-05 23:35:54,738 - intersection phase3
2025-02-05 23:35:54,741 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:35:54,743 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:35:54,743 - params: {'vals': 'NULL, 20.91, 28, 88.36', 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:54,747 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:35:54,748 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:54,748 - params: {'v1': '4', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:35:54,752 - 生成锁SQL失败: 'insert'
2025-02-05 23:35:54,752 - 生成死锁事务序列失败: 'insert'
2025-02-05 23:35:54,752 - 
2025-02-05 23:35:54,753 - Error in iteration 31: 'insert'
2025-02-05 23:35:54,753 - 
2025-02-05 23:35:54,758 - iter: 32
2025-02-05 23:35:56,389 - table table_0 has 15 rows
2025-02-05 23:35:56,389 - res_dict: {'trx1_lock_row_ids': [1, 2, 5, 6, 8, 12, 13, 15], 'trx2_lock_row_ids': [3, 4, 7, 9, 10], 'intersection_row_ids': []}
2025-02-05 23:35:56,389 - lock_same_resource: False
2025-02-05 23:35:56,389 - 
2025-02-05 23:35:56,389 - non intersection phase1
2025-02-05 23:35:56,390 - 事务1在第一阶段自己加的锁: S
2025-02-05 23:35:56,390 - 事务2在第一阶段自己加的锁: S
2025-02-05 23:35:56,390 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:35:56,390 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:35:56,393 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,394 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:56,394 - params: {'cond': "(col_2 = 'drdzt') AND (col_1 = 83.05)", 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:56,397 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,398 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:56,398 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:35:56,401 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,403 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:56,403 - params: {'cond': '(col_0 = 16.829999923706055) AND (col_1 = 15.04)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:35:56,406 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,407 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:56,407 - params: {'cond': '(id = 6)', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 23:35:56,410 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,411 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:56,411 - params: {'cond': '(id = 8)', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:35:56,415 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,416 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:56,417 - params: {'cond': '(id = 12)', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:35:56,419 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,421 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:56,422 - params: {'v1': '13', 'v2': '13', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:35:56,425 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,426 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:56,426 - params: {'cond': '(id = 15)', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:56,428 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,430 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:56,430 - params: {'v1': '3', 'v2': '3', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:56,434 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,435 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:56,436 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:35:56,438 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,439 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:56,439 - params: {'cond': '(id = 7)', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:35:56,442 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,444 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:35:56,444 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:35:56,447 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,449 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:35:56,449 - params: {'cond': '(col_1 = 5.75) AND (col_0 = 84.63999938964844)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:35:56,449 - non intersection phase1 end
2025-02-05 23:35:56,449 - 
2025-02-05 23:35:56,450 - non intersection phase2
2025-02-05 23:35:56,453 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,454 - needed_params: {'cond', 'table'}
2025-02-05 23:35:56,455 - params: {'cond': "(id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')", 'table': 'table_0'}
2025-02-05 23:35:56,458 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:35:56,459 - needed_params: {'cond', 'table'}
2025-02-05 23:35:56,459 - params: {'cond': '(id = 8)', 'table': 'table_0'}
2025-02-05 23:35:56,460 - non intersection phase2 end
2025-02-05 23:35:56,460 - 
2025-02-05 23:35:56,460 - 生成死锁事务序列成功如下
2025-02-05 23:35:56,460 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'drdzt') AND (col_1 = 83.05) LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE (col_0 = 16.829999923706055) AND (col_1 = 15.04) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (col_1 = 5.75) AND (col_0 = 84.63999938964844) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 15) LOCK IN SHARE MODE'), (1, "DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')"), (2, 'DELETE FROM table_0 WHERE (id = 8)'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:35:58,024 - 创建事务1连接成功
2025-02-05 23:35:58,026 - 执行事务1语句: BEGIN
2025-02-05 23:35:58,027 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'drdzt') AND (col_1 = 83.05) LOCK IN SHARE MODE
2025-02-05 23:35:58,028 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:35:58,029 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_0 = 16.829999923706055) AND (col_1 = 15.04) LOCK IN SHARE MODE
2025-02-05 23:35:58,029 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 23:35:58,030 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 23:35:58,030 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE
2025-02-05 23:35:58,031 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE
2025-02-05 23:35:58,032 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 15) LOCK IN SHARE MODE
2025-02-05 23:35:58,032 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')
2025-02-05 23:35:58,035 - 执行事务1语句: COMMIT;
2025-02-05 23:35:58,039 - 执行事务1成功
2025-02-05 23:36:00,685 - 恢复初始状态成功
2025-02-05 23:36:01,493 - 创建事务2连接成功
2025-02-05 23:36:01,494 - 执行事务2语句: BEGIN
2025-02-05 23:36:01,495 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 23:36:01,496 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:36:01,497 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 23:36:01,497 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:36:01,499 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_1 = 5.75) AND (col_0 = 84.63999938964844) LOCK IN SHARE MODE
2025-02-05 23:36:01,499 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 8)
2025-02-05 23:36:01,501 - 执行事务2语句: COMMIT;
2025-02-05 23:36:01,506 - 执行事务2成功
2025-02-05 23:36:06,490 - 
2025-02-05 23:36:06,490 - 执行前idx: 3, pending_stmts: {2: (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'drdzt') AND (col_1 = 83.05) LOCK IN SHARE MODE", <Thread(Thread-202, started 12208)>, 1738769766.4908986)}
2025-02-05 23:36:06,591 - stmt_idx: 2, status: success, result: None
2025-02-05 23:36:06,591 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'drdzt') AND (col_1 = 83.05) LOCK IN SHARE MODE
2025-02-05 23:36:06,591 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:36:06,591 - 
2025-02-05 23:36:06,702 - 
2025-02-05 23:36:06,703 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-203, started 18592)>, 1738769766.7028444)}
2025-02-05 23:36:06,809 - stmt_idx: 3, status: success, result: None
2025-02-05 23:36:06,809 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 23:36:06,809 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:36:06,809 - 
2025-02-05 23:36:06,915 - 
2025-02-05 23:36:06,916 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-204, started 36812)>, 1738769766.9156485)}
2025-02-05 23:36:07,024 - stmt_idx: 4, status: success, result: None
2025-02-05 23:36:07,024 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:36:07,024 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:36:07,024 - 
2025-02-05 23:36:07,130 - 
2025-02-05 23:36:07,131 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT * FROM table_0 WHERE (col_0 = 16.829999923706055) AND (col_1 = 15.04) LOCK IN SHARE MODE', <Thread(Thread-205, started 28328)>, 1738769767.1309843)}
2025-02-05 23:36:07,238 - stmt_idx: 5, status: success, result: None
2025-02-05 23:36:07,238 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_0 = 16.829999923706055) AND (col_1 = 15.04) LOCK IN SHARE MODE
2025-02-05 23:36:07,238 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:36:07,238 - 
2025-02-05 23:36:07,347 - 
2025-02-05 23:36:07,348 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-206, started 16240)>, 1738769767.347859)}
2025-02-05 23:36:07,450 - stmt_idx: 6, status: success, result: None
2025-02-05 23:36:07,450 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:36:07,450 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:36:07,450 - 
2025-02-05 23:36:07,558 - 
2025-02-05 23:36:07,558 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', <Thread(Thread-207, started 17056)>, 1738769767.558454)}
2025-02-05 23:36:07,662 - stmt_idx: 7, status: success, result: None
2025-02-05 23:36:07,662 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 23:36:07,662 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:36:07,662 - 
2025-02-05 23:36:07,768 - 
2025-02-05 23:36:07,769 - 执行前idx: 9, pending_stmts: {8: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-208, started 6060)>, 1738769767.7687101)}
2025-02-05 23:36:07,877 - stmt_idx: 8, status: success, result: None
2025-02-05 23:36:07,877 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:36:07,877 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:36:07,877 - 
2025-02-05 23:36:07,978 - 
2025-02-05 23:36:07,979 - 执行前idx: 10, pending_stmts: {9: (2, 'SELECT * FROM table_0 WHERE (col_1 = 5.75) AND (col_0 = 84.63999938964844) LOCK IN SHARE MODE', <Thread(Thread-209, started 39768)>, 1738769767.9788976)}
2025-02-05 23:36:08,086 - stmt_idx: 9, status: success, result: None
2025-02-05 23:36:08,086 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_1 = 5.75) AND (col_0 = 84.63999938964844) LOCK IN SHARE MODE
2025-02-05 23:36:08,086 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:36:08,086 - 
2025-02-05 23:36:08,190 - 
2025-02-05 23:36:08,191 - 执行前idx: 11, pending_stmts: {10: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-210, started 27924)>, 1738769768.1907518)}
2025-02-05 23:36:08,293 - stmt_idx: 10, status: success, result: None
2025-02-05 23:36:08,293 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 23:36:08,293 - 执行后idx: 11, pending_stmts: {}
2025-02-05 23:36:08,293 - 
2025-02-05 23:36:08,401 - 
2025-02-05 23:36:08,402 - 执行前idx: 12, pending_stmts: {11: (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-211, started 23724)>, 1738769768.4017925)}
2025-02-05 23:36:08,506 - stmt_idx: 11, status: success, result: None
2025-02-05 23:36:08,506 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 23:36:08,506 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:36:08,506 - 
2025-02-05 23:36:08,615 - 
2025-02-05 23:36:08,616 - 执行前idx: 13, pending_stmts: {12: (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE', <Thread(Thread-212, started 41028)>, 1738769768.6153038)}
2025-02-05 23:36:08,722 - stmt_idx: 12, status: success, result: None
2025-02-05 23:36:08,722 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE
2025-02-05 23:36:08,722 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:36:08,722 - 
2025-02-05 23:36:08,828 - 
2025-02-05 23:36:08,829 - 执行前idx: 14, pending_stmts: {13: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE', <Thread(Thread-213, started 28876)>, 1738769768.8289535)}
2025-02-05 23:36:08,934 - stmt_idx: 13, status: success, result: None
2025-02-05 23:36:08,934 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE
2025-02-05 23:36:08,934 - 执行后idx: 14, pending_stmts: {}
2025-02-05 23:36:08,934 - 
2025-02-05 23:36:09,043 - 
2025-02-05 23:36:09,043 - 执行前idx: 15, pending_stmts: {14: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 15) LOCK IN SHARE MODE', <Thread(Thread-214, started 44372)>, 1738769769.0434036)}
2025-02-05 23:36:09,152 - stmt_idx: 14, status: success, result: None
2025-02-05 23:36:09,152 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 15) LOCK IN SHARE MODE
2025-02-05 23:36:09,152 - 执行后idx: 15, pending_stmts: {}
2025-02-05 23:36:09,152 - 
2025-02-05 23:36:09,262 - 
2025-02-05 23:36:09,263 - 执行前idx: 16, pending_stmts: {15: (1, "DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')", <Thread(Thread-215, started 42300)>, 1738769769.2623193)}
2025-02-05 23:36:09,370 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')
2025-02-05 23:36:09,370 - 执行后idx: 16, pending_stmts: {15: (1, "DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')", <Thread(Thread-215, started 42300)>, 1738769769.2623193)}
2025-02-05 23:36:09,370 - 
2025-02-05 23:36:09,471 - 
2025-02-05 23:36:09,472 - 执行前idx: 17, pending_stmts: {15: (1, "DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')", <Thread(Thread-215, started 42300)>, 1738769769.2623193), 16: (2, 'DELETE FROM table_0 WHERE (id = 8)', <Thread(Thread-216, started 5824)>, 1738769769.4719262)}
2025-02-05 23:36:09,475 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (id = 8)
2025-02-05 23:36:09,578 - stmt_idx: 15, status: success, result: None
2025-02-05 23:36:09,578 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')
2025-02-05 23:36:09,578 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')
2025-02-05 23:36:09,684 - stmt_idx: 16, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:36:09,684 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: DELETE FROM table_0 WHERE (id = 8)
2025-02-05 23:36:09,684 - 错误: dictionary changed size during iteration
2025-02-05 23:36:09,688 - 执行序列成功
2025-02-05 23:36:10,558 - is_atomic: True
2025-02-05 23:36:10,558 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:36:10,558 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'drdzt') AND (col_1 = 83.05) LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE (col_0 = 16.829999923706055) AND (col_1 = 15.04) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (col_1 = 5.75) AND (col_0 = 84.63999938964844) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (id = 15) LOCK IN SHARE MODE'), (1, "DELETE FROM table_0 WHERE (id = 10) AND (col_1 = 5.75) AND (col_2 = 'hvnvy')"), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 23:36:10,558 - snapshots: {'before': {'table_0': [(1, 11.850000381469727, 83.05, 'drdzt'), (2, 78.81999969482422, 61.16, 'wxutm'), (3, 7.78000020980835, 19.43, 'uztui'), (4, 26.84000015258789, 76.61, 'qrdck'), (5, 16.829999923706055, 15.04, 'hbynx'), (6, 65.01000213623047, 16.36, 'dpxvt'), (7, 81.38999938964844, 40.69, 'erxto'), (8, 44.2599983215332, 60.23, 'dqkcd'), (9, 55.31999969482422, 41.74, 'ewmqf'), (10, 84.63999938964844, 5.75, 'hvnvy'), (11, 98.56999969482422, 60.67, 'kmjzr'), (12, 28.440000534057617, 79.65, 'cnrxq'), (13, 34.02000045776367, 23.76, 'ylhhd'), (14, 53.189998626708984, 46.83, 'gjcwi'), (15, 1.2200000286102295, 20.23, 'dvfnp')]}, 'trx1': {'table_0': [(1, 11.850000381469727, 83.05, 'drdzt'), (2, 78.81999969482422, 61.16, 'wxutm'), (3, 7.78000020980835, 19.43, 'uztui'), (4, 26.84000015258789, 76.61, 'qrdck'), (5, 16.829999923706055, 15.04, 'hbynx'), (6, 65.01000213623047, 16.36, 'dpxvt'), (7, 81.38999938964844, 40.69, 'erxto'), (8, 44.2599983215332, 60.23, 'dqkcd'), (9, 55.31999969482422, 41.74, 'ewmqf'), (11, 98.56999969482422, 60.67, 'kmjzr'), (12, 28.440000534057617, 79.65, 'cnrxq'), (13, 34.02000045776367, 23.76, 'ylhhd'), (14, 53.189998626708984, 46.83, 'gjcwi'), (15, 1.2200000286102295, 20.23, 'dvfnp')]}, 'trx2': {'table_0': [(1, 11.850000381469727, 83.05, 'drdzt'), (2, 78.81999969482422, 61.16, 'wxutm'), (3, 7.78000020980835, 19.43, 'uztui'), (4, 26.84000015258789, 76.61, 'qrdck'), (5, 16.829999923706055, 15.04, 'hbynx'), (6, 65.01000213623047, 16.36, 'dpxvt'), (7, 81.38999938964844, 40.69, 'erxto'), (9, 55.31999969482422, 41.74, 'ewmqf'), (10, 84.63999938964844, 5.75, 'hvnvy'), (11, 98.56999969482422, 60.67, 'kmjzr'), (12, 28.440000534057617, 79.65, 'cnrxq'), (13, 34.02000045776367, 23.76, 'ylhhd'), (14, 53.189998626708984, 46.83, 'gjcwi'), (15, 1.2200000286102295, 20.23, 'dvfnp')]}, 'serial': {'table_0': [(1, 11.850000381469727, 83.05, 'drdzt'), (2, 78.81999969482422, 61.16, 'wxutm'), (3, 7.78000020980835, 19.43, 'uztui'), (4, 26.84000015258789, 76.61, 'qrdck'), (5, 16.829999923706055, 15.04, 'hbynx'), (6, 65.01000213623047, 16.36, 'dpxvt'), (7, 81.38999938964844, 40.69, 'erxto'), (8, 44.2599983215332, 60.23, 'dqkcd'), (9, 55.31999969482422, 41.74, 'ewmqf'), (11, 98.56999969482422, 60.67, 'kmjzr'), (12, 28.440000534057617, 79.65, 'cnrxq'), (13, 34.02000045776367, 23.76, 'ylhhd'), (14, 53.189998626708984, 46.83, 'gjcwi'), (15, 1.2200000286102295, 20.23, 'dvfnp')]}}
2025-02-05 23:36:10,558 - 
2025-02-05 23:36:10,574 - iter: 33
2025-02-05 23:36:12,179 - table table_0 has 7 rows
2025-02-05 23:36:12,180 - trx1_start_id: 1
2025-02-05 23:36:12,180 - trx1_end_id: 2
2025-02-05 23:36:12,180 - trx1_exclusive_start_id: 1
2025-02-05 23:36:12,180 - trx1_exclusive_end_id: 1
2025-02-05 23:36:12,180 - trx1_exclusive_ids: [1]
2025-02-05 23:36:12,180 - trx2_start_id: 2
2025-02-05 23:36:12,180 - trx2_end_id: 6
2025-02-05 23:36:12,180 - trx2_exclusive_start_id: 3
2025-02-05 23:36:12,180 - trx2_exclusive_end_id: 6
2025-02-05 23:36:12,180 - trx2_exclusive_ids: [3, 4, 5, 6]
2025-02-05 23:36:12,180 - intersection_ids: [2]
2025-02-05 23:36:12,180 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [2, 3, 4, 5, 6], 'intersection_row_ids': [2]}
2025-02-05 23:36:12,180 - lock_same_resource: True
2025-02-05 23:36:12,180 - 
2025-02-05 23:36:12,180 - intersection phase1
2025-02-05 23:36:12,183 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 23:36:12,184 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:12,184 - params: {'v1': '1', 'v2': '2', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:36:12,187 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 23:36:12,189 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:12,189 - params: {'v1': '2', 'v2': '6', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:36:12,189 - intersection phase1 end
2025-02-05 23:36:12,189 - 
2025-02-05 23:36:12,190 - intersection phase2
2025-02-05 23:36:12,190 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:36:12,190 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:36:12,190 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:36:12,190 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 23:36:12,193 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 23:36:12,194 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:12,194 - params: {'v1': '1', 'v2': '1', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:36:12,198 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=6
2025-02-05 23:36:12,199 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:12,199 - params: {'v1': '3', 'v2': '6', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:36:12,199 - intersection phase2 end
2025-02-05 23:36:12,199 - 
2025-02-05 23:36:12,200 - intersection phase3
2025-02-05 23:36:12,202 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=6
2025-02-05 23:36:12,203 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:12,204 - params: {'v1': '3', 'v2': '6', 'select_cols': 'col_0', 'table': 'table_0'}
2025-02-05 23:36:12,207 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 23:36:12,208 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:36:12,208 - params: {'set_expr': 'col_0 = 75.89', 'v1': '1', 'v2': '1', 'table': 'table_0'}
2025-02-05 23:36:12,208 - intersection phase3 end
2025-02-05 23:36:12,209 - 
2025-02-05 23:36:12,209 - 生成死锁事务序列成功如下
2025-02-05 23:36:12,209 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1'), (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:36:13,750 - 创建事务1连接成功
2025-02-05 23:36:13,751 - 执行事务1语句: BEGIN
2025-02-05 23:36:13,753 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-05 23:36:13,753 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:36:13,754 - 执行事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE
2025-02-05 23:36:13,755 - 执行事务1语句: COMMIT;
2025-02-05 23:36:13,759 - 执行事务1成功
2025-02-05 23:36:16,386 - 恢复初始状态成功
2025-02-05 23:36:17,161 - 创建事务2连接成功
2025-02-05 23:36:17,163 - 执行事务2语句: BEGIN
2025-02-05 23:36:17,164 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE
2025-02-05 23:36:17,165 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE
2025-02-05 23:36:17,165 - 执行事务2语句: UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1
2025-02-05 23:36:17,168 - 执行事务2语句: COMMIT;
2025-02-05 23:36:17,173 - 执行事务2成功
2025-02-05 23:36:22,105 - 
2025-02-05 23:36:22,105 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE', <Thread(Thread-217, started 44892)>, 1738769782.10575)}
2025-02-05 23:36:22,210 - stmt_idx: 2, status: success, result: None
2025-02-05 23:36:22,210 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE
2025-02-05 23:36:22,210 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:36:22,210 - 
2025-02-05 23:36:22,317 - 
2025-02-05 23:36:22,318 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE', <Thread(Thread-218, started 35644)>, 1738769782.3175302)}
2025-02-05 23:36:22,422 - stmt_idx: 3, status: success, result: None
2025-02-05 23:36:22,422 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE
2025-02-05 23:36:22,422 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:36:22,422 - 
2025-02-05 23:36:22,528 - 
2025-02-05 23:36:22,529 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE', <Thread(Thread-219, started 44644)>, 1738769782.5288935)}
2025-02-05 23:36:22,634 - stmt_idx: 4, status: success, result: None
2025-02-05 23:36:22,634 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE
2025-02-05 23:36:22,634 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:36:22,634 - 
2025-02-05 23:36:22,742 - 
2025-02-05 23:36:22,743 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-220, started 42036)>, 1738769782.7427003)}
2025-02-05 23:36:22,847 - stmt_idx: 5, status: success, result: None
2025-02-05 23:36:22,847 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:36:22,847 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:36:22,847 - 
2025-02-05 23:36:22,953 - 
2025-02-05 23:36:22,953 - 执行前idx: 7, pending_stmts: {6: (2, 'UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1', <Thread(Thread-221, started 39184)>, 1738769782.953189)}
2025-02-05 23:36:23,058 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1
2025-02-05 23:36:23,058 - 执行后idx: 7, pending_stmts: {6: (2, 'UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1', <Thread(Thread-221, started 39184)>, 1738769782.953189)}
2025-02-05 23:36:23,058 - 
2025-02-05 23:36:23,164 - 
2025-02-05 23:36:23,164 - 执行前idx: 8, pending_stmts: {6: (2, 'UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1', <Thread(Thread-221, started 39184)>, 1738769782.953189), 7: (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE', <Thread(Thread-222, started 31936)>, 1738769783.1647005)}
2025-02-05 23:36:23,167 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE
2025-02-05 23:36:23,273 - stmt_idx: 6, status: success, result: None
2025-02-05 23:36:23,273 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1
2025-02-05 23:36:23,273 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1
2025-02-05 23:36:23,377 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:36:23,378 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE
2025-02-05 23:36:23,378 - 错误: dictionary changed size during iteration
2025-02-05 23:36:23,383 - 执行序列成功
2025-02-05 23:36:24,253 - is_atomic: True
2025-02-05 23:36:24,253 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:36:24,253 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 2 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 6 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_0 = 75.89 WHERE id BETWEEN 1 AND 1'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-05 23:36:24,253 - snapshots: {'before': {'table_0': [(1, 1.74, 'owjpr'), (2, 28.46, 'wxulq'), (3, 39.37, 'xibnb'), (4, 61.41, 'zapmh'), (5, 22.38, 'bbxhv'), (6, 7.29, 'xxhvz'), (7, 85.6, 'klpst')]}, 'trx1': {'table_0': [(1, 1.74, 'owjpr'), (2, 28.46, 'wxulq'), (3, 39.37, 'xibnb'), (4, 61.41, 'zapmh'), (5, 22.38, 'bbxhv'), (6, 7.29, 'xxhvz'), (7, 85.6, 'klpst')]}, 'trx2': {'table_0': [(1, 75.89, 'owjpr'), (2, 28.46, 'wxulq'), (3, 39.37, 'xibnb'), (4, 61.41, 'zapmh'), (5, 22.38, 'bbxhv'), (6, 7.29, 'xxhvz'), (7, 85.6, 'klpst')]}, 'serial': {'table_0': [(1, 75.89, 'owjpr'), (2, 28.46, 'wxulq'), (3, 39.37, 'xibnb'), (4, 61.41, 'zapmh'), (5, 22.38, 'bbxhv'), (6, 7.29, 'xxhvz'), (7, 85.6, 'klpst')]}}
2025-02-05 23:36:24,253 - 
2025-02-05 23:36:24,266 - iter: 34
2025-02-05 23:36:25,846 - table table_0 has 13 rows
2025-02-05 23:36:25,846 - trx1_lock_row_ids: [5, 9, 12]
2025-02-05 23:36:25,846 - trx2_lock_row_ids: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 23:36:25,847 - intersection_row_ids: [5, 9, 12]
2025-02-05 23:36:25,847 - trx1_exclusive_ids: []
2025-02-05 23:36:25,847 - trx2_exclusive_ids: [3, 4, 6, 7, 8, 10, 11, 13]
2025-02-05 23:36:25,847 - res_dict: {'trx1_lock_row_ids': [5, 9, 12], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'intersection_row_ids': [5, 9, 12]}
2025-02-05 23:36:25,847 - lock_same_resource: True
2025-02-05 23:36:25,847 - 
2025-02-05 23:36:25,847 - intersection phase1
2025-02-05 23:36:25,851 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=3, is_continuous=True, range_end_idx=13
2025-02-05 23:36:25,853 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:36:25,853 - params: {'set_expr': 'col_1 = 20.89', 'v1': '3', 'v2': '13', 'table': 'table_0'}
2025-02-05 23:36:25,857 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,858 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:25,859 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:36:25,864 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,867 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:25,867 - params: {'cond': "(col_3 = 'lfeas') AND (col_2 = 4.89) AND (col_0 = 63)", 'select_cols': 'col_0, col_1, col_2, col_3, col_487', 'table': 'table_0'}
2025-02-05 23:36:25,872 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,874 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:25,874 - params: {'cond': '(id = 12)', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_487', 'table': 'table_0'}
2025-02-05 23:36:25,874 - intersection phase1 end
2025-02-05 23:36:25,874 - 
2025-02-05 23:36:25,874 - intersection phase2
2025-02-05 23:36:25,875 - 事务1在第二阶段自己加的锁: II
2025-02-05 23:36:25,875 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:36:25,875 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:36:25,875 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:36:25,879 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,881 - needed_params: {'cond', 'table'}
2025-02-05 23:36:25,881 - params: {'cond': '(col_2 = 37.03) AND (col_487 IS NULL)', 'table': 'table_0'}
2025-02-05 23:36:25,885 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,887 - needed_params: {'cond', 'table'}
2025-02-05 23:36:25,887 - params: {'cond': "(col_3 = 'xlrfq')", 'table': 'table_0'}
2025-02-05 23:36:25,892 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,894 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:36:25,894 - params: {'set_expr': "col_487 = 'HJxLq', col_0 = 26, col_2 = 27.24", 'cond': '(id = 6) AND (col_1 = 64.51)', 'table': 'table_0'}
2025-02-05 23:36:25,897 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,899 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:25,899 - params: {'cond': '(col_1 = 73.0)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:36:25,904 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,906 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:25,906 - params: {'v1': '8', 'v2': '8', 'select_cols': 'col_0, col_2, col_3, col_487', 'table': 'table_0'}
2025-02-05 23:36:25,910 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,912 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:25,912 - params: {'v1': '10', 'v2': '10', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_487', 'table': 'table_0'}
2025-02-05 23:36:25,916 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,918 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:25,918 - params: {'cond': '(id = 11)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:36:25,922 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,924 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:36:25,924 - params: {'set_expr': "col_487 = 'mXaqq'", 'cond': '(id = 13)', 'table': 'table_0'}
2025-02-05 23:36:25,924 - intersection phase2 end
2025-02-05 23:36:25,925 - 
2025-02-05 23:36:25,925 - intersection phase3
2025-02-05 23:36:25,928 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,929 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:25,929 - params: {'cond': '(col_487 IS NULL) AND (col_1 = 1.18)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:36:25,933 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:36:25,934 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:25,935 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:36:25,935 - intersection phase3 end
2025-02-05 23:36:25,935 - 
2025-02-05 23:36:25,935 - 生成死锁事务序列成功如下
2025-02-05 23:36:25,935 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_1 = 20.89 WHERE id BETWEEN 3 AND 13'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, "SELECT col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (col_3 = 'lfeas') AND (col_2 = 4.89) AND (col_0 = 63) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE'), (2, 'DELETE FROM table_0 WHERE (col_2 = 37.03) AND (col_487 IS NULL)'), (2, "DELETE FROM table_0 WHERE (col_3 = 'xlrfq')"), (2, "UPDATE table_0 SET col_487 = 'HJxLq', col_0 = 26, col_2 = 27.24 WHERE (id = 6) AND (col_1 = 64.51)"), (2, 'SELECT * FROM table_0 WHERE (col_1 = 73.0) FOR UPDATE'), (2, 'SELECT col_0, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE (id = 11) FOR UPDATE'), (2, "UPDATE table_0 SET col_487 = 'mXaqq' WHERE (id = 13)"), (1, 'SELECT id FROM table_0 WHERE (col_487 IS NULL) AND (col_1 = 1.18) FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:36:27,467 - 创建事务1连接成功
2025-02-05 23:36:27,468 - 执行事务1语句: BEGIN
2025-02-05 23:36:27,469 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:27,470 - 执行事务1语句: SELECT col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (col_3 = 'lfeas') AND (col_2 = 4.89) AND (col_0 = 63) LOCK IN SHARE MODE
2025-02-05 23:36:27,471 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE
2025-02-05 23:36:27,472 - 执行事务1语句: SELECT id FROM table_0 WHERE (col_487 IS NULL) AND (col_1 = 1.18) FOR UPDATE
2025-02-05 23:36:27,473 - 执行事务1语句: COMMIT;
2025-02-05 23:36:27,477 - 执行事务1成功
2025-02-05 23:36:30,044 - 恢复初始状态成功
2025-02-05 23:36:30,817 - 创建事务2连接成功
2025-02-05 23:36:30,819 - 执行事务2语句: BEGIN
2025-02-05 23:36:30,820 - 执行事务2语句: UPDATE table_0 SET col_1 = 20.89 WHERE id BETWEEN 3 AND 13
2025-02-05 23:36:30,820 - 执行事务2语句: DELETE FROM table_0 WHERE (col_2 = 37.03) AND (col_487 IS NULL)
2025-02-05 23:36:30,821 - 执行事务2语句: DELETE FROM table_0 WHERE (col_3 = 'xlrfq')
2025-02-05 23:36:30,821 - 执行事务2语句: UPDATE table_0 SET col_487 = 'HJxLq', col_0 = 26, col_2 = 27.24 WHERE (id = 6) AND (col_1 = 64.51)
2025-02-05 23:36:30,822 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_1 = 73.0) FOR UPDATE
2025-02-05 23:36:30,823 - 执行事务2语句: SELECT col_0, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:36:30,824 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 23:36:30,825 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 11) FOR UPDATE
2025-02-05 23:36:30,826 - 执行事务2语句: UPDATE table_0 SET col_487 = 'mXaqq' WHERE (id = 13)
2025-02-05 23:36:30,826 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:36:30,828 - 执行事务2语句: COMMIT;
2025-02-05 23:36:30,833 - 执行事务2成功
2025-02-05 23:36:35,735 - 
2025-02-05 23:36:35,735 - 执行前idx: 3, pending_stmts: {2: (2, 'UPDATE table_0 SET col_1 = 20.89 WHERE id BETWEEN 3 AND 13', <Thread(Thread-223, started 36092)>, 1738769795.7351754)}
2025-02-05 23:36:35,846 - stmt_idx: 2, status: success, result: None
2025-02-05 23:36:35,846 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 20.89 WHERE id BETWEEN 3 AND 13
2025-02-05 23:36:35,846 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:36:35,846 - 
2025-02-05 23:36:35,954 - 
2025-02-05 23:36:35,954 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:36,057 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:36,057 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:36,057 - 
2025-02-05 23:36:36,162 - 
2025-02-05 23:36:36,163 - 执行前idx: 7, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 6: (2, 'DELETE FROM table_0 WHERE (col_2 = 37.03) AND (col_487 IS NULL)', <Thread(Thread-225, started 32372)>, 1738769796.1625423)}
2025-02-05 23:36:36,269 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:36,371 - stmt_idx: 6, status: success, result: None
2025-02-05 23:36:36,371 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_2 = 37.03) AND (col_487 IS NULL)
2025-02-05 23:36:36,371 - 执行后idx: 7, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:36,371 - 
2025-02-05 23:36:36,477 - 
2025-02-05 23:36:36,478 - 执行前idx: 8, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 7: (2, "DELETE FROM table_0 WHERE (col_3 = 'xlrfq')", <Thread(Thread-226, started 44100)>, 1738769796.4777036)}
2025-02-05 23:36:36,581 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:36,684 - stmt_idx: 7, status: success, result: None
2025-02-05 23:36:36,684 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_3 = 'xlrfq')
2025-02-05 23:36:36,684 - 执行后idx: 8, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:36,684 - 
2025-02-05 23:36:36,791 - 
2025-02-05 23:36:36,792 - 执行前idx: 9, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 8: (2, "UPDATE table_0 SET col_487 = 'HJxLq', col_0 = 26, col_2 = 27.24 WHERE (id = 6) AND (col_1 = 64.51)", <Thread(Thread-227, started 26896)>, 1738769796.791318)}
2025-02-05 23:36:36,898 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:37,004 - stmt_idx: 8, status: success, result: None
2025-02-05 23:36:37,004 - 成功执行序列中事务2语句: UPDATE table_0 SET col_487 = 'HJxLq', col_0 = 26, col_2 = 27.24 WHERE (id = 6) AND (col_1 = 64.51)
2025-02-05 23:36:37,004 - 执行后idx: 9, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:37,004 - 
2025-02-05 23:36:37,109 - 
2025-02-05 23:36:37,110 - 执行前idx: 10, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 9: (2, 'SELECT * FROM table_0 WHERE (col_1 = 73.0) FOR UPDATE', <Thread(Thread-228, started 25368)>, 1738769797.1094606)}
2025-02-05 23:36:37,217 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:37,326 - stmt_idx: 9, status: success, result: None
2025-02-05 23:36:37,326 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_1 = 73.0) FOR UPDATE
2025-02-05 23:36:37,326 - 执行后idx: 10, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:37,326 - 
2025-02-05 23:36:37,429 - 
2025-02-05 23:36:37,430 - 执行前idx: 11, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 10: (2, 'SELECT col_0, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-229, started 43692)>, 1738769797.4298437)}
2025-02-05 23:36:37,535 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:37,641 - stmt_idx: 10, status: success, result: None
2025-02-05 23:36:37,641 - 成功执行序列中事务2语句: SELECT col_0, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:36:37,641 - 执行后idx: 11, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:37,641 - 
2025-02-05 23:36:37,746 - 
2025-02-05 23:36:37,746 - 执行前idx: 12, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 11: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE', <Thread(Thread-230, started 42944)>, 1738769797.746235)}
2025-02-05 23:36:37,852 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:37,956 - stmt_idx: 11, status: success, result: None
2025-02-05 23:36:37,956 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 23:36:37,956 - 执行后idx: 12, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:37,956 - 
2025-02-05 23:36:38,064 - 
2025-02-05 23:36:38,065 - 执行前idx: 13, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 12: (2, 'SELECT * FROM table_0 WHERE (id = 11) FOR UPDATE', <Thread(Thread-231, started 4124)>, 1738769798.0643013)}
2025-02-05 23:36:38,167 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:38,275 - stmt_idx: 12, status: success, result: None
2025-02-05 23:36:38,275 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 11) FOR UPDATE
2025-02-05 23:36:38,275 - 执行后idx: 13, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:38,275 - 
2025-02-05 23:36:38,381 - 
2025-02-05 23:36:38,382 - 执行前idx: 14, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 13: (2, "UPDATE table_0 SET col_487 = 'mXaqq' WHERE (id = 13)", <Thread(Thread-232, started 17348)>, 1738769798.3811636)}
2025-02-05 23:36:38,489 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:38,599 - stmt_idx: 13, status: success, result: None
2025-02-05 23:36:38,599 - 成功执行序列中事务2语句: UPDATE table_0 SET col_487 = 'mXaqq' WHERE (id = 13)
2025-02-05 23:36:38,599 - 执行后idx: 14, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:38,599 - 
2025-02-05 23:36:38,706 - 
2025-02-05 23:36:38,707 - 执行前idx: 16, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255), 15: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-233, started 31728)>, 1738769798.7065635)}
2025-02-05 23:36:38,810 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:38,915 - stmt_idx: 15, status: success, result: None
2025-02-05 23:36:38,915 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:36:38,915 - 执行后idx: 16, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:38,915 - 
2025-02-05 23:36:39,026 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, started 44592)>, 1738769795.9540255)}
2025-02-05 23:36:39,026 - 
2025-02-05 23:36:39,026 - 执行前idx: 18, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-224, stopped 44592)>, 1738769795.9540255)}
2025-02-05 23:36:39,141 - stmt_idx: 3, status: success, result: None
2025-02-05 23:36:39,141 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:39,141 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:36:39,142 - 执行后idx: 18, pending_stmts: {4: (1, "SELECT col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (col_3 = 'lfeas') AND (col_2 = 4.89) AND (col_0 = 63) LOCK IN SHARE MODE", <Thread(Thread-234, started 41980)>, 1738769799.1425278), 5: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE', <Thread(Thread-235, started 27572)>, 1738769799.1425278), 14: (1, 'SELECT id FROM table_0 WHERE (col_487 IS NULL) AND (col_1 = 1.18) FOR UPDATE', <Thread(Thread-236, started 41612)>, 1738769799.1428463), 17: (1, 'COMMIT', <Thread(Thread-237, started 7512)>, 1738769799.1428463)}
2025-02-05 23:36:39,143 - 
2025-02-05 23:36:39,248 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "SELECT col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (col_3 = 'lfeas') AND (col_2 = 4.89) AND (col_0 = 63) LOCK IN SHARE MODE", <Thread(Thread-234, stopped 41980)>, 1738769799.1425278), 5: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE', <Thread(Thread-235, stopped 27572)>, 1738769799.1425278), 14: (1, 'SELECT id FROM table_0 WHERE (col_487 IS NULL) AND (col_1 = 1.18) FOR UPDATE', <Thread(Thread-236, stopped 41612)>, 1738769799.1428463), 17: (1, 'COMMIT', <Thread(Thread-237, stopped 7512)>, 1738769799.1428463)}
2025-02-05 23:36:39,248 - 
2025-02-05 23:36:39,248 - 执行前idx: 18, pending_stmts: {4: (1, "SELECT col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (col_3 = 'lfeas') AND (col_2 = 4.89) AND (col_0 = 63) LOCK IN SHARE MODE", <Thread(Thread-234, stopped 41980)>, 1738769799.1425278), 5: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE', <Thread(Thread-235, stopped 27572)>, 1738769799.1425278), 14: (1, 'SELECT id FROM table_0 WHERE (col_487 IS NULL) AND (col_1 = 1.18) FOR UPDATE', <Thread(Thread-236, stopped 41612)>, 1738769799.1428463), 17: (1, 'COMMIT', <Thread(Thread-237, stopped 7512)>, 1738769799.1428463)}
2025-02-05 23:36:39,352 - stmt_idx: 4, status: success, result: None
2025-02-05 23:36:39,352 - 成功执行序列中事务1语句: SELECT col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (col_3 = 'lfeas') AND (col_2 = 4.89) AND (col_0 = 63) LOCK IN SHARE MODE
2025-02-05 23:36:39,460 - stmt_idx: 5, status: success, result: None
2025-02-05 23:36:39,460 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE
2025-02-05 23:36:39,567 - stmt_idx: 14, status: success, result: None
2025-02-05 23:36:39,567 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (col_487 IS NULL) AND (col_1 = 1.18) FOR UPDATE
2025-02-05 23:36:39,671 - stmt_idx: 17, status: success, result: None
2025-02-05 23:36:39,671 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:36:39,671 - 执行后idx: 18, pending_stmts: {}
2025-02-05 23:36:39,671 - 
2025-02-05 23:36:39,779 - 执行序列成功
2025-02-05 23:36:40,552 - is_atomic: True
2025-02-05 23:36:40,552 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:36:40,552 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_1 = 20.89 WHERE id BETWEEN 3 AND 13'), (2, 'DELETE FROM table_0 WHERE (col_2 = 37.03) AND (col_487 IS NULL)'), (2, "DELETE FROM table_0 WHERE (col_3 = 'xlrfq')"), (2, "UPDATE table_0 SET col_487 = 'HJxLq', col_0 = 26, col_2 = 27.24 WHERE (id = 6) AND (col_1 = 64.51)"), (2, 'SELECT * FROM table_0 WHERE (col_1 = 73.0) FOR UPDATE'), (2, 'SELECT col_0, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE (id = 11) FOR UPDATE'), (2, "UPDATE table_0 SET col_487 = 'mXaqq' WHERE (id = 13)"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, "SELECT col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (col_3 = 'lfeas') AND (col_2 = 4.89) AND (col_0 = 63) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_487 FROM table_0 WHERE (id = 12) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (col_487 IS NULL) AND (col_1 = 1.18) FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 23:36:40,552 - snapshots: {'before': {'table_0': [(1, 70, 48.59, 21.79, 'vzkjb', None), (2, 52, 73.02, 5.93, 'zlkbw', None), (3, 39, 87.6, 37.03, 'pgszt', None), (4, 52, 4.45, 55.28, 'xlrfq', None), (5, 90, 30.34, 26.19, 'ztbhc', None), (6, 9, 64.51, 93.16, 'gafgc', None), (7, 1, 73.0, 29.16, 'jxiof', None), (8, 44, 2.96, 8.75, 'redaq', None), (9, 63, 43.61, 4.89, 'lfeas', None), (10, 24, 63.65, 84.87, 'sfxcr', None), (11, 2, 42.54, 76.54, 'sdwuv', None), (12, 81, 78.61, 70.15, 'ibjyd', None), (13, 3, 1.18, 68.17, 'vbfhj', None)]}, 'trx1': {'table_0': [(1, 70, 48.59, 21.79, 'vzkjb', None), (2, 52, 73.02, 5.93, 'zlkbw', None), (3, 39, 87.6, 37.03, 'pgszt', None), (4, 52, 4.45, 55.28, 'xlrfq', None), (5, 90, 30.34, 26.19, 'ztbhc', None), (6, 9, 64.51, 93.16, 'gafgc', None), (7, 1, 73.0, 29.16, 'jxiof', None), (8, 44, 2.96, 8.75, 'redaq', None), (9, 63, 43.61, 4.89, 'lfeas', None), (10, 24, 63.65, 84.87, 'sfxcr', None), (11, 2, 42.54, 76.54, 'sdwuv', None), (12, 81, 78.61, 70.15, 'ibjyd', None), (13, 3, 1.18, 68.17, 'vbfhj', None)]}, 'trx2': {'table_0': [(1, 70, 48.59, 21.79, 'vzkjb', None), (2, 52, 73.02, 5.93, 'zlkbw', None), (5, 90, 20.89, 26.19, 'ztbhc', None), (6, 9, 20.89, 93.16, 'gafgc', None), (7, 1, 20.89, 29.16, 'jxiof', None), (8, 44, 20.89, 8.75, 'redaq', None), (9, 63, 20.89, 4.89, 'lfeas', None), (10, 24, 20.89, 84.87, 'sfxcr', None), (11, 2, 20.89, 76.54, 'sdwuv', None), (12, 81, 20.89, 70.15, 'ibjyd', None), (13, 3, 20.89, 68.17, 'vbfhj', 'mXaqq')]}, 'serial': {'table_0': [(1, 70, 48.59, 21.79, 'vzkjb', None), (2, 52, 73.02, 5.93, 'zlkbw', None), (5, 90, 20.89, 26.19, 'ztbhc', None), (6, 9, 20.89, 93.16, 'gafgc', None), (7, 1, 20.89, 29.16, 'jxiof', None), (8, 44, 20.89, 8.75, 'redaq', None), (9, 63, 20.89, 4.89, 'lfeas', None), (10, 24, 20.89, 84.87, 'sfxcr', None), (11, 2, 20.89, 76.54, 'sdwuv', None), (12, 81, 20.89, 70.15, 'ibjyd', None), (13, 3, 20.89, 68.17, 'vbfhj', 'mXaqq')]}}
2025-02-05 23:36:40,552 - 
2025-02-05 23:36:40,564 - iter: 35
2025-02-05 23:36:42,163 - table table_0 has 15 rows
2025-02-05 23:36:42,163 - res_dict: {'trx1_lock_row_ids': [2, 4, 5, 9, 14], 'trx2_lock_row_ids': [1, 7, 10, 13, 15], 'intersection_row_ids': []}
2025-02-05 23:36:42,163 - lock_same_resource: False
2025-02-05 23:36:42,163 - 
2025-02-05 23:36:42,163 - non intersection phase1
2025-02-05 23:36:42,164 - 事务1在第一阶段自己加的锁: S
2025-02-05 23:36:42,164 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:36:42,164 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:36:42,164 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 23:36:42,167 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,168 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:42,168 - params: {'cond': '(id = 2)', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:36:42,171 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,173 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:42,173 - params: {'cond': "(col_1 = 'ygxpi') AND (col_2 = 'dktlw')", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:36:42,177 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,178 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:42,178 - params: {'cond': '(id = 5)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:36:42,180 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,183 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:42,183 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:36:42,186 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,187 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:36:42,187 - params: {'cond': '(id = 14)', 'select_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:36:42,190 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,192 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:42,192 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:36:42,195 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,196 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:42,196 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:36:42,199 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,201 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:36:42,201 - params: {'set_expr': "col_2 = 'OCKum'", 'cond': "(col_1 = 'eylnv')", 'table': 'table_0'}
2025-02-05 23:36:42,205 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,206 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:36:42,206 - params: {'set_expr': "col_2 = 'fLbFw'", 'cond': "(col_2 = 'sbgbb')", 'table': 'table_0'}
2025-02-05 23:36:42,210 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,211 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:42,212 - params: {'v1': '15', 'v2': '15', 'select_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:36:42,212 - non intersection phase1 end
2025-02-05 23:36:42,212 - 
2025-02-05 23:36:42,212 - non intersection phase2
2025-02-05 23:36:42,217 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,218 - needed_params: {'cond', 'table'}
2025-02-05 23:36:42,218 - params: {'cond': '(id = 13)', 'table': 'table_0'}
2025-02-05 23:36:42,221 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:36:42,223 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:36:42,223 - params: {'vals': "NULL, 'CFouZ', 'CSZUa'", 'insert_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:36:42,223 - non intersection phase2 end
2025-02-05 23:36:42,223 - 
2025-02-05 23:36:42,223 - 生成死锁事务序列成功如下
2025-02-05 23:36:42,223 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE"), (2, "UPDATE table_0 SET col_2 = 'OCKum' WHERE (col_1 = 'eylnv')"), (2, "UPDATE table_0 SET col_2 = 'fLbFw' WHERE (col_2 = 'sbgbb')"), (1, 'SELECT id FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 15 AND 15 FOR UPDATE'), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (id = 14) LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_1, col_2) VALUES (NULL, 'CFouZ', 'CSZUa')"), (1, 'DELETE FROM table_0 WHERE (id = 13)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:36:43,749 - 创建事务1连接成功
2025-02-05 23:36:43,750 - 执行事务1语句: BEGIN
2025-02-05 23:36:43,752 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:36:43,753 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE
2025-02-05 23:36:43,753 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:36:43,754 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:36:43,755 - 执行事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE (id = 14) LOCK IN SHARE MODE
2025-02-05 23:36:43,755 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 13)
2025-02-05 23:36:43,757 - 执行事务1语句: COMMIT;
2025-02-05 23:36:43,762 - 执行事务1成功
2025-02-05 23:36:46,352 - 恢复初始状态成功
2025-02-05 23:36:47,117 - 创建事务2连接成功
2025-02-05 23:36:47,119 - 执行事务2语句: BEGIN
2025-02-05 23:36:47,120 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:36:47,121 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:36:47,122 - 执行事务2语句: UPDATE table_0 SET col_2 = 'OCKum' WHERE (col_1 = 'eylnv')
2025-02-05 23:36:47,123 - 执行事务2语句: UPDATE table_0 SET col_2 = 'fLbFw' WHERE (col_2 = 'sbgbb')
2025-02-05 23:36:47,124 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 15 AND 15 FOR UPDATE
2025-02-05 23:36:47,124 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2) VALUES (NULL, 'CFouZ', 'CSZUa')
2025-02-05 23:36:47,127 - 执行事务2语句: COMMIT;
2025-02-05 23:36:47,132 - 执行事务2成功
2025-02-05 23:36:52,063 - 
2025-02-05 23:36:52,063 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-238, started 42520)>, 1738769812.063004)}
2025-02-05 23:36:52,172 - stmt_idx: 2, status: success, result: None
2025-02-05 23:36:52,172 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:36:52,172 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:36:52,172 - 
2025-02-05 23:36:52,279 - 
2025-02-05 23:36:52,279 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-239, started 44768)>, 1738769812.2796915)}
2025-02-05 23:36:52,387 - stmt_idx: 3, status: success, result: None
2025-02-05 23:36:52,387 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:36:52,387 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:36:52,387 - 
2025-02-05 23:36:52,493 - 
2025-02-05 23:36:52,494 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-240, started 31332)>, 1738769812.4933429)}
2025-02-05 23:36:52,601 - stmt_idx: 4, status: success, result: None
2025-02-05 23:36:52,601 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:36:52,601 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:36:52,602 - 
2025-02-05 23:36:52,707 - 
2025-02-05 23:36:52,707 - 执行前idx: 6, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818)}
2025-02-05 23:36:52,811 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE
2025-02-05 23:36:52,812 - 执行后idx: 6, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818)}
2025-02-05 23:36:52,812 - 
2025-02-05 23:36:52,918 - 
2025-02-05 23:36:52,918 - 执行前idx: 7, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818), 6: (2, "UPDATE table_0 SET col_2 = 'OCKum' WHERE (col_1 = 'eylnv')", <Thread(Thread-242, started 35604)>, 1738769812.9189143)}
2025-02-05 23:36:53,020 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE
2025-02-05 23:36:53,125 - stmt_idx: 6, status: success, result: None
2025-02-05 23:36:53,125 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'OCKum' WHERE (col_1 = 'eylnv')
2025-02-05 23:36:53,125 - 执行后idx: 7, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818)}
2025-02-05 23:36:53,126 - 
2025-02-05 23:36:53,232 - 
2025-02-05 23:36:53,232 - 执行前idx: 8, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818), 7: (2, "UPDATE table_0 SET col_2 = 'fLbFw' WHERE (col_2 = 'sbgbb')", <Thread(Thread-243, started 11244)>, 1738769813.232077)}
2025-02-05 23:36:53,338 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE
2025-02-05 23:36:53,444 - stmt_idx: 7, status: success, result: None
2025-02-05 23:36:53,444 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'fLbFw' WHERE (col_2 = 'sbgbb')
2025-02-05 23:36:53,444 - 执行后idx: 8, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818)}
2025-02-05 23:36:53,444 - 
2025-02-05 23:36:53,551 - 
2025-02-05 23:36:53,551 - 执行前idx: 10, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818), 9: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 15 AND 15 FOR UPDATE', <Thread(Thread-244, started 30960)>, 1738769813.5515978)}
2025-02-05 23:36:53,657 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE
2025-02-05 23:36:53,764 - stmt_idx: 9, status: success, result: None
2025-02-05 23:36:53,764 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 15 AND 15 FOR UPDATE
2025-02-05 23:36:53,764 - 执行后idx: 10, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818)}
2025-02-05 23:36:53,764 - 
2025-02-05 23:36:53,870 - 
2025-02-05 23:36:53,871 - 执行前idx: 13, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818), 12: (2, "INSERT INTO table_0 (id, col_1, col_2) VALUES (NULL, 'CFouZ', 'CSZUa')", <Thread(Thread-245, started 40440)>, 1738769813.8707004)}
2025-02-05 23:36:53,976 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE
2025-02-05 23:36:54,082 - stmt_idx: 12, status: success, result: None
2025-02-05 23:36:54,082 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2) VALUES (NULL, 'CFouZ', 'CSZUa')
2025-02-05 23:36:54,082 - 执行后idx: 13, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818)}
2025-02-05 23:36:54,082 - 
2025-02-05 23:36:54,192 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, started 22096)>, 1738769812.7070818)}
2025-02-05 23:36:54,193 - 
2025-02-05 23:36:54,193 - 执行前idx: 16, pending_stmts: {5: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE", <Thread(Thread-241, stopped 22096)>, 1738769812.7070818)}
2025-02-05 23:36:54,298 - stmt_idx: 5, status: success, result: None
2025-02-05 23:36:54,298 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE
2025-02-05 23:36:54,298 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE
2025-02-05 23:36:54,299 - 执行后idx: 16, pending_stmts: {8: (1, 'SELECT id FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-246, started 23280)>, 1738769814.2990124), 10: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-247, started 37884)>, 1738769814.2993464), 11: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (id = 14) LOCK IN SHARE MODE', <Thread(Thread-248, started 39928)>, 1738769814.2993464), 13: (1, 'DELETE FROM table_0 WHERE (id = 13)', <Thread(Thread-249, started 11168)>, 1738769814.2993464), 15: (1, 'COMMIT', <Thread(Thread-250, started 36852)>, 1738769814.299853)}
2025-02-05 23:36:54,299 - 
2025-02-05 23:36:54,406 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (1, 'SELECT id FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-246, stopped 23280)>, 1738769814.2990124), 10: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-247, stopped 37884)>, 1738769814.2993464), 11: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (id = 14) LOCK IN SHARE MODE', <Thread(Thread-248, stopped 39928)>, 1738769814.2993464), 13: (1, 'DELETE FROM table_0 WHERE (id = 13)', <Thread(Thread-249, stopped 11168)>, 1738769814.2993464), 15: (1, 'COMMIT', <Thread(Thread-250, stopped 36852)>, 1738769814.299853)}
2025-02-05 23:36:54,406 - 
2025-02-05 23:36:54,406 - 执行前idx: 16, pending_stmts: {8: (1, 'SELECT id FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-246, stopped 23280)>, 1738769814.2990124), 10: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-247, stopped 37884)>, 1738769814.2993464), 11: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (id = 14) LOCK IN SHARE MODE', <Thread(Thread-248, stopped 39928)>, 1738769814.2993464), 13: (1, 'DELETE FROM table_0 WHERE (id = 13)', <Thread(Thread-249, stopped 11168)>, 1738769814.2993464), 15: (1, 'COMMIT', <Thread(Thread-250, stopped 36852)>, 1738769814.299853)}
2025-02-05 23:36:54,515 - stmt_idx: 8, status: success, result: None
2025-02-05 23:36:54,515 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:36:54,621 - stmt_idx: 10, status: success, result: None
2025-02-05 23:36:54,621 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:36:54,730 - stmt_idx: 11, status: success, result: None
2025-02-05 23:36:54,730 - 成功执行序列中事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE (id = 14) LOCK IN SHARE MODE
2025-02-05 23:36:54,835 - stmt_idx: 13, status: success, result: None
2025-02-05 23:36:54,835 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 13)
2025-02-05 23:36:54,945 - stmt_idx: 15, status: success, result: None
2025-02-05 23:36:54,945 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:36:54,945 - 执行后idx: 16, pending_stmts: {}
2025-02-05 23:36:54,945 - 
2025-02-05 23:36:55,054 - 执行序列成功
2025-02-05 23:36:55,848 - is_atomic: True
2025-02-05 23:36:55,848 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:36:55,848 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, "UPDATE table_0 SET col_2 = 'OCKum' WHERE (col_1 = 'eylnv')"), (2, "UPDATE table_0 SET col_2 = 'fLbFw' WHERE (col_2 = 'sbgbb')"), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 15 AND 15 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_1, col_2) VALUES (NULL, 'CFouZ', 'CSZUa')"), (2, 'COMMIT'), (1, "SELECT * FROM table_0 WHERE (col_1 = 'ygxpi') AND (col_2 = 'dktlw') LOCK IN SHARE MODE"), (1, 'SELECT id FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (id = 14) LOCK IN SHARE MODE'), (1, 'DELETE FROM table_0 WHERE (id = 13)'), (1, 'COMMIT')]
2025-02-05 23:36:55,848 - snapshots: {'before': {'table_0': [(1, 'iossp', 'ponkr'), (2, 'ybosy', 'hibre'), (3, 'ojmux', 'dcree'), (4, 'ygxpi', 'dktlw'), (5, 'wjppx', 'nvxqv'), (6, 'hywjo', 'kztbc'), (7, 'jvqlb', 'comcu'), (8, 'xsycz', 'nkvdw'), (9, 'nrkax', 'qxzod'), (10, 'eylnv', 'slelc'), (11, 'rsppv', 'kwtsg'), (12, 'ljqfu', 'rzlpa'), (13, 'bzbqh', 'sbgbb'), (14, 'nyglk', 'uqptm'), (15, 'nbmjc', 'vjxrw')]}, 'trx1': {'table_0': [(1, 'iossp', 'ponkr'), (2, 'ybosy', 'hibre'), (3, 'ojmux', 'dcree'), (4, 'ygxpi', 'dktlw'), (5, 'wjppx', 'nvxqv'), (6, 'hywjo', 'kztbc'), (7, 'jvqlb', 'comcu'), (8, 'xsycz', 'nkvdw'), (9, 'nrkax', 'qxzod'), (10, 'eylnv', 'slelc'), (11, 'rsppv', 'kwtsg'), (12, 'ljqfu', 'rzlpa'), (14, 'nyglk', 'uqptm'), (15, 'nbmjc', 'vjxrw')]}, 'trx2': {'table_0': [(1, 'iossp', 'ponkr'), (2, 'ybosy', 'hibre'), (3, 'ojmux', 'dcree'), (4, 'ygxpi', 'dktlw'), (5, 'wjppx', 'nvxqv'), (6, 'hywjo', 'kztbc'), (7, 'jvqlb', 'comcu'), (8, 'xsycz', 'nkvdw'), (9, 'nrkax', 'qxzod'), (10, 'eylnv', 'OCKum'), (11, 'rsppv', 'kwtsg'), (12, 'ljqfu', 'rzlpa'), (13, 'bzbqh', 'fLbFw'), (14, 'nyglk', 'uqptm'), (15, 'nbmjc', 'vjxrw'), (16, 'CFouZ', 'CSZUa')]}, 'serial': {'table_0': [(1, 'iossp', 'ponkr'), (2, 'ybosy', 'hibre'), (3, 'ojmux', 'dcree'), (4, 'ygxpi', 'dktlw'), (5, 'wjppx', 'nvxqv'), (6, 'hywjo', 'kztbc'), (7, 'jvqlb', 'comcu'), (8, 'xsycz', 'nkvdw'), (9, 'nrkax', 'qxzod'), (10, 'eylnv', 'OCKum'), (11, 'rsppv', 'kwtsg'), (12, 'ljqfu', 'rzlpa'), (14, 'nyglk', 'uqptm'), (15, 'nbmjc', 'vjxrw'), (17, 'CFouZ', 'CSZUa')]}}
2025-02-05 23:36:55,848 - 
2025-02-05 23:36:55,859 - iter: 36
2025-02-05 23:36:57,504 - table table_0 has 10 rows
2025-02-05 23:36:57,504 - trx1_start_id: 3
2025-02-05 23:36:57,504 - trx1_end_id: 6
2025-02-05 23:36:57,504 - trx1_exclusive_start_id: 3
2025-02-05 23:36:57,504 - trx1_exclusive_end_id: 3
2025-02-05 23:36:57,504 - trx1_exclusive_ids: [3]
2025-02-05 23:36:57,504 - trx2_start_id: 4
2025-02-05 23:36:57,504 - trx2_end_id: 6
2025-02-05 23:36:57,504 - trx2_exclusive_start_id: 7
2025-02-05 23:36:57,504 - trx2_exclusive_end_id: 6
2025-02-05 23:36:57,504 - trx2_exclusive_ids: []
2025-02-05 23:36:57,504 - intersection_ids: [4, 5, 6]
2025-02-05 23:36:57,505 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6], 'trx2_lock_row_ids': [4, 5, 6], 'intersection_row_ids': [4, 5, 6]}
2025-02-05 23:36:57,505 - lock_same_resource: True
2025-02-05 23:36:57,505 - 
2025-02-05 23:36:57,505 - intersection phase1
2025-02-05 23:36:57,508 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=3, is_continuous=True, range_end_idx=6
2025-02-05 23:36:57,509 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:36:57,509 - params: {'set_expr': "col_1 = 78.55, col_0 = 65.37, col_2 = 'IhnDV'", 'v1': '3', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:36:57,512 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=6
2025-02-05 23:36:57,513 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:36:57,514 - params: {'set_expr': "col_2 = 'vnRmp', col_0 = 90.12, col_3 = 36.77, col_1 = 17.16, col_4 = 70.2", 'v1': '4', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:36:57,514 - intersection phase1 end
2025-02-05 23:36:57,514 - 
2025-02-05 23:36:57,514 - intersection phase2
2025-02-05 23:36:57,514 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:36:57,514 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:36:57,514 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:36:57,515 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:36:57,519 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=3
2025-02-05 23:36:57,520 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:57,520 - params: {'v1': '3', 'v2': '3', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:36:57,524 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=7, is_continuous=True, range_end_idx=6
2025-02-05 23:36:57,525 - 生成连续锁定SQL失败: 找不到从7到6的行
2025-02-05 23:36:57,525 - 生成锁SQL失败: 找不到从7到6的行
2025-02-05 23:36:57,525 - 生成死锁事务序列失败: 找不到从7到6的行
2025-02-05 23:36:57,525 - 
2025-02-05 23:36:57,525 - Error in iteration 36: 找不到从7到6的行
2025-02-05 23:36:57,525 - 
2025-02-05 23:36:57,532 - iter: 37
2025-02-05 23:36:59,015 - table table_0 has 6 rows
2025-02-05 23:36:59,015 - trx1_start_id: 1
2025-02-05 23:36:59,015 - trx1_end_id: 1
2025-02-05 23:36:59,015 - trx1_exclusive_start_id: 1
2025-02-05 23:36:59,015 - trx1_exclusive_end_id: 0
2025-02-05 23:36:59,015 - trx1_exclusive_ids: []
2025-02-05 23:36:59,015 - trx2_start_id: 1
2025-02-05 23:36:59,015 - trx2_end_id: 6
2025-02-05 23:36:59,015 - trx2_exclusive_start_id: 2
2025-02-05 23:36:59,015 - trx2_exclusive_end_id: 6
2025-02-05 23:36:59,015 - trx2_exclusive_ids: [2, 3, 4, 5, 6]
2025-02-05 23:36:59,015 - intersection_ids: [1]
2025-02-05 23:36:59,016 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6], 'intersection_row_ids': [1]}
2025-02-05 23:36:59,016 - lock_same_resource: True
2025-02-05 23:36:59,016 - 
2025-02-05 23:36:59,016 - intersection phase1
2025-02-05 23:36:59,021 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 23:36:59,023 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:59,023 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_2, col_4', 'table': 'table_0'}
2025-02-05 23:36:59,027 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=6
2025-02-05 23:36:59,029 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:36:59,029 - params: {'v1': '1', 'v2': '6', 'select_cols': 'col_0, col_2, col_4', 'table': 'table_0'}
2025-02-05 23:36:59,029 - intersection phase1 end
2025-02-05 23:36:59,029 - 
2025-02-05 23:36:59,029 - intersection phase2
2025-02-05 23:36:59,029 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:36:59,029 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:36:59,030 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:36:59,030 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:36:59,032 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=0
2025-02-05 23:36:59,034 - 生成连续锁定SQL失败: 找不到从1到0的行
2025-02-05 23:36:59,034 - 生成锁SQL失败: 找不到从1到0的行
2025-02-05 23:36:59,034 - 生成死锁事务序列失败: 找不到从1到0的行
2025-02-05 23:36:59,034 - 
2025-02-05 23:36:59,034 - Error in iteration 37: 找不到从1到0的行
2025-02-05 23:36:59,034 - 
2025-02-05 23:36:59,042 - iter: 38
2025-02-05 23:37:00,557 - table table_0 has 12 rows
2025-02-05 23:37:00,557 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2025-02-05 23:37:00,557 - trx2_lock_row_ids: [1, 2, 3, 9, 10, 11]
2025-02-05 23:37:00,557 - intersection_row_ids: [1, 2, 3, 9, 10]
2025-02-05 23:37:00,557 - trx1_exclusive_ids: [4, 5, 6, 7, 8]
2025-02-05 23:37:00,557 - trx2_exclusive_ids: [11]
2025-02-05 23:37:00,558 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [1, 2, 3, 9, 10, 11], 'intersection_row_ids': [1, 2, 3, 9, 10]}
2025-02-05 23:37:00,558 - lock_same_resource: True
2025-02-05 23:37:00,558 - 
2025-02-05 23:37:00,558 - intersection phase1
2025-02-05 23:37:00,561 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=10
2025-02-05 23:37:00,562 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:00,562 - params: {'v1': '1', 'v2': '10', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:37:00,566 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,568 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:00,568 - params: {'vals': "NULL, 'ukHNA', 'zCNYZ'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:00,572 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,573 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:00,573 - params: {'set_expr': "col_1 = 'ENtfa', col_0 = 'rjvRP'", 'cond': "(col_1 = 'gvyrv') AND (col_0 = 'jifch')", 'table': 'table_0'}
2025-02-05 23:37:00,577 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,579 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:00,579 - params: {'vals': "NULL, 'gdFXt', 'rdxZq'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:00,583 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,585 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:37:00,585 - params: {'set_expr': "col_0 = 'EMGSX', col_1 = 'LXOJZ'", 'v1': '9', 'v2': '9', 'table': 'table_0'}
2025-02-05 23:37:00,589 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,590 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:00,590 - params: {'vals': "NULL, 'aLmfH', 'JpqLv'", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:00,590 - intersection phase1 end
2025-02-05 23:37:00,590 - 
2025-02-05 23:37:00,590 - intersection phase2
2025-02-05 23:37:00,590 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:37:00,590 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:37:00,590 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:37:00,590 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:37:00,595 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,596 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:00,596 - params: {'set_expr': "col_0 = 'cfDiF', col_1 = 'jYdOF'", 'cond': "(col_0 = 'vtcyp')", 'table': 'table_0'}
2025-02-05 23:37:00,599 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,600 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:37:00,600 - params: {'cond': "(id = 5) AND (col_1 = 'mcjfx') AND (col_0 = 'jrrfc')", 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:00,604 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,606 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:37:00,606 - params: {'cond': '(id = 6)', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:37:00,608 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,609 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:00,610 - params: {'set_expr': "col_1 = 'SyqmT', col_0 = 'BFXgF'", 'cond': "(col_1 = 'zakqb')", 'table': 'table_0'}
2025-02-05 23:37:00,613 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,615 - needed_params: {'cond', 'table'}
2025-02-05 23:37:00,615 - params: {'cond': "(id = 8) AND (col_1 = 'olvrk')", 'table': 'table_0'}
2025-02-05 23:37:00,620 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,621 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:00,621 - params: {'set_expr': "col_0 = 'CsEiX'", 'cond': "(col_0 = 'bgeqv') AND (col_1 = 'rgnei')", 'table': 'table_0'}
2025-02-05 23:37:00,621 - intersection phase2 end
2025-02-05 23:37:00,621 - 
2025-02-05 23:37:00,621 - intersection phase3
2025-02-05 23:37:00,625 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,627 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:00,627 - params: {'set_expr': "col_1 = 'KxrVH', col_0 = 'ghifk'", 'cond': "(col_1 = 'rgnei')", 'table': 'table_0'}
2025-02-05 23:37:00,631 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:37:00,633 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:37:00,633 - params: {'cond': "(col_0 = 'hszen') AND (col_1 = 'dwmay')", 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:37:00,633 - intersection phase3 end
2025-02-05 23:37:00,633 - 
2025-02-05 23:37:00,633 - 生成死锁事务序列成功如下
2025-02-05 23:37:00,634 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'ukHNA', 'zCNYZ')"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 10 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'gdFXt', 'rdxZq')"), (2, "UPDATE table_0 SET col_0 = 'EMGSX', col_1 = 'LXOJZ' WHERE id BETWEEN 9 AND 9"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'aLmfH', 'JpqLv')"), (1, "UPDATE table_0 SET col_0 = 'cfDiF', col_1 = 'jYdOF' WHERE (col_0 = 'vtcyp')"), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) AND (col_1 = 'mcjfx') AND (col_0 = 'jrrfc') FOR UPDATE"), (2, "UPDATE table_0 SET col_0 = 'CsEiX' WHERE (col_0 = 'bgeqv') AND (col_1 = 'rgnei')"), (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 6) FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'SyqmT', col_0 = 'BFXgF' WHERE (col_1 = 'zakqb')"), (1, "DELETE FROM table_0 WHERE (id = 8) AND (col_1 = 'olvrk')"), (2, "SELECT id FROM table_0 WHERE (col_0 = 'hszen') AND (col_1 = 'dwmay') FOR UPDATE"), (1, "UPDATE table_0 SET col_1 = 'KxrVH', col_0 = 'ghifk' WHERE (col_1 = 'rgnei')"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:37:02,285 - 创建事务1连接成功
2025-02-05 23:37:02,292 - 执行事务1语句: BEGIN
2025-02-05 23:37:02,295 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 10 LOCK IN SHARE MODE
2025-02-05 23:37:02,296 - 执行事务1语句: UPDATE table_0 SET col_0 = 'cfDiF', col_1 = 'jYdOF' WHERE (col_0 = 'vtcyp')
2025-02-05 23:37:02,298 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) AND (col_1 = 'mcjfx') AND (col_0 = 'jrrfc') FOR UPDATE
2025-02-05 23:37:02,300 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE (id = 6) FOR UPDATE
2025-02-05 23:37:02,302 - 执行事务1语句: UPDATE table_0 SET col_1 = 'SyqmT', col_0 = 'BFXgF' WHERE (col_1 = 'zakqb')
2025-02-05 23:37:02,304 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 8) AND (col_1 = 'olvrk')
2025-02-05 23:37:02,305 - 执行事务1语句: UPDATE table_0 SET col_1 = 'KxrVH', col_0 = 'ghifk' WHERE (col_1 = 'rgnei')
2025-02-05 23:37:02,309 - 执行事务1语句: COMMIT;
2025-02-05 23:37:02,319 - 执行事务1成功
2025-02-05 23:37:04,961 - 恢复初始状态成功
2025-02-05 23:37:05,733 - 创建事务2连接成功
2025-02-05 23:37:05,735 - 执行事务2语句: BEGIN
2025-02-05 23:37:05,735 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'ukHNA', 'zCNYZ')
2025-02-05 23:37:05,736 - 执行事务2语句: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:05,737 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'gdFXt', 'rdxZq')
2025-02-05 23:37:05,737 - 执行事务2语句: UPDATE table_0 SET col_0 = 'EMGSX', col_1 = 'LXOJZ' WHERE id BETWEEN 9 AND 9
2025-02-05 23:37:05,738 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'aLmfH', 'JpqLv')
2025-02-05 23:37:05,739 - 执行事务2语句: UPDATE table_0 SET col_0 = 'CsEiX' WHERE (col_0 = 'bgeqv') AND (col_1 = 'rgnei')
2025-02-05 23:37:05,740 - 执行事务2语句: SELECT id FROM table_0 WHERE (col_0 = 'hszen') AND (col_1 = 'dwmay') FOR UPDATE
2025-02-05 23:37:05,742 - 执行事务2语句: COMMIT;
2025-02-05 23:37:05,746 - 执行事务2成功
2025-02-05 23:37:10,790 - 
2025-02-05 23:37:10,790 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'ukHNA', 'zCNYZ')", <Thread(Thread-251, started 36776)>, 1738769830.7900012)}
2025-02-05 23:37:10,898 - stmt_idx: 2, status: success, result: None
2025-02-05 23:37:10,898 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'ukHNA', 'zCNYZ')
2025-02-05 23:37:10,898 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:37:10,898 - 
2025-02-05 23:37:11,010 - 
2025-02-05 23:37:11,010 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 10 LOCK IN SHARE MODE', <Thread(Thread-252, started 35740)>, 1738769831.0101204)}
2025-02-05 23:37:11,118 - stmt_idx: 3, status: success, result: None
2025-02-05 23:37:11,118 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 10 LOCK IN SHARE MODE
2025-02-05 23:37:11,118 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:37:11,118 - 
2025-02-05 23:37:11,224 - 
2025-02-05 23:37:11,225 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:11,331 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:11,332 - 执行后idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:11,332 - 
2025-02-05 23:37:11,439 - 
2025-02-05 23:37:11,440 - 执行前idx: 9, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582), 8: (1, "UPDATE table_0 SET col_0 = 'cfDiF', col_1 = 'jYdOF' WHERE (col_0 = 'vtcyp')", <Thread(Thread-254, started 33948)>, 1738769831.439321)}
2025-02-05 23:37:11,546 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:11,654 - stmt_idx: 8, status: success, result: None
2025-02-05 23:37:11,654 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'cfDiF', col_1 = 'jYdOF' WHERE (col_0 = 'vtcyp')
2025-02-05 23:37:11,654 - 执行后idx: 9, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:11,654 - 
2025-02-05 23:37:11,763 - 
2025-02-05 23:37:11,764 - 执行前idx: 10, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582), 9: (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) AND (col_1 = 'mcjfx') AND (col_0 = 'jrrfc') FOR UPDATE", <Thread(Thread-255, started 40472)>, 1738769831.7633526)}
2025-02-05 23:37:11,872 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:11,981 - stmt_idx: 9, status: success, result: None
2025-02-05 23:37:11,981 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) AND (col_1 = 'mcjfx') AND (col_0 = 'jrrfc') FOR UPDATE
2025-02-05 23:37:11,981 - 执行后idx: 10, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:11,982 - 
2025-02-05 23:37:12,093 - 
2025-02-05 23:37:12,093 - 执行前idx: 12, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582), 11: (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 6) FOR UPDATE', <Thread(Thread-256, started 43288)>, 1738769832.0921612)}
2025-02-05 23:37:12,201 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:12,310 - stmt_idx: 11, status: success, result: None
2025-02-05 23:37:12,310 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE (id = 6) FOR UPDATE
2025-02-05 23:37:12,310 - 执行后idx: 12, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:12,310 - 
2025-02-05 23:37:12,421 - 
2025-02-05 23:37:12,421 - 执行前idx: 13, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582), 12: (1, "UPDATE table_0 SET col_1 = 'SyqmT', col_0 = 'BFXgF' WHERE (col_1 = 'zakqb')", <Thread(Thread-257, started 5108)>, 1738769832.4211433)}
2025-02-05 23:37:12,530 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:12,634 - stmt_idx: 12, status: success, result: None
2025-02-05 23:37:12,634 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'SyqmT', col_0 = 'BFXgF' WHERE (col_1 = 'zakqb')
2025-02-05 23:37:12,635 - 执行后idx: 13, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:12,635 - 
2025-02-05 23:37:12,741 - 
2025-02-05 23:37:12,742 - 执行前idx: 14, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582), 13: (1, "DELETE FROM table_0 WHERE (id = 8) AND (col_1 = 'olvrk')", <Thread(Thread-258, started 31784)>, 1738769832.7415907)}
2025-02-05 23:37:12,851 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:12,960 - stmt_idx: 13, status: success, result: None
2025-02-05 23:37:12,960 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 8) AND (col_1 = 'olvrk')
2025-02-05 23:37:12,960 - 执行后idx: 14, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:12,960 - 
2025-02-05 23:37:13,069 - 
2025-02-05 23:37:13,070 - 执行前idx: 16, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582), 15: (1, "UPDATE table_0 SET col_1 = 'KxrVH', col_0 = 'ghifk' WHERE (col_1 = 'rgnei')", <Thread(Thread-259, started 18384)>, 1738769833.069163)}
2025-02-05 23:37:13,174 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:13,280 - stmt_idx: 15, status: success, result: None
2025-02-05 23:37:13,280 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'KxrVH', col_0 = 'ghifk' WHERE (col_1 = 'rgnei')
2025-02-05 23:37:13,280 - 执行后idx: 16, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:13,280 - 
2025-02-05 23:37:13,391 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, started 31544)>, 1738769831.2240582)}
2025-02-05 23:37:13,391 - 
2025-02-05 23:37:13,391 - 执行前idx: 18, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')", <Thread(Thread-253, stopped 31544)>, 1738769831.2240582)}
2025-02-05 23:37:13,492 - stmt_idx: 4, status: success, result: None
2025-02-05 23:37:13,492 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:13,492 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')
2025-02-05 23:37:13,495 - 执行后idx: 18, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'gdFXt', 'rdxZq')", <Thread(Thread-260, started 5772)>, 1738769833.4936912), 6: (2, "UPDATE table_0 SET col_0 = 'EMGSX', col_1 = 'LXOJZ' WHERE id BETWEEN 9 AND 9", <Thread(Thread-261, started 32968)>, 1738769833.4936912), 7: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'aLmfH', 'JpqLv')", <Thread(Thread-262, started 40336)>, 1738769833.4943082), 10: (2, "UPDATE table_0 SET col_0 = 'CsEiX' WHERE (col_0 = 'bgeqv') AND (col_1 = 'rgnei')", <Thread(Thread-263, started 24024)>, 1738769833.4943082), 14: (2, "SELECT id FROM table_0 WHERE (col_0 = 'hszen') AND (col_1 = 'dwmay') FOR UPDATE", <Thread(Thread-264, started 45004)>, 1738769833.49482), 17: (2, 'COMMIT', <Thread(Thread-265, started 39660)>, 1738769833.49482)}
2025-02-05 23:37:13,495 - 
2025-02-05 23:37:13,598 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'gdFXt', 'rdxZq')", <Thread(Thread-260, stopped 5772)>, 1738769833.4936912), 6: (2, "UPDATE table_0 SET col_0 = 'EMGSX', col_1 = 'LXOJZ' WHERE id BETWEEN 9 AND 9", <Thread(Thread-261, stopped 32968)>, 1738769833.4936912), 7: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'aLmfH', 'JpqLv')", <Thread(Thread-262, stopped 40336)>, 1738769833.4943082), 10: (2, "UPDATE table_0 SET col_0 = 'CsEiX' WHERE (col_0 = 'bgeqv') AND (col_1 = 'rgnei')", <Thread(Thread-263, stopped 24024)>, 1738769833.4943082), 14: (2, "SELECT id FROM table_0 WHERE (col_0 = 'hszen') AND (col_1 = 'dwmay') FOR UPDATE", <Thread(Thread-264, stopped 45004)>, 1738769833.49482), 17: (2, 'COMMIT', <Thread(Thread-265, stopped 39660)>, 1738769833.49482)}
2025-02-05 23:37:13,598 - 
2025-02-05 23:37:13,598 - 执行前idx: 18, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'gdFXt', 'rdxZq')", <Thread(Thread-260, stopped 5772)>, 1738769833.4936912), 6: (2, "UPDATE table_0 SET col_0 = 'EMGSX', col_1 = 'LXOJZ' WHERE id BETWEEN 9 AND 9", <Thread(Thread-261, stopped 32968)>, 1738769833.4936912), 7: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'aLmfH', 'JpqLv')", <Thread(Thread-262, stopped 40336)>, 1738769833.4943082), 10: (2, "UPDATE table_0 SET col_0 = 'CsEiX' WHERE (col_0 = 'bgeqv') AND (col_1 = 'rgnei')", <Thread(Thread-263, stopped 24024)>, 1738769833.4943082), 14: (2, "SELECT id FROM table_0 WHERE (col_0 = 'hszen') AND (col_1 = 'dwmay') FOR UPDATE", <Thread(Thread-264, stopped 45004)>, 1738769833.49482), 17: (2, 'COMMIT', <Thread(Thread-265, stopped 39660)>, 1738769833.49482)}
2025-02-05 23:37:13,701 - stmt_idx: 5, status: success, result: None
2025-02-05 23:37:13,701 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'gdFXt', 'rdxZq')
2025-02-05 23:37:13,810 - stmt_idx: 6, status: success, result: None
2025-02-05 23:37:13,811 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'EMGSX', col_1 = 'LXOJZ' WHERE id BETWEEN 9 AND 9
2025-02-05 23:37:13,920 - stmt_idx: 7, status: success, result: None
2025-02-05 23:37:13,921 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'aLmfH', 'JpqLv')
2025-02-05 23:37:14,024 - stmt_idx: 10, status: success, result: None
2025-02-05 23:37:14,024 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'CsEiX' WHERE (col_0 = 'bgeqv') AND (col_1 = 'rgnei')
2025-02-05 23:37:14,128 - stmt_idx: 14, status: success, result: None
2025-02-05 23:37:14,128 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (col_0 = 'hszen') AND (col_1 = 'dwmay') FOR UPDATE
2025-02-05 23:37:14,235 - stmt_idx: 17, status: success, result: None
2025-02-05 23:37:14,236 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:37:14,236 - 执行后idx: 18, pending_stmts: {}
2025-02-05 23:37:14,236 - 
2025-02-05 23:37:14,342 - 执行序列成功
2025-02-05 23:37:15,110 - is_atomic: True
2025-02-05 23:37:15,110 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:37:15,110 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'ukHNA', 'zCNYZ')"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 10 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_0 = 'cfDiF', col_1 = 'jYdOF' WHERE (col_0 = 'vtcyp')"), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) AND (col_1 = 'mcjfx') AND (col_0 = 'jrrfc') FOR UPDATE"), (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 6) FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'SyqmT', col_0 = 'BFXgF' WHERE (col_1 = 'zakqb')"), (1, "DELETE FROM table_0 WHERE (id = 8) AND (col_1 = 'olvrk')"), (1, "UPDATE table_0 SET col_1 = 'KxrVH', col_0 = 'ghifk' WHERE (col_1 = 'rgnei')"), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_1 = 'ENtfa', col_0 = 'rjvRP' WHERE (col_1 = 'gvyrv') AND (col_0 = 'jifch')"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'gdFXt', 'rdxZq')"), (2, "UPDATE table_0 SET col_0 = 'EMGSX', col_1 = 'LXOJZ' WHERE id BETWEEN 9 AND 9"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'aLmfH', 'JpqLv')"), (2, "UPDATE table_0 SET col_0 = 'CsEiX' WHERE (col_0 = 'bgeqv') AND (col_1 = 'rgnei')"), (2, "SELECT id FROM table_0 WHERE (col_0 = 'hszen') AND (col_1 = 'dwmay') FOR UPDATE"), (2, 'COMMIT')]
2025-02-05 23:37:15,110 - snapshots: {'before': {'table_0': [(1, 'iwwpf', 'otwbe'), (2, 'jifch', 'gvyrv'), (3, 'vxbxo', 'vfzfv'), (4, 'vtcyp', 'wvper'), (5, 'jrrfc', 'mcjfx'), (6, 'hszen', 'dwmay'), (7, 'jvxtf', 'zakqb'), (8, 'zcevv', 'olvrk'), (9, 'zuhfr', 'fuvuc'), (10, 'ejvvl', 'yafpk'), (11, 'bgeqv', 'rgnei'), (12, 'kkdrb', 'zftud')]}, 'trx1': {'table_0': [(1, 'iwwpf', 'otwbe'), (2, 'jifch', 'gvyrv'), (3, 'vxbxo', 'vfzfv'), (4, 'cfDiF', 'jYdOF'), (5, 'jrrfc', 'mcjfx'), (6, 'hszen', 'dwmay'), (7, 'BFXgF', 'SyqmT'), (9, 'zuhfr', 'fuvuc'), (10, 'ejvvl', 'yafpk'), (11, 'ghifk', 'KxrVH'), (12, 'kkdrb', 'zftud')]}, 'trx2': {'table_0': [(1, 'iwwpf', 'otwbe'), (2, 'rjvRP', 'ENtfa'), (3, 'vxbxo', 'vfzfv'), (4, 'vtcyp', 'wvper'), (5, 'jrrfc', 'mcjfx'), (6, 'hszen', 'dwmay'), (7, 'jvxtf', 'zakqb'), (8, 'zcevv', 'olvrk'), (9, 'EMGSX', 'LXOJZ'), (10, 'ejvvl', 'yafpk'), (11, 'CsEiX', 'rgnei'), (12, 'kkdrb', 'zftud'), (13, 'ukHNA', 'zCNYZ'), (14, 'gdFXt', 'rdxZq'), (15, 'aLmfH', 'JpqLv')]}, 'serial': {'table_0': [(1, 'iwwpf', 'otwbe'), (2, 'rjvRP', 'ENtfa'), (3, 'vxbxo', 'vfzfv'), (4, 'cfDiF', 'jYdOF'), (5, 'jrrfc', 'mcjfx'), (6, 'hszen', 'dwmay'), (7, 'BFXgF', 'SyqmT'), (9, 'EMGSX', 'LXOJZ'), (10, 'ejvvl', 'yafpk'), (11, 'ghifk', 'KxrVH'), (12, 'kkdrb', 'zftud'), (16, 'ukHNA', 'zCNYZ'), (17, 'gdFXt', 'rdxZq'), (18, 'aLmfH', 'JpqLv')]}}
2025-02-05 23:37:15,110 - 
2025-02-05 23:37:15,121 - iter: 39
2025-02-05 23:37:16,626 - table table_0 has 8 rows
2025-02-05 23:37:16,626 - trx1_start_id: 6
2025-02-05 23:37:16,626 - trx1_end_id: 7
2025-02-05 23:37:16,626 - trx1_exclusive_start_id: 6
2025-02-05 23:37:16,626 - trx1_exclusive_end_id: 6
2025-02-05 23:37:16,627 - trx1_exclusive_ids: [6]
2025-02-05 23:37:16,627 - trx2_start_id: 7
2025-02-05 23:37:16,627 - trx2_end_id: 8
2025-02-05 23:37:16,627 - trx2_exclusive_start_id: 8
2025-02-05 23:37:16,627 - trx2_exclusive_end_id: 8
2025-02-05 23:37:16,627 - trx2_exclusive_ids: [8]
2025-02-05 23:37:16,627 - intersection_ids: [7]
2025-02-05 23:37:16,627 - res_dict: {'trx1_lock_row_ids': [6, 7], 'trx2_lock_row_ids': [7, 8], 'intersection_row_ids': [7]}
2025-02-05 23:37:16,627 - lock_same_resource: True
2025-02-05 23:37:16,627 - 
2025-02-05 23:37:16,627 - intersection phase1
2025-02-05 23:37:16,630 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=6, is_continuous=True, range_end_idx=7
2025-02-05 23:37:16,632 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:16,632 - params: {'v1': '6', 'v2': '7', 'select_cols': 'col_0, col_2', 'table': 'table_0'}
2025-02-05 23:37:16,634 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=7, is_continuous=True, range_end_idx=8
2025-02-05 23:37:16,636 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:37:16,636 - params: {'set_expr': "col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35", 'v1': '7', 'v2': '8', 'table': 'table_0'}
2025-02-05 23:37:16,636 - intersection phase1 end
2025-02-05 23:37:16,636 - 
2025-02-05 23:37:16,636 - intersection phase2
2025-02-05 23:37:16,637 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:37:16,637 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:37:16,637 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:37:16,637 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:37:16,640 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 23:37:16,641 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:16,641 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:37:16,645 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=8, is_continuous=True, range_end_idx=8
2025-02-05 23:37:16,646 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:16,646 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:16,646 - intersection phase2 end
2025-02-05 23:37:16,646 - 
2025-02-05 23:37:16,646 - intersection phase3
2025-02-05 23:37:16,650 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=8, is_continuous=True, range_end_idx=8
2025-02-05 23:37:16,651 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:16,651 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:16,654 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 23:37:16,655 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:16,655 - params: {'v1': '6', 'v2': '6', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:37:16,655 - intersection phase3 end
2025-02-05 23:37:16,655 - 
2025-02-05 23:37:16,655 - 生成死锁事务序列成功如下
2025-02-05 23:37:16,655 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:37:18,192 - 创建事务1连接成功
2025-02-05 23:37:18,193 - 执行事务1语句: BEGIN
2025-02-05 23:37:18,195 - 执行事务1语句: SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE
2025-02-05 23:37:18,195 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:37:18,196 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:37:18,197 - 执行事务1语句: COMMIT;
2025-02-05 23:37:18,201 - 执行事务1成功
2025-02-05 23:37:20,798 - 恢复初始状态成功
2025-02-05 23:37:21,566 - 创建事务2连接成功
2025-02-05 23:37:21,568 - 执行事务2语句: BEGIN
2025-02-05 23:37:21,569 - 执行事务2语句: UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8
2025-02-05 23:37:21,571 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:37:21,571 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:37:21,573 - 执行事务2语句: COMMIT;
2025-02-05 23:37:21,578 - 执行事务2成功
2025-02-05 23:37:26,498 - 
2025-02-05 23:37:26,499 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE', <Thread(Thread-266, started 29112)>, 1738769846.4985697)}
2025-02-05 23:37:26,600 - stmt_idx: 2, status: success, result: None
2025-02-05 23:37:26,600 - 成功执行序列中事务1语句: SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE
2025-02-05 23:37:26,600 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:37:26,600 - 
2025-02-05 23:37:26,706 - 
2025-02-05 23:37:26,707 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8", <Thread(Thread-267, started 13896)>, 1738769846.7066085)}
2025-02-05 23:37:26,810 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8
2025-02-05 23:37:26,810 - 执行后idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8", <Thread(Thread-267, started 13896)>, 1738769846.7066085)}
2025-02-05 23:37:26,810 - 
2025-02-05 23:37:26,920 - 
2025-02-05 23:37:26,920 - 执行前idx: 5, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8", <Thread(Thread-267, started 13896)>, 1738769846.7066085), 4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-268, started 2408)>, 1738769846.920629)}
2025-02-05 23:37:27,022 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8
2025-02-05 23:37:27,123 - stmt_idx: 4, status: success, result: None
2025-02-05 23:37:27,123 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:37:27,124 - 执行后idx: 5, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8", <Thread(Thread-267, started 13896)>, 1738769846.7066085)}
2025-02-05 23:37:27,124 - 
2025-02-05 23:37:27,230 - 
2025-02-05 23:37:27,230 - 执行前idx: 8, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8", <Thread(Thread-267, started 13896)>, 1738769846.7066085), 7: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-269, started 30088)>, 1738769847.229813)}
2025-02-05 23:37:27,338 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8
2025-02-05 23:37:27,444 - stmt_idx: 7, status: success, result: None
2025-02-05 23:37:27,444 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:37:27,444 - 执行后idx: 8, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8", <Thread(Thread-267, started 13896)>, 1738769846.7066085)}
2025-02-05 23:37:27,445 - 
2025-02-05 23:37:27,550 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8", <Thread(Thread-267, started 13896)>, 1738769846.7066085)}
2025-02-05 23:37:27,550 - 
2025-02-05 23:37:27,550 - 执行前idx: 10, pending_stmts: {3: (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8", <Thread(Thread-267, stopped 13896)>, 1738769846.7066085)}
2025-02-05 23:37:27,655 - stmt_idx: 3, status: success, result: None
2025-02-05 23:37:27,655 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8
2025-02-05 23:37:27,655 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8
2025-02-05 23:37:27,656 - 执行后idx: 10, pending_stmts: {5: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-270, started 12588)>, 1738769847.6563659), 6: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-271, started 27068)>, 1738769847.6563659), 8: (2, 'COMMIT', <Thread(Thread-272, started 32828)>, 1738769847.6569357)}
2025-02-05 23:37:27,657 - 
2025-02-05 23:37:27,758 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-270, stopped 12588)>, 1738769847.6563659), 6: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-271, stopped 27068)>, 1738769847.6563659), 8: (2, 'COMMIT', <Thread(Thread-272, stopped 32828)>, 1738769847.6569357)}
2025-02-05 23:37:27,758 - 
2025-02-05 23:37:27,758 - 执行前idx: 10, pending_stmts: {5: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-270, stopped 12588)>, 1738769847.6563659), 6: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-271, stopped 27068)>, 1738769847.6563659), 8: (2, 'COMMIT', <Thread(Thread-272, stopped 32828)>, 1738769847.6569357)}
2025-02-05 23:37:27,862 - stmt_idx: 5, status: success, result: None
2025-02-05 23:37:27,862 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:37:27,971 - stmt_idx: 6, status: success, result: None
2025-02-05 23:37:27,971 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:37:28,080 - stmt_idx: 8, status: success, result: None
2025-02-05 23:37:28,080 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:37:28,080 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:37:28,080 - 
2025-02-05 23:37:28,188 - 执行序列成功
2025-02-05 23:37:28,981 - is_atomic: True
2025-02-05 23:37:28,981 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:37:28,981 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT col_0, col_2 FROM table_0 WHERE id BETWEEN 6 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_1 = 'fetKs', col_2 = 72.34, col_0 = 72.35 WHERE id BETWEEN 7 AND 8"), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 23:37:28,981 - snapshots: {'before': {'table_0': [(1, 91.99, 'prhki', 61.6), (2, 26.29, 'mhsjn', 39.86), (3, 17.74, 'godsy', 44.76), (4, 85.35, 'ldvzp', 29.8), (5, 27.49, 'seqdr', 93.18), (6, 38.18, 'tzfpv', 20.9), (7, 30.55, 'iteoo', 32.89), (8, 15.27, 'etokt', 2.13)]}, 'trx1': {'table_0': [(1, 91.99, 'prhki', 61.6), (2, 26.29, 'mhsjn', 39.86), (3, 17.74, 'godsy', 44.76), (4, 85.35, 'ldvzp', 29.8), (5, 27.49, 'seqdr', 93.18), (6, 38.18, 'tzfpv', 20.9), (7, 30.55, 'iteoo', 32.89), (8, 15.27, 'etokt', 2.13)]}, 'trx2': {'table_0': [(1, 91.99, 'prhki', 61.6), (2, 26.29, 'mhsjn', 39.86), (3, 17.74, 'godsy', 44.76), (4, 85.35, 'ldvzp', 29.8), (5, 27.49, 'seqdr', 93.18), (6, 38.18, 'tzfpv', 20.9), (7, 72.35, 'fetKs', 72.34), (8, 72.35, 'fetKs', 72.34)]}, 'serial': {'table_0': [(1, 91.99, 'prhki', 61.6), (2, 26.29, 'mhsjn', 39.86), (3, 17.74, 'godsy', 44.76), (4, 85.35, 'ldvzp', 29.8), (5, 27.49, 'seqdr', 93.18), (6, 38.18, 'tzfpv', 20.9), (7, 72.35, 'fetKs', 72.34), (8, 72.35, 'fetKs', 72.34)]}}
2025-02-05 23:37:28,981 - 
2025-02-05 23:37:28,993 - iter: 40
2025-02-05 23:37:30,467 - table table_0 has 6 rows
2025-02-05 23:37:30,467 - res_dict: {'trx1_lock_row_ids': [4], 'trx2_lock_row_ids': [1, 2, 3, 5, 6], 'intersection_row_ids': []}
2025-02-05 23:37:30,467 - lock_same_resource: False
2025-02-05 23:37:30,467 - 
2025-02-05 23:37:30,468 - non intersection phase1
2025-02-05 23:37:30,468 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:37:30,468 - 事务2在第一阶段自己加的锁: II
2025-02-05 23:37:30,468 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:37:30,468 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:37:30,471 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 23:37:30,473 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:30,473 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:30,476 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:37:30,477 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:30,477 - params: {'vals': "NULL, 'fOFdS', 6.15", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:30,480 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:37:30,482 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:37:30,482 - params: {'set_expr': 'col_1 = 97.5', 'v1': '2', 'v2': '2', 'table': 'table_0'}
2025-02-05 23:37:30,484 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:37:30,485 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:30,485 - params: {'vals': "NULL, 'pKPmC', 68.3", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:30,489 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:37:30,490 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:30,490 - params: {'vals': "NULL, 'buGQk', 17.44", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:30,492 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:37:30,493 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:30,493 - params: {'vals': "NULL, 'NEiRz', 2.85", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:30,494 - non intersection phase1 end
2025-02-05 23:37:30,494 - 
2025-02-05 23:37:30,494 - non intersection phase2
2025-02-05 23:37:30,497 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:37:30,498 - needed_params: {'cond', 'table'}
2025-02-05 23:37:30,498 - params: {'cond': '(id = 5)', 'table': 'table_0'}
2025-02-05 23:37:30,500 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 23:37:30,501 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:30,501 - params: {'v1': '4', 'v2': '4', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:37:30,502 - non intersection phase2 end
2025-02-05 23:37:30,502 - 
2025-02-05 23:37:30,502 - 生成死锁事务序列成功如下
2025-02-05 23:37:30,502 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'fOFdS', 6.15)"), (2, 'UPDATE table_0 SET col_1 = 97.5 WHERE id BETWEEN 2 AND 2'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'pKPmC', 68.3)"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'buGQk', 17.44)"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'NEiRz', 2.85)"), (1, 'DELETE FROM table_0 WHERE (id = 5)'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:37:32,043 - 创建事务1连接成功
2025-02-05 23:37:32,045 - 执行事务1语句: BEGIN
2025-02-05 23:37:32,046 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:37:32,047 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 5)
2025-02-05 23:37:32,048 - 执行事务1语句: COMMIT;
2025-02-05 23:37:32,053 - 执行事务1成功
2025-02-05 23:37:34,664 - 恢复初始状态成功
2025-02-05 23:37:35,431 - 创建事务2连接成功
2025-02-05 23:37:35,432 - 执行事务2语句: BEGIN
2025-02-05 23:37:35,433 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'fOFdS', 6.15)
2025-02-05 23:37:35,434 - 执行事务2语句: UPDATE table_0 SET col_1 = 97.5 WHERE id BETWEEN 2 AND 2
2025-02-05 23:37:35,435 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'pKPmC', 68.3)
2025-02-05 23:37:35,435 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'buGQk', 17.44)
2025-02-05 23:37:35,436 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'NEiRz', 2.85)
2025-02-05 23:37:35,437 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:37:35,439 - 执行事务2语句: COMMIT;
2025-02-05 23:37:35,444 - 执行事务2成功
2025-02-05 23:37:40,375 - 
2025-02-05 23:37:40,376 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-273, started 35004)>, 1738769860.3758569)}
2025-02-05 23:37:40,478 - stmt_idx: 2, status: success, result: None
2025-02-05 23:37:40,478 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:37:40,478 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:37:40,478 - 
2025-02-05 23:37:40,585 - 
2025-02-05 23:37:40,586 - 执行前idx: 4, pending_stmts: {3: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'fOFdS', 6.15)", <Thread(Thread-274, started 7824)>, 1738769860.5855775)}
2025-02-05 23:37:40,694 - stmt_idx: 3, status: success, result: None
2025-02-05 23:37:40,694 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'fOFdS', 6.15)
2025-02-05 23:37:40,694 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:37:40,694 - 
2025-02-05 23:37:40,800 - 
2025-02-05 23:37:40,801 - 执行前idx: 5, pending_stmts: {4: (2, 'UPDATE table_0 SET col_1 = 97.5 WHERE id BETWEEN 2 AND 2', <Thread(Thread-275, started 17924)>, 1738769860.8007329)}
2025-02-05 23:37:40,908 - stmt_idx: 4, status: success, result: None
2025-02-05 23:37:40,908 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 97.5 WHERE id BETWEEN 2 AND 2
2025-02-05 23:37:40,908 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:37:40,908 - 
2025-02-05 23:37:41,014 - 
2025-02-05 23:37:41,014 - 执行前idx: 6, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'pKPmC', 68.3)", <Thread(Thread-276, started 40724)>, 1738769861.0148268)}
2025-02-05 23:37:41,123 - stmt_idx: 5, status: success, result: None
2025-02-05 23:37:41,123 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'pKPmC', 68.3)
2025-02-05 23:37:41,123 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:37:41,123 - 
2025-02-05 23:37:41,236 - 
2025-02-05 23:37:41,237 - 执行前idx: 7, pending_stmts: {6: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'buGQk', 17.44)", <Thread(Thread-277, started 40092)>, 1738769861.2364726)}
2025-02-05 23:37:41,344 - stmt_idx: 6, status: success, result: None
2025-02-05 23:37:41,344 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'buGQk', 17.44)
2025-02-05 23:37:41,344 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:37:41,344 - 
2025-02-05 23:37:41,453 - 
2025-02-05 23:37:41,454 - 执行前idx: 8, pending_stmts: {7: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'NEiRz', 2.85)", <Thread(Thread-278, started 42744)>, 1738769861.4539905)}
2025-02-05 23:37:41,563 - stmt_idx: 7, status: success, result: None
2025-02-05 23:37:41,563 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'NEiRz', 2.85)
2025-02-05 23:37:41,563 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:37:41,563 - 
2025-02-05 23:37:41,675 - 
2025-02-05 23:37:41,676 - 执行前idx: 9, pending_stmts: {8: (1, 'DELETE FROM table_0 WHERE (id = 5)', <Thread(Thread-279, started 31032)>, 1738769861.6757634)}
2025-02-05 23:37:41,782 - stmt_idx: 8, status: success, result: None
2025-02-05 23:37:41,782 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 5)
2025-02-05 23:37:41,782 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:37:41,782 - 
2025-02-05 23:37:41,887 - 
2025-02-05 23:37:41,888 - 执行前idx: 10, pending_stmts: {9: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-280, started 38312)>, 1738769861.8878884)}
2025-02-05 23:37:41,996 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:37:41,996 - 执行后idx: 10, pending_stmts: {9: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-280, started 38312)>, 1738769861.8878884)}
2025-02-05 23:37:41,996 - 
2025-02-05 23:37:42,110 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-280, started 38312)>, 1738769861.8878884)}
2025-02-05 23:37:42,110 - 
2025-02-05 23:37:42,110 - 执行前idx: 12, pending_stmts: {9: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-280, stopped 38312)>, 1738769861.8878884)}
2025-02-05 23:37:42,212 - stmt_idx: 9, status: success, result: None
2025-02-05 23:37:42,212 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:37:42,213 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:37:42,213 - 执行后idx: 12, pending_stmts: {11: (2, 'COMMIT', <Thread(Thread-281, started 32860)>, 1738769862.2134244)}
2025-02-05 23:37:42,213 - 
2025-02-05 23:37:42,323 - 序列遍历完成，开始查看剩余阻塞的语句：{11: (2, 'COMMIT', <Thread(Thread-281, stopped 32860)>, 1738769862.2134244)}
2025-02-05 23:37:42,323 - 
2025-02-05 23:37:42,323 - 执行前idx: 12, pending_stmts: {11: (2, 'COMMIT', <Thread(Thread-281, stopped 32860)>, 1738769862.2134244)}
2025-02-05 23:37:42,427 - stmt_idx: 11, status: success, result: None
2025-02-05 23:37:42,427 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:37:42,427 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:37:42,427 - 
2025-02-05 23:37:42,536 - 执行序列成功
2025-02-05 23:37:43,291 - is_atomic: True
2025-02-05 23:37:43,291 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:37:43,291 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'fOFdS', 6.15)"), (2, 'UPDATE table_0 SET col_1 = 97.5 WHERE id BETWEEN 2 AND 2'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'pKPmC', 68.3)"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'buGQk', 17.44)"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'NEiRz', 2.85)"), (1, 'DELETE FROM table_0 WHERE (id = 5)'), (1, 'COMMIT'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 23:37:43,291 - snapshots: {'before': {'table_0': [(1, 'vciki', 51.22), (2, 'sahpa', 58.76), (3, 'potxf', 63.79), (4, 'rokjk', 75.29), (5, 'mtsih', 5.22), (6, 'xhftl', 28.75)]}, 'trx1': {'table_0': [(1, 'vciki', 51.22), (2, 'sahpa', 58.76), (3, 'potxf', 63.79), (4, 'rokjk', 75.29), (6, 'xhftl', 28.75)]}, 'trx2': {'table_0': [(1, 'vciki', 51.22), (2, 'sahpa', 97.5), (3, 'potxf', 63.79), (4, 'rokjk', 75.29), (5, 'mtsih', 5.22), (6, 'xhftl', 28.75), (7, 'fOFdS', 6.15), (8, 'pKPmC', 68.3), (9, 'buGQk', 17.44), (10, 'NEiRz', 2.85)]}, 'serial': {'table_0': [(1, 'vciki', 51.22), (2, 'sahpa', 97.5), (3, 'potxf', 63.79), (4, 'rokjk', 75.29), (6, 'xhftl', 28.75), (11, 'fOFdS', 6.15), (12, 'pKPmC', 68.3), (13, 'buGQk', 17.44), (14, 'NEiRz', 2.85)]}}
2025-02-05 23:37:43,291 - 
2025-02-05 23:37:43,302 - iter: 41
2025-02-05 23:37:44,759 - table table_0 has 15 rows
2025-02-05 23:37:44,759 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7], 'trx2_lock_row_ids': [1, 2, 8, 10, 11, 12, 13, 15], 'intersection_row_ids': []}
2025-02-05 23:37:44,760 - lock_same_resource: False
2025-02-05 23:37:44,760 - 
2025-02-05 23:37:44,760 - non intersection phase1
2025-02-05 23:37:44,761 - 事务1在第一阶段自己加的锁: II
2025-02-05 23:37:44,761 - 事务2在第一阶段自己加的锁: II
2025-02-05 23:37:44,761 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:37:44,761 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:37:44,764 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=3, is_continuous=True, range_end_idx=7
2025-02-05 23:37:44,765 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:37:44,765 - params: {'set_expr': "col_1 = 87.04, col_0 = 'cYhsJ'", 'v1': '3', 'v2': '7', 'table': 'table_0'}
2025-02-05 23:37:44,769 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,770 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:44,770 - params: {'vals': "NULL, 'Ajegy', 4.62", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:44,772 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,773 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:37:44,773 - params: {'vals': "NULL, 'kHFtj', 49.29", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:37:44,776 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,777 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:44,777 - params: {'set_expr': "col_0 = 'BlCyF'", 'cond': "(col_1 = 84.5) AND (col_0 = 'ezkle')", 'table': 'table_0'}
2025-02-05 23:37:44,782 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,784 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:37:44,784 - params: {'set_expr': "col_0 = 'eKSZA'", 'v1': '10', 'v2': '10', 'table': 'table_0'}
2025-02-05 23:37:44,788 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,790 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:44,790 - params: {'set_expr': "col_0 = 'QTqOx', col_1 = 1.87", 'cond': "(col_1 = 3.14) AND (col_0 = 'warmi')", 'table': 'table_0'}
2025-02-05 23:37:44,794 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,795 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:44,795 - params: {'set_expr': "col_0 = 'NcJWd'", 'cond': '(id = 12)', 'table': 'table_0'}
2025-02-05 23:37:44,800 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,801 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:37:44,802 - params: {'set_expr': "col_0 = 'aupgL', col_1 = 4.04", 'v1': '13', 'v2': '13', 'table': 'table_0'}
2025-02-05 23:37:44,804 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,806 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:37:44,806 - params: {'set_expr': "col_0 = 'KRtbE', col_1 = 89.01", 'cond': "(col_0 = 'nigsp') AND (col_1 = 15.3)", 'table': 'table_0'}
2025-02-05 23:37:44,806 - non intersection phase1 end
2025-02-05 23:37:44,806 - 
2025-02-05 23:37:44,806 - non intersection phase2
2025-02-05 23:37:44,809 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:37:44,811 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:44,811 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:37:44,813 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=3
2025-02-05 23:37:44,814 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:44,814 - params: {'v1': '3', 'v2': '3', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:37:44,815 - non intersection phase2 end
2025-02-05 23:37:44,815 - 
2025-02-05 23:37:44,815 - 生成死锁事务序列成功如下
2025-02-05 23:37:44,815 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'Ajegy', 4.62)"), (1, "UPDATE table_0 SET col_1 = 87.04, col_0 = 'cYhsJ' WHERE id BETWEEN 3 AND 7"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kHFtj', 49.29)"), (2, "UPDATE table_0 SET col_0 = 'BlCyF' WHERE (col_1 = 84.5) AND (col_0 = 'ezkle')"), (2, "UPDATE table_0 SET col_0 = 'eKSZA' WHERE id BETWEEN 10 AND 10"), (2, "UPDATE table_0 SET col_0 = 'QTqOx', col_1 = 1.87 WHERE (col_1 = 3.14) AND (col_0 = 'warmi')"), (2, "UPDATE table_0 SET col_0 = 'NcJWd' WHERE (id = 12)"), (2, "UPDATE table_0 SET col_0 = 'aupgL', col_1 = 4.04 WHERE id BETWEEN 13 AND 13"), (2, "UPDATE table_0 SET col_0 = 'KRtbE', col_1 = 89.01 WHERE (col_0 = 'nigsp') AND (col_1 = 15.3)"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:37:46,322 - 创建事务1连接成功
2025-02-05 23:37:46,324 - 执行事务1语句: BEGIN
2025-02-05 23:37:46,325 - 执行事务1语句: UPDATE table_0 SET col_1 = 87.04, col_0 = 'cYhsJ' WHERE id BETWEEN 3 AND 7
2025-02-05 23:37:46,325 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:37:46,328 - 执行事务1语句: COMMIT;
2025-02-05 23:37:46,334 - 执行事务1成功
2025-02-05 23:37:48,891 - 恢复初始状态成功
2025-02-05 23:37:49,655 - 创建事务2连接成功
2025-02-05 23:37:49,656 - 执行事务2语句: BEGIN
2025-02-05 23:37:49,674 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'Ajegy', 4.62)
2025-02-05 23:37:49,675 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kHFtj', 49.29)
2025-02-05 23:37:49,676 - 执行事务2语句: UPDATE table_0 SET col_0 = 'BlCyF' WHERE (col_1 = 84.5) AND (col_0 = 'ezkle')
2025-02-05 23:37:49,676 - 执行事务2语句: UPDATE table_0 SET col_0 = 'eKSZA' WHERE id BETWEEN 10 AND 10
2025-02-05 23:37:49,677 - 执行事务2语句: UPDATE table_0 SET col_0 = 'QTqOx', col_1 = 1.87 WHERE (col_1 = 3.14) AND (col_0 = 'warmi')
2025-02-05 23:37:49,678 - 执行事务2语句: UPDATE table_0 SET col_0 = 'NcJWd' WHERE (id = 12)
2025-02-05 23:37:49,679 - 执行事务2语句: UPDATE table_0 SET col_0 = 'aupgL', col_1 = 4.04 WHERE id BETWEEN 13 AND 13
2025-02-05 23:37:49,679 - 执行事务2语句: UPDATE table_0 SET col_0 = 'KRtbE', col_1 = 89.01 WHERE (col_0 = 'nigsp') AND (col_1 = 15.3)
2025-02-05 23:37:49,680 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 23:37:49,682 - 执行事务2语句: COMMIT;
2025-02-05 23:37:49,686 - 执行事务2成功
2025-02-05 23:37:54,607 - 
2025-02-05 23:37:54,607 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'Ajegy', 4.62)", <Thread(Thread-282, started 17116)>, 1738769874.6076078)}
2025-02-05 23:37:54,715 - stmt_idx: 2, status: success, result: None
2025-02-05 23:37:54,716 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'Ajegy', 4.62)
2025-02-05 23:37:54,716 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:37:54,716 - 
2025-02-05 23:37:54,825 - 
2025-02-05 23:37:54,825 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 87.04, col_0 = 'cYhsJ' WHERE id BETWEEN 3 AND 7", <Thread(Thread-283, started 39396)>, 1738769874.8255775)}
2025-02-05 23:37:54,931 - stmt_idx: 3, status: success, result: None
2025-02-05 23:37:54,931 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 87.04, col_0 = 'cYhsJ' WHERE id BETWEEN 3 AND 7
2025-02-05 23:37:54,931 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:37:54,931 - 
2025-02-05 23:37:55,037 - 
2025-02-05 23:37:55,037 - 执行前idx: 5, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kHFtj', 49.29)", <Thread(Thread-284, started 34536)>, 1738769875.0378819)}
2025-02-05 23:37:55,146 - stmt_idx: 4, status: success, result: None
2025-02-05 23:37:55,146 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kHFtj', 49.29)
2025-02-05 23:37:55,146 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:37:55,146 - 
2025-02-05 23:37:55,251 - 
2025-02-05 23:37:55,252 - 执行前idx: 6, pending_stmts: {5: (2, "UPDATE table_0 SET col_0 = 'BlCyF' WHERE (col_1 = 84.5) AND (col_0 = 'ezkle')", <Thread(Thread-285, started 39644)>, 1738769875.2517474)}
2025-02-05 23:37:55,356 - stmt_idx: 5, status: success, result: None
2025-02-05 23:37:55,356 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'BlCyF' WHERE (col_1 = 84.5) AND (col_0 = 'ezkle')
2025-02-05 23:37:55,356 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:37:55,356 - 
2025-02-05 23:37:55,463 - 
2025-02-05 23:37:55,463 - 执行前idx: 7, pending_stmts: {6: (2, "UPDATE table_0 SET col_0 = 'eKSZA' WHERE id BETWEEN 10 AND 10", <Thread(Thread-286, started 40176)>, 1738769875.4637902)}
2025-02-05 23:37:55,571 - stmt_idx: 6, status: success, result: None
2025-02-05 23:37:55,571 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'eKSZA' WHERE id BETWEEN 10 AND 10
2025-02-05 23:37:55,571 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:37:55,571 - 
2025-02-05 23:37:55,682 - 
2025-02-05 23:37:55,682 - 执行前idx: 8, pending_stmts: {7: (2, "UPDATE table_0 SET col_0 = 'QTqOx', col_1 = 1.87 WHERE (col_1 = 3.14) AND (col_0 = 'warmi')", <Thread(Thread-287, started 34992)>, 1738769875.6827624)}
2025-02-05 23:37:55,793 - stmt_idx: 7, status: success, result: None
2025-02-05 23:37:55,793 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'QTqOx', col_1 = 1.87 WHERE (col_1 = 3.14) AND (col_0 = 'warmi')
2025-02-05 23:37:55,793 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:37:55,793 - 
2025-02-05 23:37:55,902 - 
2025-02-05 23:37:55,903 - 执行前idx: 9, pending_stmts: {8: (2, "UPDATE table_0 SET col_0 = 'NcJWd' WHERE (id = 12)", <Thread(Thread-288, started 31440)>, 1738769875.9024086)}
2025-02-05 23:37:56,009 - stmt_idx: 8, status: success, result: None
2025-02-05 23:37:56,009 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'NcJWd' WHERE (id = 12)
2025-02-05 23:37:56,009 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:37:56,009 - 
2025-02-05 23:37:56,119 - 
2025-02-05 23:37:56,120 - 执行前idx: 10, pending_stmts: {9: (2, "UPDATE table_0 SET col_0 = 'aupgL', col_1 = 4.04 WHERE id BETWEEN 13 AND 13", <Thread(Thread-289, started 24436)>, 1738769876.1189606)}
2025-02-05 23:37:56,228 - stmt_idx: 9, status: success, result: None
2025-02-05 23:37:56,228 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'aupgL', col_1 = 4.04 WHERE id BETWEEN 13 AND 13
2025-02-05 23:37:56,228 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:37:56,228 - 
2025-02-05 23:37:56,337 - 
2025-02-05 23:37:56,337 - 执行前idx: 11, pending_stmts: {10: (2, "UPDATE table_0 SET col_0 = 'KRtbE', col_1 = 89.01 WHERE (col_0 = 'nigsp') AND (col_1 = 15.3)", <Thread(Thread-290, started 42844)>, 1738769876.337643)}
2025-02-05 23:37:56,446 - stmt_idx: 10, status: success, result: None
2025-02-05 23:37:56,446 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'KRtbE', col_1 = 89.01 WHERE (col_0 = 'nigsp') AND (col_1 = 15.3)
2025-02-05 23:37:56,446 - 执行后idx: 11, pending_stmts: {}
2025-02-05 23:37:56,446 - 
2025-02-05 23:37:56,555 - 
2025-02-05 23:37:56,555 - 执行前idx: 12, pending_stmts: {11: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-291, started 44468)>, 1738769876.55558)}
2025-02-05 23:37:56,659 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:37:56,659 - 执行后idx: 12, pending_stmts: {11: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-291, started 44468)>, 1738769876.55558)}
2025-02-05 23:37:56,660 - 
2025-02-05 23:37:56,769 - 
2025-02-05 23:37:56,770 - 执行前idx: 13, pending_stmts: {11: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-291, started 44468)>, 1738769876.55558), 12: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-292, started 35468)>, 1738769876.7692294)}
2025-02-05 23:37:56,773 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:37:56,875 - stmt_idx: 11, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:37:56,875 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:37:56,875 - 错误: dictionary changed size during iteration
2025-02-05 23:37:56,881 - 序列遍历完成，开始查看剩余阻塞的语句：{12: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-292, stopped 35468)>, 1738769876.7692294)}
2025-02-05 23:37:56,881 - 
2025-02-05 23:37:56,881 - 执行前idx: 15, pending_stmts: {12: (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-292, stopped 35468)>, 1738769876.7692294)}
2025-02-05 23:37:56,982 - stmt_idx: 12, status: success, result: None
2025-02-05 23:37:56,982 - 成功执行序列中事务2语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 23:37:56,982 - 执行后idx: 15, pending_stmts: {}
2025-02-05 23:37:56,982 - 
2025-02-05 23:37:57,084 - 执行序列成功
2025-02-05 23:37:57,835 - is_atomic: True
2025-02-05 23:37:57,836 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:37:57,836 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'Ajegy', 4.62)"), (1, "UPDATE table_0 SET col_1 = 87.04, col_0 = 'cYhsJ' WHERE id BETWEEN 3 AND 7"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kHFtj', 49.29)"), (2, "UPDATE table_0 SET col_0 = 'BlCyF' WHERE (col_1 = 84.5) AND (col_0 = 'ezkle')"), (2, "UPDATE table_0 SET col_0 = 'eKSZA' WHERE id BETWEEN 10 AND 10"), (2, "UPDATE table_0 SET col_0 = 'QTqOx', col_1 = 1.87 WHERE (col_1 = 3.14) AND (col_0 = 'warmi')"), (2, "UPDATE table_0 SET col_0 = 'NcJWd' WHERE (id = 12)"), (2, "UPDATE table_0 SET col_0 = 'aupgL', col_1 = 4.04 WHERE id BETWEEN 13 AND 13"), (2, "UPDATE table_0 SET col_0 = 'KRtbE', col_1 = 89.01 WHERE (col_0 = 'nigsp') AND (col_1 = 15.3)"), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE')]
2025-02-05 23:37:57,836 - snapshots: {'before': {'table_0': [(1, 'bowut', 11.44), (2, 'ijpbk', 53.78), (3, 'fsutk', 40.5), (4, 'gzwzz', 46.31), (5, 'ogsua', 61.3), (6, 'mmcbz', 45.02), (7, 'xrhte', 93.98), (8, 'ezkle', 84.5), (9, 'wqaud', 62.37), (10, 'iiomi', 59.76), (11, 'warmi', 3.14), (12, 'vnwtc', 88.03), (13, 'zuwbm', 56.88), (14, 'vbver', 1.25), (15, 'nigsp', 15.3)]}, 'trx1': {'table_0': [(1, 'bowut', 11.44), (2, 'ijpbk', 53.78), (3, 'cYhsJ', 87.04), (4, 'cYhsJ', 87.04), (5, 'cYhsJ', 87.04), (6, 'cYhsJ', 87.04), (7, 'cYhsJ', 87.04), (8, 'ezkle', 84.5), (9, 'wqaud', 62.37), (10, 'iiomi', 59.76), (11, 'warmi', 3.14), (12, 'vnwtc', 88.03), (13, 'zuwbm', 56.88), (14, 'vbver', 1.25), (15, 'nigsp', 15.3)]}, 'trx2': {'table_0': [(1, 'bowut', 11.44), (2, 'ijpbk', 53.78), (3, 'fsutk', 40.5), (4, 'gzwzz', 46.31), (5, 'ogsua', 61.3), (6, 'mmcbz', 45.02), (7, 'xrhte', 93.98), (8, 'BlCyF', 84.5), (9, 'wqaud', 62.37), (10, 'eKSZA', 59.76), (11, 'QTqOx', 1.87), (12, 'NcJWd', 88.03), (13, 'aupgL', 4.04), (14, 'vbver', 1.25), (15, 'KRtbE', 89.01), (16, 'Ajegy', 4.62), (17, 'kHFtj', 49.29)]}, 'serial': {'table_0': [(1, 'bowut', 11.44), (2, 'ijpbk', 53.78), (3, 'fsutk', 40.5), (4, 'gzwzz', 46.31), (5, 'ogsua', 61.3), (6, 'mmcbz', 45.02), (7, 'xrhte', 93.98), (8, 'BlCyF', 84.5), (9, 'wqaud', 62.37), (10, 'eKSZA', 59.76), (11, 'QTqOx', 1.87), (12, 'NcJWd', 88.03), (13, 'aupgL', 4.04), (14, 'vbver', 1.25), (15, 'KRtbE', 89.01), (18, 'Ajegy', 4.62), (19, 'kHFtj', 49.29)]}}
2025-02-05 23:37:57,836 - 
2025-02-05 23:37:57,846 - iter: 42
2025-02-05 23:37:59,349 - table table_0 has 12 rows
2025-02-05 23:37:59,349 - res_dict: {'trx1_lock_row_ids': [3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [1], 'intersection_row_ids': []}
2025-02-05 23:37:59,349 - lock_same_resource: False
2025-02-05 23:37:59,349 - 
2025-02-05 23:37:59,350 - non intersection phase1
2025-02-05 23:37:59,350 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:37:59,350 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:37:59,350 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:37:59,350 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 23:37:59,354 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=9
2025-02-05 23:37:59,355 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:37:59,355 - params: {'v1': '3', 'v2': '9', 'select_cols': 'id, col_0, col_218', 'table': 'table_0'}
2025-02-05 23:37:59,358 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:37:59,359 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:37:59,359 - params: {'cond': '(col_0 = 41)', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:37:59,359 - non intersection phase1 end
2025-02-05 23:37:59,359 - 
2025-02-05 23:37:59,360 - non intersection phase2
2025-02-05 23:37:59,363 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:37:59,365 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:37:59,365 - params: {'cond': '(col_0 = 41) AND (col_218 IS NULL)', 'select_cols': 'id, col_0, col_218', 'table': 'table_0'}
2025-02-05 23:37:59,368 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 23:37:59,369 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:37:59,369 - params: {'set_expr': 'col_218 = 62.72', 'v1': '9', 'v2': '9', 'table': 'table_0'}
2025-02-05 23:37:59,369 - non intersection phase2 end
2025-02-05 23:37:59,369 - 
2025-02-05 23:37:59,369 - 生成死锁事务序列成功如下
2025-02-05 23:37:59,369 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_218 FROM table_0 WHERE id BETWEEN 3 AND 9 FOR UPDATE'), (2, 'SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE'), (2, 'UPDATE table_0 SET col_218 = 62.72 WHERE id BETWEEN 9 AND 9'), (1, 'SELECT id, col_0, col_218 FROM table_0 WHERE (col_0 = 41) AND (col_218 IS NULL) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:38:00,881 - 创建事务1连接成功
2025-02-05 23:38:00,883 - 执行事务1语句: BEGIN
2025-02-05 23:38:00,884 - 执行事务1语句: SELECT id, col_0, col_218 FROM table_0 WHERE id BETWEEN 3 AND 9 FOR UPDATE
2025-02-05 23:38:00,885 - 执行事务1语句: SELECT id, col_0, col_218 FROM table_0 WHERE (col_0 = 41) AND (col_218 IS NULL) FOR UPDATE
2025-02-05 23:38:00,885 - 执行事务1语句: COMMIT;
2025-02-05 23:38:00,890 - 执行事务1成功
2025-02-05 23:38:03,469 - 恢复初始状态成功
2025-02-05 23:38:04,243 - 创建事务2连接成功
2025-02-05 23:38:04,244 - 执行事务2语句: BEGIN
2025-02-05 23:38:04,246 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE
2025-02-05 23:38:04,246 - 执行事务2语句: UPDATE table_0 SET col_218 = 62.72 WHERE id BETWEEN 9 AND 9
2025-02-05 23:38:04,248 - 执行事务2语句: COMMIT;
2025-02-05 23:38:04,252 - 执行事务2成功
2025-02-05 23:38:09,304 - 
2025-02-05 23:38:09,304 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_218 FROM table_0 WHERE id BETWEEN 3 AND 9 FOR UPDATE', <Thread(Thread-293, started 11932)>, 1738769889.3042657)}
2025-02-05 23:38:09,405 - stmt_idx: 2, status: success, result: None
2025-02-05 23:38:09,405 - 成功执行序列中事务1语句: SELECT id, col_0, col_218 FROM table_0 WHERE id BETWEEN 3 AND 9 FOR UPDATE
2025-02-05 23:38:09,405 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:38:09,405 - 
2025-02-05 23:38:09,513 - 
2025-02-05 23:38:09,514 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE', <Thread(Thread-294, started 16208)>, 1738769889.5128329)}
2025-02-05 23:38:09,615 - wait for lock, trx_id: 2, stmt: SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE
2025-02-05 23:38:09,615 - 执行后idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE', <Thread(Thread-294, started 16208)>, 1738769889.5128329)}
2025-02-05 23:38:09,615 - 
2025-02-05 23:38:09,720 - 
2025-02-05 23:38:09,720 - 执行前idx: 6, pending_stmts: {3: (2, 'SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE', <Thread(Thread-294, started 16208)>, 1738769889.5128329), 5: (1, 'SELECT id, col_0, col_218 FROM table_0 WHERE (col_0 = 41) AND (col_218 IS NULL) FOR UPDATE', <Thread(Thread-295, started 34820)>, 1738769889.720313)}
2025-02-05 23:38:09,722 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_218 FROM table_0 WHERE (col_0 = 41) AND (col_218 IS NULL) FOR UPDATE
2025-02-05 23:38:09,828 - stmt_idx: 3, status: success, result: None
2025-02-05 23:38:09,828 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE
2025-02-05 23:38:09,828 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE
2025-02-05 23:38:09,933 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:38:09,933 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_218 FROM table_0 WHERE (col_0 = 41) AND (col_218 IS NULL) FOR UPDATE
2025-02-05 23:38:09,933 - 错误: dictionary changed size during iteration
2025-02-05 23:38:09,939 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'UPDATE table_0 SET col_218 = 62.72 WHERE id BETWEEN 9 AND 9', <Thread(Thread-296, stopped 33356)>, 1738769889.8293195)}
2025-02-05 23:38:09,939 - 
2025-02-05 23:38:09,939 - 执行前idx: 8, pending_stmts: {4: (2, 'UPDATE table_0 SET col_218 = 62.72 WHERE id BETWEEN 9 AND 9', <Thread(Thread-296, stopped 33356)>, 1738769889.8293195)}
2025-02-05 23:38:10,042 - stmt_idx: 4, status: success, result: None
2025-02-05 23:38:10,042 - 成功执行序列中事务2语句: UPDATE table_0 SET col_218 = 62.72 WHERE id BETWEEN 9 AND 9
2025-02-05 23:38:10,042 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:38:10,042 - 
2025-02-05 23:38:10,144 - 执行序列成功
2025-02-05 23:38:10,911 - is_atomic: True
2025-02-05 23:38:10,911 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:38:10,911 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_218 FROM table_0 WHERE id BETWEEN 3 AND 9 FOR UPDATE'), (2, 'SELECT id, col_0 FROM table_0 WHERE (col_0 = 41) FOR UPDATE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'UPDATE table_0 SET col_218 = 62.72 WHERE id BETWEEN 9 AND 9')]
2025-02-05 23:38:10,911 - snapshots: {'before': {'table_0': [(1, 41, None), (2, 85, None), (3, 73, None), (4, 86, None), (5, 18, None), (6, 75, None), (7, 82, None), (8, 21, None), (9, 9, None), (10, 84, None), (11, 91, None), (12, 38, None)]}, 'trx1': {'table_0': [(1, 41, None), (2, 85, None), (3, 73, None), (4, 86, None), (5, 18, None), (6, 75, None), (7, 82, None), (8, 21, None), (9, 9, None), (10, 84, None), (11, 91, None), (12, 38, None)]}, 'trx2': {'table_0': [(1, 41, None), (2, 85, None), (3, 73, None), (4, 86, None), (5, 18, None), (6, 75, None), (7, 82, None), (8, 21, None), (9, 9, 62.72), (10, 84, None), (11, 91, None), (12, 38, None)]}, 'serial': {'table_0': [(1, 41, None), (2, 85, None), (3, 73, None), (4, 86, None), (5, 18, None), (6, 75, None), (7, 82, None), (8, 21, None), (9, 9, 62.72), (10, 84, None), (11, 91, None), (12, 38, None)]}}
2025-02-05 23:38:10,911 - 
2025-02-05 23:38:10,922 - iter: 43
2025-02-05 23:38:12,409 - table table_0 has 5 rows
2025-02-05 23:38:12,409 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 5], 'trx2_lock_row_ids': [4], 'intersection_row_ids': []}
2025-02-05 23:38:12,409 - lock_same_resource: False
2025-02-05 23:38:12,409 - 
2025-02-05 23:38:12,409 - non intersection phase1
2025-02-05 23:38:12,410 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:38:12,410 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:38:12,410 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:38:12,410 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:38:12,413 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:38:12,414 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:38:12,414 - params: {'set_expr': 'col_0 = 60, col_2 = 96', 'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:38:12,416 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:38:12,418 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:38:12,418 - params: {'set_expr': 'col_2 = 100, col_0 = 94', 'cond': '(id = 2) AND (col_0 = 98)', 'table': 'table_0'}
2025-02-05 23:38:12,421 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:38:12,422 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:38:12,422 - params: {'cond': '(col_1 = 90.04) AND (col_2 = 64)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:38:12,426 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:38:12,427 - needed_params: {'cond', 'table'}
2025-02-05 23:38:12,427 - params: {'cond': '(id = 5)', 'table': 'table_0'}
2025-02-05 23:38:12,429 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 23:38:12,430 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:38:12,430 - params: {'v1': '4', 'v2': '4', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:38:12,431 - non intersection phase1 end
2025-02-05 23:38:12,431 - 
2025-02-05 23:38:12,431 - non intersection phase2
2025-02-05 23:38:12,435 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 23:38:12,436 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:38:12,436 - params: {'set_expr': 'col_2 = 21', 'v1': '4', 'v2': '4', 'table': 'table_0'}
2025-02-05 23:38:12,439 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:38:12,440 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:38:12,440 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:38:12,440 - non intersection phase2 end
2025-02-05 23:38:12,440 - 
2025-02-05 23:38:12,440 - 生成死锁事务序列成功如下
2025-02-05 23:38:12,440 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 60, col_2 = 96 WHERE (id = 1)'), (1, 'UPDATE table_0 SET col_2 = 100, col_0 = 94 WHERE (id = 2) AND (col_0 = 98)'), (1, 'SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 5)'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_2 = 21 WHERE id BETWEEN 4 AND 4'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:38:13,973 - 创建事务1连接成功
2025-02-05 23:38:13,974 - 执行事务1语句: BEGIN
2025-02-05 23:38:13,975 - 执行事务1语句: UPDATE table_0 SET col_0 = 60, col_2 = 96 WHERE (id = 1)
2025-02-05 23:38:13,976 - 执行事务1语句: UPDATE table_0 SET col_2 = 100, col_0 = 94 WHERE (id = 2) AND (col_0 = 98)
2025-02-05 23:38:13,977 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE
2025-02-05 23:38:13,978 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 5)
2025-02-05 23:38:13,979 - 执行事务1语句: UPDATE table_0 SET col_2 = 21 WHERE id BETWEEN 4 AND 4
2025-02-05 23:38:13,981 - 执行事务1语句: COMMIT;
2025-02-05 23:38:13,985 - 执行事务1成功
2025-02-05 23:38:16,597 - 恢复初始状态成功
2025-02-05 23:38:17,360 - 创建事务2连接成功
2025-02-05 23:38:17,361 - 执行事务2语句: BEGIN
2025-02-05 23:38:17,362 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:38:17,363 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:38:17,363 - 执行事务2语句: COMMIT;
2025-02-05 23:38:17,368 - 执行事务2成功
2025-02-05 23:38:22,226 - 
2025-02-05 23:38:22,226 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-297, started 37316)>, 1738769902.2265399)}
2025-02-05 23:38:22,333 - stmt_idx: 2, status: success, result: None
2025-02-05 23:38:22,333 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:38:22,333 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:38:22,333 - 
2025-02-05 23:38:22,442 - 
2025-02-05 23:38:22,443 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_0 = 60, col_2 = 96 WHERE (id = 1)', <Thread(Thread-298, started 29140)>, 1738769902.442283)}
2025-02-05 23:38:22,546 - stmt_idx: 3, status: success, result: None
2025-02-05 23:38:22,546 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 60, col_2 = 96 WHERE (id = 1)
2025-02-05 23:38:22,546 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:38:22,546 - 
2025-02-05 23:38:22,653 - 
2025-02-05 23:38:22,654 - 执行前idx: 5, pending_stmts: {4: (1, 'UPDATE table_0 SET col_2 = 100, col_0 = 94 WHERE (id = 2) AND (col_0 = 98)', <Thread(Thread-299, started 35888)>, 1738769902.6536)}
2025-02-05 23:38:22,768 - stmt_idx: 4, status: success, result: None
2025-02-05 23:38:22,768 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 100, col_0 = 94 WHERE (id = 2) AND (col_0 = 98)
2025-02-05 23:38:22,768 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:38:22,768 - 
2025-02-05 23:38:22,874 - 
2025-02-05 23:38:22,874 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE', <Thread(Thread-300, started 39244)>, 1738769902.874007)}
2025-02-05 23:38:22,989 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE
2025-02-05 23:38:22,989 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE', <Thread(Thread-300, started 39244)>, 1738769902.874007)}
2025-02-05 23:38:22,989 - 
2025-02-05 23:38:23,093 - 
2025-02-05 23:38:23,094 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE', <Thread(Thread-300, started 39244)>, 1738769902.874007), 7: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-301, started 36696)>, 1738769903.0935068)}
2025-02-05 23:38:23,096 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:38:23,195 - stmt_idx: 5, status: success, result: None
2025-02-05 23:38:23,195 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE
2025-02-05 23:38:23,195 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE
2025-02-05 23:38:23,304 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:38:23,304 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:38:23,304 - 错误: dictionary changed size during iteration
2025-02-05 23:38:23,305 - 
2025-02-05 23:38:23,305 - 执行前idx: 9, pending_stmts: {6: (1, 'DELETE FROM table_0 WHERE (id = 5)', <Thread(Thread-302, stopped 29344)>, 1738769903.1962988), 8: (1, 'UPDATE table_0 SET col_2 = 21 WHERE id BETWEEN 4 AND 4', <Thread(Thread-303, started 39916)>, 1738769903.3053777)}
2025-02-05 23:38:23,408 - stmt_idx: 6, status: success, result: None
2025-02-05 23:38:23,408 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 5)
2025-02-05 23:38:23,515 - stmt_idx: 8, status: success, result: None
2025-02-05 23:38:23,515 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 21 WHERE id BETWEEN 4 AND 4
2025-02-05 23:38:23,515 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:38:23,515 - 
2025-02-05 23:38:23,633 - 执行序列成功
2025-02-05 23:38:24,410 - is_atomic: True
2025-02-05 23:38:24,410 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:38:24,411 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 60, col_2 = 96 WHERE (id = 1)'), (1, 'UPDATE table_0 SET col_2 = 100, col_0 = 94 WHERE (id = 2) AND (col_0 = 98)'), (1, 'SELECT * FROM table_0 WHERE (col_1 = 90.04) AND (col_2 = 64) FOR UPDATE'), (2, 'ROLLBACK'), (1, 'DELETE FROM table_0 WHERE (id = 5)'), (1, 'UPDATE table_0 SET col_2 = 21 WHERE id BETWEEN 4 AND 4'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 23:38:24,411 - snapshots: {'before': {'table_0': [(1, 17, 9.08, 29), (2, 98, 46.42, 28), (3, 15, 90.04, 64), (4, 45, 38.73, 97), (5, 22, 15.33, 73)]}, 'trx1': {'table_0': [(1, 60, 9.08, 96), (2, 94, 46.42, 100), (3, 15, 90.04, 64), (4, 45, 38.73, 21)]}, 'trx2': {'table_0': [(1, 17, 9.08, 29), (2, 98, 46.42, 28), (3, 15, 90.04, 64), (4, 45, 38.73, 97), (5, 22, 15.33, 73)]}, 'serial': {'table_0': [(1, 60, 9.08, 96), (2, 94, 46.42, 100), (3, 15, 90.04, 64), (4, 45, 38.73, 21)]}}
2025-02-05 23:38:24,411 - 
2025-02-05 23:38:24,422 - iter: 44
2025-02-05 23:38:25,940 - table table_0 has 15 rows
2025-02-05 23:38:25,940 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'trx2_lock_row_ids': [15], 'intersection_row_ids': []}
2025-02-05 23:38:25,940 - lock_same_resource: False
2025-02-05 23:38:25,940 - 
2025-02-05 23:38:25,941 - non intersection phase1
2025-02-05 23:38:25,941 - 事务1在第一阶段自己加的锁: II
2025-02-05 23:38:25,941 - 事务2在第一阶段自己加的锁: II
2025-02-05 23:38:25,941 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:38:25,941 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:38:25,945 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=14
2025-02-05 23:38:25,946 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:38:25,946 - params: {'set_expr': "col_2 = 85, col_1 = 'MjzEB', col_3 = 'rTXyn'", 'v1': '1', 'v2': '14', 'table': 'table_0'}
2025-02-05 23:38:25,951 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 23:38:25,952 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:38:25,952 - params: {'set_expr': "col_2 = 70, col_0 = 'HTYwK', col_1 = 'DWdks'", 'cond': '(id = 15)', 'table': 'table_0'}
2025-02-05 23:38:25,953 - non intersection phase1 end
2025-02-05 23:38:25,953 - 
2025-02-05 23:38:25,953 - non intersection phase2
2025-02-05 23:38:25,956 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 23:38:25,957 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:38:25,957 - params: {'cond': '(id = 15)', 'select_cols': 'id, col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:38:25,961 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=13
2025-02-05 23:38:25,963 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:38:25,963 - params: {'v1': '6', 'v2': '13', 'select_cols': 'id, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:38:25,963 - non intersection phase2 end
2025-02-05 23:38:25,963 - 
2025-02-05 23:38:25,963 - 生成死锁事务序列成功如下
2025-02-05 23:38:25,963 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_2 = 85, col_1 = 'MjzEB', col_3 = 'rTXyn' WHERE id BETWEEN 1 AND 14"), (2, "UPDATE table_0 SET col_2 = 70, col_0 = 'HTYwK', col_1 = 'DWdks' WHERE (id = 15)"), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 13 FOR UPDATE'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 15) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:38:27,486 - 创建事务1连接成功
2025-02-05 23:38:27,488 - 执行事务1语句: BEGIN
2025-02-05 23:38:27,489 - 执行事务1语句: UPDATE table_0 SET col_2 = 85, col_1 = 'MjzEB', col_3 = 'rTXyn' WHERE id BETWEEN 1 AND 14
2025-02-05 23:38:27,490 - 执行事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 15) FOR UPDATE
2025-02-05 23:38:27,492 - 执行事务1语句: COMMIT;
2025-02-05 23:38:27,497 - 执行事务1成功
2025-02-05 23:38:30,118 - 恢复初始状态成功
2025-02-05 23:38:30,880 - 创建事务2连接成功
2025-02-05 23:38:30,881 - 执行事务2语句: BEGIN
2025-02-05 23:38:30,882 - 执行事务2语句: UPDATE table_0 SET col_2 = 70, col_0 = 'HTYwK', col_1 = 'DWdks' WHERE (id = 15)
2025-02-05 23:38:30,883 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 13 FOR UPDATE
2025-02-05 23:38:30,885 - 执行事务2语句: COMMIT;
2025-02-05 23:38:30,890 - 执行事务2成功
2025-02-05 23:38:35,817 - 
2025-02-05 23:38:35,817 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_2 = 85, col_1 = 'MjzEB', col_3 = 'rTXyn' WHERE id BETWEEN 1 AND 14", <Thread(Thread-304, started 31728)>, 1738769915.817702)}
2025-02-05 23:38:35,931 - stmt_idx: 2, status: success, result: None
2025-02-05 23:38:35,931 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 85, col_1 = 'MjzEB', col_3 = 'rTXyn' WHERE id BETWEEN 1 AND 14
2025-02-05 23:38:35,931 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:38:35,931 - 
2025-02-05 23:38:36,035 - 
2025-02-05 23:38:36,036 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 70, col_0 = 'HTYwK', col_1 = 'DWdks' WHERE (id = 15)", <Thread(Thread-305, started 2204)>, 1738769916.0358858)}
2025-02-05 23:38:36,138 - stmt_idx: 3, status: success, result: None
2025-02-05 23:38:36,138 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 70, col_0 = 'HTYwK', col_1 = 'DWdks' WHERE (id = 15)
2025-02-05 23:38:36,138 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:38:36,138 - 
2025-02-05 23:38:36,242 - 
2025-02-05 23:38:36,242 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 13 FOR UPDATE', <Thread(Thread-306, started 20948)>, 1738769916.2420545)}
2025-02-05 23:38:36,348 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 13 FOR UPDATE
2025-02-05 23:38:36,348 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 13 FOR UPDATE', <Thread(Thread-306, started 20948)>, 1738769916.2420545)}
2025-02-05 23:38:36,348 - 
2025-02-05 23:38:36,452 - 
2025-02-05 23:38:36,453 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 13 FOR UPDATE', <Thread(Thread-306, started 20948)>, 1738769916.2420545), 5: (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 15) FOR UPDATE', <Thread(Thread-307, started 5052)>, 1738769916.452532)}
2025-02-05 23:38:36,456 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 13 FOR UPDATE
2025-02-05 23:38:36,561 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:38:36,561 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 13 FOR UPDATE
2025-02-05 23:38:36,561 - 错误: dictionary changed size during iteration
2025-02-05 23:38:36,565 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 15) FOR UPDATE', <Thread(Thread-307, stopped 5052)>, 1738769916.452532)}
2025-02-05 23:38:36,565 - 
2025-02-05 23:38:36,565 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 15) FOR UPDATE', <Thread(Thread-307, stopped 5052)>, 1738769916.452532)}
2025-02-05 23:38:36,679 - stmt_idx: 5, status: success, result: None
2025-02-05 23:38:36,679 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 15) FOR UPDATE
2025-02-05 23:38:36,679 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:38:36,679 - 
2025-02-05 23:38:36,787 - 执行序列成功
2025-02-05 23:38:37,576 - is_atomic: True
2025-02-05 23:38:37,576 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:38:37,576 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_2 = 85, col_1 = 'MjzEB', col_3 = 'rTXyn' WHERE id BETWEEN 1 AND 14"), (2, "UPDATE table_0 SET col_2 = 70, col_0 = 'HTYwK', col_1 = 'DWdks' WHERE (id = 15)"), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 15) FOR UPDATE')]
2025-02-05 23:38:37,576 - snapshots: {'before': {'table_0': [(1, 'uqwoe', 'eqkgp', 23, 'kfvru'), (2, 'cifax', 'tfyyp', 31, 'rbomk'), (3, 'jquqx', 'guvdt', 61, 'dxkns'), (4, 'hofhs', 'hmauc', 3, 'grlfn'), (5, 'dmosl', 'vofco', 28, 'htiyl'), (6, 'wlsoi', 'bkdrr', 54, 'mwjuy'), (7, 'yvxvp', 'kltrn', 30, 'uwxtu'), (8, 'vbvmu', 'pihpk', 34, 'zvoez'), (9, 'bfkzm', 'szvgw', 11, 'uzwge'), (10, 'aysnm', 'cjnsx', 56, 'drkbi'), (11, 'lqonl', 'mjmsk', 37, 'jcjcq'), (12, 'xkwza', 'vtnpb', 10, 'cbwrf'), (13, 'xtpuz', 'ituuh', 63, 'lvfhv'), (14, 'sbnce', 'wtlgv', 16, 'ebtht'), (15, 'eaowc', 'elavl', 57, 'hkbhw')]}, 'trx1': {'table_0': [(1, 'uqwoe', 'MjzEB', 85, 'rTXyn'), (2, 'cifax', 'MjzEB', 85, 'rTXyn'), (3, 'jquqx', 'MjzEB', 85, 'rTXyn'), (4, 'hofhs', 'MjzEB', 85, 'rTXyn'), (5, 'dmosl', 'MjzEB', 85, 'rTXyn'), (6, 'wlsoi', 'MjzEB', 85, 'rTXyn'), (7, 'yvxvp', 'MjzEB', 85, 'rTXyn'), (8, 'vbvmu', 'MjzEB', 85, 'rTXyn'), (9, 'bfkzm', 'MjzEB', 85, 'rTXyn'), (10, 'aysnm', 'MjzEB', 85, 'rTXyn'), (11, 'lqonl', 'MjzEB', 85, 'rTXyn'), (12, 'xkwza', 'MjzEB', 85, 'rTXyn'), (13, 'xtpuz', 'MjzEB', 85, 'rTXyn'), (14, 'sbnce', 'MjzEB', 85, 'rTXyn'), (15, 'eaowc', 'elavl', 57, 'hkbhw')]}, 'trx2': {'table_0': [(1, 'uqwoe', 'eqkgp', 23, 'kfvru'), (2, 'cifax', 'tfyyp', 31, 'rbomk'), (3, 'jquqx', 'guvdt', 61, 'dxkns'), (4, 'hofhs', 'hmauc', 3, 'grlfn'), (5, 'dmosl', 'vofco', 28, 'htiyl'), (6, 'wlsoi', 'bkdrr', 54, 'mwjuy'), (7, 'yvxvp', 'kltrn', 30, 'uwxtu'), (8, 'vbvmu', 'pihpk', 34, 'zvoez'), (9, 'bfkzm', 'szvgw', 11, 'uzwge'), (10, 'aysnm', 'cjnsx', 56, 'drkbi'), (11, 'lqonl', 'mjmsk', 37, 'jcjcq'), (12, 'xkwza', 'vtnpb', 10, 'cbwrf'), (13, 'xtpuz', 'ituuh', 63, 'lvfhv'), (14, 'sbnce', 'wtlgv', 16, 'ebtht'), (15, 'HTYwK', 'DWdks', 70, 'hkbhw')]}, 'serial': {'table_0': [(1, 'uqwoe', 'MjzEB', 85, 'rTXyn'), (2, 'cifax', 'MjzEB', 85, 'rTXyn'), (3, 'jquqx', 'MjzEB', 85, 'rTXyn'), (4, 'hofhs', 'MjzEB', 85, 'rTXyn'), (5, 'dmosl', 'MjzEB', 85, 'rTXyn'), (6, 'wlsoi', 'MjzEB', 85, 'rTXyn'), (7, 'yvxvp', 'MjzEB', 85, 'rTXyn'), (8, 'vbvmu', 'MjzEB', 85, 'rTXyn'), (9, 'bfkzm', 'MjzEB', 85, 'rTXyn'), (10, 'aysnm', 'MjzEB', 85, 'rTXyn'), (11, 'lqonl', 'MjzEB', 85, 'rTXyn'), (12, 'xkwza', 'MjzEB', 85, 'rTXyn'), (13, 'xtpuz', 'MjzEB', 85, 'rTXyn'), (14, 'sbnce', 'MjzEB', 85, 'rTXyn'), (15, 'eaowc', 'elavl', 57, 'hkbhw')]}}
2025-02-05 23:38:37,576 - 
2025-02-05 23:38:37,588 - iter: 45
2025-02-05 23:38:39,102 - table table_0 has 15 rows
2025-02-05 23:38:39,102 - res_dict: {'trx1_lock_row_ids': [4, 5, 6], 'trx2_lock_row_ids': [12, 13, 14, 15], 'intersection_row_ids': []}
2025-02-05 23:38:39,102 - lock_same_resource: False
2025-02-05 23:38:39,102 - 
2025-02-05 23:38:39,102 - non intersection phase1
2025-02-05 23:38:39,103 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:38:39,103 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:38:39,103 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:38:39,103 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:38:39,106 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=6
2025-02-05 23:38:39,107 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:38:39,107 - params: {'v1': '4', 'v2': '6', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:38:39,110 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=12, is_continuous=True, range_end_idx=15
2025-02-05 23:38:39,111 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:38:39,111 - params: {'v1': '12', 'v2': '15', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:38:39,112 - non intersection phase1 end
2025-02-05 23:38:39,112 - 
2025-02-05 23:38:39,112 - non intersection phase2
2025-02-05 23:38:39,116 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=12, is_continuous=True, range_end_idx=13
2025-02-05 23:38:39,117 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:38:39,117 - params: {'v1': '12', 'v2': '13', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:38:39,120 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-05 23:38:39,121 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:38:39,121 - params: {'v1': '5', 'v2': '6', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:38:39,121 - non intersection phase2 end
2025-02-05 23:38:39,121 - 
2025-02-05 23:38:39,121 - 生成死锁事务序列成功如下
2025-02-05 23:38:39,121 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 15 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:38:40,661 - 创建事务1连接成功
2025-02-05 23:38:40,662 - 执行事务1语句: BEGIN
2025-02-05 23:38:40,663 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 23:38:40,664 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE
2025-02-05 23:38:40,665 - 执行事务1语句: COMMIT;
2025-02-05 23:38:40,669 - 执行事务1成功
2025-02-05 23:38:43,256 - 恢复初始状态成功
2025-02-05 23:38:44,011 - 创建事务2连接成功
2025-02-05 23:38:44,013 - 执行事务2语句: BEGIN
2025-02-05 23:38:44,014 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 12 AND 15 FOR UPDATE
2025-02-05 23:38:44,015 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE
2025-02-05 23:38:44,016 - 执行事务2语句: COMMIT;
2025-02-05 23:38:44,020 - 执行事务2成功
2025-02-05 23:38:48,913 - 
2025-02-05 23:38:48,913 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 15 FOR UPDATE', <Thread(Thread-308, started 40360)>, 1738769928.9134965)}
2025-02-05 23:38:49,016 - stmt_idx: 2, status: success, result: None
2025-02-05 23:38:49,016 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 12 AND 15 FOR UPDATE
2025-02-05 23:38:49,016 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:38:49,016 - 
2025-02-05 23:38:49,123 - 
2025-02-05 23:38:49,124 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE', <Thread(Thread-309, started 16220)>, 1738769929.1237128)}
2025-02-05 23:38:49,230 - stmt_idx: 3, status: success, result: None
2025-02-05 23:38:49,230 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE
2025-02-05 23:38:49,230 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:38:49,230 - 
2025-02-05 23:38:49,333 - 
2025-02-05 23:38:49,333 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE', <Thread(Thread-310, started 31512)>, 1738769929.333466)}
2025-02-05 23:38:49,437 - wait for lock, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE
2025-02-05 23:38:49,437 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE', <Thread(Thread-310, started 31512)>, 1738769929.333466)}
2025-02-05 23:38:49,437 - 
2025-02-05 23:38:49,543 - 
2025-02-05 23:38:49,543 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE', <Thread(Thread-310, started 31512)>, 1738769929.333466), 5: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE', <Thread(Thread-311, started 34064)>, 1738769929.5433621)}
2025-02-05 23:38:49,546 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE
2025-02-05 23:38:49,644 - stmt_idx: 4, status: success, result: None
2025-02-05 23:38:49,644 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE
2025-02-05 23:38:49,644 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE
2025-02-05 23:38:49,749 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:38:49,749 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 6 LOCK IN SHARE MODE
2025-02-05 23:38:49,750 - 错误: dictionary changed size during iteration
2025-02-05 23:38:49,753 - 执行序列成功
2025-02-05 23:38:50,524 - is_atomic: True
2025-02-05 23:38:50,525 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:38:50,525 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 15 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 6 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 13 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 23:38:50,525 - snapshots: {'before': {'table_0': [(1, 28, 69), (2, 91, 72), (3, 89, 63), (4, 89, 70), (5, 63, 33), (6, 41, 81), (7, 37, 76), (8, 99, 29), (9, 23, 7), (10, 23, 49), (11, 1, 63), (12, 24, 87), (13, 94, 44), (14, 45, 57), (15, 28, 95)]}, 'trx1': {'table_0': [(1, 28, 69), (2, 91, 72), (3, 89, 63), (4, 89, 70), (5, 63, 33), (6, 41, 81), (7, 37, 76), (8, 99, 29), (9, 23, 7), (10, 23, 49), (11, 1, 63), (12, 24, 87), (13, 94, 44), (14, 45, 57), (15, 28, 95)]}, 'trx2': {'table_0': [(1, 28, 69), (2, 91, 72), (3, 89, 63), (4, 89, 70), (5, 63, 33), (6, 41, 81), (7, 37, 76), (8, 99, 29), (9, 23, 7), (10, 23, 49), (11, 1, 63), (12, 24, 87), (13, 94, 44), (14, 45, 57), (15, 28, 95)]}, 'serial': {'table_0': [(1, 28, 69), (2, 91, 72), (3, 89, 63), (4, 89, 70), (5, 63, 33), (6, 41, 81), (7, 37, 76), (8, 99, 29), (9, 23, 7), (10, 23, 49), (11, 1, 63), (12, 24, 87), (13, 94, 44), (14, 45, 57), (15, 28, 95)]}}
2025-02-05 23:38:50,525 - 
2025-02-05 23:38:50,536 - iter: 46
2025-02-05 23:38:52,007 - table table_0 has 12 rows
2025-02-05 23:38:52,007 - res_dict: {'trx1_lock_row_ids': [12], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'intersection_row_ids': []}
2025-02-05 23:38:52,007 - lock_same_resource: False
2025-02-05 23:38:52,007 - 
2025-02-05 23:38:52,007 - non intersection phase1
2025-02-05 23:38:52,007 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:38:52,008 - 事务2在第一阶段自己加的锁: II
2025-02-05 23:38:52,008 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:38:52,008 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:38:52,010 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:38:52,011 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:38:52,012 - params: {'set_expr': 'col_0 = 97', 'cond': "(col_0 = 26) AND (col_2 = 'mlkhg') AND (col_1 = 90.17)", 'table': 'table_0'}
2025-02-05 23:38:52,015 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=10
2025-02-05 23:38:52,017 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:38:52,017 - params: {'set_expr': "col_2 = 'FIHrX'", 'v1': '1', 'v2': '10', 'table': 'table_0'}
2025-02-05 23:38:52,018 - non intersection phase1 end
2025-02-05 23:38:52,018 - 
2025-02-05 23:38:52,018 - non intersection phase2
2025-02-05 23:38:52,021 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 23:38:52,022 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:38:52,022 - params: {'set_expr': 'col_1 = 18.38', 'v1': '10', 'v2': '10', 'table': 'table_0'}
2025-02-05 23:38:52,026 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:38:52,027 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:38:52,027 - params: {'set_expr': 'col_1 = 77.05', 'cond': "(id = 12) AND (col_2 = 'mlkhg')", 'table': 'table_0'}
2025-02-05 23:38:52,027 - non intersection phase2 end
2025-02-05 23:38:52,027 - 
2025-02-05 23:38:52,028 - 生成死锁事务序列成功如下
2025-02-05 23:38:52,028 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 97 WHERE (col_0 = 26) AND (col_2 = 'mlkhg') AND (col_1 = 90.17)"), (2, "UPDATE table_0 SET col_2 = 'FIHrX' WHERE id BETWEEN 1 AND 10"), (1, 'UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10'), (2, "UPDATE table_0 SET col_1 = 77.05 WHERE (id = 12) AND (col_2 = 'mlkhg')"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:38:53,573 - 创建事务1连接成功
2025-02-05 23:38:53,575 - 执行事务1语句: BEGIN
2025-02-05 23:38:53,576 - 执行事务1语句: UPDATE table_0 SET col_0 = 97 WHERE (col_0 = 26) AND (col_2 = 'mlkhg') AND (col_1 = 90.17)
2025-02-05 23:38:53,576 - 执行事务1语句: UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10
2025-02-05 23:38:53,579 - 执行事务1语句: COMMIT;
2025-02-05 23:38:53,583 - 执行事务1成功
2025-02-05 23:38:56,173 - 恢复初始状态成功
2025-02-05 23:38:56,949 - 创建事务2连接成功
2025-02-05 23:38:56,950 - 执行事务2语句: BEGIN
2025-02-05 23:38:56,951 - 执行事务2语句: UPDATE table_0 SET col_2 = 'FIHrX' WHERE id BETWEEN 1 AND 10
2025-02-05 23:38:56,952 - 执行事务2语句: UPDATE table_0 SET col_1 = 77.05 WHERE (id = 12) AND (col_2 = 'mlkhg')
2025-02-05 23:38:56,954 - 执行事务2语句: COMMIT;
2025-02-05 23:38:56,959 - 执行事务2成功
2025-02-05 23:39:01,875 - 
2025-02-05 23:39:01,876 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_0 = 97 WHERE (col_0 = 26) AND (col_2 = 'mlkhg') AND (col_1 = 90.17)", <Thread(Thread-312, started 36884)>, 1738769941.875903)}
2025-02-05 23:39:01,984 - stmt_idx: 2, status: success, result: None
2025-02-05 23:39:01,984 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 97 WHERE (col_0 = 26) AND (col_2 = 'mlkhg') AND (col_1 = 90.17)
2025-02-05 23:39:01,984 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:39:01,984 - 
2025-02-05 23:39:02,091 - 
2025-02-05 23:39:02,092 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'FIHrX' WHERE id BETWEEN 1 AND 10", <Thread(Thread-313, started 42520)>, 1738769942.091523)}
2025-02-05 23:39:02,200 - stmt_idx: 3, status: success, result: None
2025-02-05 23:39:02,200 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'FIHrX' WHERE id BETWEEN 1 AND 10
2025-02-05 23:39:02,200 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:39:02,200 - 
2025-02-05 23:39:02,305 - 
2025-02-05 23:39:02,305 - 执行前idx: 5, pending_stmts: {4: (1, 'UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10', <Thread(Thread-314, started 28288)>, 1738769942.305233)}
2025-02-05 23:39:02,413 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10
2025-02-05 23:39:02,414 - 执行后idx: 5, pending_stmts: {4: (1, 'UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10', <Thread(Thread-314, started 28288)>, 1738769942.305233)}
2025-02-05 23:39:02,414 - 
2025-02-05 23:39:02,519 - 
2025-02-05 23:39:02,520 - 执行前idx: 6, pending_stmts: {4: (1, 'UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10', <Thread(Thread-314, started 28288)>, 1738769942.305233), 5: (2, "UPDATE table_0 SET col_1 = 77.05 WHERE (id = 12) AND (col_2 = 'mlkhg')", <Thread(Thread-315, started 33932)>, 1738769942.5196698)}
2025-02-05 23:39:02,623 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10
2025-02-05 23:39:02,729 - stmt_idx: 5, status: success, result: None
2025-02-05 23:39:02,730 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 77.05 WHERE (id = 12) AND (col_2 = 'mlkhg')
2025-02-05 23:39:02,730 - 执行后idx: 6, pending_stmts: {4: (1, 'UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10', <Thread(Thread-314, started 28288)>, 1738769942.305233)}
2025-02-05 23:39:02,730 - 
2025-02-05 23:39:02,839 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10', <Thread(Thread-314, started 28288)>, 1738769942.305233)}
2025-02-05 23:39:02,839 - 
2025-02-05 23:39:02,839 - 执行前idx: 8, pending_stmts: {4: (1, 'UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10', <Thread(Thread-314, stopped 28288)>, 1738769942.305233)}
2025-02-05 23:39:02,956 - stmt_idx: 4, status: success, result: None
2025-02-05 23:39:02,956 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10
2025-02-05 23:39:02,956 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10
2025-02-05 23:39:02,957 - 执行后idx: 8, pending_stmts: {7: (1, 'COMMIT', <Thread(Thread-316, started 1912)>, 1738769942.9571693)}
2025-02-05 23:39:02,957 - 
2025-02-05 23:39:03,058 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'COMMIT', <Thread(Thread-316, stopped 1912)>, 1738769942.9571693)}
2025-02-05 23:39:03,058 - 
2025-02-05 23:39:03,058 - 执行前idx: 8, pending_stmts: {7: (1, 'COMMIT', <Thread(Thread-316, stopped 1912)>, 1738769942.9571693)}
2025-02-05 23:39:03,165 - stmt_idx: 7, status: success, result: None
2025-02-05 23:39:03,165 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:39:03,165 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:39:03,165 - 
2025-02-05 23:39:03,271 - 执行序列成功
2025-02-05 23:39:04,021 - is_atomic: True
2025-02-05 23:39:04,021 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:39:04,021 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 97 WHERE (col_0 = 26) AND (col_2 = 'mlkhg') AND (col_1 = 90.17)"), (2, "UPDATE table_0 SET col_2 = 'FIHrX' WHERE id BETWEEN 1 AND 10"), (2, "UPDATE table_0 SET col_1 = 77.05 WHERE (id = 12) AND (col_2 = 'mlkhg')"), (2, 'COMMIT'), (1, 'UPDATE table_0 SET col_1 = 18.38 WHERE id BETWEEN 10 AND 10'), (1, 'COMMIT')]
2025-02-05 23:39:04,021 - snapshots: {'before': {'table_0': [(1, 94, 30.5, 'rthde'), (2, 76, 46.19, 'hktwn'), (3, 29, 10.16, 'irpav'), (4, 59, 11.81, 'dfdhi'), (5, 85, 7.77, 'xnsje'), (6, 71, 23.06, 'ozbqx'), (7, 97, 78.64, 'crlik'), (8, 93, 23.8, 'opseu'), (9, 75, 20.63, 'kdepn'), (10, 65, 65.46, 'ixank'), (11, 97, 46.78, 'wosvr'), (12, 26, 90.17, 'mlkhg')]}, 'trx1': {'table_0': [(1, 94, 30.5, 'rthde'), (2, 76, 46.19, 'hktwn'), (3, 29, 10.16, 'irpav'), (4, 59, 11.81, 'dfdhi'), (5, 85, 7.77, 'xnsje'), (6, 71, 23.06, 'ozbqx'), (7, 97, 78.64, 'crlik'), (8, 93, 23.8, 'opseu'), (9, 75, 20.63, 'kdepn'), (10, 65, 18.38, 'ixank'), (11, 97, 46.78, 'wosvr'), (12, 26, 90.17, 'mlkhg')]}, 'trx2': {'table_0': [(1, 94, 30.5, 'FIHrX'), (2, 76, 46.19, 'FIHrX'), (3, 29, 10.16, 'FIHrX'), (4, 59, 11.81, 'FIHrX'), (5, 85, 7.77, 'FIHrX'), (6, 71, 23.06, 'FIHrX'), (7, 97, 78.64, 'FIHrX'), (8, 93, 23.8, 'FIHrX'), (9, 75, 20.63, 'FIHrX'), (10, 65, 65.46, 'FIHrX'), (11, 97, 46.78, 'wosvr'), (12, 26, 77.05, 'mlkhg')]}, 'serial': {'table_0': [(1, 94, 30.5, 'FIHrX'), (2, 76, 46.19, 'FIHrX'), (3, 29, 10.16, 'FIHrX'), (4, 59, 11.81, 'FIHrX'), (5, 85, 7.77, 'FIHrX'), (6, 71, 23.06, 'FIHrX'), (7, 97, 78.64, 'FIHrX'), (8, 93, 23.8, 'FIHrX'), (9, 75, 20.63, 'FIHrX'), (10, 65, 18.38, 'FIHrX'), (11, 97, 46.78, 'wosvr'), (12, 26, 77.05, 'mlkhg')]}}
2025-02-05 23:39:04,021 - 
2025-02-05 23:39:04,033 - iter: 47
2025-02-05 23:39:05,514 - table table_0 has 15 rows
2025-02-05 23:39:05,515 - trx1_lock_row_ids: [2, 3, 4, 5, 7, 8, 10]
2025-02-05 23:39:05,515 - trx2_lock_row_ids: [2, 3, 4, 5, 6]
2025-02-05 23:39:05,515 - intersection_row_ids: [2, 3, 4, 5]
2025-02-05 23:39:05,515 - trx1_exclusive_ids: [7, 8, 10]
2025-02-05 23:39:05,515 - trx2_exclusive_ids: [6]
2025-02-05 23:39:05,515 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 7, 8, 10], 'trx2_lock_row_ids': [2, 3, 4, 5, 6], 'intersection_row_ids': [2, 3, 4, 5]}
2025-02-05 23:39:05,515 - lock_same_resource: True
2025-02-05 23:39:05,515 - 
2025-02-05 23:39:05,515 - intersection phase1
2025-02-05 23:39:05,518 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 23:39:05,519 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:05,519 - params: {'v1': '2', 'v2': '6', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:39:05,522 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,524 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:39:05,524 - params: {'vals': "NULL, 'zKimr', 13.58, 19.53", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:39:05,527 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,528 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:39:05,529 - params: {'vals': "NULL, 'GZxqc', 21.29, 27.35", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:39:05,531 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,532 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:39:05,532 - params: {'vals': "NULL, 'ZUbeL', 22.12, 68.62", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:39:05,535 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,537 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:39:05,537 - params: {'vals': "NULL, 'MkCPm', 52.45, 81.31", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:39:05,537 - intersection phase1 end
2025-02-05 23:39:05,537 - 
2025-02-05 23:39:05,537 - intersection phase2
2025-02-05 23:39:05,537 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:39:05,537 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:39:05,537 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:39:05,538 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 23:39:05,541 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,542 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:05,542 - params: {'v1': '7', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:39:05,545 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,546 - needed_params: {'cond', 'table'}
2025-02-05 23:39:05,546 - params: {'cond': "(col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')", 'table': 'table_0'}
2025-02-05 23:39:05,549 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,550 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:39:05,550 - params: {'set_expr': 'col_1 = 3.11, col_2 = 29.46', 'cond': '(id = 10)', 'table': 'table_0'}
2025-02-05 23:39:05,553 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,554 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:05,554 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:39:05,555 - intersection phase2 end
2025-02-05 23:39:05,555 - 
2025-02-05 23:39:05,555 - intersection phase3
2025-02-05 23:39:05,558 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:39:05,560 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:39:05,560 - params: {'set_expr': "col_1 = 95.46, col_0 = 'MaxBy', col_2 = 73.82", 'cond': "(id = 6) AND (col_0 = 'ymiht') AND (col_2 = 2.59) AND (col_1 = 52.02)", 'table': 'table_0'}
2025-02-05 23:39:05,560 - intersection phase3 end
2025-02-05 23:39:05,561 - 
2025-02-05 23:39:05,561 - 生成死锁事务序列成功如下
2025-02-05 23:39:05,561 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'zKimr', 13.58, 19.53)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'GZxqc', 21.29, 27.35)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ZUbeL', 22.12, 68.62)"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'MkCPm', 52.45, 81.31)"), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')"), (1, 'UPDATE table_0 SET col_1 = 3.11, col_2 = 29.46 WHERE (id = 10)'), (1, "UPDATE table_0 SET col_1 = 95.46, col_0 = 'MaxBy', col_2 = 73.82 WHERE (id = 6) AND (col_0 = 'ymiht') AND (col_2 = 2.59) AND (col_1 = 52.02)"), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:39:07,098 - 创建事务1连接成功
2025-02-05 23:39:07,100 - 执行事务1语句: BEGIN
2025-02-05 23:39:07,101 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'zKimr', 13.58, 19.53)
2025-02-05 23:39:07,102 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'GZxqc', 21.29, 27.35)
2025-02-05 23:39:07,102 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ZUbeL', 22.12, 68.62)
2025-02-05 23:39:07,103 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'MkCPm', 52.45, 81.31)
2025-02-05 23:39:07,103 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:39:07,104 - 执行事务1语句: DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')
2025-02-05 23:39:07,105 - 执行事务1语句: UPDATE table_0 SET col_1 = 3.11, col_2 = 29.46 WHERE (id = 10)
2025-02-05 23:39:07,105 - 执行事务1语句: UPDATE table_0 SET col_1 = 95.46, col_0 = 'MaxBy', col_2 = 73.82 WHERE (id = 6) AND (col_0 = 'ymiht') AND (col_2 = 2.59) AND (col_1 = 52.02)
2025-02-05 23:39:07,108 - 执行事务1语句: COMMIT;
2025-02-05 23:39:07,112 - 执行事务1成功
2025-02-05 23:39:09,724 - 恢复初始状态成功
2025-02-05 23:39:10,501 - 创建事务2连接成功
2025-02-05 23:39:10,503 - 执行事务2语句: BEGIN
2025-02-05 23:39:10,504 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE
2025-02-05 23:39:10,505 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:39:10,506 - 执行事务2语句: COMMIT;
2025-02-05 23:39:10,511 - 执行事务2成功
2025-02-05 23:39:15,390 - 
2025-02-05 23:39:15,390 - 执行前idx: 3, pending_stmts: {2: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'zKimr', 13.58, 19.53)", <Thread(Thread-317, started 37380)>, 1738769955.3906498)}
2025-02-05 23:39:15,497 - stmt_idx: 2, status: success, result: None
2025-02-05 23:39:15,498 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'zKimr', 13.58, 19.53)
2025-02-05 23:39:15,498 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:39:15,498 - 
2025-02-05 23:39:15,606 - 
2025-02-05 23:39:15,607 - 执行前idx: 4, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'GZxqc', 21.29, 27.35)", <Thread(Thread-318, started 40972)>, 1738769955.6063473)}
2025-02-05 23:39:15,712 - stmt_idx: 3, status: success, result: None
2025-02-05 23:39:15,712 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'GZxqc', 21.29, 27.35)
2025-02-05 23:39:15,712 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:39:15,712 - 
2025-02-05 23:39:15,823 - 
2025-02-05 23:39:15,823 - 执行前idx: 5, pending_stmts: {4: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ZUbeL', 22.12, 68.62)", <Thread(Thread-319, started 38296)>, 1738769955.8232746)}
2025-02-05 23:39:15,930 - stmt_idx: 4, status: success, result: None
2025-02-05 23:39:15,930 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ZUbeL', 22.12, 68.62)
2025-02-05 23:39:15,930 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:39:15,930 - 
2025-02-05 23:39:16,039 - 
2025-02-05 23:39:16,040 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE', <Thread(Thread-320, started 39216)>, 1738769956.0393515)}
2025-02-05 23:39:16,145 - stmt_idx: 5, status: success, result: None
2025-02-05 23:39:16,145 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE
2025-02-05 23:39:16,145 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:39:16,145 - 
2025-02-05 23:39:16,254 - 
2025-02-05 23:39:16,256 - 执行前idx: 7, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'MkCPm', 52.45, 81.31)", <Thread(Thread-321, started 5708)>, 1738769956.2548826)}
2025-02-05 23:39:16,360 - stmt_idx: 6, status: success, result: None
2025-02-05 23:39:16,360 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'MkCPm', 52.45, 81.31)
2025-02-05 23:39:16,360 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:39:16,360 - 
2025-02-05 23:39:16,468 - 
2025-02-05 23:39:16,468 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-322, started 34924)>, 1738769956.468383)}
2025-02-05 23:39:16,569 - stmt_idx: 7, status: success, result: None
2025-02-05 23:39:16,569 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:39:16,569 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:39:16,569 - 
2025-02-05 23:39:16,679 - 
2025-02-05 23:39:16,680 - 执行前idx: 9, pending_stmts: {8: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-323, started 37928)>, 1738769956.6791527)}
2025-02-05 23:39:16,787 - stmt_idx: 8, status: success, result: None
2025-02-05 23:39:16,787 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:39:16,787 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:39:16,787 - 
2025-02-05 23:39:16,893 - 
2025-02-05 23:39:16,895 - 执行前idx: 10, pending_stmts: {9: (1, "DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')", <Thread(Thread-324, started 672)>, 1738769956.8939192)}
2025-02-05 23:39:16,999 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')
2025-02-05 23:39:17,000 - 执行后idx: 10, pending_stmts: {9: (1, "DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')", <Thread(Thread-324, started 672)>, 1738769956.8939192)}
2025-02-05 23:39:17,000 - 
2025-02-05 23:39:17,107 - stmt为None, trx_id: 2, stmt: None
2025-02-05 23:39:17,109 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (1, "DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')", <Thread(Thread-324, started 672)>, 1738769956.8939192)}
2025-02-05 23:39:17,110 - 
2025-02-05 23:39:17,110 - 执行前idx: 15, pending_stmts: {9: (1, "DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')", <Thread(Thread-324, stopped 672)>, 1738769956.8939192)}
2025-02-05 23:39:17,215 - stmt_idx: 9, status: success, result: None
2025-02-05 23:39:17,215 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')
2025-02-05 23:39:17,215 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')
2025-02-05 23:39:17,216 - 执行后idx: 15, pending_stmts: {10: (1, 'UPDATE table_0 SET col_1 = 3.11, col_2 = 29.46 WHERE (id = 10)', <Thread(Thread-325, started 38552)>, 1738769957.215224), 11: (1, "UPDATE table_0 SET col_1 = 95.46, col_0 = 'MaxBy', col_2 = 73.82 WHERE (id = 6) AND (col_0 = 'ymiht') AND (col_2 = 2.59) AND (col_1 = 52.02)", <Thread(Thread-326, started 15324)>, 1738769957.215224), 14: (1, 'COMMIT', <Thread(Thread-327, started 40760)>, 1738769957.2167337)}
2025-02-05 23:39:17,216 - 
2025-02-05 23:39:17,323 - 序列遍历完成，开始查看剩余阻塞的语句：{10: (1, 'UPDATE table_0 SET col_1 = 3.11, col_2 = 29.46 WHERE (id = 10)', <Thread(Thread-325, stopped 38552)>, 1738769957.215224), 11: (1, "UPDATE table_0 SET col_1 = 95.46, col_0 = 'MaxBy', col_2 = 73.82 WHERE (id = 6) AND (col_0 = 'ymiht') AND (col_2 = 2.59) AND (col_1 = 52.02)", <Thread(Thread-326, stopped 15324)>, 1738769957.215224), 14: (1, 'COMMIT', <Thread(Thread-327, stopped 40760)>, 1738769957.2167337)}
2025-02-05 23:39:17,323 - 
2025-02-05 23:39:17,324 - 执行前idx: 15, pending_stmts: {10: (1, 'UPDATE table_0 SET col_1 = 3.11, col_2 = 29.46 WHERE (id = 10)', <Thread(Thread-325, stopped 38552)>, 1738769957.215224), 11: (1, "UPDATE table_0 SET col_1 = 95.46, col_0 = 'MaxBy', col_2 = 73.82 WHERE (id = 6) AND (col_0 = 'ymiht') AND (col_2 = 2.59) AND (col_1 = 52.02)", <Thread(Thread-326, stopped 15324)>, 1738769957.215224), 14: (1, 'COMMIT', <Thread(Thread-327, stopped 40760)>, 1738769957.2167337)}
2025-02-05 23:39:17,430 - stmt_idx: 10, status: success, result: None
2025-02-05 23:39:17,430 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 3.11, col_2 = 29.46 WHERE (id = 10)
2025-02-05 23:39:17,533 - stmt_idx: 11, status: success, result: None
2025-02-05 23:39:17,533 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 95.46, col_0 = 'MaxBy', col_2 = 73.82 WHERE (id = 6) AND (col_0 = 'ymiht') AND (col_2 = 2.59) AND (col_1 = 52.02)
2025-02-05 23:39:17,642 - stmt_idx: 14, status: success, result: None
2025-02-05 23:39:17,642 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:39:17,642 - 执行后idx: 15, pending_stmts: {}
2025-02-05 23:39:17,642 - 
2025-02-05 23:39:17,751 - 执行序列成功
2025-02-05 23:39:18,528 - is_atomic: True
2025-02-05 23:39:18,529 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:39:18,529 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'zKimr', 13.58, 19.53)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'GZxqc', 21.29, 27.35)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'ZUbeL', 22.12, 68.62)"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 6 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'MkCPm', 52.45, 81.31)"), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'COMMIT'), (1, "DELETE FROM table_0 WHERE (col_1 = 57.09) AND (col_2 = 69.91) AND (col_0 = 'jtvwk')"), (1, 'UPDATE table_0 SET col_1 = 3.11, col_2 = 29.46 WHERE (id = 10)'), (1, "UPDATE table_0 SET col_1 = 95.46, col_0 = 'MaxBy', col_2 = 73.82 WHERE (id = 6) AND (col_0 = 'ymiht') AND (col_2 = 2.59) AND (col_1 = 52.02)"), (1, 'COMMIT')]
2025-02-05 23:39:18,529 - snapshots: {'before': {'table_0': [(1, 'cakyu', 17.69, 14.53), (2, 'agvha', 56.75, 91.46), (3, 'prtby', 18.21, 14.96), (4, 'pctpr', 14.75, 92.63), (5, 'akggq', 80.18, 39.97), (6, 'ymiht', 52.02, 2.59), (7, 'srzec', 56.51, 62.35), (8, 'jtvwk', 57.09, 69.91), (9, 'rumhm', 54.91, 16.49), (10, 'lhpvo', 79.73, 12.03), (11, 'ijyyh', 67.03, 91.43), (12, 'shdeu', 7.07, 81.49), (13, 'qpdky', 19.47, 71.33), (14, 'obtmd', 25.62, 8.34), (15, 'zbipq', 37.61, 67.5)]}, 'trx1': {'table_0': [(1, 'cakyu', 17.69, 14.53), (2, 'agvha', 56.75, 91.46), (3, 'prtby', 18.21, 14.96), (4, 'pctpr', 14.75, 92.63), (5, 'akggq', 80.18, 39.97), (6, 'MaxBy', 95.46, 73.82), (7, 'srzec', 56.51, 62.35), (9, 'rumhm', 54.91, 16.49), (10, 'lhpvo', 3.11, 29.46), (11, 'ijyyh', 67.03, 91.43), (12, 'shdeu', 7.07, 81.49), (13, 'qpdky', 19.47, 71.33), (14, 'obtmd', 25.62, 8.34), (15, 'zbipq', 37.61, 67.5), (16, 'zKimr', 13.58, 19.53), (17, 'GZxqc', 21.29, 27.35), (18, 'ZUbeL', 22.12, 68.62), (19, 'MkCPm', 52.45, 81.31)]}, 'trx2': {'table_0': [(1, 'cakyu', 17.69, 14.53), (2, 'agvha', 56.75, 91.46), (3, 'prtby', 18.21, 14.96), (4, 'pctpr', 14.75, 92.63), (5, 'akggq', 80.18, 39.97), (6, 'ymiht', 52.02, 2.59), (7, 'srzec', 56.51, 62.35), (8, 'jtvwk', 57.09, 69.91), (9, 'rumhm', 54.91, 16.49), (10, 'lhpvo', 79.73, 12.03), (11, 'ijyyh', 67.03, 91.43), (12, 'shdeu', 7.07, 81.49), (13, 'qpdky', 19.47, 71.33), (14, 'obtmd', 25.62, 8.34), (15, 'zbipq', 37.61, 67.5)]}, 'serial': {'table_0': [(1, 'cakyu', 17.69, 14.53), (2, 'agvha', 56.75, 91.46), (3, 'prtby', 18.21, 14.96), (4, 'pctpr', 14.75, 92.63), (5, 'akggq', 80.18, 39.97), (6, 'MaxBy', 95.46, 73.82), (7, 'srzec', 56.51, 62.35), (9, 'rumhm', 54.91, 16.49), (10, 'lhpvo', 3.11, 29.46), (11, 'ijyyh', 67.03, 91.43), (12, 'shdeu', 7.07, 81.49), (13, 'qpdky', 19.47, 71.33), (14, 'obtmd', 25.62, 8.34), (15, 'zbipq', 37.61, 67.5), (20, 'zKimr', 13.58, 19.53), (21, 'GZxqc', 21.29, 27.35), (22, 'ZUbeL', 22.12, 68.62), (23, 'MkCPm', 52.45, 81.31)]}}
2025-02-05 23:39:18,529 - 
2025-02-05 23:39:18,541 - iter: 48
2025-02-05 23:39:20,016 - table table_0 has 9 rows
2025-02-05 23:39:20,016 - res_dict: {'trx1_lock_row_ids': [9], 'trx2_lock_row_ids': [2, 3, 4, 5, 6, 7], 'intersection_row_ids': []}
2025-02-05 23:39:20,016 - lock_same_resource: False
2025-02-05 23:39:20,016 - 
2025-02-05 23:39:20,016 - non intersection phase1
2025-02-05 23:39:20,017 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:39:20,017 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:39:20,017 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:39:20,017 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:39:20,021 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:39:20,022 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:20,022 - params: {'v1': '9', 'v2': '9', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:39:20,026 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=7
2025-02-05 23:39:20,027 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:20,027 - params: {'v1': '2', 'v2': '7', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:39:20,027 - non intersection phase1 end
2025-02-05 23:39:20,027 - 
2025-02-05 23:39:20,028 - non intersection phase2
2025-02-05 23:39:20,030 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=7
2025-02-05 23:39:20,031 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:20,032 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:39:20,035 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:39:20,036 - needed_params: {'cond', 'table'}
2025-02-05 23:39:20,036 - params: {'cond': "(col_1 = 10) AND (col_0 = 'ztckn')", 'table': 'table_0'}
2025-02-05 23:39:20,036 - non intersection phase2 end
2025-02-05 23:39:20,036 - 
2025-02-05 23:39:20,036 - 生成死锁事务序列成功如下
2025-02-05 23:39:20,036 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, "DELETE FROM table_0 WHERE (col_1 = 10) AND (col_0 = 'ztckn')"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:39:21,548 - 创建事务1连接成功
2025-02-05 23:39:21,549 - 执行事务1语句: BEGIN
2025-02-05 23:39:21,550 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:39:21,551 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:39:21,552 - 执行事务1语句: COMMIT;
2025-02-05 23:39:21,556 - 执行事务1成功
2025-02-05 23:39:24,120 - 恢复初始状态成功
2025-02-05 23:39:24,878 - 创建事务2连接成功
2025-02-05 23:39:24,880 - 执行事务2语句: BEGIN
2025-02-05 23:39:24,881 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 23:39:24,882 - 执行事务2语句: DELETE FROM table_0 WHERE (col_1 = 10) AND (col_0 = 'ztckn')
2025-02-05 23:39:24,884 - 执行事务2语句: COMMIT;
2025-02-05 23:39:24,888 - 执行事务2成功
2025-02-05 23:39:29,795 - 
2025-02-05 23:39:29,795 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-328, started 40352)>, 1738769969.7951055)}
2025-02-05 23:39:29,899 - stmt_idx: 2, status: success, result: None
2025-02-05 23:39:29,899 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:39:29,899 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:39:29,899 - 
2025-02-05 23:39:30,008 - 
2025-02-05 23:39:30,008 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE', <Thread(Thread-329, started 42972)>, 1738769970.0082812)}
2025-02-05 23:39:30,115 - stmt_idx: 3, status: success, result: None
2025-02-05 23:39:30,116 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE
2025-02-05 23:39:30,116 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:39:30,116 - 
2025-02-05 23:39:30,223 - 
2025-02-05 23:39:30,224 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-330, started 42672)>, 1738769970.2234757)}
2025-02-05 23:39:30,330 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:39:30,330 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-330, started 42672)>, 1738769970.2234757)}
2025-02-05 23:39:30,330 - 
2025-02-05 23:39:30,435 - 
2025-02-05 23:39:30,435 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-330, started 42672)>, 1738769970.2234757), 5: (2, "DELETE FROM table_0 WHERE (col_1 = 10) AND (col_0 = 'ztckn')", <Thread(Thread-331, started 44400)>, 1738769970.4352376)}
2025-02-05 23:39:30,437 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (col_1 = 10) AND (col_0 = 'ztckn')
2025-02-05 23:39:30,542 - stmt_idx: 4, status: success, result: None
2025-02-05 23:39:30,542 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:39:30,542 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:39:30,650 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:39:30,650 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: DELETE FROM table_0 WHERE (col_1 = 10) AND (col_0 = 'ztckn')
2025-02-05 23:39:30,650 - 错误: dictionary changed size during iteration
2025-02-05 23:39:30,652 - 执行序列成功
2025-02-05 23:39:31,421 - is_atomic: True
2025-02-05 23:39:31,422 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:39:31,422 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 7 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 23:39:31,422 - snapshots: {'before': {'table_0': [(1, 'bvlbb', 30, 25, 99, 87), (2, 'heebr', 44, 55, 34, 70), (3, 'bxome', 26, 57, 37, 80), (4, 'pwkll', 35, 64, 63, 11), (5, 'azsvp', 53, 71, 63, 16), (6, 'aknvb', 73, 91, 98, 89), (7, 'hrxio', 35, 7, 29, 69), (8, 'bgfsl', 5, 98, 87, 91), (9, 'ztckn', 10, 6, 66, 27)]}, 'trx1': {'table_0': [(1, 'bvlbb', 30, 25, 99, 87), (2, 'heebr', 44, 55, 34, 70), (3, 'bxome', 26, 57, 37, 80), (4, 'pwkll', 35, 64, 63, 11), (5, 'azsvp', 53, 71, 63, 16), (6, 'aknvb', 73, 91, 98, 89), (7, 'hrxio', 35, 7, 29, 69), (8, 'bgfsl', 5, 98, 87, 91), (9, 'ztckn', 10, 6, 66, 27)]}, 'trx2': {'table_0': [(1, 'bvlbb', 30, 25, 99, 87), (2, 'heebr', 44, 55, 34, 70), (3, 'bxome', 26, 57, 37, 80), (4, 'pwkll', 35, 64, 63, 11), (5, 'azsvp', 53, 71, 63, 16), (6, 'aknvb', 73, 91, 98, 89), (7, 'hrxio', 35, 7, 29, 69), (8, 'bgfsl', 5, 98, 87, 91)]}, 'serial': {'table_0': [(1, 'bvlbb', 30, 25, 99, 87), (2, 'heebr', 44, 55, 34, 70), (3, 'bxome', 26, 57, 37, 80), (4, 'pwkll', 35, 64, 63, 11), (5, 'azsvp', 53, 71, 63, 16), (6, 'aknvb', 73, 91, 98, 89), (7, 'hrxio', 35, 7, 29, 69), (8, 'bgfsl', 5, 98, 87, 91), (9, 'ztckn', 10, 6, 66, 27)]}}
2025-02-05 23:39:31,422 - 
2025-02-05 23:39:31,433 - iter: 49
2025-02-05 23:39:32,945 - table table_0 has 15 rows
2025-02-05 23:39:32,945 - trx1_start_id: 1
2025-02-05 23:39:32,945 - trx1_end_id: 2
2025-02-05 23:39:32,945 - trx1_exclusive_start_id: 1
2025-02-05 23:39:32,945 - trx1_exclusive_end_id: 1
2025-02-05 23:39:32,945 - trx1_exclusive_ids: [1]
2025-02-05 23:39:32,945 - trx2_start_id: 2
2025-02-05 23:39:32,945 - trx2_end_id: 3
2025-02-05 23:39:32,945 - trx2_exclusive_start_id: 3
2025-02-05 23:39:32,945 - trx2_exclusive_end_id: 3
2025-02-05 23:39:32,945 - trx2_exclusive_ids: [3]
2025-02-05 23:39:32,945 - intersection_ids: [2]
2025-02-05 23:39:32,945 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [2, 3], 'intersection_row_ids': [2]}
2025-02-05 23:39:32,945 - lock_same_resource: True
2025-02-05 23:39:32,945 - 
2025-02-05 23:39:32,946 - intersection phase1
2025-02-05 23:39:32,949 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 23:39:32,950 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:39:32,950 - params: {'set_expr': 'col_0 = 19', 'v1': '1', 'v2': '2', 'table': 'table_0'}
2025-02-05 23:39:32,953 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-05 23:39:32,954 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:39:32,955 - params: {'set_expr': 'col_1 = 86.51, col_0 = 84', 'v1': '2', 'v2': '3', 'table': 'table_0'}
2025-02-05 23:39:32,955 - intersection phase1 end
2025-02-05 23:39:32,955 - 
2025-02-05 23:39:32,955 - intersection phase2
2025-02-05 23:39:32,956 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:39:32,956 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:39:32,956 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:39:32,956 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:39:32,959 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 23:39:32,959 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:32,959 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:39:32,963 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=3
2025-02-05 23:39:32,964 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:32,964 - params: {'v1': '3', 'v2': '3', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:39:32,964 - intersection phase2 end
2025-02-05 23:39:32,964 - 
2025-02-05 23:39:32,965 - intersection phase3
2025-02-05 23:39:32,967 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=3
2025-02-05 23:39:32,968 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:32,968 - params: {'v1': '3', 'v2': '3', 'select_cols': 'col_2', 'table': 'table_0'}
2025-02-05 23:39:32,972 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:39:32,973 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:39:32,974 - params: {'set_expr': 'col_1 = 59.15, col_0 = 10', 'cond': '(id = 1) AND (col_0 = 24)', 'table': 'table_0'}
2025-02-05 23:39:32,974 - intersection phase3 end
2025-02-05 23:39:32,974 - 
2025-02-05 23:39:32,974 - 生成死锁事务序列成功如下
2025-02-05 23:39:32,974 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_0 = 19 WHERE id BETWEEN 1 AND 2'), (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_1 = 59.15, col_0 = 10 WHERE (id = 1) AND (col_0 = 24)'), (1, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:39:34,511 - 创建事务1连接成功
2025-02-05 23:39:34,512 - 执行事务1语句: BEGIN
2025-02-05 23:39:34,513 - 执行事务1语句: UPDATE table_0 SET col_0 = 19 WHERE id BETWEEN 1 AND 2
2025-02-05 23:39:34,514 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:39:34,515 - 执行事务1语句: SELECT col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 23:39:34,517 - 执行事务1语句: COMMIT;
2025-02-05 23:39:34,522 - 执行事务1成功
2025-02-05 23:39:37,143 - 恢复初始状态成功
2025-02-05 23:39:37,912 - 创建事务2连接成功
2025-02-05 23:39:37,914 - 执行事务2语句: BEGIN
2025-02-05 23:39:37,915 - 执行事务2语句: UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3
2025-02-05 23:39:37,916 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 23:39:37,917 - 执行事务2语句: UPDATE table_0 SET col_1 = 59.15, col_0 = 10 WHERE (id = 1) AND (col_0 = 24)
2025-02-05 23:39:37,919 - 执行事务2语句: COMMIT;
2025-02-05 23:39:37,924 - 执行事务2成功
2025-02-05 23:39:42,838 - 
2025-02-05 23:39:42,838 - 执行前idx: 3, pending_stmts: {2: (1, 'UPDATE table_0 SET col_0 = 19 WHERE id BETWEEN 1 AND 2', <Thread(Thread-332, started 36140)>, 1738769982.8388324)}
2025-02-05 23:39:42,944 - stmt_idx: 2, status: success, result: None
2025-02-05 23:39:42,944 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 19 WHERE id BETWEEN 1 AND 2
2025-02-05 23:39:42,945 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:39:42,945 - 
2025-02-05 23:39:43,055 - 
2025-02-05 23:39:43,055 - 执行前idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3', <Thread(Thread-333, started 34256)>, 1738769983.055523)}
2025-02-05 23:39:43,162 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3
2025-02-05 23:39:43,162 - 执行后idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3', <Thread(Thread-333, started 34256)>, 1738769983.055523)}
2025-02-05 23:39:43,162 - 
2025-02-05 23:39:43,274 - 
2025-02-05 23:39:43,276 - 执行前idx: 6, pending_stmts: {3: (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3', <Thread(Thread-333, started 34256)>, 1738769983.055523), 5: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-334, started 41608)>, 1738769983.2743762)}
2025-02-05 23:39:43,384 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3
2025-02-05 23:39:43,495 - stmt_idx: 5, status: success, result: None
2025-02-05 23:39:43,495 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:39:43,495 - 执行后idx: 6, pending_stmts: {3: (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3', <Thread(Thread-333, started 34256)>, 1738769983.055523)}
2025-02-05 23:39:43,495 - 
2025-02-05 23:39:43,605 - 
2025-02-05 23:39:43,605 - 执行前idx: 8, pending_stmts: {3: (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3', <Thread(Thread-333, started 34256)>, 1738769983.055523), 7: (1, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-335, started 1016)>, 1738769983.605955)}
2025-02-05 23:39:43,714 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3
2025-02-05 23:39:43,820 - stmt_idx: 7, status: success, result: None
2025-02-05 23:39:43,820 - 成功执行序列中事务1语句: SELECT col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 23:39:43,821 - 执行后idx: 8, pending_stmts: {3: (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3', <Thread(Thread-333, started 34256)>, 1738769983.055523)}
2025-02-05 23:39:43,821 - 
2025-02-05 23:39:43,932 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3', <Thread(Thread-333, started 34256)>, 1738769983.055523)}
2025-02-05 23:39:43,932 - 
2025-02-05 23:39:43,932 - 执行前idx: 10, pending_stmts: {3: (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3', <Thread(Thread-333, started 34256)>, 1738769983.055523)}
2025-02-05 23:39:44,034 - stmt_idx: 3, status: success, result: None
2025-02-05 23:39:44,034 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3
2025-02-05 23:39:44,034 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3
2025-02-05 23:39:44,036 - 执行后idx: 10, pending_stmts: {4: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-336, started 40700)>, 1738769984.035817), 6: (2, 'UPDATE table_0 SET col_1 = 59.15, col_0 = 10 WHERE (id = 1) AND (col_0 = 24)', <Thread(Thread-337, started 43472)>, 1738769984.0363057), 9: (2, 'COMMIT', <Thread(Thread-338, started 41004)>, 1738769984.0363057)}
2025-02-05 23:39:44,036 - 
2025-02-05 23:39:44,139 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-336, stopped 40700)>, 1738769984.035817), 6: (2, 'UPDATE table_0 SET col_1 = 59.15, col_0 = 10 WHERE (id = 1) AND (col_0 = 24)', <Thread(Thread-337, stopped 43472)>, 1738769984.0363057), 9: (2, 'COMMIT', <Thread(Thread-338, stopped 41004)>, 1738769984.0363057)}
2025-02-05 23:39:44,139 - 
2025-02-05 23:39:44,139 - 执行前idx: 10, pending_stmts: {4: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-336, stopped 40700)>, 1738769984.035817), 6: (2, 'UPDATE table_0 SET col_1 = 59.15, col_0 = 10 WHERE (id = 1) AND (col_0 = 24)', <Thread(Thread-337, stopped 43472)>, 1738769984.0363057), 9: (2, 'COMMIT', <Thread(Thread-338, stopped 41004)>, 1738769984.0363057)}
2025-02-05 23:39:44,249 - stmt_idx: 4, status: success, result: None
2025-02-05 23:39:44,249 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 23:39:44,357 - stmt_idx: 6, status: success, result: None
2025-02-05 23:39:44,357 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 59.15, col_0 = 10 WHERE (id = 1) AND (col_0 = 24)
2025-02-05 23:39:44,464 - stmt_idx: 9, status: success, result: None
2025-02-05 23:39:44,464 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:39:44,464 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:39:44,464 - 
2025-02-05 23:39:44,571 - 执行序列成功
2025-02-05 23:39:45,344 - is_atomic: True
2025-02-05 23:39:45,344 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:39:45,344 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_0 = 19 WHERE id BETWEEN 1 AND 2'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT col_2 FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (1, 'COMMIT'), (2, 'UPDATE table_0 SET col_1 = 86.51, col_0 = 84 WHERE id BETWEEN 2 AND 3'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 59.15, col_0 = 10 WHERE (id = 1) AND (col_0 = 24)'), (2, 'COMMIT')]
2025-02-05 23:39:45,344 - snapshots: {'before': {'table_0': [(1, 24, 78.57, 'wknmm'), (2, 16, 93.61, 'sjooo'), (3, 53, 52.39, 'abqof'), (4, 22, 33.41, 'vpicv'), (5, 59, 77.41, 'bcahe'), (6, 17, 23.76, 'yczvh'), (7, 86, 11.21, 'gayqj'), (8, 79, 70.66, 'epgqz'), (9, 7, 14.0, 'nrrrz'), (10, 20, 95.09, 'npion'), (11, 77, 72.57, 'ywdsz'), (12, 96, 20.12, 'pckff'), (13, 43, 57.71, 'poyaf'), (14, 45, 46.13, 'fgxqj'), (15, 22, 28.78, 'fycuy')]}, 'trx1': {'table_0': [(1, 19, 78.57, 'wknmm'), (2, 19, 93.61, 'sjooo'), (3, 53, 52.39, 'abqof'), (4, 22, 33.41, 'vpicv'), (5, 59, 77.41, 'bcahe'), (6, 17, 23.76, 'yczvh'), (7, 86, 11.21, 'gayqj'), (8, 79, 70.66, 'epgqz'), (9, 7, 14.0, 'nrrrz'), (10, 20, 95.09, 'npion'), (11, 77, 72.57, 'ywdsz'), (12, 96, 20.12, 'pckff'), (13, 43, 57.71, 'poyaf'), (14, 45, 46.13, 'fgxqj'), (15, 22, 28.78, 'fycuy')]}, 'trx2': {'table_0': [(1, 10, 59.15, 'wknmm'), (2, 84, 86.51, 'sjooo'), (3, 84, 86.51, 'abqof'), (4, 22, 33.41, 'vpicv'), (5, 59, 77.41, 'bcahe'), (6, 17, 23.76, 'yczvh'), (7, 86, 11.21, 'gayqj'), (8, 79, 70.66, 'epgqz'), (9, 7, 14.0, 'nrrrz'), (10, 20, 95.09, 'npion'), (11, 77, 72.57, 'ywdsz'), (12, 96, 20.12, 'pckff'), (13, 43, 57.71, 'poyaf'), (14, 45, 46.13, 'fgxqj'), (15, 22, 28.78, 'fycuy')]}, 'serial': {'table_0': [(1, 19, 78.57, 'wknmm'), (2, 84, 86.51, 'sjooo'), (3, 84, 86.51, 'abqof'), (4, 22, 33.41, 'vpicv'), (5, 59, 77.41, 'bcahe'), (6, 17, 23.76, 'yczvh'), (7, 86, 11.21, 'gayqj'), (8, 79, 70.66, 'epgqz'), (9, 7, 14.0, 'nrrrz'), (10, 20, 95.09, 'npion'), (11, 77, 72.57, 'ywdsz'), (12, 96, 20.12, 'pckff'), (13, 43, 57.71, 'poyaf'), (14, 45, 46.13, 'fgxqj'), (15, 22, 28.78, 'fycuy')]}}
2025-02-05 23:39:45,344 - 
2025-02-05 23:39:45,355 - iter: 50
2025-02-05 23:39:46,864 - table table_0 has 13 rows
2025-02-05 23:39:46,864 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 23:39:46,864 - trx2_lock_row_ids: [1, 2, 3, 4]
2025-02-05 23:39:46,864 - intersection_row_ids: [1, 2, 3, 4]
2025-02-05 23:39:46,864 - trx1_exclusive_ids: [5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 23:39:46,864 - trx2_exclusive_ids: []
2025-02-05 23:39:46,864 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'trx2_lock_row_ids': [1, 2, 3, 4], 'intersection_row_ids': [1, 2, 3, 4]}
2025-02-05 23:39:46,864 - lock_same_resource: True
2025-02-05 23:39:46,864 - 
2025-02-05 23:39:46,864 - intersection phase1
2025-02-05 23:39:46,867 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 23:39:46,868 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:39:46,868 - params: {'set_expr': "col_1 = 'HevHT', col_0 = 'nHAkk'", 'v1': '1', 'v2': '4', 'table': 'table_0'}
2025-02-05 23:39:46,872 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,873 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:46,873 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:39:46,876 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,877 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:46,877 - params: {'v1': '2', 'v2': '2', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:39:46,880 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,882 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:46,882 - params: {'v1': '3', 'v2': '3', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:39:46,884 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,885 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:39:46,886 - params: {'cond': "(col_1 = 'yzkfp')", 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:39:46,886 - intersection phase1 end
2025-02-05 23:39:46,886 - 
2025-02-05 23:39:46,886 - intersection phase2
2025-02-05 23:39:46,886 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:39:46,886 - 事务2在第二阶段自己加的锁: S
2025-02-05 23:39:46,886 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:39:46,886 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:39:46,888 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,890 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:39:46,890 - params: {'cond': '(id = 5)', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:39:46,894 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,896 - needed_params: {'cond', 'table'}
2025-02-05 23:39:46,896 - params: {'cond': "(id = 6) AND (col_0 = 'ggfmy')", 'table': 'table_0'}
2025-02-05 23:39:46,900 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,902 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:46,902 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:39:46,906 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,908 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:39:46,908 - params: {'cond': "(col_1 = 'ulmwy')", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:39:46,911 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,912 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:46,912 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:39:46,916 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,917 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:39:46,917 - params: {'cond': "(id = 10) AND (col_0 = 'fuelm')", 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:39:46,919 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,920 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:46,920 - params: {'v1': '11', 'v2': '11', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:39:46,924 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,925 - needed_params: {'cond', 'table'}
2025-02-05 23:39:46,926 - params: {'cond': "(id = 12) AND (col_1 = 'gmvri') AND (col_0 = 'mpaiq')", 'table': 'table_0'}
2025-02-05 23:39:46,928 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,929 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:39:46,930 - params: {'v1': '13', 'v2': '13', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:39:46,930 - intersection phase2 end
2025-02-05 23:39:46,930 - 
2025-02-05 23:39:46,930 - intersection phase3
2025-02-05 23:39:46,933 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:39:46,935 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:39:46,935 - params: {'set_expr': "col_0 = 'UiDoW'", 'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:39:46,936 - intersection phase3 end
2025-02-05 23:39:46,936 - 
2025-02-05 23:39:46,936 - 生成死锁事务序列成功如下
2025-02-05 23:39:46,936 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_1 = 'HevHT', col_0 = 'nHAkk' WHERE id BETWEEN 1 AND 4"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, "SELECT id, col_0 FROM table_0 WHERE (col_1 = 'yzkfp') LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (id = 6) AND (col_0 = 'ggfmy')"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "SELECT * FROM table_0 WHERE (col_1 = 'ulmwy') FOR UPDATE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 10) AND (col_0 = 'fuelm') FOR UPDATE"), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (id = 12) AND (col_1 = 'gmvri') AND (col_0 = 'mpaiq')"), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, None), (1, "UPDATE table_0 SET col_0 = 'UiDoW' WHERE (id = 1)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:39:48,473 - 创建事务1连接成功
2025-02-05 23:39:48,475 - 执行事务1语句: BEGIN
2025-02-05 23:39:48,476 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:39:48,477 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:39:48,477 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 23:39:48,478 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE (col_1 = 'yzkfp') LOCK IN SHARE MODE
2025-02-05 23:39:48,479 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 23:39:48,479 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 6) AND (col_0 = 'ggfmy')
2025-02-05 23:39:48,480 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:39:48,481 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'ulmwy') FOR UPDATE
2025-02-05 23:39:48,481 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:39:48,482 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 10) AND (col_0 = 'fuelm') FOR UPDATE
2025-02-05 23:39:48,482 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:39:48,483 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 12) AND (col_1 = 'gmvri') AND (col_0 = 'mpaiq')
2025-02-05 23:39:48,484 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 23:39:48,485 - 执行事务1语句: UPDATE table_0 SET col_0 = 'UiDoW' WHERE (id = 1)
2025-02-05 23:39:48,487 - 执行事务1语句: COMMIT;
2025-02-05 23:39:48,492 - 执行事务1成功
2025-02-05 23:39:51,123 - 恢复初始状态成功
2025-02-05 23:39:51,892 - 创建事务2连接成功
2025-02-05 23:39:51,893 - 执行事务2语句: BEGIN
2025-02-05 23:39:51,894 - 执行事务2语句: UPDATE table_0 SET col_1 = 'HevHT', col_0 = 'nHAkk' WHERE id BETWEEN 1 AND 4
2025-02-05 23:39:51,896 - 执行事务2语句: COMMIT;
2025-02-05 23:39:51,901 - 执行事务2成功
2025-02-05 23:39:56,841 - 
2025-02-05 23:39:56,841 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_1 = 'HevHT', col_0 = 'nHAkk' WHERE id BETWEEN 1 AND 4", <Thread(Thread-339, started 20584)>, 1738769996.8417177)}
2025-02-05 23:39:56,956 - stmt_idx: 2, status: success, result: None
2025-02-05 23:39:56,956 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'HevHT', col_0 = 'nHAkk' WHERE id BETWEEN 1 AND 4
2025-02-05 23:39:56,956 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:39:56,956 - 
2025-02-05 23:39:57,064 - 
2025-02-05 23:39:57,065 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-340, started 43316)>, 1738769997.0648744)}
2025-02-05 23:39:57,171 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:39:57,171 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-340, started 43316)>, 1738769997.0648744)}
2025-02-05 23:39:57,171 - 
2025-02-05 23:39:57,279 - stmt为None, trx_id: 2, stmt: None
2025-02-05 23:39:57,283 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-340, started 43316)>, 1738769997.0648744)}
2025-02-05 23:39:57,283 - 
2025-02-05 23:39:57,283 - 执行前idx: 20, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-340, stopped 43316)>, 1738769997.0648744)}
2025-02-05 23:39:57,387 - stmt_idx: 3, status: success, result: None
2025-02-05 23:39:57,387 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:39:57,387 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:39:57,391 - 执行后idx: 20, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-341, stopped 37600)>, 1738769997.387888), 5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-342, started 4028)>, 1738769997.3890002), 6: (1, "SELECT id, col_0 FROM table_0 WHERE (col_1 = 'yzkfp') LOCK IN SHARE MODE", <Thread(Thread-343, started 35236)>, 1738769997.3890002), 7: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-344, started 43100)>, 1738769997.389504), 8: (1, "DELETE FROM table_0 WHERE (id = 6) AND (col_0 = 'ggfmy')", <Thread(Thread-345, started 20560)>, 1738769997.389504), 9: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-346, started 32440)>, 1738769997.3899539), 10: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ulmwy') FOR UPDATE", <Thread(Thread-347, started 30024)>, 1738769997.3899539), 11: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-348, started 44284)>, 1738769997.3904586), 12: (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 10) AND (col_0 = 'fuelm') FOR UPDATE", <Thread(Thread-349, started 16212)>, 1738769997.3904586), 13: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-350, started 33332)>, 1738769997.3904586), 14: (1, "DELETE FROM table_0 WHERE (id = 12) AND (col_1 = 'gmvri') AND (col_0 = 'mpaiq')", <Thread(Thread-351, started 35420)>, 1738769997.3909807), 15: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-352, started 19544)>, 1738769997.3909807), 17: (1, "UPDATE table_0 SET col_0 = 'UiDoW' WHERE (id = 1)", <Thread(Thread-353, started 32772)>, 1738769997.3909807), 18: (1, 'COMMIT', <Thread(Thread-354, started 27820)>, 1738769997.3915014)}
2025-02-05 23:39:57,391 - 
2025-02-05 23:39:57,495 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-341, stopped 37600)>, 1738769997.387888), 5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-342, stopped 4028)>, 1738769997.3890002), 6: (1, "SELECT id, col_0 FROM table_0 WHERE (col_1 = 'yzkfp') LOCK IN SHARE MODE", <Thread(Thread-343, stopped 35236)>, 1738769997.3890002), 7: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-344, stopped 43100)>, 1738769997.389504), 8: (1, "DELETE FROM table_0 WHERE (id = 6) AND (col_0 = 'ggfmy')", <Thread(Thread-345, stopped 20560)>, 1738769997.389504), 9: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-346, stopped 32440)>, 1738769997.3899539), 10: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ulmwy') FOR UPDATE", <Thread(Thread-347, stopped 30024)>, 1738769997.3899539), 11: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-348, stopped 44284)>, 1738769997.3904586), 12: (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 10) AND (col_0 = 'fuelm') FOR UPDATE", <Thread(Thread-349, stopped 16212)>, 1738769997.3904586), 13: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-350, stopped 33332)>, 1738769997.3904586), 14: (1, "DELETE FROM table_0 WHERE (id = 12) AND (col_1 = 'gmvri') AND (col_0 = 'mpaiq')", <Thread(Thread-351, stopped 35420)>, 1738769997.3909807), 15: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-352, stopped 19544)>, 1738769997.3909807), 17: (1, "UPDATE table_0 SET col_0 = 'UiDoW' WHERE (id = 1)", <Thread(Thread-353, stopped 32772)>, 1738769997.3909807), 18: (1, 'COMMIT', <Thread(Thread-354, stopped 27820)>, 1738769997.3915014)}
2025-02-05 23:39:57,495 - 
2025-02-05 23:39:57,495 - 执行前idx: 20, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-341, stopped 37600)>, 1738769997.387888), 5: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-342, stopped 4028)>, 1738769997.3890002), 6: (1, "SELECT id, col_0 FROM table_0 WHERE (col_1 = 'yzkfp') LOCK IN SHARE MODE", <Thread(Thread-343, stopped 35236)>, 1738769997.3890002), 7: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-344, stopped 43100)>, 1738769997.389504), 8: (1, "DELETE FROM table_0 WHERE (id = 6) AND (col_0 = 'ggfmy')", <Thread(Thread-345, stopped 20560)>, 1738769997.389504), 9: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-346, stopped 32440)>, 1738769997.3899539), 10: (1, "SELECT * FROM table_0 WHERE (col_1 = 'ulmwy') FOR UPDATE", <Thread(Thread-347, stopped 30024)>, 1738769997.3899539), 11: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-348, stopped 44284)>, 1738769997.3904586), 12: (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 10) AND (col_0 = 'fuelm') FOR UPDATE", <Thread(Thread-349, stopped 16212)>, 1738769997.3904586), 13: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-350, stopped 33332)>, 1738769997.3904586), 14: (1, "DELETE FROM table_0 WHERE (id = 12) AND (col_1 = 'gmvri') AND (col_0 = 'mpaiq')", <Thread(Thread-351, stopped 35420)>, 1738769997.3909807), 15: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-352, stopped 19544)>, 1738769997.3909807), 17: (1, "UPDATE table_0 SET col_0 = 'UiDoW' WHERE (id = 1)", <Thread(Thread-353, stopped 32772)>, 1738769997.3909807), 18: (1, 'COMMIT', <Thread(Thread-354, stopped 27820)>, 1738769997.3915014)}
2025-02-05 23:39:57,605 - stmt_idx: 4, status: success, result: None
2025-02-05 23:39:57,605 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:39:57,713 - stmt_idx: 5, status: success, result: None
2025-02-05 23:39:57,714 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 23:39:57,819 - stmt_idx: 6, status: success, result: None
2025-02-05 23:39:57,820 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE (col_1 = 'yzkfp') LOCK IN SHARE MODE
2025-02-05 23:39:57,929 - stmt_idx: 7, status: success, result: None
2025-02-05 23:39:57,929 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 23:39:58,037 - stmt_idx: 8, status: success, result: None
2025-02-05 23:39:58,037 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 6) AND (col_0 = 'ggfmy')
2025-02-05 23:39:58,146 - stmt_idx: 9, status: success, result: None
2025-02-05 23:39:58,147 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:39:58,253 - stmt_idx: 10, status: success, result: None
2025-02-05 23:39:58,254 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'ulmwy') FOR UPDATE
2025-02-05 23:39:58,361 - stmt_idx: 11, status: success, result: None
2025-02-05 23:39:58,362 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:39:58,467 - stmt_idx: 12, status: success, result: None
2025-02-05 23:39:58,467 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 10) AND (col_0 = 'fuelm') FOR UPDATE
2025-02-05 23:39:58,572 - stmt_idx: 13, status: success, result: None
2025-02-05 23:39:58,572 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:39:58,684 - stmt_idx: 14, status: success, result: None
2025-02-05 23:39:58,684 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 12) AND (col_1 = 'gmvri') AND (col_0 = 'mpaiq')
2025-02-05 23:39:58,792 - stmt_idx: 15, status: success, result: None
2025-02-05 23:39:58,792 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 23:39:58,902 - stmt_idx: 17, status: success, result: None
2025-02-05 23:39:58,902 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'UiDoW' WHERE (id = 1)
2025-02-05 23:39:59,006 - stmt_idx: 18, status: success, result: None
2025-02-05 23:39:59,006 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:39:59,006 - 执行后idx: 20, pending_stmts: {}
2025-02-05 23:39:59,006 - 
2025-02-05 23:39:59,113 - 执行序列成功
2025-02-05 23:39:59,881 - is_atomic: True
2025-02-05 23:39:59,881 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:39:59,881 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_1 = 'HevHT', col_0 = 'nHAkk' WHERE id BETWEEN 1 AND 4"), (2, 'COMMIT'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, "SELECT id, col_0 FROM table_0 WHERE (col_1 = 'yzkfp') LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (id = 6) AND (col_0 = 'ggfmy')"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, "SELECT * FROM table_0 WHERE (col_1 = 'ulmwy') FOR UPDATE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (id = 10) AND (col_0 = 'fuelm') FOR UPDATE"), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (id = 12) AND (col_1 = 'gmvri') AND (col_0 = 'mpaiq')"), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 'UiDoW' WHERE (id = 1)"), (1, 'COMMIT')]
2025-02-05 23:39:59,881 - snapshots: {'before': {'table_0': [(1, 'mljab', 'thxal'), (2, 'mkohs', 'kyntp'), (3, 'lhlwo', 'acxxi'), (4, 'dhshq', 'yzkfp'), (5, 'gxvan', 'qubyy'), (6, 'ggfmy', 'ckcvp'), (7, 'yycap', 'ghgtv'), (8, 'uvtoj', 'ulmwy'), (9, 'eppup', 'efhuo'), (10, 'fuelm', 'lnvpg'), (11, 'vyvzj', 'ilbov'), (12, 'mpaiq', 'gmvri'), (13, 'zroai', 'mmylr')]}, 'trx1': {'table_0': [(1, 'UiDoW', 'thxal'), (2, 'mkohs', 'kyntp'), (3, 'lhlwo', 'acxxi'), (4, 'dhshq', 'yzkfp'), (5, 'gxvan', 'qubyy'), (7, 'yycap', 'ghgtv'), (8, 'uvtoj', 'ulmwy'), (9, 'eppup', 'efhuo'), (10, 'fuelm', 'lnvpg'), (11, 'vyvzj', 'ilbov'), (13, 'zroai', 'mmylr')]}, 'trx2': {'table_0': [(1, 'nHAkk', 'HevHT'), (2, 'nHAkk', 'HevHT'), (3, 'nHAkk', 'HevHT'), (4, 'nHAkk', 'HevHT'), (5, 'gxvan', 'qubyy'), (6, 'ggfmy', 'ckcvp'), (7, 'yycap', 'ghgtv'), (8, 'uvtoj', 'ulmwy'), (9, 'eppup', 'efhuo'), (10, 'fuelm', 'lnvpg'), (11, 'vyvzj', 'ilbov'), (12, 'mpaiq', 'gmvri'), (13, 'zroai', 'mmylr')]}, 'serial': {'table_0': [(1, 'UiDoW', 'HevHT'), (2, 'nHAkk', 'HevHT'), (3, 'nHAkk', 'HevHT'), (4, 'nHAkk', 'HevHT'), (5, 'gxvan', 'qubyy'), (7, 'yycap', 'ghgtv'), (8, 'uvtoj', 'ulmwy'), (9, 'eppup', 'efhuo'), (10, 'fuelm', 'lnvpg'), (11, 'vyvzj', 'ilbov'), (13, 'zroai', 'mmylr')]}}
2025-02-05 23:39:59,881 - 
2025-02-05 23:39:59,892 - iter: 51
2025-02-05 23:40:01,383 - table table_0 has 10 rows
2025-02-05 23:40:01,383 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2025-02-05 23:40:01,383 - trx2_lock_row_ids: [4, 5, 6]
2025-02-05 23:40:01,383 - intersection_row_ids: [4, 5, 6]
2025-02-05 23:40:01,383 - trx1_exclusive_ids: [1, 2, 3, 7, 8, 9, 10]
2025-02-05 23:40:01,383 - trx2_exclusive_ids: []
2025-02-05 23:40:01,384 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [4, 5, 6], 'intersection_row_ids': [4, 5, 6]}
2025-02-05 23:40:01,384 - lock_same_resource: True
2025-02-05 23:40:01,384 - 
2025-02-05 23:40:01,384 - intersection phase1
2025-02-05 23:40:01,387 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=6
2025-02-05 23:40:01,389 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:01,389 - params: {'set_expr': "col_2 = 'ZREmx'", 'v1': '4', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:40:01,392 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,394 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:01,394 - params: {'cond': "(col_762 IS NULL) AND (col_3 = 'bnoir') AND (col_0 = 26.74)", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:40:01,397 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,399 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:01,399 - params: {'cond': "(col_3 = 'slich') AND (col_1 = 81.73) AND (col_2 = 'ozvgn')", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:40:01,403 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,404 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:01,405 - params: {'v1': '6', 'v2': '6', 'select_cols': 'col_1', 'table': 'table_0'}
2025-02-05 23:40:01,405 - intersection phase1 end
2025-02-05 23:40:01,405 - 
2025-02-05 23:40:01,405 - intersection phase2
2025-02-05 23:40:01,405 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:40:01,405 - 事务2在第二阶段自己加的锁: S
2025-02-05 23:40:01,405 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:40:01,405 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:40:01,409 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,411 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:01,412 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:40:01,416 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,417 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:40:01,417 - params: {'set_expr': "col_1 = 26.8, col_0 = 62.73, col_2 = 'QQfjn', col_3 = 'spWFV'", 'cond': '(id = 2) AND (col_1 = 5.5) AND (col_0 = 80.83)', 'table': 'table_0'}
2025-02-05 23:40:01,420 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,421 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:01,421 - params: {'cond': "(col_2 = 'hwdcr') AND (col_0 = 65.2)", 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:40:01,425 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,428 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:01,428 - params: {'v1': '7', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:40:01,432 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,434 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:01,434 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id, col_2, col_3, col_762', 'table': 'table_0'}
2025-02-05 23:40:01,438 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,439 - needed_params: {'cond', 'table'}
2025-02-05 23:40:01,439 - params: {'cond': '(id = 9)', 'table': 'table_0'}
2025-02-05 23:40:01,442 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,443 - needed_params: {'cond', 'table'}
2025-02-05 23:40:01,443 - params: {'cond': '(id = 10)', 'table': 'table_0'}
2025-02-05 23:40:01,444 - intersection phase2 end
2025-02-05 23:40:01,444 - 
2025-02-05 23:40:01,444 - intersection phase3
2025-02-05 23:40:01,448 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:40:01,449 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:01,449 - params: {'cond': '(col_762 IS NULL)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:40:01,449 - intersection phase3 end
2025-02-05 23:40:01,449 - 
2025-02-05 23:40:01,449 - 生成死锁事务序列成功如下
2025-02-05 23:40:01,449 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT * FROM table_0 WHERE (col_762 IS NULL) AND (col_3 = 'bnoir') AND (col_0 = 26.74) LOCK IN SHARE MODE"), (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6"), (1, "SELECT * FROM table_0 WHERE (col_3 = 'slich') AND (col_1 = 81.73) AND (col_2 = 'ozvgn') LOCK IN SHARE MODE"), (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 26.8, col_0 = 62.73, col_2 = 'QQfjn', col_3 = 'spWFV' WHERE (id = 2) AND (col_1 = 5.5) AND (col_0 = 80.83)"), (1, "SELECT id FROM table_0 WHERE (col_2 = 'hwdcr') AND (col_0 = 65.2) FOR UPDATE"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, 'SELECT id, col_2, col_3, col_762 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 9)'), (1, 'DELETE FROM table_0 WHERE (id = 10)'), (1, 'SELECT * FROM table_0 WHERE (col_762 IS NULL) FOR UPDATE'), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:40:02,991 - 创建事务1连接成功
2025-02-05 23:40:02,992 - 执行事务1语句: BEGIN
2025-02-05 23:40:02,993 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_762 IS NULL) AND (col_3 = 'bnoir') AND (col_0 = 26.74) LOCK IN SHARE MODE
2025-02-05 23:40:02,994 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_3 = 'slich') AND (col_1 = 81.73) AND (col_2 = 'ozvgn') LOCK IN SHARE MODE
2025-02-05 23:40:02,995 - 执行事务1语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:40:02,996 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:40:02,996 - 执行事务1语句: UPDATE table_0 SET col_1 = 26.8, col_0 = 62.73, col_2 = 'QQfjn', col_3 = 'spWFV' WHERE (id = 2) AND (col_1 = 5.5) AND (col_0 = 80.83)
2025-02-05 23:40:02,997 - 执行事务1语句: SELECT id FROM table_0 WHERE (col_2 = 'hwdcr') AND (col_0 = 65.2) FOR UPDATE
2025-02-05 23:40:02,998 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:40:02,998 - 执行事务1语句: SELECT id, col_2, col_3, col_762 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:40:02,999 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 9)
2025-02-05 23:40:03,000 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 10)
2025-02-05 23:40:03,000 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_762 IS NULL) FOR UPDATE
2025-02-05 23:40:03,003 - 执行事务1语句: COMMIT;
2025-02-05 23:40:03,007 - 执行事务1成功
2025-02-05 23:40:05,586 - 恢复初始状态成功
2025-02-05 23:40:06,346 - 创建事务2连接成功
2025-02-05 23:40:06,348 - 执行事务2语句: BEGIN
2025-02-05 23:40:06,349 - 执行事务2语句: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:06,351 - 执行事务2语句: COMMIT;
2025-02-05 23:40:06,356 - 执行事务2成功
2025-02-05 23:40:11,248 - 
2025-02-05 23:40:11,248 - 执行前idx: 3, pending_stmts: {2: (1, "SELECT * FROM table_0 WHERE (col_762 IS NULL) AND (col_3 = 'bnoir') AND (col_0 = 26.74) LOCK IN SHARE MODE", <Thread(Thread-355, started 24776)>, 1738770011.2483966)}
2025-02-05 23:40:11,351 - stmt_idx: 2, status: success, result: None
2025-02-05 23:40:11,351 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_762 IS NULL) AND (col_3 = 'bnoir') AND (col_0 = 26.74) LOCK IN SHARE MODE
2025-02-05 23:40:11,351 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:40:11,351 - 
2025-02-05 23:40:11,459 - 
2025-02-05 23:40:11,459 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:11,570 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:11,571 - 执行后idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:11,571 - 
2025-02-05 23:40:11,680 - 
2025-02-05 23:40:11,681 - 执行前idx: 5, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 4: (1, "SELECT * FROM table_0 WHERE (col_3 = 'slich') AND (col_1 = 81.73) AND (col_2 = 'ozvgn') LOCK IN SHARE MODE", <Thread(Thread-357, started 39340)>, 1738770011.680203)}
2025-02-05 23:40:11,788 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:11,896 - stmt_idx: 4, status: success, result: None
2025-02-05 23:40:11,896 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_3 = 'slich') AND (col_1 = 81.73) AND (col_2 = 'ozvgn') LOCK IN SHARE MODE
2025-02-05 23:40:11,896 - 执行后idx: 5, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:11,896 - 
2025-02-05 23:40:12,006 - 
2025-02-05 23:40:12,007 - 执行前idx: 6, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 5: (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-358, started 35324)>, 1738770012.006171)}
2025-02-05 23:40:12,111 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:12,220 - stmt_idx: 5, status: success, result: None
2025-02-05 23:40:12,220 - 成功执行序列中事务1语句: SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:40:12,220 - 执行后idx: 6, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:12,220 - 
2025-02-05 23:40:12,325 - 
2025-02-05 23:40:12,325 - 执行前idx: 7, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 6: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-359, started 37276)>, 1738770012.3252432)}
2025-02-05 23:40:12,432 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:12,540 - stmt_idx: 6, status: success, result: None
2025-02-05 23:40:12,540 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:40:12,540 - 执行后idx: 7, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:12,540 - 
2025-02-05 23:40:12,649 - 
2025-02-05 23:40:12,649 - 执行前idx: 8, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 7: (1, "UPDATE table_0 SET col_1 = 26.8, col_0 = 62.73, col_2 = 'QQfjn', col_3 = 'spWFV' WHERE (id = 2) AND (col_1 = 5.5) AND (col_0 = 80.83)", <Thread(Thread-360, started 4312)>, 1738770012.6493506)}
2025-02-05 23:40:12,753 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:12,864 - stmt_idx: 7, status: success, result: None
2025-02-05 23:40:12,864 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 26.8, col_0 = 62.73, col_2 = 'QQfjn', col_3 = 'spWFV' WHERE (id = 2) AND (col_1 = 5.5) AND (col_0 = 80.83)
2025-02-05 23:40:12,864 - 执行后idx: 8, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:12,864 - 
2025-02-05 23:40:12,974 - 
2025-02-05 23:40:12,974 - 执行前idx: 9, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 8: (1, "SELECT id FROM table_0 WHERE (col_2 = 'hwdcr') AND (col_0 = 65.2) FOR UPDATE", <Thread(Thread-361, started 42532)>, 1738770012.9742582)}
2025-02-05 23:40:13,076 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:13,185 - stmt_idx: 8, status: success, result: None
2025-02-05 23:40:13,185 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (col_2 = 'hwdcr') AND (col_0 = 65.2) FOR UPDATE
2025-02-05 23:40:13,185 - 执行后idx: 9, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:13,185 - 
2025-02-05 23:40:13,297 - 
2025-02-05 23:40:13,298 - 执行前idx: 10, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 9: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-362, started 2072)>, 1738770013.2973638)}
2025-02-05 23:40:13,405 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:13,512 - stmt_idx: 9, status: success, result: None
2025-02-05 23:40:13,512 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:40:13,512 - 执行后idx: 10, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:13,512 - 
2025-02-05 23:40:13,620 - 
2025-02-05 23:40:13,621 - 执行前idx: 11, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 10: (1, 'SELECT id, col_2, col_3, col_762 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-363, started 19560)>, 1738770013.620912)}
2025-02-05 23:40:13,726 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:13,834 - stmt_idx: 10, status: success, result: None
2025-02-05 23:40:13,834 - 成功执行序列中事务1语句: SELECT id, col_2, col_3, col_762 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:40:13,834 - 执行后idx: 11, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:13,834 - 
2025-02-05 23:40:13,945 - 
2025-02-05 23:40:13,945 - 执行前idx: 12, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 11: (1, 'DELETE FROM table_0 WHERE (id = 9)', <Thread(Thread-364, started 44888)>, 1738770013.9450705)}
2025-02-05 23:40:14,050 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:14,160 - stmt_idx: 11, status: success, result: None
2025-02-05 23:40:14,160 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 9)
2025-02-05 23:40:14,160 - 执行后idx: 12, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:14,160 - 
2025-02-05 23:40:14,271 - 
2025-02-05 23:40:14,272 - 执行前idx: 13, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 12: (1, 'DELETE FROM table_0 WHERE (id = 10)', <Thread(Thread-365, started 39840)>, 1738770014.271105)}
2025-02-05 23:40:14,380 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:14,488 - stmt_idx: 12, status: success, result: None
2025-02-05 23:40:14,488 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 10)
2025-02-05 23:40:14,488 - 执行后idx: 13, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:14,488 - 
2025-02-05 23:40:14,595 - 
2025-02-05 23:40:14,596 - 执行前idx: 14, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841), 13: (1, 'SELECT * FROM table_0 WHERE (col_762 IS NULL) FOR UPDATE', <Thread(Thread-366, started 23232)>, 1738770014.5954554)}
2025-02-05 23:40:14,703 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:14,810 - stmt_idx: 13, status: success, result: None
2025-02-05 23:40:14,811 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_762 IS NULL) FOR UPDATE
2025-02-05 23:40:14,811 - 执行后idx: 14, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:14,811 - 
2025-02-05 23:40:14,918 - stmt为None, trx_id: 2, stmt: None
2025-02-05 23:40:14,922 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, started 27656)>, 1738770011.459841)}
2025-02-05 23:40:14,923 - 
2025-02-05 23:40:14,923 - 执行前idx: 17, pending_stmts: {3: (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6", <Thread(Thread-356, stopped 27656)>, 1738770011.459841)}
2025-02-05 23:40:15,026 - stmt_idx: 3, status: success, result: None
2025-02-05 23:40:15,026 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:15,026 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6
2025-02-05 23:40:15,027 - 执行后idx: 17, pending_stmts: {15: (2, 'COMMIT', <Thread(Thread-367, started 32444)>, 1738770015.0277028)}
2025-02-05 23:40:15,027 - 
2025-02-05 23:40:15,130 - 序列遍历完成，开始查看剩余阻塞的语句：{15: (2, 'COMMIT', <Thread(Thread-367, stopped 32444)>, 1738770015.0277028)}
2025-02-05 23:40:15,130 - 
2025-02-05 23:40:15,130 - 执行前idx: 17, pending_stmts: {15: (2, 'COMMIT', <Thread(Thread-367, stopped 32444)>, 1738770015.0277028)}
2025-02-05 23:40:15,238 - stmt_idx: 15, status: success, result: None
2025-02-05 23:40:15,238 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:40:15,238 - 执行后idx: 17, pending_stmts: {}
2025-02-05 23:40:15,238 - 
2025-02-05 23:40:15,349 - 执行序列成功
2025-02-05 23:40:16,120 - is_atomic: True
2025-02-05 23:40:16,120 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:40:16,120 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "SELECT * FROM table_0 WHERE (col_762 IS NULL) AND (col_3 = 'bnoir') AND (col_0 = 26.74) LOCK IN SHARE MODE"), (1, "SELECT * FROM table_0 WHERE (col_3 = 'slich') AND (col_1 = 81.73) AND (col_2 = 'ozvgn') LOCK IN SHARE MODE"), (1, 'SELECT col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 26.8, col_0 = 62.73, col_2 = 'QQfjn', col_3 = 'spWFV' WHERE (id = 2) AND (col_1 = 5.5) AND (col_0 = 80.83)"), (1, "SELECT id FROM table_0 WHERE (col_2 = 'hwdcr') AND (col_0 = 65.2) FOR UPDATE"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (1, 'SELECT id, col_2, col_3, col_762 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, 'DELETE FROM table_0 WHERE (id = 9)'), (1, 'DELETE FROM table_0 WHERE (id = 10)'), (1, 'SELECT * FROM table_0 WHERE (col_762 IS NULL) FOR UPDATE'), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_2 = 'ZREmx' WHERE id BETWEEN 4 AND 6"), (2, 'COMMIT')]
2025-02-05 23:40:16,120 - snapshots: {'before': {'table_0': [(1, 72.66, 90.24, 'rvseo', 'jjauf', None), (2, 80.83, 5.5, 'tlyup', 'vqbhz', None), (3, 65.2, 73.6, 'hwdcr', 'sqkfm', None), (4, 26.74, 77.61, 'mcdes', 'bnoir', None), (5, 99.35, 81.73, 'ozvgn', 'slich', None), (6, 58.38, 31.71, 'xzlbp', 'uomna', None), (7, 72.54, 70.33, 'yvzhr', 'rroww', None), (8, 23.06, 84.76, 'ralid', 'fqsvz', None), (9, 24.29, 6.18, 'zoozx', 'jjhkf', None), (10, 65.56, 13.72, 'cmoyo', 'ukydq', None)]}, 'trx1': {'table_0': [(1, 72.66, 90.24, 'rvseo', 'jjauf', None), (2, 62.73, 26.8, 'QQfjn', 'spWFV', None), (3, 65.2, 73.6, 'hwdcr', 'sqkfm', None), (4, 26.74, 77.61, 'mcdes', 'bnoir', None), (5, 99.35, 81.73, 'ozvgn', 'slich', None), (6, 58.38, 31.71, 'xzlbp', 'uomna', None), (7, 72.54, 70.33, 'yvzhr', 'rroww', None), (8, 23.06, 84.76, 'ralid', 'fqsvz', None)]}, 'trx2': {'table_0': [(1, 72.66, 90.24, 'rvseo', 'jjauf', None), (2, 80.83, 5.5, 'tlyup', 'vqbhz', None), (3, 65.2, 73.6, 'hwdcr', 'sqkfm', None), (4, 26.74, 77.61, 'ZREmx', 'bnoir', None), (5, 99.35, 81.73, 'ZREmx', 'slich', None), (6, 58.38, 31.71, 'ZREmx', 'uomna', None), (7, 72.54, 70.33, 'yvzhr', 'rroww', None), (8, 23.06, 84.76, 'ralid', 'fqsvz', None), (9, 24.29, 6.18, 'zoozx', 'jjhkf', None), (10, 65.56, 13.72, 'cmoyo', 'ukydq', None)]}, 'serial': {'table_0': [(1, 72.66, 90.24, 'rvseo', 'jjauf', None), (2, 62.73, 26.8, 'QQfjn', 'spWFV', None), (3, 65.2, 73.6, 'hwdcr', 'sqkfm', None), (4, 26.74, 77.61, 'ZREmx', 'bnoir', None), (5, 99.35, 81.73, 'ZREmx', 'slich', None), (6, 58.38, 31.71, 'ZREmx', 'uomna', None), (7, 72.54, 70.33, 'yvzhr', 'rroww', None), (8, 23.06, 84.76, 'ralid', 'fqsvz', None)]}}
2025-02-05 23:40:16,120 - 
2025-02-05 23:40:16,132 - iter: 52
2025-02-05 23:40:17,623 - table table_0 has 11 rows
2025-02-05 23:40:17,623 - trx1_start_id: 8
2025-02-05 23:40:17,623 - trx1_end_id: 10
2025-02-05 23:40:17,623 - trx1_exclusive_start_id: 8
2025-02-05 23:40:17,623 - trx1_exclusive_end_id: 8
2025-02-05 23:40:17,624 - trx1_exclusive_ids: [8]
2025-02-05 23:40:17,624 - trx2_start_id: 9
2025-02-05 23:40:17,624 - trx2_end_id: 10
2025-02-05 23:40:17,624 - trx2_exclusive_start_id: 11
2025-02-05 23:40:17,624 - trx2_exclusive_end_id: 10
2025-02-05 23:40:17,624 - trx2_exclusive_ids: []
2025-02-05 23:40:17,624 - intersection_ids: [9, 10]
2025-02-05 23:40:17,624 - res_dict: {'trx1_lock_row_ids': [8, 9, 10], 'trx2_lock_row_ids': [9, 10], 'intersection_row_ids': [9, 10]}
2025-02-05 23:40:17,624 - lock_same_resource: True
2025-02-05 23:40:17,624 - 
2025-02-05 23:40:17,624 - intersection phase1
2025-02-05 23:40:17,628 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=8, is_continuous=True, range_end_idx=10
2025-02-05 23:40:17,629 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:17,629 - params: {'v1': '8', 'v2': '10', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:40:17,631 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=9, is_continuous=True, range_end_idx=10
2025-02-05 23:40:17,633 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:17,633 - params: {'v1': '9', 'v2': '10', 'select_cols': 'id, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:40:17,633 - intersection phase1 end
2025-02-05 23:40:17,633 - 
2025-02-05 23:40:17,633 - intersection phase2
2025-02-05 23:40:17,634 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:40:17,634 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:40:17,634 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:40:17,634 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:40:17,638 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=8, is_continuous=True, range_end_idx=8
2025-02-05 23:40:17,639 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:17,639 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:40:17,641 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=11, is_continuous=True, range_end_idx=10
2025-02-05 23:40:17,642 - 生成连续锁定SQL失败: 找不到从11到10的行
2025-02-05 23:40:17,642 - 生成锁SQL失败: 找不到从11到10的行
2025-02-05 23:40:17,642 - 生成死锁事务序列失败: 找不到从11到10的行
2025-02-05 23:40:17,642 - 
2025-02-05 23:40:17,642 - Error in iteration 52: 找不到从11到10的行
2025-02-05 23:40:17,642 - 
2025-02-05 23:40:17,648 - iter: 53
2025-02-05 23:40:19,188 - table table_0 has 5 rows
2025-02-05 23:40:19,188 - trx1_lock_row_ids: [1, 2, 3, 4, 5]
2025-02-05 23:40:19,188 - trx2_lock_row_ids: [1, 2, 3, 4, 5]
2025-02-05 23:40:19,188 - intersection_row_ids: [1, 2, 3, 4, 5]
2025-02-05 23:40:19,188 - trx1_exclusive_ids: []
2025-02-05 23:40:19,188 - trx2_exclusive_ids: []
2025-02-05 23:40:19,188 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [1, 2, 3, 4, 5], 'intersection_row_ids': [1, 2, 3, 4, 5]}
2025-02-05 23:40:19,188 - lock_same_resource: True
2025-02-05 23:40:19,188 - 
2025-02-05 23:40:19,188 - intersection phase1
2025-02-05 23:40:19,191 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,193 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:40:19,193 - params: {'set_expr': "col_1 = 'OftuA', col_0 = 6.53, col_3 = 79.76, col_2 = 89.89", 'cond': "(col_0 = 3.91) AND (col_1 = 'mlcui')", 'table': 'table_0'}
2025-02-05 23:40:19,196 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,197 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:19,197 - params: {'vals': "NULL, 70.97, 'fFKaP', 19.99, 39.66", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:40:19,200 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,201 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:40:19,201 - params: {'set_expr': "col_0 = 97.38, col_2 = 29.91, col_1 = 'CGPLE', col_3 = 42.51", 'cond': "(col_0 = 62.44) AND (col_2 = 79.3) AND (col_1 = 'hqghk')", 'table': 'table_0'}
2025-02-05 23:40:19,204 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,205 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:40:19,206 - params: {'set_expr': 'col_3 = 74.23, col_2 = 10.39, col_0 = 40.87', 'cond': '(col_3 = 46.75)', 'table': 'table_0'}
2025-02-05 23:40:19,208 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,209 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:19,209 - params: {'vals': "NULL, 59.36, 'YwGuz', 88.61, 60.85", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:40:19,213 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,214 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:19,214 - params: {'vals': "NULL, 50.1, 'SXfWr', 80.48, 92.38", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:40:19,216 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,218 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:19,218 - params: {'set_expr': "col_0 = 88.33, col_3 = 86.25, col_1 = 'ieMJz', col_2 = 25.74", 'v1': '2', 'v2': '2', 'table': 'table_0'}
2025-02-05 23:40:19,222 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,223 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:19,223 - params: {'vals': "NULL, 79.3, 'LMQrq', 80.81, 82.03", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:40:19,228 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,230 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:19,230 - params: {'vals': "NULL, 93.92, 'rkpXo', 52.95, 99.0", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:40:19,234 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,236 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:19,236 - params: {'vals': "NULL, 90.13, 'bsypX', 45.45, 47.91", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:40:19,236 - intersection phase1 end
2025-02-05 23:40:19,236 - 
2025-02-05 23:40:19,236 - intersection phase2
2025-02-05 23:40:19,237 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:40:19,237 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:40:19,237 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:40:19,237 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:40:19,237 - intersection phase2 end
2025-02-05 23:40:19,237 - 
2025-02-05 23:40:19,237 - intersection phase3
2025-02-05 23:40:19,242 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,243 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:19,243 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:40:19,248 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:40:19,249 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:19,249 - params: {'cond': '(id = 2)', 'select_cols': 'id, col_0, col_3', 'table': 'table_0'}
2025-02-05 23:40:19,250 - intersection phase3 end
2025-02-05 23:40:19,250 - 
2025-02-05 23:40:19,250 - 生成死锁事务序列成功如下
2025-02-05 23:40:19,250 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 50.1, 'SXfWr', 80.48, 92.38)"), (1, "UPDATE table_0 SET col_1 = 'OftuA', col_0 = 6.53, col_3 = 79.76, col_2 = 89.89 WHERE (col_0 = 3.91) AND (col_1 = 'mlcui')"), (2, "UPDATE table_0 SET col_0 = 88.33, col_3 = 86.25, col_1 = 'ieMJz', col_2 = 25.74 WHERE id BETWEEN 2 AND 2"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 79.3, 'LMQrq', 80.81, 82.03)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 70.97, 'fFKaP', 19.99, 39.66)"), (1, "UPDATE table_0 SET col_0 = 97.38, col_2 = 29.91, col_1 = 'CGPLE', col_3 = 42.51 WHERE (col_0 = 62.44) AND (col_2 = 79.3) AND (col_1 = 'hqghk')"), (1, 'UPDATE table_0 SET col_3 = 74.23, col_2 = 10.39, col_0 = 40.87 WHERE (col_3 = 46.75)'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 93.92, 'rkpXo', 52.95, 99.0)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.36, 'YwGuz', 88.61, 60.85)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.13, 'bsypX', 45.45, 47.91)"), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_3 FROM table_0 WHERE (id = 2) FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:40:20,798 - 创建事务1连接成功
2025-02-05 23:40:20,799 - 执行事务1语句: BEGIN
2025-02-05 23:40:20,800 - 执行事务1语句: UPDATE table_0 SET col_1 = 'OftuA', col_0 = 6.53, col_3 = 79.76, col_2 = 89.89 WHERE (col_0 = 3.91) AND (col_1 = 'mlcui')
2025-02-05 23:40:20,801 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 70.97, 'fFKaP', 19.99, 39.66)
2025-02-05 23:40:20,802 - 执行事务1语句: UPDATE table_0 SET col_0 = 97.38, col_2 = 29.91, col_1 = 'CGPLE', col_3 = 42.51 WHERE (col_0 = 62.44) AND (col_2 = 79.3) AND (col_1 = 'hqghk')
2025-02-05 23:40:20,803 - 执行事务1语句: UPDATE table_0 SET col_3 = 74.23, col_2 = 10.39, col_0 = 40.87 WHERE (col_3 = 46.75)
2025-02-05 23:40:20,804 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.36, 'YwGuz', 88.61, 60.85)
2025-02-05 23:40:20,804 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:20,807 - 执行事务1语句: COMMIT;
2025-02-05 23:40:20,811 - 执行事务1成功
2025-02-05 23:40:23,441 - 恢复初始状态成功
2025-02-05 23:40:24,246 - 创建事务2连接成功
2025-02-05 23:40:24,247 - 执行事务2语句: BEGIN
2025-02-05 23:40:24,248 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 50.1, 'SXfWr', 80.48, 92.38)
2025-02-05 23:40:24,249 - 执行事务2语句: UPDATE table_0 SET col_0 = 88.33, col_3 = 86.25, col_1 = 'ieMJz', col_2 = 25.74 WHERE id BETWEEN 2 AND 2
2025-02-05 23:40:24,250 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 79.3, 'LMQrq', 80.81, 82.03)
2025-02-05 23:40:24,251 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 93.92, 'rkpXo', 52.95, 99.0)
2025-02-05 23:40:24,251 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.13, 'bsypX', 45.45, 47.91)
2025-02-05 23:40:24,252 - 执行事务2语句: SELECT id, col_0, col_3 FROM table_0 WHERE (id = 2) FOR UPDATE
2025-02-05 23:40:24,255 - 执行事务2语句: COMMIT;
2025-02-05 23:40:24,259 - 执行事务2成功
2025-02-05 23:40:29,192 - 
2025-02-05 23:40:29,192 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 50.1, 'SXfWr', 80.48, 92.38)", <Thread(Thread-368, started 14812)>, 1738770029.1924672)}
2025-02-05 23:40:29,307 - stmt_idx: 2, status: success, result: None
2025-02-05 23:40:29,307 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 50.1, 'SXfWr', 80.48, 92.38)
2025-02-05 23:40:29,307 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:40:29,307 - 
2025-02-05 23:40:29,417 - 
2025-02-05 23:40:29,418 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'OftuA', col_0 = 6.53, col_3 = 79.76, col_2 = 89.89 WHERE (col_0 = 3.91) AND (col_1 = 'mlcui')", <Thread(Thread-369, started 19204)>, 1738770029.417815)}
2025-02-05 23:40:29,525 - stmt_idx: 3, status: success, result: None
2025-02-05 23:40:29,525 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'OftuA', col_0 = 6.53, col_3 = 79.76, col_2 = 89.89 WHERE (col_0 = 3.91) AND (col_1 = 'mlcui')
2025-02-05 23:40:29,525 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:40:29,525 - 
2025-02-05 23:40:29,634 - 
2025-02-05 23:40:29,634 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 88.33, col_3 = 86.25, col_1 = 'ieMJz', col_2 = 25.74 WHERE id BETWEEN 2 AND 2", <Thread(Thread-370, started 35656)>, 1738770029.6343462)}
2025-02-05 23:40:29,741 - stmt_idx: 4, status: success, result: None
2025-02-05 23:40:29,741 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 88.33, col_3 = 86.25, col_1 = 'ieMJz', col_2 = 25.74 WHERE id BETWEEN 2 AND 2
2025-02-05 23:40:29,741 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:40:29,741 - 
2025-02-05 23:40:29,849 - 
2025-02-05 23:40:29,849 - 执行前idx: 6, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 79.3, 'LMQrq', 80.81, 82.03)", <Thread(Thread-371, started 8628)>, 1738770029.8497121)}
2025-02-05 23:40:29,958 - stmt_idx: 5, status: success, result: None
2025-02-05 23:40:29,958 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 79.3, 'LMQrq', 80.81, 82.03)
2025-02-05 23:40:29,958 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:40:29,958 - 
2025-02-05 23:40:30,068 - 
2025-02-05 23:40:30,069 - 执行前idx: 7, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 70.97, 'fFKaP', 19.99, 39.66)", <Thread(Thread-372, started 5108)>, 1738770030.068021)}
2025-02-05 23:40:30,173 - stmt_idx: 6, status: success, result: None
2025-02-05 23:40:30,173 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 70.97, 'fFKaP', 19.99, 39.66)
2025-02-05 23:40:30,173 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:40:30,173 - 
2025-02-05 23:40:30,284 - 
2025-02-05 23:40:30,284 - 执行前idx: 8, pending_stmts: {7: (1, "UPDATE table_0 SET col_0 = 97.38, col_2 = 29.91, col_1 = 'CGPLE', col_3 = 42.51 WHERE (col_0 = 62.44) AND (col_2 = 79.3) AND (col_1 = 'hqghk')", <Thread(Thread-373, started 20372)>, 1738770030.2848513)}
2025-02-05 23:40:30,394 - stmt_idx: 7, status: success, result: None
2025-02-05 23:40:30,394 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 97.38, col_2 = 29.91, col_1 = 'CGPLE', col_3 = 42.51 WHERE (col_0 = 62.44) AND (col_2 = 79.3) AND (col_1 = 'hqghk')
2025-02-05 23:40:30,394 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:40:30,394 - 
2025-02-05 23:40:30,501 - 
2025-02-05 23:40:30,502 - 执行前idx: 9, pending_stmts: {8: (1, 'UPDATE table_0 SET col_3 = 74.23, col_2 = 10.39, col_0 = 40.87 WHERE (col_3 = 46.75)', <Thread(Thread-374, started 18384)>, 1738770030.5016074)}
2025-02-05 23:40:30,614 - stmt_idx: 8, status: success, result: None
2025-02-05 23:40:30,614 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 74.23, col_2 = 10.39, col_0 = 40.87 WHERE (col_3 = 46.75)
2025-02-05 23:40:30,615 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:40:30,615 - 
2025-02-05 23:40:30,721 - 
2025-02-05 23:40:30,722 - 执行前idx: 10, pending_stmts: {9: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 93.92, 'rkpXo', 52.95, 99.0)", <Thread(Thread-375, started 29916)>, 1738770030.7217946)}
2025-02-05 23:40:30,833 - stmt_idx: 9, status: success, result: None
2025-02-05 23:40:30,833 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 93.92, 'rkpXo', 52.95, 99.0)
2025-02-05 23:40:30,833 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:40:30,833 - 
2025-02-05 23:40:30,941 - 
2025-02-05 23:40:30,941 - 执行前idx: 11, pending_stmts: {10: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.36, 'YwGuz', 88.61, 60.85)", <Thread(Thread-376, started 32968)>, 1738770030.9404306)}
2025-02-05 23:40:31,046 - stmt_idx: 10, status: success, result: None
2025-02-05 23:40:31,046 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.36, 'YwGuz', 88.61, 60.85)
2025-02-05 23:40:31,046 - 执行后idx: 11, pending_stmts: {}
2025-02-05 23:40:31,046 - 
2025-02-05 23:40:31,150 - 
2025-02-05 23:40:31,150 - 执行前idx: 12, pending_stmts: {11: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.13, 'bsypX', 45.45, 47.91)", <Thread(Thread-377, started 40336)>, 1738770031.1507533)}
2025-02-05 23:40:31,258 - stmt_idx: 11, status: success, result: None
2025-02-05 23:40:31,258 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.13, 'bsypX', 45.45, 47.91)
2025-02-05 23:40:31,258 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:40:31,258 - 
2025-02-05 23:40:31,368 - 
2025-02-05 23:40:31,369 - 执行前idx: 13, pending_stmts: {12: (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-378, started 39660)>, 1738770031.3682466)}
2025-02-05 23:40:31,475 - stmt_idx: 12, status: success, result: None
2025-02-05 23:40:31,475 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:31,475 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:40:31,475 - 
2025-02-05 23:40:31,586 - 
2025-02-05 23:40:31,587 - 执行前idx: 14, pending_stmts: {13: (2, 'SELECT id, col_0, col_3 FROM table_0 WHERE (id = 2) FOR UPDATE', <Thread(Thread-379, started 15624)>, 1738770031.58619)}
2025-02-05 23:40:31,694 - stmt_idx: 13, status: success, result: None
2025-02-05 23:40:31,694 - 成功执行序列中事务2语句: SELECT id, col_0, col_3 FROM table_0 WHERE (id = 2) FOR UPDATE
2025-02-05 23:40:31,694 - 执行后idx: 14, pending_stmts: {}
2025-02-05 23:40:31,694 - 
2025-02-05 23:40:31,812 - 执行序列成功
2025-02-05 23:40:32,600 - is_atomic: True
2025-02-05 23:40:32,600 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:40:32,600 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 50.1, 'SXfWr', 80.48, 92.38)"), (1, "UPDATE table_0 SET col_1 = 'OftuA', col_0 = 6.53, col_3 = 79.76, col_2 = 89.89 WHERE (col_0 = 3.91) AND (col_1 = 'mlcui')"), (2, "UPDATE table_0 SET col_0 = 88.33, col_3 = 86.25, col_1 = 'ieMJz', col_2 = 25.74 WHERE id BETWEEN 2 AND 2"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 79.3, 'LMQrq', 80.81, 82.03)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 70.97, 'fFKaP', 19.99, 39.66)"), (1, "UPDATE table_0 SET col_0 = 97.38, col_2 = 29.91, col_1 = 'CGPLE', col_3 = 42.51 WHERE (col_0 = 62.44) AND (col_2 = 79.3) AND (col_1 = 'hqghk')"), (1, 'UPDATE table_0 SET col_3 = 74.23, col_2 = 10.39, col_0 = 40.87 WHERE (col_3 = 46.75)'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 93.92, 'rkpXo', 52.95, 99.0)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.36, 'YwGuz', 88.61, 60.85)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.13, 'bsypX', 45.45, 47.91)"), (1, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_3 FROM table_0 WHERE (id = 2) FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:40:32,600 - snapshots: {'before': {'table_0': [(1, 3.91, 'mlcui', 45.35, 13.68), (2, 65.1, 'zzksh', 4.56, 38.49), (3, 62.44, 'hqghk', 79.3, 32.17), (4, 30.91, 'cuxpd', 2.12, 46.75), (5, 16.1, 'dyeqd', 33.06, 51.06)]}, 'trx1': {'table_0': [(1, 6.53, 'OftuA', 89.89, 79.76), (2, 65.1, 'zzksh', 4.56, 38.49), (3, 62.44, 'hqghk', 79.3, 32.17), (4, 40.87, 'cuxpd', 10.39, 74.23), (5, 16.1, 'dyeqd', 33.06, 51.06), (6, 70.97, 'fFKaP', 19.99, 39.66), (7, 59.36, 'YwGuz', 88.61, 60.85)]}, 'trx2': {'table_0': [(1, 3.91, 'mlcui', 45.35, 13.68), (2, 88.33, 'ieMJz', 25.74, 86.25), (3, 62.44, 'hqghk', 79.3, 32.17), (4, 30.91, 'cuxpd', 2.12, 46.75), (5, 16.1, 'dyeqd', 33.06, 51.06), (8, 50.1, 'SXfWr', 80.48, 92.38), (9, 79.3, 'LMQrq', 80.81, 82.03), (10, 93.92, 'rkpXo', 52.95, 99.0), (11, 90.13, 'bsypX', 45.45, 47.91)]}, 'serial': {'table_0': [(1, 6.53, 'OftuA', 89.89, 79.76), (2, 88.33, 'ieMJz', 25.74, 86.25), (3, 62.44, 'hqghk', 79.3, 32.17), (4, 40.87, 'cuxpd', 10.39, 74.23), (5, 16.1, 'dyeqd', 33.06, 51.06), (12, 50.1, 'SXfWr', 80.48, 92.38), (13, 79.3, 'LMQrq', 80.81, 82.03), (14, 70.97, 'fFKaP', 19.99, 39.66), (15, 93.92, 'rkpXo', 52.95, 99.0), (16, 59.36, 'YwGuz', 88.61, 60.85), (17, 90.13, 'bsypX', 45.45, 47.91)]}}
2025-02-05 23:40:32,600 - 
2025-02-05 23:40:32,611 - iter: 54
2025-02-05 23:40:34,512 - table table_0 has 14 rows
2025-02-05 23:40:34,512 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
2025-02-05 23:40:34,512 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
2025-02-05 23:40:34,512 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
2025-02-05 23:40:34,512 - trx1_exclusive_ids: []
2025-02-05 23:40:34,512 - trx2_exclusive_ids: []
2025-02-05 23:40:34,513 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]}
2025-02-05 23:40:34,513 - lock_same_resource: True
2025-02-05 23:40:34,513 - 
2025-02-05 23:40:34,513 - intersection phase1
2025-02-05 23:40:34,518 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,521 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:40:34,522 - params: {'set_expr': "col_0 = 'QSsXM', col_1 = 'ERKUo', col_2 = 'xUuOC'", 'cond': "(id = 1) AND (col_1 = 'xzmec') AND (col_2 = 'strgk') AND (col_0 = 'mzdpw')", 'table': 'table_0'}
2025-02-05 23:40:34,529 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,532 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:34,533 - params: {'set_expr': "col_0 = 'mUaVN', col_1 = 'oeyDy', col_2 = 'ZbkYO'", 'v1': '2', 'v2': '2', 'table': 'table_0'}
2025-02-05 23:40:34,539 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,541 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:34,541 - params: {'set_expr': "col_2 = 'LaZIc', col_0 = 'EBDhU'", 'v1': '3', 'v2': '3', 'table': 'table_0'}
2025-02-05 23:40:34,547 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,549 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:34,549 - params: {'set_expr': "col_0 = 'rrMqD', col_1 = 'PwTIs', col_2 = 'MgeKD'", 'v1': '4', 'v2': '4', 'table': 'table_0'}
2025-02-05 23:40:34,554 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,555 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:34,557 - params: {'vals': "NULL, 'YzZcM', 'XZnID', 'jkVJV'", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,563 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,565 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:34,565 - params: {'set_expr': "col_1 = 'hEzRq', col_0 = 'QNpzj', col_2 = 'RqwVT'", 'v1': '6', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:40:34,572 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,576 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:34,576 - params: {'vals': "NULL, 'mPGdF', 'MuqrA', 'NdMOE'", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,582 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,585 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:40:34,585 - params: {'set_expr': "col_2 = 'filyt', col_0 = 'gyrOG'", 'cond': '(id = 8)', 'table': 'table_0'}
2025-02-05 23:40:34,593 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,596 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:34,597 - params: {'vals': "NULL, 'pzVXb', 'LYvhA', 'prUhL'", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,604 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,606 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:40:34,606 - params: {'set_expr': "col_0 = 'xfjXZ', col_1 = 'KgcBM', col_2 = 'ZFjzE'", 'cond': "(col_2 = 'cucfc')", 'table': 'table_0'}
2025-02-05 23:40:34,613 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,615 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:34,615 - params: {'vals': "NULL, 'AKrvS', 'tMkJZ', 'DOBOD'", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,622 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,626 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:34,627 - params: {'set_expr': "col_0 = 'wiUSZ', col_2 = 'ymZqG'", 'v1': '12', 'v2': '12', 'table': 'table_0'}
2025-02-05 23:40:34,632 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,635 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:40:34,635 - params: {'vals': "NULL, 'RMaEp', 'vLMEh', 'wjXQt'", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,642 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,645 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:34,645 - params: {'set_expr': "col_0 = 'KaIbK'", 'v1': '14', 'v2': '14', 'table': 'table_0'}
2025-02-05 23:40:34,650 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,653 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:34,653 - params: {'v1': '1', 'v2': '1', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:40:34,659 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,662 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:34,662 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,667 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,671 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,671 - params: {'cond': "(col_2 = 'amvoe')", 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,676 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,679 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,680 - params: {'cond': "(id = 4) AND (col_1 = 'fcuqu') AND (col_2 = 'kazij')", 'select_cols': 'col_0, col_1', 'table': 'table_0'}
2025-02-05 23:40:34,686 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,688 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:34,689 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:40:34,695 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,697 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:34,697 - params: {'v1': '6', 'v2': '6', 'select_cols': 'col_0, col_1', 'table': 'table_0'}
2025-02-05 23:40:34,703 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,706 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,706 - params: {'cond': '(id = 7)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:40:34,711 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,713 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,713 - params: {'cond': '(id = 8)', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,717 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,720 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,720 - params: {'cond': "(id = 9) AND (col_2 = 'mkesn')", 'select_cols': 'col_1', 'table': 'table_0'}
2025-02-05 23:40:34,726 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,728 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:34,729 - params: {'v1': '10', 'v2': '10', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,735 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,738 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,738 - params: {'cond': '(id = 11)', 'select_cols': 'col_2', 'table': 'table_0'}
2025-02-05 23:40:34,745 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,748 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:34,748 - params: {'v1': '12', 'v2': '12', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,754 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,756 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,756 - params: {'cond': "(col_0 = 'yyyix')", 'select_cols': 'col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,762 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,764 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,764 - params: {'cond': "(col_1 = 'lkatm')", 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,764 - intersection phase1 end
2025-02-05 23:40:34,764 - 
2025-02-05 23:40:34,764 - intersection phase2
2025-02-05 23:40:34,765 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:40:34,765 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:40:34,765 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:40:34,765 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:40:34,765 - intersection phase2 end
2025-02-05 23:40:34,765 - 
2025-02-05 23:40:34,765 - intersection phase3
2025-02-05 23:40:34,771 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,773 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:40:34,773 - params: {'cond': '(id = 11)', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 23:40:34,780 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:40:34,782 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:40:34,782 - params: {'set_expr': "col_1 = 'ThAPg', col_2 = 'oAkex', col_0 = 'mVeet'", 'cond': "(id = 6) AND (col_1 = 'akcer') AND (col_0 = 'jeyok')", 'table': 'table_0'}
2025-02-05 23:40:34,783 - intersection phase3 end
2025-02-05 23:40:34,783 - 
2025-02-05 23:40:34,783 - 生成死锁事务序列成功如下
2025-02-05 23:40:34,783 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 'QSsXM', col_1 = 'ERKUo', col_2 = 'xUuOC' WHERE (id = 1) AND (col_1 = 'xzmec') AND (col_2 = 'strgk') AND (col_0 = 'mzdpw')"), (1, "UPDATE table_0 SET col_0 = 'mUaVN', col_1 = 'oeyDy', col_2 = 'ZbkYO' WHERE id BETWEEN 2 AND 2"), (1, "UPDATE table_0 SET col_2 = 'LaZIc', col_0 = 'EBDhU' WHERE id BETWEEN 3 AND 3"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_0 = 'rrMqD', col_1 = 'PwTIs', col_2 = 'MgeKD' WHERE id BETWEEN 4 AND 4"), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'amvoe') LOCK IN SHARE MODE"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'YzZcM', 'XZnID', 'jkVJV')"), (2, "SELECT col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_1 = 'fcuqu') AND (col_2 = 'kazij') LOCK IN SHARE MODE"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_1 = 'hEzRq', col_0 = 'QNpzj', col_2 = 'RqwVT' WHERE id BETWEEN 6 AND 6"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'mPGdF', 'MuqrA', 'NdMOE')"), (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 'filyt', col_0 = 'gyrOG' WHERE (id = 8)"), (2, "SELECT col_1 FROM table_0 WHERE (id = 9) AND (col_2 = 'mkesn') LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'pzVXb', 'LYvhA', 'prUhL')"), (1, "UPDATE table_0 SET col_0 = 'xfjXZ', col_1 = 'KgcBM', col_2 = 'ZFjzE' WHERE (col_2 = 'cucfc')"), (2, 'SELECT col_2 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'AKrvS', 'tMkJZ', 'DOBOD')"), (1, "UPDATE table_0 SET col_0 = 'wiUSZ', col_2 = 'ymZqG' WHERE id BETWEEN 12 AND 12"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'RMaEp', 'vLMEh', 'wjXQt')"), (2, "SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'yyyix') LOCK IN SHARE MODE"), (1, "UPDATE table_0 SET col_0 = 'KaIbK' WHERE id BETWEEN 14 AND 14"), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'lkatm') LOCK IN SHARE MODE"), (2, "UPDATE table_0 SET col_1 = 'ThAPg', col_2 = 'oAkex', col_0 = 'mVeet' WHERE (id = 6) AND (col_1 = 'akcer') AND (col_0 = 'jeyok')"), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 11) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:40:36,415 - 创建事务1连接成功
2025-02-05 23:40:36,416 - 执行事务1语句: BEGIN
2025-02-05 23:40:36,417 - 执行事务1语句: UPDATE table_0 SET col_0 = 'QSsXM', col_1 = 'ERKUo', col_2 = 'xUuOC' WHERE (id = 1) AND (col_1 = 'xzmec') AND (col_2 = 'strgk') AND (col_0 = 'mzdpw')
2025-02-05 23:40:36,417 - 执行事务1语句: UPDATE table_0 SET col_0 = 'mUaVN', col_1 = 'oeyDy', col_2 = 'ZbkYO' WHERE id BETWEEN 2 AND 2
2025-02-05 23:40:36,418 - 执行事务1语句: UPDATE table_0 SET col_2 = 'LaZIc', col_0 = 'EBDhU' WHERE id BETWEEN 3 AND 3
2025-02-05 23:40:36,419 - 执行事务1语句: UPDATE table_0 SET col_0 = 'rrMqD', col_1 = 'PwTIs', col_2 = 'MgeKD' WHERE id BETWEEN 4 AND 4
2025-02-05 23:40:36,420 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'YzZcM', 'XZnID', 'jkVJV')
2025-02-05 23:40:36,420 - 执行事务1语句: UPDATE table_0 SET col_1 = 'hEzRq', col_0 = 'QNpzj', col_2 = 'RqwVT' WHERE id BETWEEN 6 AND 6
2025-02-05 23:40:36,421 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'mPGdF', 'MuqrA', 'NdMOE')
2025-02-05 23:40:36,422 - 执行事务1语句: UPDATE table_0 SET col_2 = 'filyt', col_0 = 'gyrOG' WHERE (id = 8)
2025-02-05 23:40:36,423 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'pzVXb', 'LYvhA', 'prUhL')
2025-02-05 23:40:36,423 - 执行事务1语句: UPDATE table_0 SET col_0 = 'xfjXZ', col_1 = 'KgcBM', col_2 = 'ZFjzE' WHERE (col_2 = 'cucfc')
2025-02-05 23:40:36,424 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'AKrvS', 'tMkJZ', 'DOBOD')
2025-02-05 23:40:36,425 - 执行事务1语句: UPDATE table_0 SET col_0 = 'wiUSZ', col_2 = 'ymZqG' WHERE id BETWEEN 12 AND 12
2025-02-05 23:40:36,425 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'RMaEp', 'vLMEh', 'wjXQt')
2025-02-05 23:40:36,426 - 执行事务1语句: UPDATE table_0 SET col_0 = 'KaIbK' WHERE id BETWEEN 14 AND 14
2025-02-05 23:40:36,427 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 11) FOR UPDATE
2025-02-05 23:40:36,430 - 执行事务1语句: COMMIT;
2025-02-05 23:40:36,434 - 执行事务1成功
2025-02-05 23:40:39,069 - 恢复初始状态成功
2025-02-05 23:40:39,831 - 创建事务2连接成功
2025-02-05 23:40:39,832 - 执行事务2语句: BEGIN
2025-02-05 23:40:39,833 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:39,834 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:40:39,834 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'amvoe') LOCK IN SHARE MODE
2025-02-05 23:40:39,835 - 执行事务2语句: SELECT col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_1 = 'fcuqu') AND (col_2 = 'kazij') LOCK IN SHARE MODE
2025-02-05 23:40:39,835 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:40:39,836 - 执行事务2语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:40:39,837 - 执行事务2语句: SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 23:40:39,837 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 23:40:39,838 - 执行事务2语句: SELECT col_1 FROM table_0 WHERE (id = 9) AND (col_2 = 'mkesn') LOCK IN SHARE MODE
2025-02-05 23:40:39,839 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 23:40:39,840 - 执行事务2语句: SELECT col_2 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE
2025-02-05 23:40:39,840 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:40:39,841 - 执行事务2语句: SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'yyyix') LOCK IN SHARE MODE
2025-02-05 23:40:39,842 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'lkatm') LOCK IN SHARE MODE
2025-02-05 23:40:39,843 - 执行事务2语句: UPDATE table_0 SET col_1 = 'ThAPg', col_2 = 'oAkex', col_0 = 'mVeet' WHERE (id = 6) AND (col_1 = 'akcer') AND (col_0 = 'jeyok')
2025-02-05 23:40:39,844 - 执行事务2语句: COMMIT;
2025-02-05 23:40:39,850 - 执行事务2成功
2025-02-05 23:40:44,924 - 
2025-02-05 23:40:44,924 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_0 = 'QSsXM', col_1 = 'ERKUo', col_2 = 'xUuOC' WHERE (id = 1) AND (col_1 = 'xzmec') AND (col_2 = 'strgk') AND (col_0 = 'mzdpw')", <Thread(Thread-380, started 44336)>, 1738770044.92414)}
2025-02-05 23:40:45,024 - stmt_idx: 2, status: success, result: None
2025-02-05 23:40:45,024 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'QSsXM', col_1 = 'ERKUo', col_2 = 'xUuOC' WHERE (id = 1) AND (col_1 = 'xzmec') AND (col_2 = 'strgk') AND (col_0 = 'mzdpw')
2025-02-05 23:40:45,024 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:40:45,024 - 
2025-02-05 23:40:45,131 - 
2025-02-05 23:40:45,131 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_0 = 'mUaVN', col_1 = 'oeyDy', col_2 = 'ZbkYO' WHERE id BETWEEN 2 AND 2", <Thread(Thread-381, started 41840)>, 1738770045.1311677)}
2025-02-05 23:40:45,240 - stmt_idx: 3, status: success, result: None
2025-02-05 23:40:45,240 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'mUaVN', col_1 = 'oeyDy', col_2 = 'ZbkYO' WHERE id BETWEEN 2 AND 2
2025-02-05 23:40:45,240 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:40:45,240 - 
2025-02-05 23:40:45,349 - 
2025-02-05 23:40:45,350 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_2 = 'LaZIc', col_0 = 'EBDhU' WHERE id BETWEEN 3 AND 3", <Thread(Thread-382, started 31820)>, 1738770045.3497572)}
2025-02-05 23:40:45,457 - stmt_idx: 4, status: success, result: None
2025-02-05 23:40:45,457 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'LaZIc', col_0 = 'EBDhU' WHERE id BETWEEN 3 AND 3
2025-02-05 23:40:45,457 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:40:45,457 - 
2025-02-05 23:40:45,567 - 
2025-02-05 23:40:45,568 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:45,675 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:45,675 - 执行后idx: 6, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:45,675 - 
2025-02-05 23:40:45,782 - 
2025-02-05 23:40:45,783 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 7: (1, "UPDATE table_0 SET col_0 = 'rrMqD', col_1 = 'PwTIs', col_2 = 'MgeKD' WHERE id BETWEEN 4 AND 4", <Thread(Thread-384, started 392)>, 1738770045.7826157)}
2025-02-05 23:40:45,888 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:45,998 - stmt_idx: 7, status: success, result: None
2025-02-05 23:40:45,998 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'rrMqD', col_1 = 'PwTIs', col_2 = 'MgeKD' WHERE id BETWEEN 4 AND 4
2025-02-05 23:40:45,998 - 执行后idx: 8, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:45,998 - 
2025-02-05 23:40:46,105 - 
2025-02-05 23:40:46,106 - 执行前idx: 10, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 9: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'YzZcM', 'XZnID', 'jkVJV')", <Thread(Thread-385, started 4004)>, 1738770046.1054986)}
2025-02-05 23:40:46,215 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:46,323 - stmt_idx: 9, status: success, result: None
2025-02-05 23:40:46,323 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'YzZcM', 'XZnID', 'jkVJV')
2025-02-05 23:40:46,323 - 执行后idx: 10, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:46,323 - 
2025-02-05 23:40:46,431 - 
2025-02-05 23:40:46,431 - 执行前idx: 15, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 14: (1, "UPDATE table_0 SET col_1 = 'hEzRq', col_0 = 'QNpzj', col_2 = 'RqwVT' WHERE id BETWEEN 6 AND 6", <Thread(Thread-386, started 44824)>, 1738770046.431971)}
2025-02-05 23:40:46,541 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:46,650 - stmt_idx: 14, status: success, result: None
2025-02-05 23:40:46,650 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'hEzRq', col_0 = 'QNpzj', col_2 = 'RqwVT' WHERE id BETWEEN 6 AND 6
2025-02-05 23:40:46,650 - 执行后idx: 15, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:46,651 - 
2025-02-05 23:40:46,753 - 
2025-02-05 23:40:46,754 - 执行前idx: 16, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 15: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'mPGdF', 'MuqrA', 'NdMOE')", <Thread(Thread-387, started 18936)>, 1738770046.7532816)}
2025-02-05 23:40:46,858 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:46,965 - stmt_idx: 15, status: success, result: None
2025-02-05 23:40:46,965 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'mPGdF', 'MuqrA', 'NdMOE')
2025-02-05 23:40:46,965 - 执行后idx: 16, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:46,965 - 
2025-02-05 23:40:47,073 - 
2025-02-05 23:40:47,074 - 执行前idx: 18, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 17: (1, "UPDATE table_0 SET col_2 = 'filyt', col_0 = 'gyrOG' WHERE (id = 8)", <Thread(Thread-388, started 31456)>, 1738770047.0737147)}
2025-02-05 23:40:47,176 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:47,286 - stmt_idx: 17, status: success, result: None
2025-02-05 23:40:47,286 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'filyt', col_0 = 'gyrOG' WHERE (id = 8)
2025-02-05 23:40:47,286 - 执行后idx: 18, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:47,286 - 
2025-02-05 23:40:47,392 - 
2025-02-05 23:40:47,393 - 执行前idx: 21, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 20: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'pzVXb', 'LYvhA', 'prUhL')", <Thread(Thread-389, started 37080)>, 1738770047.3926592)}
2025-02-05 23:40:47,499 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:47,605 - stmt_idx: 20, status: success, result: None
2025-02-05 23:40:47,605 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'pzVXb', 'LYvhA', 'prUhL')
2025-02-05 23:40:47,605 - 执行后idx: 21, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:47,605 - 
2025-02-05 23:40:47,712 - 
2025-02-05 23:40:47,713 - 执行前idx: 22, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 21: (1, "UPDATE table_0 SET col_0 = 'xfjXZ', col_1 = 'KgcBM', col_2 = 'ZFjzE' WHERE (col_2 = 'cucfc')", <Thread(Thread-390, started 40420)>, 1738770047.7120013)}
2025-02-05 23:40:47,820 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:47,925 - stmt_idx: 21, status: success, result: None
2025-02-05 23:40:47,925 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'xfjXZ', col_1 = 'KgcBM', col_2 = 'ZFjzE' WHERE (col_2 = 'cucfc')
2025-02-05 23:40:47,925 - 执行后idx: 22, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:47,925 - 
2025-02-05 23:40:48,034 - 
2025-02-05 23:40:48,035 - 执行前idx: 25, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 24: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'AKrvS', 'tMkJZ', 'DOBOD')", <Thread(Thread-391, started 23420)>, 1738770048.0345185)}
2025-02-05 23:40:48,142 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:48,251 - stmt_idx: 24, status: success, result: None
2025-02-05 23:40:48,251 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'AKrvS', 'tMkJZ', 'DOBOD')
2025-02-05 23:40:48,251 - 执行后idx: 25, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:48,251 - 
2025-02-05 23:40:48,357 - 
2025-02-05 23:40:48,357 - 执行前idx: 26, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 25: (1, "UPDATE table_0 SET col_0 = 'wiUSZ', col_2 = 'ymZqG' WHERE id BETWEEN 12 AND 12", <Thread(Thread-392, started 24048)>, 1738770048.3573387)}
2025-02-05 23:40:48,472 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:48,580 - stmt_idx: 25, status: success, result: None
2025-02-05 23:40:48,580 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'wiUSZ', col_2 = 'ymZqG' WHERE id BETWEEN 12 AND 12
2025-02-05 23:40:48,580 - 执行后idx: 26, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:48,580 - 
2025-02-05 23:40:48,683 - 
2025-02-05 23:40:48,684 - 执行前idx: 27, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 26: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'RMaEp', 'vLMEh', 'wjXQt')", <Thread(Thread-393, started 2348)>, 1738770048.683372)}
2025-02-05 23:40:48,792 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:48,898 - stmt_idx: 26, status: success, result: None
2025-02-05 23:40:48,898 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'RMaEp', 'vLMEh', 'wjXQt')
2025-02-05 23:40:48,898 - 执行后idx: 27, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:48,898 - 
2025-02-05 23:40:49,006 - 
2025-02-05 23:40:49,006 - 执行前idx: 29, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 28: (1, "UPDATE table_0 SET col_0 = 'KaIbK' WHERE id BETWEEN 14 AND 14", <Thread(Thread-394, started 14952)>, 1738770049.006096)}
2025-02-05 23:40:49,112 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:49,221 - stmt_idx: 28, status: success, result: None
2025-02-05 23:40:49,221 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'KaIbK' WHERE id BETWEEN 14 AND 14
2025-02-05 23:40:49,221 - 执行后idx: 29, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:49,221 - 
2025-02-05 23:40:49,328 - 
2025-02-05 23:40:49,328 - 执行前idx: 32, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996), 31: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 11) FOR UPDATE', <Thread(Thread-395, started 35004)>, 1738770049.328509)}
2025-02-05 23:40:49,436 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:49,542 - stmt_idx: 31, status: success, result: None
2025-02-05 23:40:49,542 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 11) FOR UPDATE
2025-02-05 23:40:49,542 - 执行后idx: 32, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:49,542 - 
2025-02-05 23:40:49,652 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, started 36968)>, 1738770045.5674996)}
2025-02-05 23:40:49,652 - 
2025-02-05 23:40:49,652 - 执行前idx: 34, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-383, stopped 36968)>, 1738770045.5674996)}
2025-02-05 23:40:49,759 - stmt_idx: 5, status: success, result: None
2025-02-05 23:40:49,759 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:49,759 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:40:49,764 - 执行后idx: 34, pending_stmts: {6: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-396, stopped 7824)>, 1738770049.7608564), 8: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'amvoe') LOCK IN SHARE MODE", <Thread(Thread-397, started 17924)>, 1738770049.7614956), 10: (2, "SELECT col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_1 = 'fcuqu') AND (col_2 = 'kazij') LOCK IN SHARE MODE", <Thread(Thread-398, started 40724)>, 1738770049.7614956), 11: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-399, started 40092)>, 1738770049.7619987), 12: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-400, started 20160)>, 1738770049.7619987), 13: (2, 'SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', <Thread(Thread-401, started 39548)>, 1738770049.76251), 16: (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-402, started 42744)>, 1738770049.76251), 18: (2, "SELECT col_1 FROM table_0 WHERE (id = 9) AND (col_2 = 'mkesn') LOCK IN SHARE MODE", <Thread(Thread-403, started 31032)>, 1738770049.7630131), 19: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-404, started 38312)>, 1738770049.7630131), 22: (2, 'SELECT col_2 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE', <Thread(Thread-405, started 4820)>, 1738770049.7630131), 23: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-406, started 440)>, 1738770049.7635398), 27: (2, "SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'yyyix') LOCK IN SHARE MODE", <Thread(Thread-407, started 21480)>, 1738770049.7635398), 29: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'lkatm') LOCK IN SHARE MODE", <Thread(Thread-408, started 37460)>, 1738770049.7640545), 30: (2, "UPDATE table_0 SET col_1 = 'ThAPg', col_2 = 'oAkex', col_0 = 'mVeet' WHERE (id = 6) AND (col_1 = 'akcer') AND (col_0 = 'jeyok')", <Thread(Thread-409, started 32860)>, 1738770049.7640545), 32: (2, 'COMMIT', <Thread(Thread-410, started 27852)>, 1738770049.7640545)}
2025-02-05 23:40:49,764 - 
2025-02-05 23:40:49,867 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-396, stopped 7824)>, 1738770049.7608564), 8: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'amvoe') LOCK IN SHARE MODE", <Thread(Thread-397, stopped 17924)>, 1738770049.7614956), 10: (2, "SELECT col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_1 = 'fcuqu') AND (col_2 = 'kazij') LOCK IN SHARE MODE", <Thread(Thread-398, stopped 40724)>, 1738770049.7614956), 11: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-399, stopped 40092)>, 1738770049.7619987), 12: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-400, stopped 20160)>, 1738770049.7619987), 13: (2, 'SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', <Thread(Thread-401, stopped 39548)>, 1738770049.76251), 16: (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-402, stopped 42744)>, 1738770049.76251), 18: (2, "SELECT col_1 FROM table_0 WHERE (id = 9) AND (col_2 = 'mkesn') LOCK IN SHARE MODE", <Thread(Thread-403, stopped 31032)>, 1738770049.7630131), 19: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-404, stopped 38312)>, 1738770049.7630131), 22: (2, 'SELECT col_2 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE', <Thread(Thread-405, stopped 4820)>, 1738770049.7630131), 23: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-406, stopped 440)>, 1738770049.7635398), 27: (2, "SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'yyyix') LOCK IN SHARE MODE", <Thread(Thread-407, stopped 21480)>, 1738770049.7635398), 29: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'lkatm') LOCK IN SHARE MODE", <Thread(Thread-408, stopped 37460)>, 1738770049.7640545), 30: (2, "UPDATE table_0 SET col_1 = 'ThAPg', col_2 = 'oAkex', col_0 = 'mVeet' WHERE (id = 6) AND (col_1 = 'akcer') AND (col_0 = 'jeyok')", <Thread(Thread-409, stopped 32860)>, 1738770049.7640545), 32: (2, 'COMMIT', <Thread(Thread-410, stopped 27852)>, 1738770049.7640545)}
2025-02-05 23:40:49,867 - 
2025-02-05 23:40:49,867 - 执行前idx: 34, pending_stmts: {6: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-396, stopped 7824)>, 1738770049.7608564), 8: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'amvoe') LOCK IN SHARE MODE", <Thread(Thread-397, stopped 17924)>, 1738770049.7614956), 10: (2, "SELECT col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_1 = 'fcuqu') AND (col_2 = 'kazij') LOCK IN SHARE MODE", <Thread(Thread-398, stopped 40724)>, 1738770049.7614956), 11: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-399, stopped 40092)>, 1738770049.7619987), 12: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-400, stopped 20160)>, 1738770049.7619987), 13: (2, 'SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', <Thread(Thread-401, stopped 39548)>, 1738770049.76251), 16: (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE', <Thread(Thread-402, stopped 42744)>, 1738770049.76251), 18: (2, "SELECT col_1 FROM table_0 WHERE (id = 9) AND (col_2 = 'mkesn') LOCK IN SHARE MODE", <Thread(Thread-403, stopped 31032)>, 1738770049.7630131), 19: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-404, stopped 38312)>, 1738770049.7630131), 22: (2, 'SELECT col_2 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE', <Thread(Thread-405, stopped 4820)>, 1738770049.7630131), 23: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-406, stopped 440)>, 1738770049.7635398), 27: (2, "SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'yyyix') LOCK IN SHARE MODE", <Thread(Thread-407, stopped 21480)>, 1738770049.7635398), 29: (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'lkatm') LOCK IN SHARE MODE", <Thread(Thread-408, stopped 37460)>, 1738770049.7640545), 30: (2, "UPDATE table_0 SET col_1 = 'ThAPg', col_2 = 'oAkex', col_0 = 'mVeet' WHERE (id = 6) AND (col_1 = 'akcer') AND (col_0 = 'jeyok')", <Thread(Thread-409, stopped 32860)>, 1738770049.7640545), 32: (2, 'COMMIT', <Thread(Thread-410, stopped 27852)>, 1738770049.7640545)}
2025-02-05 23:40:49,970 - stmt_idx: 6, status: success, result: None
2025-02-05 23:40:49,971 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:40:50,080 - stmt_idx: 8, status: success, result: None
2025-02-05 23:40:50,080 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'amvoe') LOCK IN SHARE MODE
2025-02-05 23:40:50,185 - stmt_idx: 10, status: success, result: None
2025-02-05 23:40:50,185 - 成功执行序列中事务2语句: SELECT col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_1 = 'fcuqu') AND (col_2 = 'kazij') LOCK IN SHARE MODE
2025-02-05 23:40:50,295 - stmt_idx: 11, status: success, result: None
2025-02-05 23:40:50,296 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:40:50,400 - stmt_idx: 12, status: success, result: None
2025-02-05 23:40:50,400 - 成功执行序列中事务2语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:40:50,509 - stmt_idx: 13, status: success, result: None
2025-02-05 23:40:50,509 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 23:40:50,615 - stmt_idx: 16, status: success, result: None
2025-02-05 23:40:50,615 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE
2025-02-05 23:40:50,722 - stmt_idx: 18, status: success, result: None
2025-02-05 23:40:50,722 - 成功执行序列中事务2语句: SELECT col_1 FROM table_0 WHERE (id = 9) AND (col_2 = 'mkesn') LOCK IN SHARE MODE
2025-02-05 23:40:50,828 - stmt_idx: 19, status: success, result: None
2025-02-05 23:40:50,828 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 23:40:50,937 - stmt_idx: 22, status: success, result: None
2025-02-05 23:40:50,937 - 成功执行序列中事务2语句: SELECT col_2 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE
2025-02-05 23:40:51,045 - stmt_idx: 23, status: success, result: None
2025-02-05 23:40:51,045 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:40:51,153 - stmt_idx: 27, status: success, result: None
2025-02-05 23:40:51,153 - 成功执行序列中事务2语句: SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'yyyix') LOCK IN SHARE MODE
2025-02-05 23:40:51,262 - stmt_idx: 29, status: success, result: None
2025-02-05 23:40:51,262 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'lkatm') LOCK IN SHARE MODE
2025-02-05 23:40:51,370 - stmt_idx: 30, status: success, result: None
2025-02-05 23:40:51,370 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'ThAPg', col_2 = 'oAkex', col_0 = 'mVeet' WHERE (id = 6) AND (col_1 = 'akcer') AND (col_0 = 'jeyok')
2025-02-05 23:40:51,478 - stmt_idx: 32, status: success, result: None
2025-02-05 23:40:51,478 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:40:51,479 - 执行后idx: 34, pending_stmts: {}
2025-02-05 23:40:51,479 - 
2025-02-05 23:40:51,586 - 执行序列成功
2025-02-05 23:40:52,374 - is_atomic: True
2025-02-05 23:40:52,374 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:40:52,374 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_0 = 'QSsXM', col_1 = 'ERKUo', col_2 = 'xUuOC' WHERE (id = 1) AND (col_1 = 'xzmec') AND (col_2 = 'strgk') AND (col_0 = 'mzdpw')"), (1, "UPDATE table_0 SET col_0 = 'mUaVN', col_1 = 'oeyDy', col_2 = 'ZbkYO' WHERE id BETWEEN 2 AND 2"), (1, "UPDATE table_0 SET col_2 = 'LaZIc', col_0 = 'EBDhU' WHERE id BETWEEN 3 AND 3"), (1, "UPDATE table_0 SET col_0 = 'rrMqD', col_1 = 'PwTIs', col_2 = 'MgeKD' WHERE id BETWEEN 4 AND 4"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'YzZcM', 'XZnID', 'jkVJV')"), (1, "UPDATE table_0 SET col_1 = 'hEzRq', col_0 = 'QNpzj', col_2 = 'RqwVT' WHERE id BETWEEN 6 AND 6"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'mPGdF', 'MuqrA', 'NdMOE')"), (1, "UPDATE table_0 SET col_2 = 'filyt', col_0 = 'gyrOG' WHERE (id = 8)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'pzVXb', 'LYvhA', 'prUhL')"), (1, "UPDATE table_0 SET col_0 = 'xfjXZ', col_1 = 'KgcBM', col_2 = 'ZFjzE' WHERE (col_2 = 'cucfc')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'AKrvS', 'tMkJZ', 'DOBOD')"), (1, "UPDATE table_0 SET col_0 = 'wiUSZ', col_2 = 'ymZqG' WHERE id BETWEEN 12 AND 12"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 'RMaEp', 'vLMEh', 'wjXQt')"), (1, "UPDATE table_0 SET col_0 = 'KaIbK' WHERE id BETWEEN 14 AND 14"), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 11) FOR UPDATE'), (1, 'COMMIT'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 'amvoe') LOCK IN SHARE MODE"), (2, "SELECT col_0, col_1 FROM table_0 WHERE (id = 4) AND (col_1 = 'fcuqu') AND (col_2 = 'kazij') LOCK IN SHARE MODE"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (2, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) LOCK IN SHARE MODE'), (2, "SELECT col_1 FROM table_0 WHERE (id = 9) AND (col_2 = 'mkesn') LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (2, 'SELECT col_2 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (2, "SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_0 = 'yyyix') LOCK IN SHARE MODE"), (2, "SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 'lkatm') LOCK IN SHARE MODE"), (2, "UPDATE table_0 SET col_1 = 'ThAPg', col_2 = 'oAkex', col_0 = 'mVeet' WHERE (id = 6) AND (col_1 = 'akcer') AND (col_0 = 'jeyok')"), (2, 'COMMIT')]
2025-02-05 23:40:52,374 - snapshots: {'before': {'table_0': [(1, 'mzdpw', 'xzmec', 'strgk'), (2, 'mzpha', 'vnldq', 'gwijb'), (3, 'smdqy', 'kpwrj', 'amvoe'), (4, 'mdoas', 'fcuqu', 'kazij'), (5, 'qrsir', 'fwget', 'yzyto'), (6, 'jeyok', 'akcer', 'gofrd'), (7, 'ppeqj', 'jslee', 'egece'), (8, 'tcxtw', 'bspjx', 'regyj'), (9, 'rsuwg', 'qhfkw', 'mkesn'), (10, 'drjpe', 'uvmyv', 'cucfc'), (11, 'szjan', 'ujumv', 'nbxdk'), (12, 'gchmd', 'svtvb', 'rntvt'), (13, 'yyyix', 'bcmhz', 'mtkzq'), (14, 'njlsn', 'lkatm', 'jbigp')]}, 'trx1': {'table_0': [(1, 'QSsXM', 'ERKUo', 'xUuOC'), (2, 'mUaVN', 'oeyDy', 'ZbkYO'), (3, 'EBDhU', 'kpwrj', 'LaZIc'), (4, 'rrMqD', 'PwTIs', 'MgeKD'), (5, 'qrsir', 'fwget', 'yzyto'), (6, 'QNpzj', 'hEzRq', 'RqwVT'), (7, 'ppeqj', 'jslee', 'egece'), (8, 'gyrOG', 'bspjx', 'filyt'), (9, 'rsuwg', 'qhfkw', 'mkesn'), (10, 'xfjXZ', 'KgcBM', 'ZFjzE'), (11, 'szjan', 'ujumv', 'nbxdk'), (12, 'wiUSZ', 'svtvb', 'ymZqG'), (13, 'yyyix', 'bcmhz', 'mtkzq'), (14, 'KaIbK', 'lkatm', 'jbigp'), (15, 'YzZcM', 'XZnID', 'jkVJV'), (16, 'mPGdF', 'MuqrA', 'NdMOE'), (17, 'pzVXb', 'LYvhA', 'prUhL'), (18, 'AKrvS', 'tMkJZ', 'DOBOD'), (19, 'RMaEp', 'vLMEh', 'wjXQt')]}, 'trx2': {'table_0': [(1, 'mzdpw', 'xzmec', 'strgk'), (2, 'mzpha', 'vnldq', 'gwijb'), (3, 'smdqy', 'kpwrj', 'amvoe'), (4, 'mdoas', 'fcuqu', 'kazij'), (5, 'qrsir', 'fwget', 'yzyto'), (6, 'mVeet', 'ThAPg', 'oAkex'), (7, 'ppeqj', 'jslee', 'egece'), (8, 'tcxtw', 'bspjx', 'regyj'), (9, 'rsuwg', 'qhfkw', 'mkesn'), (10, 'drjpe', 'uvmyv', 'cucfc'), (11, 'szjan', 'ujumv', 'nbxdk'), (12, 'gchmd', 'svtvb', 'rntvt'), (13, 'yyyix', 'bcmhz', 'mtkzq'), (14, 'njlsn', 'lkatm', 'jbigp')]}, 'serial': {'table_0': [(1, 'QSsXM', 'ERKUo', 'xUuOC'), (2, 'mUaVN', 'oeyDy', 'ZbkYO'), (3, 'EBDhU', 'kpwrj', 'LaZIc'), (4, 'rrMqD', 'PwTIs', 'MgeKD'), (5, 'qrsir', 'fwget', 'yzyto'), (6, 'QNpzj', 'hEzRq', 'RqwVT'), (7, 'ppeqj', 'jslee', 'egece'), (8, 'gyrOG', 'bspjx', 'filyt'), (9, 'rsuwg', 'qhfkw', 'mkesn'), (10, 'xfjXZ', 'KgcBM', 'ZFjzE'), (11, 'szjan', 'ujumv', 'nbxdk'), (12, 'wiUSZ', 'svtvb', 'ymZqG'), (13, 'yyyix', 'bcmhz', 'mtkzq'), (14, 'KaIbK', 'lkatm', 'jbigp'), (20, 'YzZcM', 'XZnID', 'jkVJV'), (21, 'mPGdF', 'MuqrA', 'NdMOE'), (22, 'pzVXb', 'LYvhA', 'prUhL'), (23, 'AKrvS', 'tMkJZ', 'DOBOD'), (24, 'RMaEp', 'vLMEh', 'wjXQt')]}}
2025-02-05 23:40:52,374 - 
2025-02-05 23:40:52,386 - iter: 55
2025-02-05 23:40:53,896 - table table_0 has 14 rows
2025-02-05 23:40:53,896 - res_dict: {'trx1_lock_row_ids': [4, 5], 'trx2_lock_row_ids': [10, 11, 12], 'intersection_row_ids': []}
2025-02-05 23:40:53,896 - lock_same_resource: False
2025-02-05 23:40:53,896 - 
2025-02-05 23:40:53,896 - non intersection phase1
2025-02-05 23:40:53,897 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:40:53,897 - 事务2在第一阶段自己加的锁: S
2025-02-05 23:40:53,897 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:40:53,897 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:40:53,900 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:40:53,901 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:53,901 - params: {'v1': '4', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:40:53,905 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=10, is_continuous=True, range_end_idx=12
2025-02-05 23:40:53,906 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:53,906 - params: {'v1': '10', 'v2': '12', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:40:53,906 - non intersection phase1 end
2025-02-05 23:40:53,907 - 
2025-02-05 23:40:53,907 - non intersection phase2
2025-02-05 23:40:53,910 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=12, is_continuous=True, range_end_idx=12
2025-02-05 23:40:53,912 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:40:53,912 - params: {'set_expr': "col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw'", 'v1': '12', 'v2': '12', 'table': 'table_0'}
2025-02-05 23:40:53,915 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:40:53,916 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:40:53,916 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_1, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:40:53,917 - non intersection phase2 end
2025-02-05 23:40:53,917 - 
2025-02-05 23:40:53,917 - 生成死锁事务序列成功如下
2025-02-05 23:40:53,917 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 12 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw' WHERE id BETWEEN 12 AND 12"), (2, 'SELECT id, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:40:55,483 - 创建事务1连接成功
2025-02-05 23:40:55,485 - 执行事务1语句: BEGIN
2025-02-05 23:40:55,486 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:40:55,487 - 执行事务1语句: UPDATE table_0 SET col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw' WHERE id BETWEEN 12 AND 12
2025-02-05 23:40:55,489 - 执行事务1语句: COMMIT;
2025-02-05 23:40:55,494 - 执行事务1成功
2025-02-05 23:40:58,125 - 恢复初始状态成功
2025-02-05 23:40:58,891 - 创建事务2连接成功
2025-02-05 23:40:58,893 - 执行事务2语句: BEGIN
2025-02-05 23:40:58,894 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 12 LOCK IN SHARE MODE
2025-02-05 23:40:58,895 - 执行事务2语句: SELECT id, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:40:58,896 - 执行事务2语句: COMMIT;
2025-02-05 23:40:58,900 - 执行事务2成功
2025-02-05 23:41:03,858 - 
2025-02-05 23:41:03,859 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-411, started 17424)>, 1738770063.8587878)}
2025-02-05 23:41:03,967 - stmt_idx: 2, status: success, result: None
2025-02-05 23:41:03,967 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:41:03,967 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:41:03,967 - 
2025-02-05 23:41:04,076 - 
2025-02-05 23:41:04,077 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 12 LOCK IN SHARE MODE', <Thread(Thread-412, started 44568)>, 1738770064.076593)}
2025-02-05 23:41:04,184 - stmt_idx: 3, status: success, result: None
2025-02-05 23:41:04,184 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 12 LOCK IN SHARE MODE
2025-02-05 23:41:04,184 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:41:04,184 - 
2025-02-05 23:41:04,295 - 
2025-02-05 23:41:04,296 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw' WHERE id BETWEEN 12 AND 12", <Thread(Thread-413, started 27924)>, 1738770064.2952392)}
2025-02-05 23:41:04,403 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw' WHERE id BETWEEN 12 AND 12
2025-02-05 23:41:04,403 - 执行后idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw' WHERE id BETWEEN 12 AND 12", <Thread(Thread-413, started 27924)>, 1738770064.2952392)}
2025-02-05 23:41:04,404 - 
2025-02-05 23:41:04,513 - 
2025-02-05 23:41:04,514 - 执行前idx: 6, pending_stmts: {4: (1, "UPDATE table_0 SET col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw' WHERE id BETWEEN 12 AND 12", <Thread(Thread-413, started 27924)>, 1738770064.2952392), 5: (2, 'SELECT id, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-414, started 39768)>, 1738770064.5136642)}
2025-02-05 23:41:04,517 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw' WHERE id BETWEEN 12 AND 12
2025-02-05 23:41:04,623 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:41:04,623 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_2 = 'sWYXA', col_0 = 31.14, col_4 = 'tGfpw' WHERE id BETWEEN 12 AND 12
2025-02-05 23:41:04,623 - 错误: dictionary changed size during iteration
2025-02-05 23:41:04,627 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-414, stopped 39768)>, 1738770064.5136642)}
2025-02-05 23:41:04,627 - 
2025-02-05 23:41:04,627 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT id, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-414, stopped 39768)>, 1738770064.5136642)}
2025-02-05 23:41:04,732 - stmt_idx: 5, status: success, result: None
2025-02-05 23:41:04,732 - 成功执行序列中事务2语句: SELECT id, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:41:04,732 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:41:04,732 - 
2025-02-05 23:41:04,838 - 执行序列成功
2025-02-05 23:41:05,610 - is_atomic: True
2025-02-05 23:41:05,610 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:41:05,610 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 10 AND 12 LOCK IN SHARE MODE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, 'SELECT id, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE')]
2025-02-05 23:41:05,610 - snapshots: {'before': {'table_0': [(1, 37.82, 'iiuox', 'aarqi', 84, 'vxcoz'), (2, 61.96, 'znqdb', 'uqpij', 82, 'lesrl'), (3, 9.47, 'oadtq', 'zuquw', 99, 'mhxae'), (4, 13.36, 'smleq', 'oghbj', 17, 'enfnx'), (5, 58.91, 'jdopb', 'duabc', 85, 'aqwap'), (6, 35.4, 'wlxhj', 'jhzca', 78, 'lffal'), (7, 61.25, 'ykhxv', 'lrupd', 43, 'uzqus'), (8, 39.68, 'qxxui', 'nzleb', 65, 'ctlag'), (9, 76.68, 'qfxxd', 'ofokf', 76, 'axlzi'), (10, 55.82, 'jwphr', 'eedni', 99, 'juyxf'), (11, 84.08, 'wgnyo', 'rlmac', 79, 'fwzdg'), (12, 91.61, 'cnvkm', 'hhsti', 98, 'njtvr'), (13, 62.06, 'qckts', 'faxhf', 75, 'fvggk'), (14, 33.9, 'irkow', 'afkwq', 6, 'upnyk')]}, 'trx1': {'table_0': [(1, 37.82, 'iiuox', 'aarqi', 84, 'vxcoz'), (2, 61.96, 'znqdb', 'uqpij', 82, 'lesrl'), (3, 9.47, 'oadtq', 'zuquw', 99, 'mhxae'), (4, 13.36, 'smleq', 'oghbj', 17, 'enfnx'), (5, 58.91, 'jdopb', 'duabc', 85, 'aqwap'), (6, 35.4, 'wlxhj', 'jhzca', 78, 'lffal'), (7, 61.25, 'ykhxv', 'lrupd', 43, 'uzqus'), (8, 39.68, 'qxxui', 'nzleb', 65, 'ctlag'), (9, 76.68, 'qfxxd', 'ofokf', 76, 'axlzi'), (10, 55.82, 'jwphr', 'eedni', 99, 'juyxf'), (11, 84.08, 'wgnyo', 'rlmac', 79, 'fwzdg'), (12, 31.14, 'cnvkm', 'sWYXA', 98, 'tGfpw'), (13, 62.06, 'qckts', 'faxhf', 75, 'fvggk'), (14, 33.9, 'irkow', 'afkwq', 6, 'upnyk')]}, 'trx2': {'table_0': [(1, 37.82, 'iiuox', 'aarqi', 84, 'vxcoz'), (2, 61.96, 'znqdb', 'uqpij', 82, 'lesrl'), (3, 9.47, 'oadtq', 'zuquw', 99, 'mhxae'), (4, 13.36, 'smleq', 'oghbj', 17, 'enfnx'), (5, 58.91, 'jdopb', 'duabc', 85, 'aqwap'), (6, 35.4, 'wlxhj', 'jhzca', 78, 'lffal'), (7, 61.25, 'ykhxv', 'lrupd', 43, 'uzqus'), (8, 39.68, 'qxxui', 'nzleb', 65, 'ctlag'), (9, 76.68, 'qfxxd', 'ofokf', 76, 'axlzi'), (10, 55.82, 'jwphr', 'eedni', 99, 'juyxf'), (11, 84.08, 'wgnyo', 'rlmac', 79, 'fwzdg'), (12, 91.61, 'cnvkm', 'hhsti', 98, 'njtvr'), (13, 62.06, 'qckts', 'faxhf', 75, 'fvggk'), (14, 33.9, 'irkow', 'afkwq', 6, 'upnyk')]}, 'serial': {'table_0': [(1, 37.82, 'iiuox', 'aarqi', 84, 'vxcoz'), (2, 61.96, 'znqdb', 'uqpij', 82, 'lesrl'), (3, 9.47, 'oadtq', 'zuquw', 99, 'mhxae'), (4, 13.36, 'smleq', 'oghbj', 17, 'enfnx'), (5, 58.91, 'jdopb', 'duabc', 85, 'aqwap'), (6, 35.4, 'wlxhj', 'jhzca', 78, 'lffal'), (7, 61.25, 'ykhxv', 'lrupd', 43, 'uzqus'), (8, 39.68, 'qxxui', 'nzleb', 65, 'ctlag'), (9, 76.68, 'qfxxd', 'ofokf', 76, 'axlzi'), (10, 55.82, 'jwphr', 'eedni', 99, 'juyxf'), (11, 84.08, 'wgnyo', 'rlmac', 79, 'fwzdg'), (12, 91.61, 'cnvkm', 'hhsti', 98, 'njtvr'), (13, 62.06, 'qckts', 'faxhf', 75, 'fvggk'), (14, 33.9, 'irkow', 'afkwq', 6, 'upnyk')]}}
2025-02-05 23:41:05,610 - 
2025-02-05 23:41:05,623 - iter: 56
2025-02-05 23:41:07,130 - table table_0 has 13 rows
2025-02-05 23:41:07,131 - trx1_start_id: 9
2025-02-05 23:41:07,131 - trx1_end_id: 9
2025-02-05 23:41:07,131 - trx1_exclusive_start_id: 9
2025-02-05 23:41:07,131 - trx1_exclusive_end_id: 8
2025-02-05 23:41:07,131 - trx1_exclusive_ids: []
2025-02-05 23:41:07,131 - trx2_start_id: 9
2025-02-05 23:41:07,131 - trx2_end_id: 9
2025-02-05 23:41:07,131 - trx2_exclusive_start_id: 10
2025-02-05 23:41:07,131 - trx2_exclusive_end_id: 9
2025-02-05 23:41:07,131 - trx2_exclusive_ids: []
2025-02-05 23:41:07,131 - intersection_ids: [9]
2025-02-05 23:41:07,131 - res_dict: {'trx1_lock_row_ids': [9], 'trx2_lock_row_ids': [9], 'intersection_row_ids': [9]}
2025-02-05 23:41:07,131 - lock_same_resource: True
2025-02-05 23:41:07,131 - 
2025-02-05 23:41:07,131 - intersection phase1
2025-02-05 23:41:07,135 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 23:41:07,136 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:41:07,136 - params: {'set_expr': "col_0 = 55.68, col_1 = 'bMgme', col_2 = 47.75, col_3 = 'jqVnz', col_4 = 62", 'v1': '9', 'v2': '9', 'table': 'table_0'}
2025-02-05 23:41:07,139 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 23:41:07,141 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:41:07,141 - params: {'set_expr': "col_3 = 'HHGxY', col_0 = 65.9, col_2 = 29.57", 'v1': '9', 'v2': '9', 'table': 'table_0'}
2025-02-05 23:41:07,141 - intersection phase1 end
2025-02-05 23:41:07,141 - 
2025-02-05 23:41:07,141 - intersection phase2
2025-02-05 23:41:07,142 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:41:07,142 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:41:07,142 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:41:07,142 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:41:07,145 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=9, is_continuous=True, range_end_idx=8
2025-02-05 23:41:07,146 - 生成连续锁定SQL失败: 找不到从9到8的行
2025-02-05 23:41:07,146 - 生成锁SQL失败: 找不到从9到8的行
2025-02-05 23:41:07,146 - 生成死锁事务序列失败: 找不到从9到8的行
2025-02-05 23:41:07,146 - 
2025-02-05 23:41:07,146 - Error in iteration 56: 找不到从9到8的行
2025-02-05 23:41:07,146 - 
2025-02-05 23:41:07,153 - iter: 57
2025-02-05 23:41:08,650 - table table_0 has 13 rows
2025-02-05 23:41:08,650 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [12], 'intersection_row_ids': []}
2025-02-05 23:41:08,650 - lock_same_resource: False
2025-02-05 23:41:08,650 - 
2025-02-05 23:41:08,651 - non intersection phase1
2025-02-05 23:41:08,651 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:41:08,651 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:41:08,651 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:41:08,651 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 23:41:08,654 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=10
2025-02-05 23:41:08,655 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:08,655 - params: {'v1': '1', 'v2': '10', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:41:08,658 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:41:08,661 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:41:08,661 - params: {'set_expr': 'col_1 = 11.5', 'cond': "(id = 12) AND (col_0 = 39.83) AND (col_1 = 60.88) AND (col_2 = 'otadm')", 'table': 'table_0'}
2025-02-05 23:41:08,661 - non intersection phase1 end
2025-02-05 23:41:08,661 - 
2025-02-05 23:41:08,661 - non intersection phase2
2025-02-05 23:41:08,665 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:41:08,666 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:08,666 - params: {'v1': '12', 'v2': '12', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:41:08,669 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-05 23:41:08,671 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:41:08,671 - params: {'set_expr': 'col_0 = 57.41', 'v1': '2', 'v2': '3', 'table': 'table_0'}
2025-02-05 23:41:08,671 - non intersection phase2 end
2025-02-05 23:41:08,671 - 
2025-02-05 23:41:08,671 - 生成死锁事务序列成功如下
2025-02-05 23:41:08,671 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_1 = 11.5 WHERE (id = 12) AND (col_0 = 39.83) AND (col_1 = 60.88) AND (col_2 = 'otadm')"), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE'), (2, 'UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:41:10,219 - 创建事务1连接成功
2025-02-05 23:41:10,221 - 执行事务1语句: BEGIN
2025-02-05 23:41:10,222 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE
2025-02-05 23:41:10,223 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-05 23:41:10,223 - 执行事务1语句: COMMIT;
2025-02-05 23:41:10,227 - 执行事务1成功
2025-02-05 23:41:12,804 - 恢复初始状态成功
2025-02-05 23:41:13,566 - 创建事务2连接成功
2025-02-05 23:41:13,568 - 执行事务2语句: BEGIN
2025-02-05 23:41:13,569 - 执行事务2语句: UPDATE table_0 SET col_1 = 11.5 WHERE (id = 12) AND (col_0 = 39.83) AND (col_1 = 60.88) AND (col_2 = 'otadm')
2025-02-05 23:41:13,569 - 执行事务2语句: UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3
2025-02-05 23:41:13,571 - 执行事务2语句: COMMIT;
2025-02-05 23:41:13,576 - 执行事务2成功
2025-02-05 23:41:18,451 - 
2025-02-05 23:41:18,451 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_1 = 11.5 WHERE (id = 12) AND (col_0 = 39.83) AND (col_1 = 60.88) AND (col_2 = 'otadm')", <Thread(Thread-415, started 4092)>, 1738770078.4516637)}
2025-02-05 23:41:18,553 - stmt_idx: 2, status: success, result: None
2025-02-05 23:41:18,553 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 11.5 WHERE (id = 12) AND (col_0 = 39.83) AND (col_1 = 60.88) AND (col_2 = 'otadm')
2025-02-05 23:41:18,553 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:41:18,553 - 
2025-02-05 23:41:18,659 - 
2025-02-05 23:41:18,660 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE', <Thread(Thread-416, started 36792)>, 1738770078.6595137)}
2025-02-05 23:41:18,761 - stmt_idx: 3, status: success, result: None
2025-02-05 23:41:18,761 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE
2025-02-05 23:41:18,761 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:41:18,761 - 
2025-02-05 23:41:18,867 - 
2025-02-05 23:41:18,868 - 执行前idx: 5, pending_stmts: {4: (2, 'UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3', <Thread(Thread-417, started 17808)>, 1738770078.867026)}
2025-02-05 23:41:18,971 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3
2025-02-05 23:41:18,972 - 执行后idx: 5, pending_stmts: {4: (2, 'UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3', <Thread(Thread-417, started 17808)>, 1738770078.867026)}
2025-02-05 23:41:18,972 - 
2025-02-05 23:41:19,076 - 
2025-02-05 23:41:19,078 - 执行前idx: 6, pending_stmts: {4: (2, 'UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3', <Thread(Thread-417, started 17808)>, 1738770078.867026), 5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE', <Thread(Thread-418, started 26664)>, 1738770079.0769372)}
2025-02-05 23:41:19,186 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3
2025-02-05 23:41:19,293 - stmt_idx: 5, status: success, result: None
2025-02-05 23:41:19,293 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-05 23:41:19,293 - 执行后idx: 6, pending_stmts: {4: (2, 'UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3', <Thread(Thread-417, started 17808)>, 1738770078.867026)}
2025-02-05 23:41:19,294 - 
2025-02-05 23:41:19,402 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, 'UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3', <Thread(Thread-417, started 17808)>, 1738770078.867026)}
2025-02-05 23:41:19,403 - 
2025-02-05 23:41:19,403 - 执行前idx: 8, pending_stmts: {4: (2, 'UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3', <Thread(Thread-417, stopped 17808)>, 1738770078.867026)}
2025-02-05 23:41:19,507 - stmt_idx: 4, status: success, result: None
2025-02-05 23:41:19,507 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3
2025-02-05 23:41:19,507 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3
2025-02-05 23:41:19,508 - 执行后idx: 8, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-419, started 20876)>, 1738770079.5087798)}
2025-02-05 23:41:19,508 - 
2025-02-05 23:41:19,613 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, 'COMMIT', <Thread(Thread-419, stopped 20876)>, 1738770079.5087798)}
2025-02-05 23:41:19,613 - 
2025-02-05 23:41:19,613 - 执行前idx: 8, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-419, stopped 20876)>, 1738770079.5087798)}
2025-02-05 23:41:19,714 - stmt_idx: 7, status: success, result: None
2025-02-05 23:41:19,714 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:41:19,714 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:41:19,714 - 
2025-02-05 23:41:19,823 - 执行序列成功
2025-02-05 23:41:20,601 - is_atomic: True
2025-02-05 23:41:20,601 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:41:20,601 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_1 = 11.5 WHERE (id = 12) AND (col_0 = 39.83) AND (col_1 = 60.88) AND (col_2 = 'otadm')"), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (1, 'COMMIT'), (2, 'UPDATE table_0 SET col_0 = 57.41 WHERE id BETWEEN 2 AND 3'), (2, 'COMMIT')]
2025-02-05 23:41:20,601 - snapshots: {'before': {'table_0': [(1, 8.9, 35.23, 'oiyfo'), (2, 4.24, 64.94, 'wnrnp'), (3, 88.61, 61.37, 'fiaqv'), (4, 7.27, 16.32, 'rwnmd'), (5, 22.36, 44.31, 'ekoxo'), (6, 73.38, 19.24, 'dblij'), (7, 9.87, 38.53, 'snxwt'), (8, 41.87, 34.78, 'wkxuh'), (9, 7.29, 54.89, 'nvwxb'), (10, 2.9, 50.07, 'tdyxg'), (11, 98.12, 85.13, 'erxjv'), (12, 39.83, 60.88, 'otadm'), (13, 79.82, 67.92, 'sxjvh')]}, 'trx1': {'table_0': [(1, 8.9, 35.23, 'oiyfo'), (2, 4.24, 64.94, 'wnrnp'), (3, 88.61, 61.37, 'fiaqv'), (4, 7.27, 16.32, 'rwnmd'), (5, 22.36, 44.31, 'ekoxo'), (6, 73.38, 19.24, 'dblij'), (7, 9.87, 38.53, 'snxwt'), (8, 41.87, 34.78, 'wkxuh'), (9, 7.29, 54.89, 'nvwxb'), (10, 2.9, 50.07, 'tdyxg'), (11, 98.12, 85.13, 'erxjv'), (12, 39.83, 60.88, 'otadm'), (13, 79.82, 67.92, 'sxjvh')]}, 'trx2': {'table_0': [(1, 8.9, 35.23, 'oiyfo'), (2, 57.41, 64.94, 'wnrnp'), (3, 57.41, 61.37, 'fiaqv'), (4, 7.27, 16.32, 'rwnmd'), (5, 22.36, 44.31, 'ekoxo'), (6, 73.38, 19.24, 'dblij'), (7, 9.87, 38.53, 'snxwt'), (8, 41.87, 34.78, 'wkxuh'), (9, 7.29, 54.89, 'nvwxb'), (10, 2.9, 50.07, 'tdyxg'), (11, 98.12, 85.13, 'erxjv'), (12, 39.83, 60.88, 'otadm'), (13, 79.82, 67.92, 'sxjvh')]}, 'serial': {'table_0': [(1, 8.9, 35.23, 'oiyfo'), (2, 57.41, 64.94, 'wnrnp'), (3, 57.41, 61.37, 'fiaqv'), (4, 7.27, 16.32, 'rwnmd'), (5, 22.36, 44.31, 'ekoxo'), (6, 73.38, 19.24, 'dblij'), (7, 9.87, 38.53, 'snxwt'), (8, 41.87, 34.78, 'wkxuh'), (9, 7.29, 54.89, 'nvwxb'), (10, 2.9, 50.07, 'tdyxg'), (11, 98.12, 85.13, 'erxjv'), (12, 39.83, 60.88, 'otadm'), (13, 79.82, 67.92, 'sxjvh')]}}
2025-02-05 23:41:20,601 - 
2025-02-05 23:41:20,611 - iter: 58
2025-02-05 23:41:22,187 - table table_0 has 7 rows
2025-02-05 23:41:22,187 - trx1_lock_row_ids: [1, 2, 4, 5, 6]
2025-02-05 23:41:22,187 - trx2_lock_row_ids: [2, 5]
2025-02-05 23:41:22,188 - intersection_row_ids: [2, 5]
2025-02-05 23:41:22,188 - trx1_exclusive_ids: [1, 4, 6]
2025-02-05 23:41:22,188 - trx2_exclusive_ids: []
2025-02-05 23:41:22,188 - res_dict: {'trx1_lock_row_ids': [1, 2, 4, 5, 6], 'trx2_lock_row_ids': [2, 5], 'intersection_row_ids': [2, 5]}
2025-02-05 23:41:22,188 - lock_same_resource: True
2025-02-05 23:41:22,188 - 
2025-02-05 23:41:22,188 - intersection phase1
2025-02-05 23:41:22,191 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:41:22,192 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:41:22,193 - params: {'cond': '(id = 2)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:41:22,195 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:41:22,196 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:41:22,196 - params: {'cond': '(id = 5)', 'select_cols': 'id, col_402', 'table': 'table_0'}
2025-02-05 23:41:22,200 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:41:22,201 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:22,201 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:41:22,204 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:41:22,205 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:22,205 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:41:22,205 - intersection phase1 end
2025-02-05 23:41:22,206 - 
2025-02-05 23:41:22,206 - intersection phase2
2025-02-05 23:41:22,207 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:41:22,207 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:41:22,207 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:41:22,207 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:41:22,210 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:41:22,211 - needed_params: {'cond', 'table'}
2025-02-05 23:41:22,211 - params: {'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:41:22,216 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:41:22,217 - needed_params: {'cond', 'table'}
2025-02-05 23:41:22,217 - params: {'cond': '(col_0 = 5.51) AND (col_402 IS NULL)', 'table': 'table_0'}
2025-02-05 23:41:22,220 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:41:22,221 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:41:22,221 - params: {'set_expr': "col_402 = 'hADiZ'", 'cond': '(id = 6) AND (col_402 IS NULL)', 'table': 'table_0'}
2025-02-05 23:41:22,222 - intersection phase2 end
2025-02-05 23:41:22,222 - 
2025-02-05 23:41:22,222 - intersection phase3
2025-02-05 23:41:22,226 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:41:22,227 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:41:22,227 - params: {'cond': '(id = 5)', 'select_cols': 'col_402', 'table': 'table_0'}
2025-02-05 23:41:22,228 - intersection phase3 end
2025-02-05 23:41:22,228 - 
2025-02-05 23:41:22,228 - 生成死锁事务序列成功如下
2025-02-05 23:41:22,228 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT id, col_402 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, 'DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)'), (1, "UPDATE table_0 SET col_402 = 'hADiZ' WHERE (id = 6) AND (col_402 IS NULL)"), (2, None), (1, 'SELECT col_402 FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:41:23,809 - 创建事务1连接成功
2025-02-05 23:41:23,811 - 执行事务1语句: BEGIN
2025-02-05 23:41:23,812 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:41:23,813 - 执行事务1语句: SELECT id, col_402 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:41:23,813 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 23:41:23,814 - 执行事务1语句: DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)
2025-02-05 23:41:23,815 - 执行事务1语句: UPDATE table_0 SET col_402 = 'hADiZ' WHERE (id = 6) AND (col_402 IS NULL)
2025-02-05 23:41:23,815 - 执行事务1语句: SELECT col_402 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 23:41:23,818 - 执行事务1语句: COMMIT;
2025-02-05 23:41:23,822 - 执行事务1成功
2025-02-05 23:41:26,451 - 恢复初始状态成功
2025-02-05 23:41:27,225 - 创建事务2连接成功
2025-02-05 23:41:27,227 - 执行事务2语句: BEGIN
2025-02-05 23:41:27,228 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:41:27,229 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:41:27,230 - 执行事务2语句: COMMIT;
2025-02-05 23:41:27,234 - 执行事务2成功
2025-02-05 23:41:32,231 - 
2025-02-05 23:41:32,231 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-420, started 42100)>, 1738770092.2312355)}
2025-02-05 23:41:32,337 - stmt_idx: 2, status: success, result: None
2025-02-05 23:41:32,337 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:41:32,337 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:41:32,337 - 
2025-02-05 23:41:32,449 - 
2025-02-05 23:41:32,449 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-421, started 36284)>, 1738770092.4495523)}
2025-02-05 23:41:32,552 - stmt_idx: 3, status: success, result: None
2025-02-05 23:41:32,553 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:41:32,553 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:41:32,553 - 
2025-02-05 23:41:32,661 - 
2025-02-05 23:41:32,661 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_402 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-422, started 6156)>, 1738770092.6610327)}
2025-02-05 23:41:32,767 - stmt_idx: 4, status: success, result: None
2025-02-05 23:41:32,767 - 成功执行序列中事务1语句: SELECT id, col_402 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:41:32,767 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:41:32,767 - 
2025-02-05 23:41:32,875 - 
2025-02-05 23:41:32,875 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-423, started 36680)>, 1738770092.8751383)}
2025-02-05 23:41:32,980 - stmt_idx: 5, status: success, result: None
2025-02-05 23:41:32,980 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:41:32,980 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:41:32,980 - 
2025-02-05 23:41:33,087 - 
2025-02-05 23:41:33,088 - 执行前idx: 7, pending_stmts: {6: (1, 'DELETE FROM table_0 WHERE (id = 1)', <Thread(Thread-424, started 43380)>, 1738770093.0874329)}
2025-02-05 23:41:33,193 - stmt_idx: 6, status: success, result: None
2025-02-05 23:41:33,193 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 23:41:33,193 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:41:33,193 - 
2025-02-05 23:41:33,304 - 
2025-02-05 23:41:33,305 - 执行前idx: 8, pending_stmts: {7: (1, 'DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)', <Thread(Thread-425, started 43336)>, 1738770093.3049588)}
2025-02-05 23:41:33,413 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)
2025-02-05 23:41:33,414 - 执行后idx: 8, pending_stmts: {7: (1, 'DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)', <Thread(Thread-425, started 43336)>, 1738770093.3049588)}
2025-02-05 23:41:33,414 - 
2025-02-05 23:41:33,520 - stmt为None, trx_id: 2, stmt: None
2025-02-05 23:41:33,523 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)', <Thread(Thread-425, started 43336)>, 1738770093.3049588)}
2025-02-05 23:41:33,523 - 
2025-02-05 23:41:33,523 - 执行前idx: 13, pending_stmts: {7: (1, 'DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)', <Thread(Thread-425, stopped 43336)>, 1738770093.3049588)}
2025-02-05 23:41:33,631 - stmt_idx: 7, status: success, result: None
2025-02-05 23:41:33,631 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)
2025-02-05 23:41:33,631 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)
2025-02-05 23:41:33,632 - 执行后idx: 13, pending_stmts: {8: (1, "UPDATE table_0 SET col_402 = 'hADiZ' WHERE (id = 6) AND (col_402 IS NULL)", <Thread(Thread-426, started 41308)>, 1738770093.6317213), 10: (1, 'SELECT col_402 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-427, started 22272)>, 1738770093.632814), 11: (1, 'COMMIT', <Thread(Thread-428, started 43440)>, 1738770093.632814)}
2025-02-05 23:41:33,632 - 
2025-02-05 23:41:33,734 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (1, "UPDATE table_0 SET col_402 = 'hADiZ' WHERE (id = 6) AND (col_402 IS NULL)", <Thread(Thread-426, stopped 41308)>, 1738770093.6317213), 10: (1, 'SELECT col_402 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-427, stopped 22272)>, 1738770093.632814), 11: (1, 'COMMIT', <Thread(Thread-428, stopped 43440)>, 1738770093.632814)}
2025-02-05 23:41:33,734 - 
2025-02-05 23:41:33,734 - 执行前idx: 13, pending_stmts: {8: (1, "UPDATE table_0 SET col_402 = 'hADiZ' WHERE (id = 6) AND (col_402 IS NULL)", <Thread(Thread-426, stopped 41308)>, 1738770093.6317213), 10: (1, 'SELECT col_402 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-427, stopped 22272)>, 1738770093.632814), 11: (1, 'COMMIT', <Thread(Thread-428, stopped 43440)>, 1738770093.632814)}
2025-02-05 23:41:33,842 - stmt_idx: 8, status: success, result: None
2025-02-05 23:41:33,842 - 成功执行序列中事务1语句: UPDATE table_0 SET col_402 = 'hADiZ' WHERE (id = 6) AND (col_402 IS NULL)
2025-02-05 23:41:33,951 - stmt_idx: 10, status: success, result: None
2025-02-05 23:41:33,951 - 成功执行序列中事务1语句: SELECT col_402 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 23:41:34,057 - stmt_idx: 11, status: success, result: None
2025-02-05 23:41:34,057 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:41:34,057 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:41:34,058 - 
2025-02-05 23:41:34,165 - 执行序列成功
2025-02-05 23:41:34,955 - is_atomic: True
2025-02-05 23:41:34,955 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:41:34,955 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'SELECT id, col_402 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (2, 'COMMIT'), (1, 'DELETE FROM table_0 WHERE (col_0 = 5.51) AND (col_402 IS NULL)'), (1, "UPDATE table_0 SET col_402 = 'hADiZ' WHERE (id = 6) AND (col_402 IS NULL)"), (1, 'SELECT col_402 FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 23:41:34,955 - snapshots: {'before': {'table_0': [(1, 98.89, None), (2, 7.46, None), (3, 62.81, None), (4, 5.51, None), (5, 64.62, None), (6, 34.89, None), (7, 54.38, None)]}, 'trx1': {'table_0': [(2, 7.46, None), (3, 62.81, None), (4, 5.51, None), (5, 64.62, None), (6, 34.89, 'hADiZ'), (7, 54.38, None)]}, 'trx2': {'table_0': [(1, 98.89, None), (2, 7.46, None), (3, 62.81, None), (4, 5.51, None), (5, 64.62, None), (6, 34.89, None), (7, 54.38, None)]}, 'serial': {'table_0': [(2, 7.46, None), (3, 62.81, None), (4, 5.51, None), (5, 64.62, None), (6, 34.89, 'hADiZ'), (7, 54.38, None)]}}
2025-02-05 23:41:34,955 - 
2025-02-05 23:41:34,967 - iter: 59
2025-02-05 23:41:36,486 - table table_0 has 11 rows
2025-02-05 23:41:36,486 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 6, 7, 8, 11], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 23:41:36,486 - lock_same_resource: False
2025-02-05 23:41:36,486 - 
2025-02-05 23:41:36,486 - non intersection phase1
2025-02-05 23:41:36,487 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:41:36,487 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:41:36,487 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 23:41:36,487 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:41:36,490 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,491 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:41:36,491 - params: {'set_expr': "col_1 = 'FoOKA', col_2 = 83.96", 'cond': "(col_3 = 'oabvn') AND (col_2 = 12.59) AND (col_1 = 'hruay')", 'table': 'table_0'}
2025-02-05 23:41:36,493 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,495 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:36,495 - params: {'v1': '2', 'v2': '2', 'select_cols': 'col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:41:36,498 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,499 - needed_params: {'cond', 'table'}
2025-02-05 23:41:36,499 - params: {'cond': "(col_1 = 'ohlxl') AND (col_3 = 'rhgda')", 'table': 'table_0'}
2025-02-05 23:41:36,503 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,504 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:41:36,504 - params: {'set_expr': "col_1 = 'yBMpP', col_3 = 'JpRkA', col_2 = 90.28", 'cond': '(col_2 = 52.47)', 'table': 'table_0'}
2025-02-05 23:41:36,507 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,508 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:41:36,508 - params: {'cond': "(col_1 = 'svfds') AND (col_2 = 77.64) AND (col_3 = 'npyzz')", 'select_cols': 'id, col_1, col_3', 'table': 'table_0'}
2025-02-05 23:41:36,512 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,513 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:41:36,513 - params: {'cond': "(id = 7) AND (col_1 = 'kjdqe')", 'select_cols': 'col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:41:36,517 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,518 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:41:36,519 - params: {'cond': '(id = 8)', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:41:36,522 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,523 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:41:36,524 - params: {'cond': "(col_2 = 83.35) AND (col_1 = 'legxb')", 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:41:36,528 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:41:36,529 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:36,529 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_1, col_3', 'table': 'table_0'}
2025-02-05 23:41:36,529 - non intersection phase1 end
2025-02-05 23:41:36,529 - 
2025-02-05 23:41:36,530 - non intersection phase2
2025-02-05 23:41:36,532 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:41:36,533 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:36,533 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:41:36,537 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:41:36,538 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:41:36,538 - params: {'cond': '(id = 6)', 'select_cols': 'col_2', 'table': 'table_0'}
2025-02-05 23:41:36,539 - non intersection phase2 end
2025-02-05 23:41:36,539 - 
2025-02-05 23:41:36,539 - 生成死锁事务序列成功如下
2025-02-05 23:41:36,539 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'FoOKA', col_2 = 83.96 WHERE (col_3 = 'oabvn') AND (col_2 = 12.59) AND (col_1 = 'hruay')"), (1, 'SELECT col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')"), (1, "UPDATE table_0 SET col_1 = 'yBMpP', col_3 = 'JpRkA', col_2 = 90.28 WHERE (col_2 = 52.47)"), (1, "SELECT id, col_1, col_3 FROM table_0 WHERE (col_1 = 'svfds') AND (col_2 = 77.64) AND (col_3 = 'npyzz') FOR UPDATE"), (1, "SELECT col_1, col_2, col_3 FROM table_0 WHERE (id = 7) AND (col_1 = 'kjdqe') FOR UPDATE"), (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) FOR UPDATE'), (1, "SELECT id FROM table_0 WHERE (col_2 = 83.35) AND (col_1 = 'legxb') FOR UPDATE"), (2, 'SELECT col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:41:38,114 - 创建事务1连接成功
2025-02-05 23:41:38,115 - 执行事务1语句: BEGIN
2025-02-05 23:41:38,116 - 执行事务1语句: UPDATE table_0 SET col_1 = 'FoOKA', col_2 = 83.96 WHERE (col_3 = 'oabvn') AND (col_2 = 12.59) AND (col_1 = 'hruay')
2025-02-05 23:41:38,117 - 执行事务1语句: SELECT col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 23:41:38,117 - 执行事务1语句: DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')
2025-02-05 23:41:38,118 - 执行事务1语句: UPDATE table_0 SET col_1 = 'yBMpP', col_3 = 'JpRkA', col_2 = 90.28 WHERE (col_2 = 52.47)
2025-02-05 23:41:38,119 - 执行事务1语句: SELECT id, col_1, col_3 FROM table_0 WHERE (col_1 = 'svfds') AND (col_2 = 77.64) AND (col_3 = 'npyzz') FOR UPDATE
2025-02-05 23:41:38,120 - 执行事务1语句: SELECT col_1, col_2, col_3 FROM table_0 WHERE (id = 7) AND (col_1 = 'kjdqe') FOR UPDATE
2025-02-05 23:41:38,121 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE (id = 8) FOR UPDATE
2025-02-05 23:41:38,121 - 执行事务1语句: SELECT id FROM table_0 WHERE (col_2 = 83.35) AND (col_1 = 'legxb') FOR UPDATE
2025-02-05 23:41:38,122 - 执行事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:41:38,124 - 执行事务1语句: COMMIT;
2025-02-05 23:41:38,129 - 执行事务1成功
2025-02-05 23:41:40,763 - 恢复初始状态成功
2025-02-05 23:41:41,568 - 创建事务2连接成功
2025-02-05 23:41:41,569 - 执行事务2语句: BEGIN
2025-02-05 23:41:41,570 - 执行事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:41:41,571 - 执行事务2语句: SELECT col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 23:41:41,572 - 执行事务2语句: COMMIT;
2025-02-05 23:41:41,576 - 执行事务2成功
2025-02-05 23:41:46,563 - 
2025-02-05 23:41:46,563 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-429, started 42284)>, 1738770106.5632846)}
2025-02-05 23:41:46,665 - stmt_idx: 2, status: success, result: None
2025-02-05 23:41:46,665 - 成功执行序列中事务2语句: SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:41:46,665 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:41:46,665 - 
2025-02-05 23:41:46,774 - 
2025-02-05 23:41:46,775 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'FoOKA', col_2 = 83.96 WHERE (col_3 = 'oabvn') AND (col_2 = 12.59) AND (col_1 = 'hruay')", <Thread(Thread-430, started 34388)>, 1738770106.7741823)}
2025-02-05 23:41:46,879 - stmt_idx: 3, status: success, result: None
2025-02-05 23:41:46,879 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'FoOKA', col_2 = 83.96 WHERE (col_3 = 'oabvn') AND (col_2 = 12.59) AND (col_1 = 'hruay')
2025-02-05 23:41:46,879 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:41:46,880 - 
2025-02-05 23:41:46,987 - 
2025-02-05 23:41:46,987 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-431, started 25212)>, 1738770106.9873161)}
2025-02-05 23:41:47,094 - stmt_idx: 4, status: success, result: None
2025-02-05 23:41:47,094 - 成功执行序列中事务1语句: SELECT col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 23:41:47,094 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:41:47,094 - 
2025-02-05 23:41:47,201 - 
2025-02-05 23:41:47,202 - 执行前idx: 6, pending_stmts: {5: (1, "DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')", <Thread(Thread-432, started 40164)>, 1738770107.2016926)}
2025-02-05 23:41:47,305 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')
2025-02-05 23:41:47,306 - 执行后idx: 6, pending_stmts: {5: (1, "DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')", <Thread(Thread-432, started 40164)>, 1738770107.2016926)}
2025-02-05 23:41:47,306 - 
2025-02-05 23:41:47,414 - 
2025-02-05 23:41:47,415 - 执行前idx: 12, pending_stmts: {5: (1, "DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')", <Thread(Thread-432, started 40164)>, 1738770107.2016926), 11: (2, 'SELECT col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-433, started 37148)>, 1738770107.4143853)}
2025-02-05 23:41:47,522 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')
2025-02-05 23:41:47,631 - stmt_idx: 11, status: success, result: None
2025-02-05 23:41:47,631 - 成功执行序列中事务2语句: SELECT col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 23:41:47,631 - 执行后idx: 12, pending_stmts: {5: (1, "DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')", <Thread(Thread-432, started 40164)>, 1738770107.2016926)}
2025-02-05 23:41:47,631 - 
2025-02-05 23:41:47,743 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, "DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')", <Thread(Thread-432, started 40164)>, 1738770107.2016926)}
2025-02-05 23:41:47,743 - 
2025-02-05 23:41:47,743 - 执行前idx: 15, pending_stmts: {5: (1, "DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')", <Thread(Thread-432, stopped 40164)>, 1738770107.2016926)}
2025-02-05 23:41:47,850 - stmt_idx: 5, status: success, result: None
2025-02-05 23:41:47,850 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')
2025-02-05 23:41:47,850 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')
2025-02-05 23:41:47,852 - 执行后idx: 15, pending_stmts: {6: (1, "UPDATE table_0 SET col_1 = 'yBMpP', col_3 = 'JpRkA', col_2 = 90.28 WHERE (col_2 = 52.47)", <Thread(Thread-434, started 26720)>, 1738770107.851089), 7: (1, "SELECT id, col_1, col_3 FROM table_0 WHERE (col_1 = 'svfds') AND (col_2 = 77.64) AND (col_3 = 'npyzz') FOR UPDATE", <Thread(Thread-435, started 44020)>, 1738770107.8517377), 8: (1, "SELECT col_1, col_2, col_3 FROM table_0 WHERE (id = 7) AND (col_1 = 'kjdqe') FOR UPDATE", <Thread(Thread-436, started 29972)>, 1738770107.8517377), 9: (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) FOR UPDATE', <Thread(Thread-437, started 39276)>, 1738770107.8517377), 10: (1, "SELECT id FROM table_0 WHERE (col_2 = 83.35) AND (col_1 = 'legxb') FOR UPDATE", <Thread(Thread-438, started 37436)>, 1738770107.8522422), 12: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-439, started 9300)>, 1738770107.8522422), 13: (1, 'COMMIT', <Thread(Thread-440, started 32600)>, 1738770107.8525534)}
2025-02-05 23:41:47,852 - 
2025-02-05 23:41:47,956 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, "UPDATE table_0 SET col_1 = 'yBMpP', col_3 = 'JpRkA', col_2 = 90.28 WHERE (col_2 = 52.47)", <Thread(Thread-434, stopped 26720)>, 1738770107.851089), 7: (1, "SELECT id, col_1, col_3 FROM table_0 WHERE (col_1 = 'svfds') AND (col_2 = 77.64) AND (col_3 = 'npyzz') FOR UPDATE", <Thread(Thread-435, stopped 44020)>, 1738770107.8517377), 8: (1, "SELECT col_1, col_2, col_3 FROM table_0 WHERE (id = 7) AND (col_1 = 'kjdqe') FOR UPDATE", <Thread(Thread-436, stopped 29972)>, 1738770107.8517377), 9: (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) FOR UPDATE', <Thread(Thread-437, stopped 39276)>, 1738770107.8517377), 10: (1, "SELECT id FROM table_0 WHERE (col_2 = 83.35) AND (col_1 = 'legxb') FOR UPDATE", <Thread(Thread-438, stopped 37436)>, 1738770107.8522422), 12: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-439, stopped 9300)>, 1738770107.8522422), 13: (1, 'COMMIT', <Thread(Thread-440, stopped 32600)>, 1738770107.8525534)}
2025-02-05 23:41:47,957 - 
2025-02-05 23:41:47,957 - 执行前idx: 15, pending_stmts: {6: (1, "UPDATE table_0 SET col_1 = 'yBMpP', col_3 = 'JpRkA', col_2 = 90.28 WHERE (col_2 = 52.47)", <Thread(Thread-434, stopped 26720)>, 1738770107.851089), 7: (1, "SELECT id, col_1, col_3 FROM table_0 WHERE (col_1 = 'svfds') AND (col_2 = 77.64) AND (col_3 = 'npyzz') FOR UPDATE", <Thread(Thread-435, stopped 44020)>, 1738770107.8517377), 8: (1, "SELECT col_1, col_2, col_3 FROM table_0 WHERE (id = 7) AND (col_1 = 'kjdqe') FOR UPDATE", <Thread(Thread-436, stopped 29972)>, 1738770107.8517377), 9: (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) FOR UPDATE', <Thread(Thread-437, stopped 39276)>, 1738770107.8517377), 10: (1, "SELECT id FROM table_0 WHERE (col_2 = 83.35) AND (col_1 = 'legxb') FOR UPDATE", <Thread(Thread-438, stopped 37436)>, 1738770107.8522422), 12: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-439, stopped 9300)>, 1738770107.8522422), 13: (1, 'COMMIT', <Thread(Thread-440, stopped 32600)>, 1738770107.8525534)}
2025-02-05 23:41:48,064 - stmt_idx: 6, status: success, result: None
2025-02-05 23:41:48,064 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'yBMpP', col_3 = 'JpRkA', col_2 = 90.28 WHERE (col_2 = 52.47)
2025-02-05 23:41:48,170 - stmt_idx: 7, status: success, result: None
2025-02-05 23:41:48,170 - 成功执行序列中事务1语句: SELECT id, col_1, col_3 FROM table_0 WHERE (col_1 = 'svfds') AND (col_2 = 77.64) AND (col_3 = 'npyzz') FOR UPDATE
2025-02-05 23:41:48,278 - stmt_idx: 8, status: success, result: None
2025-02-05 23:41:48,278 - 成功执行序列中事务1语句: SELECT col_1, col_2, col_3 FROM table_0 WHERE (id = 7) AND (col_1 = 'kjdqe') FOR UPDATE
2025-02-05 23:41:48,386 - stmt_idx: 9, status: success, result: None
2025-02-05 23:41:48,386 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE (id = 8) FOR UPDATE
2025-02-05 23:41:48,494 - stmt_idx: 10, status: success, result: None
2025-02-05 23:41:48,494 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (col_2 = 83.35) AND (col_1 = 'legxb') FOR UPDATE
2025-02-05 23:41:48,602 - stmt_idx: 12, status: success, result: None
2025-02-05 23:41:48,603 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:41:48,711 - stmt_idx: 13, status: success, result: None
2025-02-05 23:41:48,712 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:41:48,712 - 执行后idx: 15, pending_stmts: {}
2025-02-05 23:41:48,712 - 
2025-02-05 23:41:48,823 - 执行序列成功
2025-02-05 23:41:49,600 - is_atomic: True
2025-02-05 23:41:49,600 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:41:49,600 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'FoOKA', col_2 = 83.96 WHERE (col_3 = 'oabvn') AND (col_2 = 12.59) AND (col_1 = 'hruay')"), (1, 'SELECT col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (2, 'SELECT col_2 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, "DELETE FROM table_0 WHERE (col_1 = 'ohlxl') AND (col_3 = 'rhgda')"), (1, "UPDATE table_0 SET col_1 = 'yBMpP', col_3 = 'JpRkA', col_2 = 90.28 WHERE (col_2 = 52.47)"), (1, "SELECT id, col_1, col_3 FROM table_0 WHERE (col_1 = 'svfds') AND (col_2 = 77.64) AND (col_3 = 'npyzz') FOR UPDATE"), (1, "SELECT col_1, col_2, col_3 FROM table_0 WHERE (id = 7) AND (col_1 = 'kjdqe') FOR UPDATE"), (1, 'SELECT id, col_2 FROM table_0 WHERE (id = 8) FOR UPDATE'), (1, "SELECT id FROM table_0 WHERE (col_2 = 83.35) AND (col_1 = 'legxb') FOR UPDATE"), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'COMMIT')]
2025-02-05 23:41:49,600 - snapshots: {'before': {'table_0': [(1, 'hruay', 12.59, 'oabvn'), (2, 'oenfm', 73.72, 'kzwof'), (3, 'ohlxl', 36.72, 'rhgda'), (4, 'xrirp', 52.47, 'hhrib'), (5, 'qzlvz', 1.42, 'ywlag'), (6, 'svfds', 77.64, 'npyzz'), (7, 'kjdqe', 35.56, 'oopsy'), (8, 'bionp', 79.28, 'ethox'), (9, 'ytifd', 52.72, 'smikk'), (10, 'fxcmc', 9.85, 'qchxs'), (11, 'legxb', 83.35, 'itxmq')]}, 'trx1': {'table_0': [(1, 'FoOKA', 83.96, 'oabvn'), (2, 'oenfm', 73.72, 'kzwof'), (4, 'yBMpP', 90.28, 'JpRkA'), (5, 'qzlvz', 1.42, 'ywlag'), (6, 'svfds', 77.64, 'npyzz'), (7, 'kjdqe', 35.56, 'oopsy'), (8, 'bionp', 79.28, 'ethox'), (9, 'ytifd', 52.72, 'smikk'), (10, 'fxcmc', 9.85, 'qchxs'), (11, 'legxb', 83.35, 'itxmq')]}, 'trx2': {'table_0': [(1, 'hruay', 12.59, 'oabvn'), (2, 'oenfm', 73.72, 'kzwof'), (3, 'ohlxl', 36.72, 'rhgda'), (4, 'xrirp', 52.47, 'hhrib'), (5, 'qzlvz', 1.42, 'ywlag'), (6, 'svfds', 77.64, 'npyzz'), (7, 'kjdqe', 35.56, 'oopsy'), (8, 'bionp', 79.28, 'ethox'), (9, 'ytifd', 52.72, 'smikk'), (10, 'fxcmc', 9.85, 'qchxs'), (11, 'legxb', 83.35, 'itxmq')]}, 'serial': {'table_0': [(1, 'FoOKA', 83.96, 'oabvn'), (2, 'oenfm', 73.72, 'kzwof'), (4, 'yBMpP', 90.28, 'JpRkA'), (5, 'qzlvz', 1.42, 'ywlag'), (6, 'svfds', 77.64, 'npyzz'), (7, 'kjdqe', 35.56, 'oopsy'), (8, 'bionp', 79.28, 'ethox'), (9, 'ytifd', 52.72, 'smikk'), (10, 'fxcmc', 9.85, 'qchxs'), (11, 'legxb', 83.35, 'itxmq')]}}
2025-02-05 23:41:49,600 - 
2025-02-05 23:41:49,612 - iter: 60
2025-02-05 23:41:51,143 - table table_0 has 13 rows
2025-02-05 23:41:51,144 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [12, 13], 'intersection_row_ids': []}
2025-02-05 23:41:51,144 - lock_same_resource: False
2025-02-05 23:41:51,144 - 
2025-02-05 23:41:51,144 - non intersection phase1
2025-02-05 23:41:51,144 - 事务1在第一阶段自己加的锁: II
2025-02-05 23:41:51,144 - 事务2在第一阶段自己加的锁: S
2025-02-05 23:41:51,144 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:41:51,145 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:41:51,147 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=10
2025-02-05 23:41:51,148 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:41:51,148 - params: {'set_expr': 'col_2 = 78.8, col_0 = 61', 'v1': '1', 'v2': '10', 'table': 'table_0'}
2025-02-05 23:41:51,150 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:41:51,152 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:51,152 - params: {'v1': '12', 'v2': '12', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:41:51,155 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:41:51,157 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:51,157 - params: {'v1': '13', 'v2': '13', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:41:51,157 - non intersection phase1 end
2025-02-05 23:41:51,157 - 
2025-02-05 23:41:51,157 - non intersection phase2
2025-02-05 23:41:51,160 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:41:51,162 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:41:51,162 - params: {'set_expr': 'col_2 = 67.15', 'cond': '(col_2 = 64.7)', 'table': 'table_0'}
2025-02-05 23:41:51,166 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 23:41:51,167 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:41:51,167 - params: {'v1': '1', 'v2': '2', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 23:41:51,167 - non intersection phase2 end
2025-02-05 23:41:51,167 - 
2025-02-05 23:41:51,167 - 生成死锁事务序列成功如下
2025-02-05 23:41:51,167 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_2 = 78.8, col_0 = 61 WHERE id BETWEEN 1 AND 10'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_2 = 67.15 WHERE (col_2 = 64.7)'), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:41:52,728 - 创建事务1连接成功
2025-02-05 23:41:52,730 - 执行事务1语句: BEGIN
2025-02-05 23:41:52,731 - 执行事务1语句: UPDATE table_0 SET col_2 = 78.8, col_0 = 61 WHERE id BETWEEN 1 AND 10
2025-02-05 23:41:52,731 - 执行事务1语句: UPDATE table_0 SET col_2 = 67.15 WHERE (col_2 = 64.7)
2025-02-05 23:41:52,734 - 执行事务1语句: COMMIT;
2025-02-05 23:41:52,738 - 执行事务1成功
2025-02-05 23:41:55,333 - 恢复初始状态成功
2025-02-05 23:41:56,098 - 创建事务2连接成功
2025-02-05 23:41:56,100 - 执行事务2语句: BEGIN
2025-02-05 23:41:56,101 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:41:56,102 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE
2025-02-05 23:41:56,103 - 执行事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:41:56,103 - 执行事务2语句: COMMIT;
2025-02-05 23:41:56,107 - 执行事务2成功
2025-02-05 23:42:01,034 - 
2025-02-05 23:42:01,034 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-441, started 34696)>, 1738770121.034473)}
2025-02-05 23:42:01,143 - stmt_idx: 2, status: success, result: None
2025-02-05 23:42:01,143 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:42:01,143 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:42:01,143 - 
2025-02-05 23:42:01,245 - 
2025-02-05 23:42:01,246 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_2 = 78.8, col_0 = 61 WHERE id BETWEEN 1 AND 10', <Thread(Thread-442, started 41792)>, 1738770121.245681)}
2025-02-05 23:42:01,351 - stmt_idx: 3, status: success, result: None
2025-02-05 23:42:01,351 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 78.8, col_0 = 61 WHERE id BETWEEN 1 AND 10
2025-02-05 23:42:01,351 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:42:01,351 - 
2025-02-05 23:42:01,457 - 
2025-02-05 23:42:01,457 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE', <Thread(Thread-443, started 5208)>, 1738770121.4571803)}
2025-02-05 23:42:01,563 - stmt_idx: 4, status: success, result: None
2025-02-05 23:42:01,563 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE
2025-02-05 23:42:01,563 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:42:01,563 - 
2025-02-05 23:42:01,671 - 
2025-02-05 23:42:01,671 - 执行前idx: 6, pending_stmts: {5: (1, 'UPDATE table_0 SET col_2 = 67.15 WHERE (col_2 = 64.7)', <Thread(Thread-444, started 3524)>, 1738770121.671369)}
2025-02-05 23:42:01,775 - stmt_idx: 5, status: success, result: None
2025-02-05 23:42:01,775 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 67.15 WHERE (col_2 = 64.7)
2025-02-05 23:42:01,775 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:42:01,775 - 
2025-02-05 23:42:01,878 - 
2025-02-05 23:42:01,879 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-445, started 31332)>, 1738770121.8785336)}
2025-02-05 23:42:01,983 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:42:01,983 - 执行后idx: 7, pending_stmts: {6: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-445, started 31332)>, 1738770121.8785336)}
2025-02-05 23:42:01,983 - 
2025-02-05 23:42:02,089 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-445, started 31332)>, 1738770121.8785336)}
2025-02-05 23:42:02,089 - 
2025-02-05 23:42:02,089 - 执行前idx: 9, pending_stmts: {6: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-445, stopped 31332)>, 1738770121.8785336)}
2025-02-05 23:42:02,190 - stmt_idx: 6, status: success, result: None
2025-02-05 23:42:02,190 - 成功执行序列中事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:42:02,190 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:42:02,191 - 执行后idx: 9, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-446, started 10924)>, 1738770122.1917245)}
2025-02-05 23:42:02,191 - 
2025-02-05 23:42:02,305 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, 'COMMIT', <Thread(Thread-446, stopped 10924)>, 1738770122.1917245)}
2025-02-05 23:42:02,306 - 
2025-02-05 23:42:02,306 - 执行前idx: 9, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-446, stopped 10924)>, 1738770122.1917245)}
2025-02-05 23:42:02,413 - stmt_idx: 7, status: success, result: None
2025-02-05 23:42:02,413 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:42:02,413 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:42:02,413 - 
2025-02-05 23:42:02,521 - 执行序列成功
2025-02-05 23:42:03,313 - is_atomic: True
2025-02-05 23:42:03,313 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:42:03,313 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_2 = 78.8, col_0 = 61 WHERE id BETWEEN 1 AND 10'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_2 = 67.15 WHERE (col_2 = 64.7)'), (1, 'COMMIT'), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 23:42:03,313 - snapshots: {'before': {'table_0': [(1, 46, 17.0), (2, 83, 25.81), (3, 67, 85.19), (4, 83, 64.8), (5, 77, 43.96), (6, 78, 54.36), (7, 64, 84.14), (8, 30, 34.57), (9, 37, 13.98), (10, 10, 86.85), (11, 59, 94.63), (12, 55, 64.7), (13, 47, 85.03)]}, 'trx1': {'table_0': [(1, 61, 78.8), (2, 61, 78.8), (3, 61, 78.8), (4, 61, 78.8), (5, 61, 78.8), (6, 61, 78.8), (7, 61, 78.8), (8, 61, 78.8), (9, 61, 78.8), (10, 61, 78.8), (11, 59, 94.63), (12, 55, 64.7), (13, 47, 85.03)]}, 'trx2': {'table_0': [(1, 46, 17.0), (2, 83, 25.81), (3, 67, 85.19), (4, 83, 64.8), (5, 77, 43.96), (6, 78, 54.36), (7, 64, 84.14), (8, 30, 34.57), (9, 37, 13.98), (10, 10, 86.85), (11, 59, 94.63), (12, 55, 64.7), (13, 47, 85.03)]}, 'serial': {'table_0': [(1, 61, 78.8), (2, 61, 78.8), (3, 61, 78.8), (4, 61, 78.8), (5, 61, 78.8), (6, 61, 78.8), (7, 61, 78.8), (8, 61, 78.8), (9, 61, 78.8), (10, 61, 78.8), (11, 59, 94.63), (12, 55, 64.7), (13, 47, 85.03)]}}
2025-02-05 23:42:03,313 - 
2025-02-05 23:42:03,325 - iter: 61
2025-02-05 23:42:04,848 - table table_0 has 13 rows
2025-02-05 23:42:04,849 - trx1_lock_row_ids: [4, 5, 6, 7, 8, 9, 10, 11]
2025-02-05 23:42:04,849 - trx2_lock_row_ids: [1, 2, 3, 5, 8, 12, 13]
2025-02-05 23:42:04,849 - intersection_row_ids: [5, 8]
2025-02-05 23:42:04,849 - trx1_exclusive_ids: [4, 6, 7, 9, 10, 11]
2025-02-05 23:42:04,849 - trx2_exclusive_ids: [1, 2, 3, 12, 13]
2025-02-05 23:42:04,849 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7, 8, 9, 10, 11], 'trx2_lock_row_ids': [1, 2, 3, 5, 8, 12, 13], 'intersection_row_ids': [5, 8]}
2025-02-05 23:42:04,849 - lock_same_resource: True
2025-02-05 23:42:04,849 - 
2025-02-05 23:42:04,849 - intersection phase1
2025-02-05 23:42:04,853 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=4, is_continuous=True, range_end_idx=11
2025-02-05 23:42:04,854 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:04,854 - params: {'v1': '4', 'v2': '11', 'select_cols': 'id, col_0, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,857 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,859 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:04,859 - params: {'set_expr': "col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91", 'cond': "(col_0 = 'prvdu')", 'table': 'table_0'}
2025-02-05 23:42:04,862 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,864 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:04,864 - params: {'vals': "NULL, 'qVrtQ', 'Odqts', 78, 5", 'insert_cols': 'id, col_0, col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,864 - intersection phase1 end
2025-02-05 23:42:04,864 - 
2025-02-05 23:42:04,865 - intersection phase2
2025-02-05 23:42:04,865 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:42:04,865 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:42:04,865 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:42:04,865 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:42:04,867 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,869 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:04,869 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:42:04,872 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,874 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:04,874 - params: {'set_expr': "col_0 = 'zmXCn', col_1 = 'qYebD'", 'cond': "(col_1 = 'irrwx') AND (col_0 = 'bwdmp')", 'table': 'table_0'}
2025-02-05 23:42:04,876 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,878 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:04,878 - params: {'set_expr': "col_2 = 46, col_1 = 'dTAdY'", 'cond': "(col_1 = 'zbxtk')", 'table': 'table_0'}
2025-02-05 23:42:04,881 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,883 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:04,883 - params: {'v1': '9', 'v2': '9', 'select_cols': 'col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,888 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,889 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:04,890 - params: {'set_expr': "col_1 = 'iiraF', col_0 = 'HckfT', col_2 = 16, col_959 = 98", 'cond': "(col_0 = 'qxore') AND (col_959 IS NULL) AND (col_2 = 44)", 'table': 'table_0'}
2025-02-05 23:42:04,894 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,896 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:04,896 - params: {'v1': '11', 'v2': '11', 'select_cols': 'id, col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,899 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,900 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:04,900 - params: {'vals': "NULL, 'fmSPQ', 'JldmO', 40, 89", 'insert_cols': 'id, col_0, col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,904 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,906 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:04,906 - params: {'vals': "NULL, 'UFBZO', 'ShGAU', 93, 64", 'insert_cols': 'id, col_0, col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,910 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,911 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:04,912 - params: {'set_expr': 'col_959 = 94', 'cond': "(col_0 = 'kyyfz') AND (col_2 = 98)", 'table': 'table_0'}
2025-02-05 23:42:04,915 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,917 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:04,917 - params: {'vals': "NULL, 'JvHcH', 'hLllV', 28, 42", 'insert_cols': 'id, col_0, col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,921 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,922 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:04,922 - params: {'set_expr': "col_1 = 'eeChS', col_959 = 84", 'cond': "(col_1 = 'vnrvj')", 'table': 'table_0'}
2025-02-05 23:42:04,923 - intersection phase2 end
2025-02-05 23:42:04,923 - 
2025-02-05 23:42:04,923 - intersection phase3
2025-02-05 23:42:04,926 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,928 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:04,928 - params: {'cond': '(id = 2)', 'select_cols': 'col_0, col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,931 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=8, is_continuous=True, range_end_idx=10
2025-02-05 23:42:04,932 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:04,932 - params: {'v1': '8', 'v2': '10', 'select_cols': 'id, col_0, col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,936 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:42:04,938 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:04,938 - params: {'cond': '(id = 4)', 'select_cols': 'id, col_0, col_1, col_2, col_959', 'table': 'table_0'}
2025-02-05 23:42:04,938 - intersection phase3 end
2025-02-05 23:42:04,938 - 
2025-02-05 23:42:04,938 - 生成死锁事务序列成功如下
2025-02-05 23:42:04,938 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_2, col_959 FROM table_0 WHERE id BETWEEN 4 AND 11 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'qVrtQ', 'Odqts', 78, 5)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'fmSPQ', 'JldmO', 40, 89)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'UFBZO', 'ShGAU', 93, 64)"), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, "UPDATE table_0 SET col_959 = 94 WHERE (col_0 = 'kyyfz') AND (col_2 = 98)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'JvHcH', 'hLllV', 28, 42)"), (2, "UPDATE table_0 SET col_1 = 'eeChS', col_959 = 84 WHERE (col_1 = 'vnrvj')"), (1, "UPDATE table_0 SET col_0 = 'zmXCn', col_1 = 'qYebD' WHERE (col_1 = 'irrwx') AND (col_0 = 'bwdmp')"), (1, "UPDATE table_0 SET col_2 = 46, col_1 = 'dTAdY' WHERE (col_1 = 'zbxtk')"), (1, 'SELECT col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'iiraF', col_0 = 'HckfT', col_2 = 16, col_959 = 98 WHERE (col_0 = 'qxore') AND (col_959 IS NULL) AND (col_2 = 44)"), (1, 'SELECT id, col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, 'SELECT col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 2) FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 4) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:42:06,478 - 创建事务1连接成功
2025-02-05 23:42:06,479 - 执行事务1语句: BEGIN
2025-02-05 23:42:06,480 - 执行事务1语句: SELECT id, col_0, col_2, col_959 FROM table_0 WHERE id BETWEEN 4 AND 11 LOCK IN SHARE MODE
2025-02-05 23:42:06,481 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:42:06,482 - 执行事务1语句: UPDATE table_0 SET col_0 = 'zmXCn', col_1 = 'qYebD' WHERE (col_1 = 'irrwx') AND (col_0 = 'bwdmp')
2025-02-05 23:42:06,483 - 执行事务1语句: UPDATE table_0 SET col_2 = 46, col_1 = 'dTAdY' WHERE (col_1 = 'zbxtk')
2025-02-05 23:42:06,484 - 执行事务1语句: SELECT col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:42:06,484 - 执行事务1语句: UPDATE table_0 SET col_1 = 'iiraF', col_0 = 'HckfT', col_2 = 16, col_959 = 98 WHERE (col_0 = 'qxore') AND (col_959 IS NULL) AND (col_2 = 44)
2025-02-05 23:42:06,485 - 执行事务1语句: SELECT id, col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:42:06,486 - 执行事务1语句: SELECT col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 2) FOR UPDATE
2025-02-05 23:42:06,488 - 执行事务1语句: COMMIT;
2025-02-05 23:42:06,493 - 执行事务1成功
2025-02-05 23:42:09,094 - 恢复初始状态成功
2025-02-05 23:42:09,856 - 创建事务2连接成功
2025-02-05 23:42:09,857 - 执行事务2语句: BEGIN
2025-02-05 23:42:09,858 - 执行事务2语句: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:09,859 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'qVrtQ', 'Odqts', 78, 5)
2025-02-05 23:42:09,860 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'fmSPQ', 'JldmO', 40, 89)
2025-02-05 23:42:09,860 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'UFBZO', 'ShGAU', 93, 64)
2025-02-05 23:42:09,861 - 执行事务2语句: UPDATE table_0 SET col_959 = 94 WHERE (col_0 = 'kyyfz') AND (col_2 = 98)
2025-02-05 23:42:09,862 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'JvHcH', 'hLllV', 28, 42)
2025-02-05 23:42:09,863 - 执行事务2语句: UPDATE table_0 SET col_1 = 'eeChS', col_959 = 84 WHERE (col_1 = 'vnrvj')
2025-02-05 23:42:09,863 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 4) FOR UPDATE
2025-02-05 23:42:09,866 - 执行事务2语句: COMMIT;
2025-02-05 23:42:09,870 - 执行事务2成功
2025-02-05 23:42:14,820 - 
2025-02-05 23:42:14,820 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_2, col_959 FROM table_0 WHERE id BETWEEN 4 AND 11 LOCK IN SHARE MODE', <Thread(Thread-447, started 30960)>, 1738770134.8206584)}
2025-02-05 23:42:14,930 - stmt_idx: 2, status: success, result: None
2025-02-05 23:42:14,930 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_959 FROM table_0 WHERE id BETWEEN 4 AND 11 LOCK IN SHARE MODE
2025-02-05 23:42:14,930 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:42:14,930 - 
2025-02-05 23:42:15,035 - 
2025-02-05 23:42:15,036 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:15,142 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:15,143 - 执行后idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:15,143 - 
2025-02-05 23:42:15,251 - 
2025-02-05 23:42:15,252 - 执行前idx: 8, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598), 7: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-449, started 36280)>, 1738770135.2513344)}
2025-02-05 23:42:15,359 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:15,466 - stmt_idx: 7, status: success, result: None
2025-02-05 23:42:15,466 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:42:15,466 - 执行后idx: 8, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:15,467 - 
2025-02-05 23:42:15,575 - 
2025-02-05 23:42:15,576 - 执行前idx: 12, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598), 11: (1, "UPDATE table_0 SET col_0 = 'zmXCn', col_1 = 'qYebD' WHERE (col_1 = 'irrwx') AND (col_0 = 'bwdmp')", <Thread(Thread-450, started 42228)>, 1738770135.57598)}
2025-02-05 23:42:15,681 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:15,786 - stmt_idx: 11, status: success, result: None
2025-02-05 23:42:15,786 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'zmXCn', col_1 = 'qYebD' WHERE (col_1 = 'irrwx') AND (col_0 = 'bwdmp')
2025-02-05 23:42:15,786 - 执行后idx: 12, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:15,786 - 
2025-02-05 23:42:15,893 - 
2025-02-05 23:42:15,894 - 执行前idx: 13, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598), 12: (1, "UPDATE table_0 SET col_2 = 46, col_1 = 'dTAdY' WHERE (col_1 = 'zbxtk')", <Thread(Thread-451, started 23932)>, 1738770135.8937154)}
2025-02-05 23:42:15,998 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:16,099 - stmt_idx: 12, status: success, result: None
2025-02-05 23:42:16,099 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 46, col_1 = 'dTAdY' WHERE (col_1 = 'zbxtk')
2025-02-05 23:42:16,099 - 执行后idx: 13, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:16,099 - 
2025-02-05 23:42:16,204 - 
2025-02-05 23:42:16,205 - 执行前idx: 14, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598), 13: (1, 'SELECT col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-452, started 15668)>, 1738770136.2049325)}
2025-02-05 23:42:16,314 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:16,416 - stmt_idx: 13, status: success, result: None
2025-02-05 23:42:16,416 - 成功执行序列中事务1语句: SELECT col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:42:16,416 - 执行后idx: 14, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:16,416 - 
2025-02-05 23:42:16,525 - 
2025-02-05 23:42:16,525 - 执行前idx: 15, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598), 14: (1, "UPDATE table_0 SET col_1 = 'iiraF', col_0 = 'HckfT', col_2 = 16, col_959 = 98 WHERE (col_0 = 'qxore') AND (col_959 IS NULL) AND (col_2 = 44)", <Thread(Thread-453, started 43408)>, 1738770136.5242822)}
2025-02-05 23:42:16,633 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:16,740 - stmt_idx: 14, status: success, result: None
2025-02-05 23:42:16,740 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'iiraF', col_0 = 'HckfT', col_2 = 16, col_959 = 98 WHERE (col_0 = 'qxore') AND (col_959 IS NULL) AND (col_2 = 44)
2025-02-05 23:42:16,740 - 执行后idx: 15, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:16,740 - 
2025-02-05 23:42:16,846 - 
2025-02-05 23:42:16,846 - 执行前idx: 16, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598), 15: (1, 'SELECT id, col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-454, started 42088)>, 1738770136.8460996)}
2025-02-05 23:42:16,953 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:17,059 - stmt_idx: 15, status: success, result: None
2025-02-05 23:42:17,059 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:42:17,060 - 执行后idx: 16, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:17,060 - 
2025-02-05 23:42:17,172 - 
2025-02-05 23:42:17,172 - 执行前idx: 17, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598), 16: (1, 'SELECT col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 2) FOR UPDATE', <Thread(Thread-455, started 20112)>, 1738770137.1723058)}
2025-02-05 23:42:17,279 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:17,386 - stmt_idx: 16, status: success, result: None
2025-02-05 23:42:17,386 - 成功执行序列中事务1语句: SELECT col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 2) FOR UPDATE
2025-02-05 23:42:17,386 - 执行后idx: 17, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:17,386 - 
2025-02-05 23:42:17,498 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, started 40548)>, 1738770135.0358598)}
2025-02-05 23:42:17,498 - 
2025-02-05 23:42:17,498 - 执行前idx: 20, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')", <Thread(Thread-448, stopped 40548)>, 1738770135.0358598)}
2025-02-05 23:42:17,613 - stmt_idx: 3, status: success, result: None
2025-02-05 23:42:17,613 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:17,613 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')
2025-02-05 23:42:17,616 - 执行后idx: 20, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'qVrtQ', 'Odqts', 78, 5)", <Thread(Thread-456, started 42736)>, 1738770137.6146734), 5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'fmSPQ', 'JldmO', 40, 89)", <Thread(Thread-457, started 42948)>, 1738770137.615359), 6: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'UFBZO', 'ShGAU', 93, 64)", <Thread(Thread-458, started 11964)>, 1738770137.615359), 8: (2, "UPDATE table_0 SET col_959 = 94 WHERE (col_0 = 'kyyfz') AND (col_2 = 98)", <Thread(Thread-459, started 39708)>, 1738770137.615359), 9: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'JvHcH', 'hLllV', 28, 42)", <Thread(Thread-460, started 16388)>, 1738770137.6158638), 10: (2, "UPDATE table_0 SET col_1 = 'eeChS', col_959 = 84 WHERE (col_1 = 'vnrvj')", <Thread(Thread-461, started 34080)>, 1738770137.616117), 17: (2, 'SELECT id, col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 4) FOR UPDATE', <Thread(Thread-462, started 40352)>, 1738770137.616117), 18: (2, 'COMMIT', <Thread(Thread-463, started 37948)>, 1738770137.616117)}
2025-02-05 23:42:17,616 - 
2025-02-05 23:42:17,720 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'qVrtQ', 'Odqts', 78, 5)", <Thread(Thread-456, stopped 42736)>, 1738770137.6146734), 5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'fmSPQ', 'JldmO', 40, 89)", <Thread(Thread-457, stopped 42948)>, 1738770137.615359), 6: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'UFBZO', 'ShGAU', 93, 64)", <Thread(Thread-458, stopped 11964)>, 1738770137.615359), 8: (2, "UPDATE table_0 SET col_959 = 94 WHERE (col_0 = 'kyyfz') AND (col_2 = 98)", <Thread(Thread-459, stopped 39708)>, 1738770137.615359), 9: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'JvHcH', 'hLllV', 28, 42)", <Thread(Thread-460, stopped 16388)>, 1738770137.6158638), 10: (2, "UPDATE table_0 SET col_1 = 'eeChS', col_959 = 84 WHERE (col_1 = 'vnrvj')", <Thread(Thread-461, stopped 34080)>, 1738770137.616117), 17: (2, 'SELECT id, col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 4) FOR UPDATE', <Thread(Thread-462, stopped 40352)>, 1738770137.616117), 18: (2, 'COMMIT', <Thread(Thread-463, stopped 37948)>, 1738770137.616117)}
2025-02-05 23:42:17,720 - 
2025-02-05 23:42:17,720 - 执行前idx: 20, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'qVrtQ', 'Odqts', 78, 5)", <Thread(Thread-456, stopped 42736)>, 1738770137.6146734), 5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'fmSPQ', 'JldmO', 40, 89)", <Thread(Thread-457, stopped 42948)>, 1738770137.615359), 6: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'UFBZO', 'ShGAU', 93, 64)", <Thread(Thread-458, stopped 11964)>, 1738770137.615359), 8: (2, "UPDATE table_0 SET col_959 = 94 WHERE (col_0 = 'kyyfz') AND (col_2 = 98)", <Thread(Thread-459, stopped 39708)>, 1738770137.615359), 9: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'JvHcH', 'hLllV', 28, 42)", <Thread(Thread-460, stopped 16388)>, 1738770137.6158638), 10: (2, "UPDATE table_0 SET col_1 = 'eeChS', col_959 = 84 WHERE (col_1 = 'vnrvj')", <Thread(Thread-461, stopped 34080)>, 1738770137.616117), 17: (2, 'SELECT id, col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 4) FOR UPDATE', <Thread(Thread-462, stopped 40352)>, 1738770137.616117), 18: (2, 'COMMIT', <Thread(Thread-463, stopped 37948)>, 1738770137.616117)}
2025-02-05 23:42:17,828 - stmt_idx: 4, status: success, result: None
2025-02-05 23:42:17,828 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'qVrtQ', 'Odqts', 78, 5)
2025-02-05 23:42:17,932 - stmt_idx: 5, status: success, result: None
2025-02-05 23:42:17,932 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'fmSPQ', 'JldmO', 40, 89)
2025-02-05 23:42:18,039 - stmt_idx: 6, status: success, result: None
2025-02-05 23:42:18,039 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'UFBZO', 'ShGAU', 93, 64)
2025-02-05 23:42:18,146 - stmt_idx: 8, status: success, result: None
2025-02-05 23:42:18,147 - 成功执行序列中事务2语句: UPDATE table_0 SET col_959 = 94 WHERE (col_0 = 'kyyfz') AND (col_2 = 98)
2025-02-05 23:42:18,249 - stmt_idx: 9, status: success, result: None
2025-02-05 23:42:18,249 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'JvHcH', 'hLllV', 28, 42)
2025-02-05 23:42:18,359 - stmt_idx: 10, status: success, result: None
2025-02-05 23:42:18,359 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'eeChS', col_959 = 84 WHERE (col_1 = 'vnrvj')
2025-02-05 23:42:18,466 - stmt_idx: 17, status: success, result: None
2025-02-05 23:42:18,466 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 4) FOR UPDATE
2025-02-05 23:42:18,575 - stmt_idx: 18, status: success, result: None
2025-02-05 23:42:18,575 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:42:18,575 - 执行后idx: 20, pending_stmts: {}
2025-02-05 23:42:18,575 - 
2025-02-05 23:42:18,682 - 执行序列成功
2025-02-05 23:42:19,455 - is_atomic: True
2025-02-05 23:42:19,455 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:42:19,455 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_2, col_959 FROM table_0 WHERE id BETWEEN 4 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, "UPDATE table_0 SET col_0 = 'zmXCn', col_1 = 'qYebD' WHERE (col_1 = 'irrwx') AND (col_0 = 'bwdmp')"), (1, "UPDATE table_0 SET col_2 = 46, col_1 = 'dTAdY' WHERE (col_1 = 'zbxtk')"), (1, 'SELECT col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'iiraF', col_0 = 'HckfT', col_2 = 16, col_959 = 98 WHERE (col_0 = 'qxore') AND (col_959 IS NULL) AND (col_2 = 44)"), (1, 'SELECT id, col_1, col_2, col_959 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, 'SELECT col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 2) FOR UPDATE'), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_0 = 'YVLvN', col_1 = 'OBYqq', col_959 = 91 WHERE (col_0 = 'prvdu')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'qVrtQ', 'Odqts', 78, 5)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'fmSPQ', 'JldmO', 40, 89)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'UFBZO', 'ShGAU', 93, 64)"), (2, "UPDATE table_0 SET col_959 = 94 WHERE (col_0 = 'kyyfz') AND (col_2 = 98)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_959) VALUES (NULL, 'JvHcH', 'hLllV', 28, 42)"), (2, "UPDATE table_0 SET col_1 = 'eeChS', col_959 = 84 WHERE (col_1 = 'vnrvj')"), (2, 'SELECT id, col_0, col_1, col_2, col_959 FROM table_0 WHERE (id = 4) FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 23:42:19,455 - snapshots: {'before': {'table_0': [(1, 'teqwq', 'lbzrh', 8, None), (2, 'pemhn', 'finsh', 16, None), (3, 'kyyfz', 'zskar', 98, None), (4, 'cdhic', 'thlmm', 32, None), (5, 'prvdu', 'omogp', 74, None), (6, 'bwdmp', 'irrwx', 86, None), (7, 'vcbcc', 'zbxtk', 28, None), (8, 'dlwww', 'bqejv', 79, None), (9, 'iuxit', 'hqpjb', 16, None), (10, 'qxore', 'rpmif', 44, None), (11, 'hvvsb', 'enfku', 25, None), (12, 'eawdr', 'ulacw', 1, None), (13, 'fhehl', 'vnrvj', 74, None)]}, 'trx1': {'table_0': [(1, 'teqwq', 'lbzrh', 8, None), (2, 'pemhn', 'finsh', 16, None), (3, 'kyyfz', 'zskar', 98, None), (4, 'cdhic', 'thlmm', 32, None), (5, 'prvdu', 'omogp', 74, None), (6, 'zmXCn', 'qYebD', 86, None), (7, 'vcbcc', 'dTAdY', 46, None), (8, 'dlwww', 'bqejv', 79, None), (9, 'iuxit', 'hqpjb', 16, None), (10, 'HckfT', 'iiraF', 16, 98), (11, 'hvvsb', 'enfku', 25, None), (12, 'eawdr', 'ulacw', 1, None), (13, 'fhehl', 'vnrvj', 74, None)]}, 'trx2': {'table_0': [(1, 'teqwq', 'lbzrh', 8, None), (2, 'pemhn', 'finsh', 16, None), (3, 'kyyfz', 'zskar', 98, 94), (4, 'cdhic', 'thlmm', 32, None), (5, 'YVLvN', 'OBYqq', 74, 91), (6, 'bwdmp', 'irrwx', 86, None), (7, 'vcbcc', 'zbxtk', 28, None), (8, 'dlwww', 'bqejv', 79, None), (9, 'iuxit', 'hqpjb', 16, None), (10, 'qxore', 'rpmif', 44, None), (11, 'hvvsb', 'enfku', 25, None), (12, 'eawdr', 'ulacw', 1, None), (13, 'fhehl', 'eeChS', 74, 84), (14, 'qVrtQ', 'Odqts', 78, 5), (15, 'fmSPQ', 'JldmO', 40, 89), (16, 'UFBZO', 'ShGAU', 93, 64), (17, 'JvHcH', 'hLllV', 28, 42)]}, 'serial': {'table_0': [(1, 'teqwq', 'lbzrh', 8, None), (2, 'pemhn', 'finsh', 16, None), (3, 'kyyfz', 'zskar', 98, 94), (4, 'cdhic', 'thlmm', 32, None), (5, 'YVLvN', 'OBYqq', 74, 91), (6, 'zmXCn', 'qYebD', 86, None), (7, 'vcbcc', 'dTAdY', 46, None), (8, 'dlwww', 'bqejv', 79, None), (9, 'iuxit', 'hqpjb', 16, None), (10, 'HckfT', 'iiraF', 16, 98), (11, 'hvvsb', 'enfku', 25, None), (12, 'eawdr', 'ulacw', 1, None), (13, 'fhehl', 'eeChS', 74, 84), (18, 'qVrtQ', 'Odqts', 78, 5), (19, 'fmSPQ', 'JldmO', 40, 89), (20, 'UFBZO', 'ShGAU', 93, 64), (21, 'JvHcH', 'hLllV', 28, 42)]}}
2025-02-05 23:42:19,455 - 
2025-02-05 23:42:19,467 - iter: 62
2025-02-05 23:42:21,022 - table table_0 has 10 rows
2025-02-05 23:42:21,022 - trx1_lock_row_ids: [4, 5, 6, 7]
2025-02-05 23:42:21,022 - trx2_lock_row_ids: [4, 5, 6, 8, 10]
2025-02-05 23:42:21,022 - intersection_row_ids: [4, 5, 6]
2025-02-05 23:42:21,022 - trx1_exclusive_ids: [7]
2025-02-05 23:42:21,022 - trx2_exclusive_ids: [8, 10]
2025-02-05 23:42:21,022 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7], 'trx2_lock_row_ids': [4, 5, 6, 8, 10], 'intersection_row_ids': [4, 5, 6]}
2025-02-05 23:42:21,022 - lock_same_resource: True
2025-02-05 23:42:21,022 - 
2025-02-05 23:42:21,022 - intersection phase1
2025-02-05 23:42:21,026 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=4, is_continuous=True, range_end_idx=7
2025-02-05 23:42:21,027 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:21,027 - params: {'v1': '4', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:42:21,029 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:42:21,031 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:21,031 - params: {'set_expr': "col_0 = 'dIjsc', col_1 = 23.87", 'cond': '(col_1 = 99.24)', 'table': 'table_0'}
2025-02-05 23:42:21,035 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:42:21,037 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:21,037 - params: {'set_expr': "col_0 = 'lLwif'", 'cond': "(id = 5) AND (col_0 = 'texvr') AND (col_1 = 49.77)", 'table': 'table_0'}
2025-02-05 23:42:21,039 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:42:21,040 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:21,040 - params: {'vals': "NULL, 'kdkRf', 5.29", 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:42:21,040 - intersection phase1 end
2025-02-05 23:42:21,041 - 
2025-02-05 23:42:21,041 - intersection phase2
2025-02-05 23:42:21,041 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:42:21,041 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:42:21,041 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:42:21,041 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:42:21,045 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:42:21,046 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:21,046 - params: {'cond': '(id = 7)', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:42:21,049 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:42:21,050 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:42:21,051 - params: {'set_expr': "col_0 = 'iCWNp'", 'v1': '8', 'v2': '8', 'table': 'table_0'}
2025-02-05 23:42:21,054 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:42:21,055 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:42:21,056 - params: {'set_expr': "col_0 = 'yXMDn', col_1 = 65.85", 'v1': '10', 'v2': '10', 'table': 'table_0'}
2025-02-05 23:42:21,056 - intersection phase2 end
2025-02-05 23:42:21,056 - 
2025-02-05 23:42:21,056 - intersection phase3
2025-02-05 23:42:21,059 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:42:21,061 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:21,061 - params: {'v1': '8', 'v2': '8', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:42:21,065 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:42:21,067 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:21,067 - params: {'v1': '4', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:42:21,072 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:42:21,073 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:21,073 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:42:21,073 - intersection phase3 end
2025-02-05 23:42:21,074 - 
2025-02-05 23:42:21,074 - 生成死锁事务序列成功如下
2025-02-05 23:42:21,074 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_0 = 'dIjsc', col_1 = 23.87 WHERE (col_1 = 99.24)"), (2, "UPDATE table_0 SET col_0 = 'lLwif' WHERE (id = 5) AND (col_0 = 'texvr') AND (col_1 = 49.77)"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kdkRf', 5.29)"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 7) FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'iCWNp' WHERE id BETWEEN 8 AND 8"), (2, "UPDATE table_0 SET col_0 = 'yXMDn', col_1 = 65.85 WHERE id BETWEEN 10 AND 10"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:42:22,641 - 创建事务1连接成功
2025-02-05 23:42:22,642 - 执行事务1语句: BEGIN
2025-02-05 23:42:22,643 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE
2025-02-05 23:42:22,644 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE (id = 7) FOR UPDATE
2025-02-05 23:42:22,645 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:42:22,646 - 执行事务1语句: COMMIT;
2025-02-05 23:42:22,650 - 执行事务1成功
2025-02-05 23:42:25,251 - 恢复初始状态成功
2025-02-05 23:42:26,046 - 创建事务2连接成功
2025-02-05 23:42:26,048 - 执行事务2语句: BEGIN
2025-02-05 23:42:26,049 - 执行事务2语句: UPDATE table_0 SET col_0 = 'dIjsc', col_1 = 23.87 WHERE (col_1 = 99.24)
2025-02-05 23:42:26,049 - 执行事务2语句: UPDATE table_0 SET col_0 = 'lLwif' WHERE (id = 5) AND (col_0 = 'texvr') AND (col_1 = 49.77)
2025-02-05 23:42:26,050 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kdkRf', 5.29)
2025-02-05 23:42:26,051 - 执行事务2语句: UPDATE table_0 SET col_0 = 'iCWNp' WHERE id BETWEEN 8 AND 8
2025-02-05 23:42:26,051 - 执行事务2语句: UPDATE table_0 SET col_0 = 'yXMDn', col_1 = 65.85 WHERE id BETWEEN 10 AND 10
2025-02-05 23:42:26,052 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:42:26,054 - 执行事务2语句: COMMIT;
2025-02-05 23:42:26,058 - 执行事务2成功
2025-02-05 23:42:30,977 - 
2025-02-05 23:42:30,977 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_0 = 'dIjsc', col_1 = 23.87 WHERE (col_1 = 99.24)", <Thread(Thread-464, started 21320)>, 1738770150.9776304)}
2025-02-05 23:42:31,081 - stmt_idx: 2, status: success, result: None
2025-02-05 23:42:31,081 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'dIjsc', col_1 = 23.87 WHERE (col_1 = 99.24)
2025-02-05 23:42:31,081 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:42:31,081 - 
2025-02-05 23:42:31,187 - 
2025-02-05 23:42:31,188 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 'lLwif' WHERE (id = 5) AND (col_0 = 'texvr') AND (col_1 = 49.77)", <Thread(Thread-465, started 30840)>, 1738770151.1879683)}
2025-02-05 23:42:31,293 - stmt_idx: 3, status: success, result: None
2025-02-05 23:42:31,293 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'lLwif' WHERE (id = 5) AND (col_0 = 'texvr') AND (col_1 = 49.77)
2025-02-05 23:42:31,293 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:42:31,293 - 
2025-02-05 23:42:31,399 - 
2025-02-05 23:42:31,400 - 执行前idx: 5, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kdkRf', 5.29)", <Thread(Thread-466, started 41492)>, 1738770151.3996434)}
2025-02-05 23:42:31,505 - stmt_idx: 4, status: success, result: None
2025-02-05 23:42:31,505 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kdkRf', 5.29)
2025-02-05 23:42:31,505 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:42:31,505 - 
2025-02-05 23:42:31,613 - 
2025-02-05 23:42:31,614 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE', <Thread(Thread-467, started 18612)>, 1738770151.613183)}
2025-02-05 23:42:31,722 - stmt_idx: 5, status: success, result: None
2025-02-05 23:42:31,722 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE
2025-02-05 23:42:31,722 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:42:31,722 - 
2025-02-05 23:42:31,828 - 
2025-02-05 23:42:31,829 - 执行前idx: 7, pending_stmts: {6: (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 7) FOR UPDATE', <Thread(Thread-468, started 40240)>, 1738770151.8286114)}
2025-02-05 23:42:31,936 - stmt_idx: 6, status: success, result: None
2025-02-05 23:42:31,936 - 成功执行序列中事务1语句: SELECT id, col_0 FROM table_0 WHERE (id = 7) FOR UPDATE
2025-02-05 23:42:31,936 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:42:31,936 - 
2025-02-05 23:42:32,041 - 
2025-02-05 23:42:32,042 - 执行前idx: 8, pending_stmts: {7: (2, "UPDATE table_0 SET col_0 = 'iCWNp' WHERE id BETWEEN 8 AND 8", <Thread(Thread-469, started 9356)>, 1738770152.0419214)}
2025-02-05 23:42:32,150 - stmt_idx: 7, status: success, result: None
2025-02-05 23:42:32,150 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'iCWNp' WHERE id BETWEEN 8 AND 8
2025-02-05 23:42:32,150 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:42:32,150 - 
2025-02-05 23:42:32,260 - 
2025-02-05 23:42:32,261 - 执行前idx: 9, pending_stmts: {8: (2, "UPDATE table_0 SET col_0 = 'yXMDn', col_1 = 65.85 WHERE id BETWEEN 10 AND 10", <Thread(Thread-470, started 32468)>, 1738770152.2604764)}
2025-02-05 23:42:32,370 - stmt_idx: 8, status: success, result: None
2025-02-05 23:42:32,370 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 'yXMDn', col_1 = 65.85 WHERE id BETWEEN 10 AND 10
2025-02-05 23:42:32,370 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:42:32,370 - 
2025-02-05 23:42:32,481 - 
2025-02-05 23:42:32,482 - 执行前idx: 10, pending_stmts: {9: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-471, started 44372)>, 1738770152.4810834)}
2025-02-05 23:42:32,589 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:42:32,590 - 执行后idx: 10, pending_stmts: {9: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-471, started 44372)>, 1738770152.4810834)}
2025-02-05 23:42:32,590 - 
2025-02-05 23:42:32,696 - 
2025-02-05 23:42:32,698 - 执行前idx: 11, pending_stmts: {9: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-471, started 44372)>, 1738770152.4810834), 10: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-472, started 42676)>, 1738770152.6969664)}
2025-02-05 23:42:32,700 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:42:32,804 - stmt_idx: 9, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:42:32,804 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:42:32,804 - 错误: dictionary changed size during iteration
2025-02-05 23:42:32,808 - 序列遍历完成，开始查看剩余阻塞的语句：{10: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-472, stopped 42676)>, 1738770152.6969664)}
2025-02-05 23:42:32,808 - 
2025-02-05 23:42:32,808 - 执行前idx: 13, pending_stmts: {10: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE', <Thread(Thread-472, stopped 42676)>, 1738770152.6969664)}
2025-02-05 23:42:32,911 - stmt_idx: 10, status: success, result: None
2025-02-05 23:42:32,911 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE
2025-02-05 23:42:32,911 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:42:32,911 - 
2025-02-05 23:42:33,023 - 执行序列成功
2025-02-05 23:42:33,784 - is_atomic: True
2025-02-05 23:42:33,784 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:42:33,784 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_0 = 'dIjsc', col_1 = 23.87 WHERE (col_1 = 99.24)"), (2, "UPDATE table_0 SET col_0 = 'lLwif' WHERE (id = 5) AND (col_0 = 'texvr') AND (col_1 = 49.77)"), (2, "INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 'kdkRf', 5.29)"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0 FROM table_0 WHERE (id = 7) FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'iCWNp' WHERE id BETWEEN 8 AND 8"), (2, "UPDATE table_0 SET col_0 = 'yXMDn', col_1 = 65.85 WHERE id BETWEEN 10 AND 10"), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 FOR UPDATE')]
2025-02-05 23:42:33,784 - snapshots: {'before': {'table_0': [(1, 'zpisk', 63.49), (2, 'jajtn', 2.99), (3, 'ksoam', 73.8), (4, 'mivan', 99.24), (5, 'texvr', 49.77), (6, 'xpout', 6.38), (7, 'yvxwq', 69.98), (8, 'sacas', 89.57), (9, 'odhcf', 37.15), (10, 'yzchq', 25.27)]}, 'trx1': {'table_0': [(1, 'zpisk', 63.49), (2, 'jajtn', 2.99), (3, 'ksoam', 73.8), (4, 'mivan', 99.24), (5, 'texvr', 49.77), (6, 'xpout', 6.38), (7, 'yvxwq', 69.98), (8, 'sacas', 89.57), (9, 'odhcf', 37.15), (10, 'yzchq', 25.27)]}, 'trx2': {'table_0': [(1, 'zpisk', 63.49), (2, 'jajtn', 2.99), (3, 'ksoam', 73.8), (4, 'mivan', 99.24), (5, 'texvr', 49.77), (6, 'xpout', 6.38), (7, 'yvxwq', 69.98), (8, 'iCWNp', 89.57), (9, 'odhcf', 37.15), (10, 'yXMDn', 65.85), (11, 'kdkRf', 5.29)]}, 'serial': {'table_0': [(1, 'zpisk', 63.49), (2, 'jajtn', 2.99), (3, 'ksoam', 73.8), (4, 'mivan', 99.24), (5, 'texvr', 49.77), (6, 'xpout', 6.38), (7, 'yvxwq', 69.98), (8, 'iCWNp', 89.57), (9, 'odhcf', 37.15), (10, 'yXMDn', 65.85), (12, 'kdkRf', 5.29)]}}
2025-02-05 23:42:33,784 - 
2025-02-05 23:42:33,796 - iter: 63
2025-02-05 23:42:35,296 - table table_0 has 13 rows
2025-02-05 23:42:35,297 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [1, 2, 3, 13], 'intersection_row_ids': []}
2025-02-05 23:42:35,297 - lock_same_resource: False
2025-02-05 23:42:35,297 - 
2025-02-05 23:42:35,297 - non intersection phase1
2025-02-05 23:42:35,298 - 事务1在第一阶段自己加的锁: II
2025-02-05 23:42:35,298 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:42:35,298 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:42:35,298 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:42:35,300 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=12
2025-02-05 23:42:35,301 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:42:35,302 - params: {'set_expr': 'col_1 = 23.07, col_2 = 23', 'v1': '4', 'v2': '12', 'table': 'table_0'}
2025-02-05 23:42:35,304 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:42:35,305 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:35,305 - params: {'set_expr': 'col_0 = 31, col_1 = 32.83, col_2 = 6', 'cond': '(col_2 = 91) AND (col_1 = 26.56)', 'table': 'table_0'}
2025-02-05 23:42:35,309 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:42:35,310 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:35,310 - params: {'set_expr': 'col_1 = 86.96, col_2 = 33, col_0 = 80', 'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 23:42:35,313 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:42:35,315 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:35,315 - params: {'v1': '3', 'v2': '3', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:42:35,318 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:42:35,320 - needed_params: {'cond', 'table'}
2025-02-05 23:42:35,320 - params: {'cond': '(col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)', 'table': 'table_0'}
2025-02-05 23:42:35,320 - non intersection phase1 end
2025-02-05 23:42:35,320 - 
2025-02-05 23:42:35,320 - non intersection phase2
2025-02-05 23:42:35,325 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:42:35,327 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:35,328 - params: {'set_expr': 'col_0 = 10', 'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 23:42:35,332 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=10
2025-02-05 23:42:35,334 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:35,334 - params: {'v1': '5', 'v2': '10', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:42:35,334 - non intersection phase2 end
2025-02-05 23:42:35,334 - 
2025-02-05 23:42:35,334 - 生成死锁事务序列成功如下
2025-02-05 23:42:35,334 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_1 = 23.07, col_2 = 23 WHERE id BETWEEN 4 AND 12'), (2, 'UPDATE table_0 SET col_0 = 31, col_1 = 32.83, col_2 = 6 WHERE (col_2 = 91) AND (col_1 = 26.56)'), (2, 'UPDATE table_0 SET col_1 = 86.96, col_2 = 33, col_0 = 80 WHERE (id = 2)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)'), (1, 'UPDATE table_0 SET col_0 = 10 WHERE (id = 2)'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 10 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:42:36,860 - 创建事务1连接成功
2025-02-05 23:42:36,862 - 执行事务1语句: BEGIN
2025-02-05 23:42:36,863 - 执行事务1语句: UPDATE table_0 SET col_1 = 23.07, col_2 = 23 WHERE id BETWEEN 4 AND 12
2025-02-05 23:42:36,863 - 执行事务1语句: UPDATE table_0 SET col_0 = 10 WHERE (id = 2)
2025-02-05 23:42:36,866 - 执行事务1语句: COMMIT;
2025-02-05 23:42:36,870 - 执行事务1成功
2025-02-05 23:42:39,486 - 恢复初始状态成功
2025-02-05 23:42:40,261 - 创建事务2连接成功
2025-02-05 23:42:40,262 - 执行事务2语句: BEGIN
2025-02-05 23:42:40,264 - 执行事务2语句: UPDATE table_0 SET col_0 = 31, col_1 = 32.83, col_2 = 6 WHERE (col_2 = 91) AND (col_1 = 26.56)
2025-02-05 23:42:40,264 - 执行事务2语句: UPDATE table_0 SET col_1 = 86.96, col_2 = 33, col_0 = 80 WHERE (id = 2)
2025-02-05 23:42:40,265 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 23:42:40,266 - 执行事务2语句: DELETE FROM table_0 WHERE (col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)
2025-02-05 23:42:40,267 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 10 LOCK IN SHARE MODE
2025-02-05 23:42:40,269 - 执行事务2语句: COMMIT;
2025-02-05 23:42:40,273 - 执行事务2成功
2025-02-05 23:42:45,192 - 
2025-02-05 23:42:45,192 - 执行前idx: 3, pending_stmts: {2: (1, 'UPDATE table_0 SET col_1 = 23.07, col_2 = 23 WHERE id BETWEEN 4 AND 12', <Thread(Thread-473, started 36880)>, 1738770165.1922727)}
2025-02-05 23:42:45,293 - stmt_idx: 2, status: success, result: None
2025-02-05 23:42:45,293 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 23.07, col_2 = 23 WHERE id BETWEEN 4 AND 12
2025-02-05 23:42:45,294 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:42:45,294 - 
2025-02-05 23:42:45,401 - 
2025-02-05 23:42:45,402 - 执行前idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_0 = 31, col_1 = 32.83, col_2 = 6 WHERE (col_2 = 91) AND (col_1 = 26.56)', <Thread(Thread-474, started 36120)>, 1738770165.4018214)}
2025-02-05 23:42:45,503 - stmt_idx: 3, status: success, result: None
2025-02-05 23:42:45,503 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 31, col_1 = 32.83, col_2 = 6 WHERE (col_2 = 91) AND (col_1 = 26.56)
2025-02-05 23:42:45,503 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:42:45,504 - 
2025-02-05 23:42:45,611 - 
2025-02-05 23:42:45,612 - 执行前idx: 5, pending_stmts: {4: (2, 'UPDATE table_0 SET col_1 = 86.96, col_2 = 33, col_0 = 80 WHERE (id = 2)', <Thread(Thread-475, started 44088)>, 1738770165.6114614)}
2025-02-05 23:42:45,717 - stmt_idx: 4, status: success, result: None
2025-02-05 23:42:45,717 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 86.96, col_2 = 33, col_0 = 80 WHERE (id = 2)
2025-02-05 23:42:45,717 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:42:45,717 - 
2025-02-05 23:42:45,825 - 
2025-02-05 23:42:45,826 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE', <Thread(Thread-476, started 42920)>, 1738770165.8251534)}
2025-02-05 23:42:45,928 - stmt_idx: 5, status: success, result: None
2025-02-05 23:42:45,928 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE
2025-02-05 23:42:45,928 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:42:45,928 - 
2025-02-05 23:42:46,035 - 
2025-02-05 23:42:46,035 - 执行前idx: 7, pending_stmts: {6: (2, 'DELETE FROM table_0 WHERE (col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)', <Thread(Thread-477, started 34628)>, 1738770166.0358453)}
2025-02-05 23:42:46,143 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)
2025-02-05 23:42:46,143 - 执行后idx: 7, pending_stmts: {6: (2, 'DELETE FROM table_0 WHERE (col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)', <Thread(Thread-477, started 34628)>, 1738770166.0358453)}
2025-02-05 23:42:46,143 - 
2025-02-05 23:42:46,253 - 
2025-02-05 23:42:46,253 - 执行前idx: 8, pending_stmts: {6: (2, 'DELETE FROM table_0 WHERE (col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)', <Thread(Thread-477, started 34628)>, 1738770166.0358453), 7: (1, 'UPDATE table_0 SET col_0 = 10 WHERE (id = 2)', <Thread(Thread-478, started 12348)>, 1738770166.2530618)}
2025-02-05 23:42:46,256 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)
2025-02-05 23:42:46,357 - stmt_idx: 6, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:42:46,357 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: DELETE FROM table_0 WHERE (col_0 = 83) AND (col_2 = 68) AND (col_1 = 10.07)
2025-02-05 23:42:46,357 - 错误: dictionary changed size during iteration
2025-02-05 23:42:46,361 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'UPDATE table_0 SET col_0 = 10 WHERE (id = 2)', <Thread(Thread-478, stopped 12348)>, 1738770166.2530618)}
2025-02-05 23:42:46,362 - 
2025-02-05 23:42:46,362 - 执行前idx: 11, pending_stmts: {7: (1, 'UPDATE table_0 SET col_0 = 10 WHERE (id = 2)', <Thread(Thread-478, stopped 12348)>, 1738770166.2530618)}
2025-02-05 23:42:46,464 - stmt_idx: 7, status: success, result: None
2025-02-05 23:42:46,464 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 10 WHERE (id = 2)
2025-02-05 23:42:46,464 - 执行后idx: 11, pending_stmts: {}
2025-02-05 23:42:46,464 - 
2025-02-05 23:42:46,580 - 执行序列成功
2025-02-05 23:42:47,354 - is_atomic: True
2025-02-05 23:42:47,354 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:42:47,354 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'UPDATE table_0 SET col_1 = 23.07, col_2 = 23 WHERE id BETWEEN 4 AND 12'), (2, 'UPDATE table_0 SET col_0 = 31, col_1 = 32.83, col_2 = 6 WHERE (col_2 = 91) AND (col_1 = 26.56)'), (2, 'UPDATE table_0 SET col_1 = 86.96, col_2 = 33, col_0 = 80 WHERE (id = 2)'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 3 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 5 AND 10 LOCK IN SHARE MODE'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'UPDATE table_0 SET col_0 = 10 WHERE (id = 2)')]
2025-02-05 23:42:47,354 - snapshots: {'before': {'table_0': [(1, 80, 26.56, 91), (2, 66, 15.75, 33), (3, 3, 40.33, 3), (4, 84, 91.08, 84), (5, 28, 33.3, 68), (6, 36, 56.27, 92), (7, 3, 97.89, 13), (8, 76, 64.26, 36), (9, 67, 7.61, 52), (10, 33, 87.96, 85), (11, 26, 71.92, 40), (12, 88, 51.64, 11), (13, 83, 10.07, 68)]}, 'trx1': {'table_0': [(1, 80, 26.56, 91), (2, 10, 15.75, 33), (3, 3, 40.33, 3), (4, 84, 23.07, 23), (5, 28, 23.07, 23), (6, 36, 23.07, 23), (7, 3, 23.07, 23), (8, 76, 23.07, 23), (9, 67, 23.07, 23), (10, 33, 23.07, 23), (11, 26, 23.07, 23), (12, 88, 23.07, 23), (13, 83, 10.07, 68)]}, 'trx2': {'table_0': [(1, 80, 26.56, 91), (2, 80, 86.96, 33), (3, 3, 40.33, 3), (4, 84, 91.08, 84), (5, 28, 33.3, 68), (6, 36, 56.27, 92), (7, 3, 97.89, 13), (8, 76, 64.26, 36), (9, 67, 7.61, 52), (10, 33, 87.96, 85), (11, 26, 71.92, 40), (12, 88, 51.64, 11), (13, 83, 10.07, 68)]}, 'serial': {'table_0': [(1, 80, 26.56, 91), (2, 10, 15.75, 33), (3, 3, 40.33, 3), (4, 84, 23.07, 23), (5, 28, 23.07, 23), (6, 36, 23.07, 23), (7, 3, 23.07, 23), (8, 76, 23.07, 23), (9, 67, 23.07, 23), (10, 33, 23.07, 23), (11, 26, 23.07, 23), (12, 88, 23.07, 23), (13, 83, 10.07, 68)]}}
2025-02-05 23:42:47,354 - 
2025-02-05 23:42:47,365 - iter: 64
2025-02-05 23:42:48,850 - table table_0 has 8 rows
2025-02-05 23:42:48,850 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 23:42:48,850 - trx2_lock_row_ids: [2, 3, 4, 5, 6]
2025-02-05 23:42:48,850 - intersection_row_ids: [2, 3, 4, 5, 6]
2025-02-05 23:42:48,850 - trx1_exclusive_ids: [1, 7, 8]
2025-02-05 23:42:48,850 - trx2_exclusive_ids: []
2025-02-05 23:42:48,850 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'trx2_lock_row_ids': [2, 3, 4, 5, 6], 'intersection_row_ids': [2, 3, 4, 5, 6]}
2025-02-05 23:42:48,850 - lock_same_resource: True
2025-02-05 23:42:48,850 - 
2025-02-05 23:42:48,850 - intersection phase1
2025-02-05 23:42:48,853 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=8
2025-02-05 23:42:48,854 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:48,854 - params: {'v1': '1', 'v2': '8', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:42:48,858 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,860 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:48,860 - params: {'vals': "NULL, 46, 'riplT', 'ZPozj', 'zLNfZ', 'OrCoB'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_797', 'table': 'table_0'}
2025-02-05 23:42:48,864 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,866 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:48,866 - params: {'set_expr': 'col_0 = 85', 'cond': "(id = 3) AND (col_2 = 'qirac')", 'table': 'table_0'}
2025-02-05 23:42:48,870 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,871 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:48,871 - params: {'vals': "NULL, 93, 'mszBo', 'DpKGS', 'AVbqR', 'qTEDI'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_797', 'table': 'table_0'}
2025-02-05 23:42:48,875 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,876 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:42:48,876 - params: {'set_expr': "col_2 = 'VruCP', col_797 = 'KHOCd'", 'v1': '5', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:42:48,879 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,880 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:48,881 - params: {'set_expr': "col_797 = 'SneeH'", 'cond': "(id = 6) AND (col_2 = 'bpkqm') AND (col_797 IS NULL) AND (col_3 = 'maunb')", 'table': 'table_0'}
2025-02-05 23:42:48,881 - intersection phase1 end
2025-02-05 23:42:48,881 - 
2025-02-05 23:42:48,881 - intersection phase2
2025-02-05 23:42:48,881 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:42:48,881 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:42:48,881 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:42:48,881 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:42:48,885 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,887 - needed_params: {'cond', 'table'}
2025-02-05 23:42:48,887 - params: {'cond': "(col_0 = 31) AND (col_2 = 'tfwxi') AND (col_1 = 'zoktv')", 'table': 'table_0'}
2025-02-05 23:42:48,889 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,890 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:48,890 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_3', 'table': 'table_0'}
2025-02-05 23:42:48,893 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,894 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:48,894 - params: {'set_expr': "col_797 = 'iLmxq'", 'cond': "(col_3 = 'grptl') AND (col_2 = 'evcsk') AND (col_797 IS NULL)", 'table': 'table_0'}
2025-02-05 23:42:48,894 - intersection phase2 end
2025-02-05 23:42:48,894 - 
2025-02-05 23:42:48,895 - intersection phase3
2025-02-05 23:42:48,897 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:42:48,898 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:48,899 - params: {'vals': "NULL, 16, 'vnDgk', 'Udzgi', 'kdBjO', 'lmWKJ'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_797', 'table': 'table_0'}
2025-02-05 23:42:48,901 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=5
2025-02-05 23:42:48,902 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:48,903 - params: {'v1': '3', 'v2': '5', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_797', 'table': 'table_0'}
2025-02-05 23:42:48,905 - 生成锁SQL失败: 'insert'
2025-02-05 23:42:48,905 - 生成死锁事务序列失败: 'insert'
2025-02-05 23:42:48,905 - 
2025-02-05 23:42:48,905 - Error in iteration 64: 'insert'
2025-02-05 23:42:48,905 - 
2025-02-05 23:42:48,913 - iter: 65
2025-02-05 23:42:50,442 - table table_0 has 14 rows
2025-02-05 23:42:50,442 - trx1_lock_row_ids: [2, 4, 5, 6, 7, 10, 11, 12, 13, 14]
2025-02-05 23:42:50,442 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
2025-02-05 23:42:50,442 - intersection_row_ids: [2, 4, 5, 6, 7, 10, 11, 12, 13, 14]
2025-02-05 23:42:50,442 - trx1_exclusive_ids: []
2025-02-05 23:42:50,442 - trx2_exclusive_ids: [1, 3, 8, 9]
2025-02-05 23:42:50,443 - res_dict: {'trx1_lock_row_ids': [2, 4, 5, 6, 7, 10, 11, 12, 13, 14], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'intersection_row_ids': [2, 4, 5, 6, 7, 10, 11, 12, 13, 14]}
2025-02-05 23:42:50,443 - lock_same_resource: True
2025-02-05 23:42:50,443 - 
2025-02-05 23:42:50,443 - intersection phase1
2025-02-05 23:42:50,445 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=14
2025-02-05 23:42:50,446 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:42:50,446 - params: {'set_expr': "col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT'", 'v1': '1', 'v2': '14', 'table': 'table_0'}
2025-02-05 23:42:50,449 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,450 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:50,450 - params: {'cond': '(id = 2)', 'select_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:42:50,453 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,455 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:50,455 - params: {'cond': "(col_1 = 'yniyo')", 'select_cols': 'id, col_3', 'table': 'table_0'}
2025-02-05 23:42:50,459 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,460 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:50,460 - params: {'v1': '5', 'v2': '5', 'select_cols': 'col_0', 'table': 'table_0'}
2025-02-05 23:42:50,463 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,465 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:50,465 - params: {'cond': '(id = 6)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:42:50,468 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,469 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:50,470 - params: {'v1': '7', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:42:50,474 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,475 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:50,475 - params: {'cond': "(col_1 = 'mgwmw')", 'select_cols': 'id, col_3', 'table': 'table_0'}
2025-02-05 23:42:50,479 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,481 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:50,481 - params: {'cond': "(col_3 = 'kpxko') AND (col_0 = 71)", 'select_cols': 'col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:42:50,483 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,485 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:50,485 - params: {'cond': "(col_0 = 55) AND (col_3 = 'nijkm') AND (col_1 = 'cnapk')", 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 23:42:50,489 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,491 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:42:50,491 - params: {'v1': '13', 'v2': '13', 'select_cols': 'col_0, col_1, col_3', 'table': 'table_0'}
2025-02-05 23:42:50,494 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,495 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:42:50,496 - params: {'cond': "(col_1 = 'fhkkl') AND (col_3 = 'bafra')", 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:42:50,496 - intersection phase1 end
2025-02-05 23:42:50,496 - 
2025-02-05 23:42:50,496 - intersection phase2
2025-02-05 23:42:50,496 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:42:50,497 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:42:50,497 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:42:50,497 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:42:50,501 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,502 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:50,503 - params: {'set_expr': "col_1 = 'GMJyZ', col_0 = 26", 'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:42:50,507 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,508 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:50,508 - params: {'vals': "NULL, 72, 'kbBps', 'bmGjI', 'edxtp'", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:42:50,511 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,513 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:42:50,513 - params: {'set_expr': "col_0 = 28, col_3 = 'lKSbb', col_2 = 'GPecJ'", 'v1': '8', 'v2': '8', 'table': 'table_0'}
2025-02-05 23:42:50,517 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,519 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:42:50,519 - params: {'vals': "NULL, 76, 'qFKHY', 'kXSQx', 'aQpgC'", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:42:50,519 - intersection phase2 end
2025-02-05 23:42:50,519 - 
2025-02-05 23:42:50,519 - intersection phase3
2025-02-05 23:42:50,524 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=13, is_continuous=True, range_end_idx=14
2025-02-05 23:42:50,525 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:42:50,525 - params: {'set_expr': "col_1 = 'XlUhx'", 'v1': '13', 'v2': '14', 'table': 'table_0'}
2025-02-05 23:42:50,528 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:42:50,529 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:42:50,529 - params: {'set_expr': "col_0 = 13, col_2 = 'cJStC', col_1 = 'FHvSB'", 'cond': '(id = 5)', 'table': 'table_0'}
2025-02-05 23:42:50,529 - intersection phase3 end
2025-02-05 23:42:50,529 - 
2025-02-05 23:42:50,530 - 生成死锁事务序列成功如下
2025-02-05 23:42:50,530 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14"), (1, "SELECT id, col_3 FROM table_0 WHERE (col_1 = 'yniyo') LOCK IN SHARE MODE"), (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "SELECT id, col_3 FROM table_0 WHERE (col_1 = 'mgwmw') LOCK IN SHARE MODE"), (1, "SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_3 = 'kpxko') AND (col_0 = 71) LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_2 FROM table_0 WHERE (col_0 = 55) AND (col_3 = 'nijkm') AND (col_1 = 'cnapk') LOCK IN SHARE MODE"), (1, 'SELECT col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE'), (1, "SELECT id, col_1 FROM table_0 WHERE (col_1 = 'fhkkl') AND (col_3 = 'bafra') LOCK IN SHARE MODE"), (2, "UPDATE table_0 SET col_1 = 'GMJyZ', col_0 = 26 WHERE (id = 1)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 72, 'kbBps', 'bmGjI', 'edxtp')"), (2, "UPDATE table_0 SET col_0 = 28, col_3 = 'lKSbb', col_2 = 'GPecJ' WHERE id BETWEEN 8 AND 8"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76, 'qFKHY', 'kXSQx', 'aQpgC')"), (1, "UPDATE table_0 SET col_1 = 'XlUhx' WHERE id BETWEEN 13 AND 14"), (2, "UPDATE table_0 SET col_0 = 13, col_2 = 'cJStC', col_1 = 'FHvSB' WHERE (id = 5)"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:42:52,086 - 创建事务1连接成功
2025-02-05 23:42:52,088 - 执行事务1语句: BEGIN
2025-02-05 23:42:52,090 - 执行事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:42:52,091 - 执行事务1语句: SELECT id, col_3 FROM table_0 WHERE (col_1 = 'yniyo') LOCK IN SHARE MODE
2025-02-05 23:42:52,091 - 执行事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:42:52,092 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 23:42:52,092 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:42:52,093 - 执行事务1语句: SELECT id, col_3 FROM table_0 WHERE (col_1 = 'mgwmw') LOCK IN SHARE MODE
2025-02-05 23:42:52,094 - 执行事务1语句: SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_3 = 'kpxko') AND (col_0 = 71) LOCK IN SHARE MODE
2025-02-05 23:42:52,095 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (col_0 = 55) AND (col_3 = 'nijkm') AND (col_1 = 'cnapk') LOCK IN SHARE MODE
2025-02-05 23:42:52,096 - 执行事务1语句: SELECT col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE
2025-02-05 23:42:52,096 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE (col_1 = 'fhkkl') AND (col_3 = 'bafra') LOCK IN SHARE MODE
2025-02-05 23:42:52,097 - 执行事务1语句: UPDATE table_0 SET col_1 = 'XlUhx' WHERE id BETWEEN 13 AND 14
2025-02-05 23:42:52,099 - 执行事务1语句: COMMIT;
2025-02-05 23:42:52,104 - 执行事务1成功
2025-02-05 23:42:54,720 - 恢复初始状态成功
2025-02-05 23:42:55,490 - 创建事务2连接成功
2025-02-05 23:42:55,492 - 执行事务2语句: BEGIN
2025-02-05 23:42:55,493 - 执行事务2语句: UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14
2025-02-05 23:42:55,494 - 执行事务2语句: UPDATE table_0 SET col_1 = 'GMJyZ', col_0 = 26 WHERE (id = 1)
2025-02-05 23:42:55,494 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 72, 'kbBps', 'bmGjI', 'edxtp')
2025-02-05 23:42:55,495 - 执行事务2语句: UPDATE table_0 SET col_0 = 28, col_3 = 'lKSbb', col_2 = 'GPecJ' WHERE id BETWEEN 8 AND 8
2025-02-05 23:42:55,496 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76, 'qFKHY', 'kXSQx', 'aQpgC')
2025-02-05 23:42:55,496 - 执行事务2语句: UPDATE table_0 SET col_0 = 13, col_2 = 'cJStC', col_1 = 'FHvSB' WHERE (id = 5)
2025-02-05 23:42:55,498 - 执行事务2语句: COMMIT;
2025-02-05 23:42:55,503 - 执行事务2成功
2025-02-05 23:43:00,475 - 
2025-02-05 23:43:00,475 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-479, started 28208)>, 1738770180.4758918)}
2025-02-05 23:43:00,587 - stmt_idx: 2, status: success, result: None
2025-02-05 23:43:00,587 - 成功执行序列中事务1语句: SELECT id, col_1, col_2 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:43:00,587 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:43:00,587 - 
2025-02-05 23:43:00,697 - 
2025-02-05 23:43:00,697 - 执行前idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14", <Thread(Thread-480, started 19324)>, 1738770180.697048)}
2025-02-05 23:43:00,804 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14
2025-02-05 23:43:00,804 - 执行后idx: 4, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14", <Thread(Thread-480, started 19324)>, 1738770180.697048)}
2025-02-05 23:43:00,804 - 
2025-02-05 23:43:00,914 - 
2025-02-05 23:43:00,914 - 执行前idx: 5, pending_stmts: {3: (2, "UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14", <Thread(Thread-480, started 19324)>, 1738770180.697048), 4: (1, "SELECT id, col_3 FROM table_0 WHERE (col_1 = 'yniyo') LOCK IN SHARE MODE", <Thread(Thread-481, started 41568)>, 1738770180.9144192)}
2025-02-05 23:43:00,916 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_3 FROM table_0 WHERE (col_1 = 'yniyo') LOCK IN SHARE MODE
2025-02-05 23:43:01,020 - stmt_idx: 3, status: success, result: None
2025-02-05 23:43:01,020 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14
2025-02-05 23:43:01,020 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14
2025-02-05 23:43:01,127 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:43:01,128 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_3 FROM table_0 WHERE (col_1 = 'yniyo') LOCK IN SHARE MODE
2025-02-05 23:43:01,128 - 错误: dictionary changed size during iteration
2025-02-05 23:43:01,128 - 
2025-02-05 23:43:01,128 - 执行前idx: 14, pending_stmts: {13: (2, "UPDATE table_0 SET col_1 = 'GMJyZ', col_0 = 26 WHERE (id = 1)", <Thread(Thread-482, started 43248)>, 1738770181.128042)}
2025-02-05 23:43:01,236 - stmt_idx: 13, status: success, result: None
2025-02-05 23:43:01,236 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'GMJyZ', col_0 = 26 WHERE (id = 1)
2025-02-05 23:43:01,236 - 执行后idx: 14, pending_stmts: {}
2025-02-05 23:43:01,236 - 
2025-02-05 23:43:01,343 - 
2025-02-05 23:43:01,343 - 执行前idx: 15, pending_stmts: {14: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 72, 'kbBps', 'bmGjI', 'edxtp')", <Thread(Thread-483, started 4468)>, 1738770181.3439965)}
2025-02-05 23:43:01,446 - stmt_idx: 14, status: success, result: None
2025-02-05 23:43:01,446 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 72, 'kbBps', 'bmGjI', 'edxtp')
2025-02-05 23:43:01,446 - 执行后idx: 15, pending_stmts: {}
2025-02-05 23:43:01,446 - 
2025-02-05 23:43:01,557 - 
2025-02-05 23:43:01,557 - 执行前idx: 16, pending_stmts: {15: (2, "UPDATE table_0 SET col_0 = 28, col_3 = 'lKSbb', col_2 = 'GPecJ' WHERE id BETWEEN 8 AND 8", <Thread(Thread-484, started 32404)>, 1738770181.5570202)}
2025-02-05 23:43:01,665 - stmt_idx: 15, status: success, result: None
2025-02-05 23:43:01,665 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 28, col_3 = 'lKSbb', col_2 = 'GPecJ' WHERE id BETWEEN 8 AND 8
2025-02-05 23:43:01,665 - 执行后idx: 16, pending_stmts: {}
2025-02-05 23:43:01,665 - 
2025-02-05 23:43:01,774 - 
2025-02-05 23:43:01,775 - 执行前idx: 17, pending_stmts: {16: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76, 'qFKHY', 'kXSQx', 'aQpgC')", <Thread(Thread-485, started 9992)>, 1738770181.774447)}
2025-02-05 23:43:01,882 - stmt_idx: 16, status: success, result: None
2025-02-05 23:43:01,882 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76, 'qFKHY', 'kXSQx', 'aQpgC')
2025-02-05 23:43:01,882 - 执行后idx: 17, pending_stmts: {}
2025-02-05 23:43:01,882 - 
2025-02-05 23:43:01,990 - 
2025-02-05 23:43:01,990 - 执行前idx: 19, pending_stmts: {18: (2, "UPDATE table_0 SET col_0 = 13, col_2 = 'cJStC', col_1 = 'FHvSB' WHERE (id = 5)", <Thread(Thread-486, started 39580)>, 1738770181.990648)}
2025-02-05 23:43:02,095 - stmt_idx: 18, status: success, result: None
2025-02-05 23:43:02,095 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 13, col_2 = 'cJStC', col_1 = 'FHvSB' WHERE (id = 5)
2025-02-05 23:43:02,095 - 执行后idx: 19, pending_stmts: {}
2025-02-05 23:43:02,095 - 
2025-02-05 23:43:02,207 - 执行序列成功
2025-02-05 23:43:03,000 - is_atomic: True
2025-02-05 23:43:03,000 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:43:03,000 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_1, col_2 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_0 = 34, col_1 = 'XNdXV', col_3 = 'YQupT' WHERE id BETWEEN 1 AND 14"), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: SELECT col_0 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, '--Skipped, trx_id: 1, stmt: SELECT id FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (1, '--Skipped, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "--Skipped, trx_id: 1, stmt: SELECT id, col_3 FROM table_0 WHERE (col_1 = 'mgwmw') LOCK IN SHARE MODE"), (1, "--Skipped, trx_id: 1, stmt: SELECT col_0, col_1, col_2 FROM table_0 WHERE (col_3 = 'kpxko') AND (col_0 = 71) LOCK IN SHARE MODE"), (1, "--Skipped, trx_id: 1, stmt: SELECT id, col_0, col_2 FROM table_0 WHERE (col_0 = 55) AND (col_3 = 'nijkm') AND (col_1 = 'cnapk') LOCK IN SHARE MODE"), (1, '--Skipped, trx_id: 1, stmt: SELECT col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 13 AND 13 LOCK IN SHARE MODE'), (1, "--Skipped, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE (col_1 = 'fhkkl') AND (col_3 = 'bafra') LOCK IN SHARE MODE"), (2, "UPDATE table_0 SET col_1 = 'GMJyZ', col_0 = 26 WHERE (id = 1)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 72, 'kbBps', 'bmGjI', 'edxtp')"), (2, "UPDATE table_0 SET col_0 = 28, col_3 = 'lKSbb', col_2 = 'GPecJ' WHERE id BETWEEN 8 AND 8"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 76, 'qFKHY', 'kXSQx', 'aQpgC')"), (1, "--Skipped, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'XlUhx' WHERE id BETWEEN 13 AND 14"), (2, "UPDATE table_0 SET col_0 = 13, col_2 = 'cJStC', col_1 = 'FHvSB' WHERE (id = 5)"), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-05 23:43:03,000 - snapshots: {'before': {'table_0': [(1, 1, 'ewyou', 'mkhbt', 'niyks'), (2, 40, 'scpbi', 'yqgsc', 'zoinn'), (3, 95, 'slmmo', 'tywfi', 'hvnuh'), (4, 62, 'yniyo', 'eejxy', 'uzrnb'), (5, 3, 'jwkmo', 'fmfzc', 'cwbaw'), (6, 50, 'xbvbt', 'ywrgz', 'fuvjz'), (7, 70, 'tcovm', 'bzbof', 'tpsgf'), (8, 27, 'fhqob', 'frhcm', 'tbmvm'), (9, 96, 'gztbp', 'htjee', 'pzbuj'), (10, 86, 'mgwmw', 'pqytg', 'cactd'), (11, 71, 'eahzj', 'uwige', 'kpxko'), (12, 55, 'cnapk', 'hwulb', 'nijkm'), (13, 78, 'rpxgb', 'gmjgs', 'xvddz'), (14, 77, 'fhkkl', 'bbuwu', 'bafra')]}, 'trx1': {'table_0': [(1, 1, 'ewyou', 'mkhbt', 'niyks'), (2, 40, 'scpbi', 'yqgsc', 'zoinn'), (3, 95, 'slmmo', 'tywfi', 'hvnuh'), (4, 62, 'yniyo', 'eejxy', 'uzrnb'), (5, 3, 'jwkmo', 'fmfzc', 'cwbaw'), (6, 50, 'xbvbt', 'ywrgz', 'fuvjz'), (7, 70, 'tcovm', 'bzbof', 'tpsgf'), (8, 27, 'fhqob', 'frhcm', 'tbmvm'), (9, 96, 'gztbp', 'htjee', 'pzbuj'), (10, 86, 'mgwmw', 'pqytg', 'cactd'), (11, 71, 'eahzj', 'uwige', 'kpxko'), (12, 55, 'cnapk', 'hwulb', 'nijkm'), (13, 78, 'XlUhx', 'gmjgs', 'xvddz'), (14, 77, 'XlUhx', 'bbuwu', 'bafra')]}, 'trx2': {'table_0': [(1, 26, 'GMJyZ', 'mkhbt', 'YQupT'), (2, 34, 'XNdXV', 'yqgsc', 'YQupT'), (3, 34, 'XNdXV', 'tywfi', 'YQupT'), (4, 34, 'XNdXV', 'eejxy', 'YQupT'), (5, 13, 'FHvSB', 'cJStC', 'YQupT'), (6, 34, 'XNdXV', 'ywrgz', 'YQupT'), (7, 34, 'XNdXV', 'bzbof', 'YQupT'), (8, 28, 'XNdXV', 'GPecJ', 'lKSbb'), (9, 34, 'XNdXV', 'htjee', 'YQupT'), (10, 34, 'XNdXV', 'pqytg', 'YQupT'), (11, 34, 'XNdXV', 'uwige', 'YQupT'), (12, 34, 'XNdXV', 'hwulb', 'YQupT'), (13, 34, 'XNdXV', 'gmjgs', 'YQupT'), (14, 34, 'XNdXV', 'bbuwu', 'YQupT'), (15, 72, 'kbBps', 'bmGjI', 'edxtp'), (16, 76, 'qFKHY', 'kXSQx', 'aQpgC')]}, 'serial': {'table_0': [(1, 26, 'GMJyZ', 'mkhbt', 'YQupT'), (2, 34, 'XNdXV', 'yqgsc', 'YQupT'), (3, 34, 'XNdXV', 'tywfi', 'YQupT'), (4, 34, 'XNdXV', 'eejxy', 'YQupT'), (5, 13, 'FHvSB', 'cJStC', 'YQupT'), (6, 34, 'XNdXV', 'ywrgz', 'YQupT'), (7, 34, 'XNdXV', 'bzbof', 'YQupT'), (8, 28, 'XNdXV', 'GPecJ', 'lKSbb'), (9, 34, 'XNdXV', 'htjee', 'YQupT'), (10, 34, 'XNdXV', 'pqytg', 'YQupT'), (11, 34, 'XNdXV', 'uwige', 'YQupT'), (12, 34, 'XNdXV', 'hwulb', 'YQupT'), (13, 34, 'XNdXV', 'gmjgs', 'YQupT'), (14, 34, 'XNdXV', 'bbuwu', 'YQupT'), (17, 72, 'kbBps', 'bmGjI', 'edxtp'), (18, 76, 'qFKHY', 'kXSQx', 'aQpgC')]}}
2025-02-05 23:43:03,000 - 
2025-02-05 23:43:03,011 - iter: 66
2025-02-05 23:43:04,517 - table table_0 has 5 rows
2025-02-05 23:43:04,517 - trx1_lock_row_ids: [1, 2, 3, 4, 5]
2025-02-05 23:43:04,517 - trx2_lock_row_ids: [1, 3]
2025-02-05 23:43:04,517 - intersection_row_ids: [1, 3]
2025-02-05 23:43:04,517 - trx1_exclusive_ids: [2, 4, 5]
2025-02-05 23:43:04,517 - trx2_exclusive_ids: []
2025-02-05 23:43:04,518 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [1, 3], 'intersection_row_ids': [1, 3]}
2025-02-05 23:43:04,518 - lock_same_resource: True
2025-02-05 23:43:04,518 - 
2025-02-05 23:43:04,518 - intersection phase1
2025-02-05 23:43:04,520 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 23:43:04,521 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:04,521 - params: {'v1': '1', 'v2': '5', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:43:04,524 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:43:04,525 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:43:04,525 - params: {'cond': '(id = 1)', 'select_cols': 'col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:43:04,528 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:43:04,529 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:43:04,529 - params: {'cond': "(id = 3) AND (col_2 = 'zuupy') AND (col_1 = 19.83)", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:43:04,529 - intersection phase1 end
2025-02-05 23:43:04,529 - 
2025-02-05 23:43:04,529 - intersection phase2
2025-02-05 23:43:04,529 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:43:04,529 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:43:04,529 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:43:04,529 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 23:43:04,534 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:43:04,536 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:04,536 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:43:04,541 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:43:04,543 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:04,543 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:43:04,547 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:43:04,549 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:04,549 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:43:04,549 - intersection phase2 end
2025-02-05 23:43:04,550 - 
2025-02-05 23:43:04,550 - intersection phase3
2025-02-05 23:43:04,552 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:43:04,554 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:04,554 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:43:04,557 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=4
2025-02-05 23:43:04,559 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:43:04,559 - params: {'set_expr': "col_1 = 27.3, col_0 = 68, col_2 = 'rQfWu'", 'v1': '4', 'v2': '4', 'table': 'table_0'}
2025-02-05 23:43:04,562 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:43:04,563 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:43:04,563 - params: {'set_expr': 'col_0 = 62', 'v1': '5', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:43:04,564 - intersection phase3 end
2025-02-05 23:43:04,564 - 
2025-02-05 23:43:04,564 - 生成死锁事务序列成功如下
2025-02-05 23:43:04,564 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT col_0, col_1, col_2 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (2, "SELECT * FROM table_0 WHERE (id = 3) AND (col_2 = 'zuupy') AND (col_1 = 19.83) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:43:06,102 - 创建事务1连接成功
2025-02-05 23:43:06,103 - 执行事务1语句: BEGIN
2025-02-05 23:43:06,104 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE
2025-02-05 23:43:06,106 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 23:43:06,106 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:43:06,107 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:43:06,107 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:43:06,108 - 执行事务1语句: COMMIT;
2025-02-05 23:43:06,113 - 执行事务1成功
2025-02-05 23:43:08,711 - 恢复初始状态成功
2025-02-05 23:43:09,485 - 创建事务2连接成功
2025-02-05 23:43:09,487 - 执行事务2语句: BEGIN
2025-02-05 23:43:09,488 - 执行事务2语句: SELECT col_0, col_1, col_2 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-05 23:43:09,488 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 3) AND (col_2 = 'zuupy') AND (col_1 = 19.83) LOCK IN SHARE MODE
2025-02-05 23:43:09,490 - 执行事务2语句: UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5
2025-02-05 23:43:09,492 - 执行事务2语句: COMMIT;
2025-02-05 23:43:09,496 - 执行事务2成功
2025-02-05 23:43:14,384 - 
2025-02-05 23:43:14,384 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE', <Thread(Thread-487, started 33948)>, 1738770194.3842587)}
2025-02-05 23:43:14,499 - stmt_idx: 2, status: success, result: None
2025-02-05 23:43:14,500 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE
2025-02-05 23:43:14,500 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:43:14,500 - 
2025-02-05 23:43:14,607 - 
2025-02-05 23:43:14,607 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT col_0, col_1, col_2 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE', <Thread(Thread-488, started 22708)>, 1738770194.6071668)}
2025-02-05 23:43:14,711 - stmt_idx: 3, status: success, result: None
2025-02-05 23:43:14,711 - 成功执行序列中事务2语句: SELECT col_0, col_1, col_2 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE
2025-02-05 23:43:14,711 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:43:14,711 - 
2025-02-05 23:43:14,815 - 
2025-02-05 23:43:14,816 - 执行前idx: 5, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (id = 3) AND (col_2 = 'zuupy') AND (col_1 = 19.83) LOCK IN SHARE MODE", <Thread(Thread-489, started 38492)>, 1738770194.815486)}
2025-02-05 23:43:14,923 - stmt_idx: 4, status: success, result: None
2025-02-05 23:43:14,923 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 3) AND (col_2 = 'zuupy') AND (col_1 = 19.83) LOCK IN SHARE MODE
2025-02-05 23:43:14,923 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:43:14,923 - 
2025-02-05 23:43:15,028 - 
2025-02-05 23:43:15,028 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE', <Thread(Thread-490, started 39732)>, 1738770195.0280428)}
2025-02-05 23:43:15,133 - stmt_idx: 5, status: success, result: None
2025-02-05 23:43:15,133 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE
2025-02-05 23:43:15,133 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:43:15,133 - 
2025-02-05 23:43:15,240 - 
2025-02-05 23:43:15,241 - 执行前idx: 7, pending_stmts: {6: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-491, started 33128)>, 1738770195.240735)}
2025-02-05 23:43:15,350 - stmt_idx: 6, status: success, result: None
2025-02-05 23:43:15,350 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:43:15,350 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:43:15,351 - 
2025-02-05 23:43:15,460 - 
2025-02-05 23:43:15,461 - 执行前idx: 8, pending_stmts: {7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-492, started 5652)>, 1738770195.4608035)}
2025-02-05 23:43:15,571 - stmt_idx: 7, status: success, result: None
2025-02-05 23:43:15,571 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:43:15,571 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:43:15,571 - 
2025-02-05 23:43:15,681 - 
2025-02-05 23:43:15,681 - 执行前idx: 9, pending_stmts: {8: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-493, started 2996)>, 1738770195.6810958)}
2025-02-05 23:43:15,790 - stmt_idx: 8, status: success, result: None
2025-02-05 23:43:15,790 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:43:15,790 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:43:15,790 - 
2025-02-05 23:43:15,898 - 
2025-02-05 23:43:15,898 - 执行前idx: 10, pending_stmts: {9: (2, 'UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5', <Thread(Thread-494, started 40128)>, 1738770195.8984041)}
2025-02-05 23:43:16,005 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5
2025-02-05 23:43:16,005 - 执行后idx: 10, pending_stmts: {9: (2, 'UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5', <Thread(Thread-494, started 40128)>, 1738770195.8984041)}
2025-02-05 23:43:16,005 - 
2025-02-05 23:43:16,116 - 序列遍历完成，开始查看剩余阻塞的语句：{9: (2, 'UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5', <Thread(Thread-494, started 40128)>, 1738770195.8984041)}
2025-02-05 23:43:16,116 - 
2025-02-05 23:43:16,116 - 执行前idx: 12, pending_stmts: {9: (2, 'UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5', <Thread(Thread-494, stopped 40128)>, 1738770195.8984041)}
2025-02-05 23:43:16,222 - stmt_idx: 9, status: success, result: None
2025-02-05 23:43:16,222 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5
2025-02-05 23:43:16,222 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5
2025-02-05 23:43:16,223 - 执行后idx: 12, pending_stmts: {11: (2, 'COMMIT', <Thread(Thread-495, started 7192)>, 1738770196.2234385)}
2025-02-05 23:43:16,223 - 
2025-02-05 23:43:16,330 - 序列遍历完成，开始查看剩余阻塞的语句：{11: (2, 'COMMIT', <Thread(Thread-495, stopped 7192)>, 1738770196.2234385)}
2025-02-05 23:43:16,330 - 
2025-02-05 23:43:16,330 - 执行前idx: 12, pending_stmts: {11: (2, 'COMMIT', <Thread(Thread-495, stopped 7192)>, 1738770196.2234385)}
2025-02-05 23:43:16,433 - stmt_idx: 11, status: success, result: None
2025-02-05 23:43:16,433 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:43:16,433 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:43:16,433 - 
2025-02-05 23:43:16,543 - 执行序列成功
2025-02-05 23:43:17,314 - is_atomic: True
2025-02-05 23:43:17,314 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:43:17,314 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT col_0, col_1, col_2 FROM table_0 WHERE (id = 1) LOCK IN SHARE MODE'), (2, "SELECT * FROM table_0 WHERE (id = 3) AND (col_2 = 'zuupy') AND (col_1 = 19.83) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 2 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'UPDATE table_0 SET col_0 = 62 WHERE id BETWEEN 5 AND 5'), (2, 'COMMIT')]
2025-02-05 23:43:17,314 - snapshots: {'before': {'table_0': [(1, 95, 44.25, 'jvrpq'), (2, 64, 12.07, 'prqnj'), (3, 65, 19.83, 'zuupy'), (4, 88, 59.12, 'tfstt'), (5, 53, 1.17, 'vavfg')]}, 'trx1': {'table_0': [(1, 95, 44.25, 'jvrpq'), (2, 64, 12.07, 'prqnj'), (3, 65, 19.83, 'zuupy'), (4, 88, 59.12, 'tfstt'), (5, 53, 1.17, 'vavfg')]}, 'trx2': {'table_0': [(1, 95, 44.25, 'jvrpq'), (2, 64, 12.07, 'prqnj'), (3, 65, 19.83, 'zuupy'), (4, 88, 59.12, 'tfstt'), (5, 62, 1.17, 'vavfg')]}, 'serial': {'table_0': [(1, 95, 44.25, 'jvrpq'), (2, 64, 12.07, 'prqnj'), (3, 65, 19.83, 'zuupy'), (4, 88, 59.12, 'tfstt'), (5, 62, 1.17, 'vavfg')]}}
2025-02-05 23:43:17,314 - 
2025-02-05 23:43:17,325 - iter: 67
2025-02-05 23:43:18,816 - table table_0 has 5 rows
2025-02-05 23:43:18,817 - res_dict: {'trx1_lock_row_ids': [1, 2], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 23:43:18,817 - lock_same_resource: False
2025-02-05 23:43:18,817 - 
2025-02-05 23:43:18,817 - non intersection phase1
2025-02-05 23:43:18,817 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:43:18,817 - 事务2在第一阶段自己加的锁: S
2025-02-05 23:43:18,817 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:43:18,817 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:43:18,820 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 23:43:18,821 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:18,821 - params: {'v1': '1', 'v2': '2', 'select_cols': 'id, col_0, col_1, col_2, col_919', 'table': 'table_0'}
2025-02-05 23:43:18,824 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:43:18,826 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:18,826 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:43:18,826 - non intersection phase1 end
2025-02-05 23:43:18,826 - 
2025-02-05 23:43:18,826 - non intersection phase2
2025-02-05 23:43:18,830 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:43:18,832 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:43:18,832 - params: {'set_expr': "col_919 = 'dgHjX', col_0 = 'NSfrb', col_1 = 41.63, col_2 = 61", 'cond': '(id = 5) AND (col_2 = 28) AND (col_516 IS NULL) AND (col_1 = 66.49)', 'table': 'table_0'}
2025-02-05 23:43:18,835 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 23:43:18,836 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:18,836 - params: {'v1': '1', 'v2': '2', 'select_cols': 'id, col_0, col_1, col_2, col_516, col_919', 'table': 'table_0'}
2025-02-05 23:43:18,836 - non intersection phase2 end
2025-02-05 23:43:18,836 - 
2025-02-05 23:43:18,837 - 生成死锁事务序列成功如下
2025-02-05 23:43:18,837 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (1, "UPDATE table_0 SET col_919 = 'dgHjX', col_0 = 'NSfrb', col_1 = 41.63, col_2 = 61 WHERE (id = 5) AND (col_2 = 28) AND (col_516 IS NULL) AND (col_1 = 66.49)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:43:20,370 - 创建事务1连接成功
2025-02-05 23:43:20,372 - 执行事务1语句: BEGIN
2025-02-05 23:43:20,373 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:43:20,374 - 执行事务1语句: UPDATE table_0 SET col_919 = 'dgHjX', col_0 = 'NSfrb', col_1 = 41.63, col_2 = 61 WHERE (id = 5) AND (col_2 = 28) AND (col_516 IS NULL) AND (col_1 = 66.49)
2025-02-05 23:43:20,375 - 执行事务1语句: COMMIT;
2025-02-05 23:43:20,380 - 执行事务1成功
2025-02-05 23:43:22,993 - 恢复初始状态成功
2025-02-05 23:43:23,767 - 创建事务2连接成功
2025-02-05 23:43:23,768 - 执行事务2语句: BEGIN
2025-02-05 23:43:23,769 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:43:23,770 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:43:23,770 - 执行事务2语句: COMMIT;
2025-02-05 23:43:23,775 - 执行事务2成功
2025-02-05 23:43:28,731 - 
2025-02-05 23:43:28,731 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-496, started 28376)>, 1738770208.7319448)}
2025-02-05 23:43:28,837 - stmt_idx: 2, status: success, result: None
2025-02-05 23:43:28,837 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:43:28,837 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:43:28,837 - 
2025-02-05 23:43:28,947 - 
2025-02-05 23:43:28,948 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-497, started 43552)>, 1738770208.9472766)}
2025-02-05 23:43:29,051 - stmt_idx: 3, status: success, result: None
2025-02-05 23:43:29,052 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:43:29,052 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:43:29,052 - 
2025-02-05 23:43:29,156 - 
2025-02-05 23:43:29,157 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-498, started 40212)>, 1738770209.156103)}
2025-02-05 23:43:29,260 - wait for lock, trx_id: 2, stmt: SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:43:29,261 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-498, started 40212)>, 1738770209.156103)}
2025-02-05 23:43:29,261 - 
2025-02-05 23:43:29,362 - 
2025-02-05 23:43:29,363 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-498, started 40212)>, 1738770209.156103), 5: (1, "UPDATE table_0 SET col_919 = 'dgHjX', col_0 = 'NSfrb', col_1 = 41.63, col_2 = 61 WHERE (id = 5) AND (col_2 = 28) AND (col_516 IS NULL) AND (col_1 = 66.49)", <Thread(Thread-499, started 38352)>, 1738770209.3622737)}
2025-02-05 23:43:29,365 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_919 = 'dgHjX', col_0 = 'NSfrb', col_1 = 41.63, col_2 = 61 WHERE (id = 5) AND (col_2 = 28) AND (col_516 IS NULL) AND (col_1 = 66.49)
2025-02-05 23:43:29,471 - stmt_idx: 4, status: success, result: None
2025-02-05 23:43:29,472 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:43:29,472 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:43:29,578 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:43:29,578 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: UPDATE table_0 SET col_919 = 'dgHjX', col_0 = 'NSfrb', col_1 = 41.63, col_2 = 61 WHERE (id = 5) AND (col_2 = 28) AND (col_516 IS NULL) AND (col_1 = 66.49)
2025-02-05 23:43:29,578 - 错误: dictionary changed size during iteration
2025-02-05 23:43:29,582 - 执行序列成功
2025-02-05 23:43:30,355 - is_atomic: True
2025-02-05 23:43:30,355 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:43:30,355 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_516, col_919 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 23:43:30,355 - snapshots: {'before': {'table_0': [(1, 'baojt', 52.86, 97, None, None), (2, 'sdeli', 52.73, 84, None, None), (3, 'bfdnx', 46.54, 32, None, None), (4, 'qpuik', 95.21, 43, None, None), (5, 'lbchc', 66.49, 28, None, None)]}, 'trx1': {'table_0': [(1, 'baojt', 52.86, 97, None, None), (2, 'sdeli', 52.73, 84, None, None), (3, 'bfdnx', 46.54, 32, None, None), (4, 'qpuik', 95.21, 43, None, None), (5, 'lbchc', 66.49, 28, None, None)]}, 'trx2': {'table_0': [(1, 'baojt', 52.86, 97, None, None), (2, 'sdeli', 52.73, 84, None, None), (3, 'bfdnx', 46.54, 32, None, None), (4, 'qpuik', 95.21, 43, None, None), (5, 'lbchc', 66.49, 28, None, None)]}, 'serial': {'table_0': [(1, 'baojt', 52.86, 97, None, None), (2, 'sdeli', 52.73, 84, None, None), (3, 'bfdnx', 46.54, 32, None, None), (4, 'qpuik', 95.21, 43, None, None), (5, 'lbchc', 66.49, 28, None, None)]}}
2025-02-05 23:43:30,355 - 
2025-02-05 23:43:30,366 - iter: 68
2025-02-05 23:43:31,879 - table table_0 has 15 rows
2025-02-05 23:43:31,880 - trx1_lock_row_ids: [6, 7, 8, 10, 12, 13, 14, 15]
2025-02-05 23:43:31,880 - trx2_lock_row_ids: [6, 7, 8, 10, 11, 12, 13, 14, 15]
2025-02-05 23:43:31,880 - intersection_row_ids: [6, 7, 8, 10, 12, 13, 14, 15]
2025-02-05 23:43:31,880 - trx1_exclusive_ids: []
2025-02-05 23:43:31,880 - trx2_exclusive_ids: [11]
2025-02-05 23:43:31,880 - res_dict: {'trx1_lock_row_ids': [6, 7, 8, 10, 12, 13, 14, 15], 'trx2_lock_row_ids': [6, 7, 8, 10, 11, 12, 13, 14, 15], 'intersection_row_ids': [6, 7, 8, 10, 12, 13, 14, 15]}
2025-02-05 23:43:31,880 - lock_same_resource: True
2025-02-05 23:43:31,880 - 
2025-02-05 23:43:31,880 - intersection phase1
2025-02-05 23:43:31,884 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,885 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:31,885 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,889 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,892 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:31,892 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:43:31,896 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,898 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:31,898 - params: {'v1': '8', 'v2': '8', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:43:31,901 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,902 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:43:31,903 - params: {'cond': '(col_2 = 73)', 'select_cols': 'col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:43:31,905 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,907 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:43:31,908 - params: {'cond': '(id = 12) AND (col_2 = 19)', 'select_cols': 'id, col_0, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,911 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,912 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:43:31,912 - params: {'cond': "(col_3 = 'jdbdl')", 'select_cols': 'col_0, col_1, col_3', 'table': 'table_0'}
2025-02-05 23:43:31,917 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,918 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:31,918 - params: {'v1': '14', 'v2': '14', 'select_cols': 'id, col_0, col_1, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,921 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,923 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:43:31,923 - params: {'cond': '(id = 15) AND (col_0 = 9.68) AND (col_2 = 76)', 'select_cols': 'id, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,926 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,928 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:43:31,928 - params: {'vals': "NULL, 10.01, 'PDlhr', 87, 'wdVPJ', 'AQyNx'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,931 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,933 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:43:31,933 - params: {'vals': "NULL, 49.42, 'aIIWK', 11, 'MVgRO', 'BmcJE'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,936 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,937 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:43:31,937 - params: {'set_expr': "col_3 = 'YrUvp', col_4 = 'Ppwix', col_1 = 'AVToK', col_0 = 63.56", 'v1': '8', 'v2': '8', 'table': 'table_0'}
2025-02-05 23:43:31,941 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,942 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:43:31,942 - params: {'set_expr': "col_0 = 29.91, col_1 = 'Ukohz'", 'cond': '(id = 10)', 'table': 'table_0'}
2025-02-05 23:43:31,946 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,947 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:43:31,947 - params: {'vals': "NULL, 58.11, 'vNOBN', 26, 'MDISC', 'bLjhp'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,951 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,952 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:43:31,952 - params: {'set_expr': "col_2 = 35, col_1 = 'mxyeV', col_3 = 'zZscN', col_0 = 3.14", 'cond': "(col_3 = 'jdbdl')", 'table': 'table_0'}
2025-02-05 23:43:31,955 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,957 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:43:31,957 - params: {'vals': "NULL, 34.51, 'rcUag', 7, 'iJZbY', 'ySQoR'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,960 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=15, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,962 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:43:31,962 - params: {'vals': "NULL, 54.82, 'ogTsD', 86, 'pgayp', 'sBWoa'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,962 - intersection phase1 end
2025-02-05 23:43:31,962 - 
2025-02-05 23:43:31,962 - intersection phase2
2025-02-05 23:43:31,963 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:43:31,963 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:43:31,963 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:43:31,963 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:43:31,966 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,967 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:31,968 - params: {'v1': '11', 'v2': '11', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 23:43:31,968 - intersection phase2 end
2025-02-05 23:43:31,968 - 
2025-02-05 23:43:31,968 - intersection phase3
2025-02-05 23:43:31,971 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,973 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:43:31,973 - params: {'vals': "NULL, 80.34, 'sjaBH', 13, 'DOaBW', 'xrQUQ'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,977 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:43:31,978 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:43:31,978 - params: {'cond': '(id = 10) AND (col_2 = 73)', 'select_cols': 'id, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:43:31,978 - intersection phase3 end
2025-02-05 23:43:31,978 - 
2025-02-05 23:43:31,978 - 生成死锁事务序列成功如下
2025-02-05 23:43:31,978 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 10.01, 'PDlhr', 87, 'wdVPJ', 'AQyNx')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 49.42, 'aIIWK', 11, 'MVgRO', 'BmcJE')"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 73) LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_3 = 'YrUvp', col_4 = 'Ppwix', col_1 = 'AVToK', col_0 = 63.56 WHERE id BETWEEN 8 AND 8"), (1, 'SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE (id = 12) AND (col_2 = 19) LOCK IN SHARE MODE'), (1, "SELECT col_0, col_1, col_3 FROM table_0 WHERE (col_3 = 'jdbdl') LOCK IN SHARE MODE"), (2, "UPDATE table_0 SET col_0 = 29.91, col_1 = 'Ukohz' WHERE (id = 10)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 58.11, 'vNOBN', 26, 'MDISC', 'bLjhp')"), (1, 'SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_2 = 35, col_1 = 'mxyeV', col_3 = 'zZscN', col_0 = 3.14 WHERE (col_3 = 'jdbdl')"), (1, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (id = 15) AND (col_0 = 9.68) AND (col_2 = 76) LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 34.51, 'rcUag', 7, 'iJZbY', 'ySQoR')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 54.82, 'ogTsD', 86, 'pgayp', 'sBWoa')"), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 80.34, 'sjaBH', 13, 'DOaBW', 'xrQUQ')"), (2, 'SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 10) AND (col_2 = 73) LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:43:33,529 - 创建事务1连接成功
2025-02-05 23:43:33,531 - 执行事务1语句: BEGIN
2025-02-05 23:43:33,532 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:43:33,533 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:43:33,534 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:43:33,535 - 执行事务1语句: SELECT col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 73) LOCK IN SHARE MODE
2025-02-05 23:43:33,535 - 执行事务1语句: SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE (id = 12) AND (col_2 = 19) LOCK IN SHARE MODE
2025-02-05 23:43:33,536 - 执行事务1语句: SELECT col_0, col_1, col_3 FROM table_0 WHERE (col_3 = 'jdbdl') LOCK IN SHARE MODE
2025-02-05 23:43:33,537 - 执行事务1语句: SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE
2025-02-05 23:43:33,537 - 执行事务1语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (id = 15) AND (col_0 = 9.68) AND (col_2 = 76) LOCK IN SHARE MODE
2025-02-05 23:43:33,538 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 80.34, 'sjaBH', 13, 'DOaBW', 'xrQUQ')
2025-02-05 23:43:33,540 - 执行事务1语句: COMMIT;
2025-02-05 23:43:33,545 - 执行事务1成功
2025-02-05 23:43:36,154 - 恢复初始状态成功
2025-02-05 23:43:36,942 - 创建事务2连接成功
2025-02-05 23:43:36,944 - 执行事务2语句: BEGIN
2025-02-05 23:43:36,944 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 10.01, 'PDlhr', 87, 'wdVPJ', 'AQyNx')
2025-02-05 23:43:36,945 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 49.42, 'aIIWK', 11, 'MVgRO', 'BmcJE')
2025-02-05 23:43:36,946 - 执行事务2语句: UPDATE table_0 SET col_3 = 'YrUvp', col_4 = 'Ppwix', col_1 = 'AVToK', col_0 = 63.56 WHERE id BETWEEN 8 AND 8
2025-02-05 23:43:36,946 - 执行事务2语句: UPDATE table_0 SET col_0 = 29.91, col_1 = 'Ukohz' WHERE (id = 10)
2025-02-05 23:43:36,947 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 58.11, 'vNOBN', 26, 'MDISC', 'bLjhp')
2025-02-05 23:43:36,948 - 执行事务2语句: UPDATE table_0 SET col_2 = 35, col_1 = 'mxyeV', col_3 = 'zZscN', col_0 = 3.14 WHERE (col_3 = 'jdbdl')
2025-02-05 23:43:36,948 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 34.51, 'rcUag', 7, 'iJZbY', 'ySQoR')
2025-02-05 23:43:36,949 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 54.82, 'ogTsD', 86, 'pgayp', 'sBWoa')
2025-02-05 23:43:36,950 - 执行事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:43:36,951 - 执行事务2语句: SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 10) AND (col_2 = 73) LOCK IN SHARE MODE
2025-02-05 23:43:36,953 - 执行事务2语句: COMMIT;
2025-02-05 23:43:36,958 - 执行事务2成功
2025-02-05 23:43:41,903 - 
2025-02-05 23:43:41,903 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-500, started 33928)>, 1738770221.9032667)}
2025-02-05 23:43:42,015 - stmt_idx: 2, status: success, result: None
2025-02-05 23:43:42,015 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:43:42,016 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:43:42,016 - 
2025-02-05 23:43:42,124 - 
2025-02-05 23:43:42,125 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-501, started 37196)>, 1738770222.124632)}
2025-02-05 23:43:42,228 - stmt_idx: 3, status: success, result: None
2025-02-05 23:43:42,228 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:43:42,228 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:43:42,228 - 
2025-02-05 23:43:42,333 - 
2025-02-05 23:43:42,334 - 执行前idx: 5, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 10.01, 'PDlhr', 87, 'wdVPJ', 'AQyNx')", <Thread(Thread-502, started 43136)>, 1738770222.3335733)}
2025-02-05 23:43:42,439 - stmt_idx: 4, status: success, result: None
2025-02-05 23:43:42,439 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 10.01, 'PDlhr', 87, 'wdVPJ', 'AQyNx')
2025-02-05 23:43:42,439 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:43:42,439 - 
2025-02-05 23:43:42,549 - 
2025-02-05 23:43:42,550 - 执行前idx: 6, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 49.42, 'aIIWK', 11, 'MVgRO', 'BmcJE')", <Thread(Thread-503, started 6864)>, 1738770222.549037)}
2025-02-05 23:43:42,657 - stmt_idx: 5, status: success, result: None
2025-02-05 23:43:42,658 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 49.42, 'aIIWK', 11, 'MVgRO', 'BmcJE')
2025-02-05 23:43:42,658 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:43:42,658 - 
2025-02-05 23:43:42,764 - 
2025-02-05 23:43:42,765 - 执行前idx: 7, pending_stmts: {6: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-504, started 36432)>, 1738770222.7641888)}
2025-02-05 23:43:42,871 - stmt_idx: 6, status: success, result: None
2025-02-05 23:43:42,871 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:43:42,871 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:43:42,871 - 
2025-02-05 23:43:42,981 - 
2025-02-05 23:43:42,982 - 执行前idx: 8, pending_stmts: {7: (1, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 73) LOCK IN SHARE MODE', <Thread(Thread-505, started 5520)>, 1738770222.9819906)}
2025-02-05 23:43:43,087 - wait for lock, trx_id: 1, stmt: SELECT col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 73) LOCK IN SHARE MODE
2025-02-05 23:43:43,087 - 执行后idx: 8, pending_stmts: {7: (1, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 73) LOCK IN SHARE MODE', <Thread(Thread-505, started 5520)>, 1738770222.9819906)}
2025-02-05 23:43:43,087 - 
2025-02-05 23:43:43,193 - 
2025-02-05 23:43:43,194 - 执行前idx: 9, pending_stmts: {7: (1, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 73) LOCK IN SHARE MODE', <Thread(Thread-505, started 5520)>, 1738770222.9819906), 8: (2, "UPDATE table_0 SET col_3 = 'YrUvp', col_4 = 'Ppwix', col_1 = 'AVToK', col_0 = 63.56 WHERE id BETWEEN 8 AND 8", <Thread(Thread-506, started 14896)>, 1738770223.1935427)}
2025-02-05 23:43:43,196 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 73) LOCK IN SHARE MODE
2025-02-05 23:43:43,300 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:43:43,300 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT col_0, col_2, col_3 FROM table_0 WHERE (col_2 = 73) LOCK IN SHARE MODE
2025-02-05 23:43:43,300 - 错误: dictionary changed size during iteration
2025-02-05 23:43:43,301 - 
2025-02-05 23:43:43,301 - 执行前idx: 12, pending_stmts: {8: (2, "UPDATE table_0 SET col_3 = 'YrUvp', col_4 = 'Ppwix', col_1 = 'AVToK', col_0 = 63.56 WHERE id BETWEEN 8 AND 8", <Thread(Thread-506, stopped 14896)>, 1738770223.1935427), 11: (2, "UPDATE table_0 SET col_0 = 29.91, col_1 = 'Ukohz' WHERE (id = 10)", <Thread(Thread-507, started 38868)>, 1738770223.301053)}
2025-02-05 23:43:43,407 - stmt_idx: 8, status: success, result: None
2025-02-05 23:43:43,407 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 'YrUvp', col_4 = 'Ppwix', col_1 = 'AVToK', col_0 = 63.56 WHERE id BETWEEN 8 AND 8
2025-02-05 23:43:43,509 - stmt_idx: 11, status: success, result: None
2025-02-05 23:43:43,509 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 29.91, col_1 = 'Ukohz' WHERE (id = 10)
2025-02-05 23:43:43,509 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:43:43,509 - 
2025-02-05 23:43:43,619 - 
2025-02-05 23:43:43,620 - 执行前idx: 13, pending_stmts: {12: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 58.11, 'vNOBN', 26, 'MDISC', 'bLjhp')", <Thread(Thread-508, started 3232)>, 1738770223.619512)}
2025-02-05 23:43:43,733 - stmt_idx: 12, status: success, result: None
2025-02-05 23:43:43,733 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 58.11, 'vNOBN', 26, 'MDISC', 'bLjhp')
2025-02-05 23:43:43,733 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:43:43,733 - 
2025-02-05 23:43:43,843 - 
2025-02-05 23:43:43,844 - 执行前idx: 15, pending_stmts: {14: (2, "UPDATE table_0 SET col_2 = 35, col_1 = 'mxyeV', col_3 = 'zZscN', col_0 = 3.14 WHERE (col_3 = 'jdbdl')", <Thread(Thread-509, started 31992)>, 1738770223.843861)}
2025-02-05 23:43:43,951 - stmt_idx: 14, status: success, result: None
2025-02-05 23:43:43,951 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 35, col_1 = 'mxyeV', col_3 = 'zZscN', col_0 = 3.14 WHERE (col_3 = 'jdbdl')
2025-02-05 23:43:43,951 - 执行后idx: 15, pending_stmts: {}
2025-02-05 23:43:43,951 - 
2025-02-05 23:43:44,060 - 
2025-02-05 23:43:44,061 - 执行前idx: 17, pending_stmts: {16: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 34.51, 'rcUag', 7, 'iJZbY', 'ySQoR')", <Thread(Thread-510, started 11424)>, 1738770224.060004)}
2025-02-05 23:43:44,163 - stmt_idx: 16, status: success, result: None
2025-02-05 23:43:44,163 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 34.51, 'rcUag', 7, 'iJZbY', 'ySQoR')
2025-02-05 23:43:44,164 - 执行后idx: 17, pending_stmts: {}
2025-02-05 23:43:44,164 - 
2025-02-05 23:43:44,272 - 
2025-02-05 23:43:44,273 - 执行前idx: 18, pending_stmts: {17: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 54.82, 'ogTsD', 86, 'pgayp', 'sBWoa')", <Thread(Thread-511, started 3288)>, 1738770224.272047)}
2025-02-05 23:43:44,380 - stmt_idx: 17, status: success, result: None
2025-02-05 23:43:44,380 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 54.82, 'ogTsD', 86, 'pgayp', 'sBWoa')
2025-02-05 23:43:44,380 - 执行后idx: 18, pending_stmts: {}
2025-02-05 23:43:44,380 - 
2025-02-05 23:43:44,491 - 
2025-02-05 23:43:44,491 - 执行前idx: 19, pending_stmts: {18: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE', <Thread(Thread-512, started 16252)>, 1738770224.491426)}
2025-02-05 23:43:44,594 - stmt_idx: 18, status: success, result: None
2025-02-05 23:43:44,594 - 成功执行序列中事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE
2025-02-05 23:43:44,594 - 执行后idx: 19, pending_stmts: {}
2025-02-05 23:43:44,594 - 
2025-02-05 23:43:44,704 - 
2025-02-05 23:43:44,704 - 执行前idx: 21, pending_stmts: {20: (2, 'SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 10) AND (col_2 = 73) LOCK IN SHARE MODE', <Thread(Thread-513, started 11056)>, 1738770224.7043014)}
2025-02-05 23:43:44,811 - stmt_idx: 20, status: success, result: None
2025-02-05 23:43:44,811 - 成功执行序列中事务2语句: SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 10) AND (col_2 = 73) LOCK IN SHARE MODE
2025-02-05 23:43:44,811 - 执行后idx: 21, pending_stmts: {}
2025-02-05 23:43:44,811 - 
2025-02-05 23:43:44,926 - 执行序列成功
2025-02-05 23:43:45,702 - is_atomic: True
2025-02-05 23:43:45,702 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:43:45,702 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 10.01, 'PDlhr', 87, 'wdVPJ', 'AQyNx')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 49.42, 'aIIWK', 11, 'MVgRO', 'BmcJE')"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: SELECT id, col_0, col_2, col_3, col_4 FROM table_0 WHERE (id = 12) AND (col_2 = 19) LOCK IN SHARE MODE'), (1, "--Skipped, trx_id: 1, stmt: SELECT col_0, col_1, col_3 FROM table_0 WHERE (col_3 = 'jdbdl') LOCK IN SHARE MODE"), (2, "UPDATE table_0 SET col_3 = 'YrUvp', col_4 = 'Ppwix', col_1 = 'AVToK', col_0 = 63.56 WHERE id BETWEEN 8 AND 8"), (2, "UPDATE table_0 SET col_0 = 29.91, col_1 = 'Ukohz' WHERE (id = 10)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 58.11, 'vNOBN', 26, 'MDISC', 'bLjhp')"), (1, '--Skipped, trx_id: 1, stmt: SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_2 = 35, col_1 = 'mxyeV', col_3 = 'zZscN', col_0 = 3.14 WHERE (col_3 = 'jdbdl')"), (1, '--Skipped, trx_id: 1, stmt: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE (id = 15) AND (col_0 = 9.68) AND (col_2 = 76) LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 34.51, 'rcUag', 7, 'iJZbY', 'ySQoR')"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 54.82, 'ogTsD', 86, 'pgayp', 'sBWoa')"), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 11 AND 11 FOR UPDATE'), (1, "--Skipped, trx_id: 1, stmt: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 80.34, 'sjaBH', 13, 'DOaBW', 'xrQUQ')"), (2, 'SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 10) AND (col_2 = 73) LOCK IN SHARE MODE'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 23:43:45,702 - snapshots: {'before': {'table_0': [(1, 7.56, 'yfbvl', 97, 'jdodi', 'ebxsd'), (2, 17.21, 'hjbhy', 21, 'zzyob', 'tdngq'), (3, 41.41, 'pmcch', 72, 'tvaax', 'uznia'), (4, 6.53, 'ddcmc', 46, 'zqdpu', 'orxpy'), (5, 5.57, 'epnxm', 72, 'uxmyf', 'rukqq'), (6, 31.51, 'zcqmo', 55, 'ztmvq', 'eovop'), (7, 84.76, 'snguq', 47, 'wvnie', 'giqfd'), (8, 13.32, 'hgiqg', 67, 'cwhfk', 'iklbl'), (9, 17.12, 'bbmqm', 36, 'rcqnx', 'uqrha'), (10, 73.83, 'zdeay', 73, 'wrapw', 'ddnnc'), (11, 22.56, 'epllh', 42, 'ijbfx', 'yxfqq'), (12, 36.18, 'khxpv', 19, 'epzrh', 'lywgq'), (13, 58.68, 'otgvc', 63, 'jdbdl', 'xfnwl'), (14, 76.92, 'jabsx', 46, 'aksud', 'vwcxn'), (15, 9.68, 'ptiox', 76, 'plsua', 'lqyzv')]}, 'trx1': {'table_0': [(1, 7.56, 'yfbvl', 97, 'jdodi', 'ebxsd'), (2, 17.21, 'hjbhy', 21, 'zzyob', 'tdngq'), (3, 41.41, 'pmcch', 72, 'tvaax', 'uznia'), (4, 6.53, 'ddcmc', 46, 'zqdpu', 'orxpy'), (5, 5.57, 'epnxm', 72, 'uxmyf', 'rukqq'), (6, 31.51, 'zcqmo', 55, 'ztmvq', 'eovop'), (7, 84.76, 'snguq', 47, 'wvnie', 'giqfd'), (8, 13.32, 'hgiqg', 67, 'cwhfk', 'iklbl'), (9, 17.12, 'bbmqm', 36, 'rcqnx', 'uqrha'), (10, 73.83, 'zdeay', 73, 'wrapw', 'ddnnc'), (11, 22.56, 'epllh', 42, 'ijbfx', 'yxfqq'), (12, 36.18, 'khxpv', 19, 'epzrh', 'lywgq'), (13, 58.68, 'otgvc', 63, 'jdbdl', 'xfnwl'), (14, 76.92, 'jabsx', 46, 'aksud', 'vwcxn'), (15, 9.68, 'ptiox', 76, 'plsua', 'lqyzv'), (16, 80.34, 'sjaBH', 13, 'DOaBW', 'xrQUQ')]}, 'trx2': {'table_0': [(1, 7.56, 'yfbvl', 97, 'jdodi', 'ebxsd'), (2, 17.21, 'hjbhy', 21, 'zzyob', 'tdngq'), (3, 41.41, 'pmcch', 72, 'tvaax', 'uznia'), (4, 6.53, 'ddcmc', 46, 'zqdpu', 'orxpy'), (5, 5.57, 'epnxm', 72, 'uxmyf', 'rukqq'), (6, 31.51, 'zcqmo', 55, 'ztmvq', 'eovop'), (7, 84.76, 'snguq', 47, 'wvnie', 'giqfd'), (8, 63.56, 'AVToK', 67, 'YrUvp', 'Ppwix'), (9, 17.12, 'bbmqm', 36, 'rcqnx', 'uqrha'), (10, 29.91, 'Ukohz', 73, 'wrapw', 'ddnnc'), (11, 22.56, 'epllh', 42, 'ijbfx', 'yxfqq'), (12, 36.18, 'khxpv', 19, 'epzrh', 'lywgq'), (13, 3.14, 'mxyeV', 35, 'zZscN', 'xfnwl'), (14, 76.92, 'jabsx', 46, 'aksud', 'vwcxn'), (15, 9.68, 'ptiox', 76, 'plsua', 'lqyzv'), (17, 10.01, 'PDlhr', 87, 'wdVPJ', 'AQyNx'), (18, 49.42, 'aIIWK', 11, 'MVgRO', 'BmcJE'), (19, 58.11, 'vNOBN', 26, 'MDISC', 'bLjhp'), (20, 34.51, 'rcUag', 7, 'iJZbY', 'ySQoR'), (21, 54.82, 'ogTsD', 86, 'pgayp', 'sBWoa')]}, 'serial': {'table_0': [(1, 7.56, 'yfbvl', 97, 'jdodi', 'ebxsd'), (2, 17.21, 'hjbhy', 21, 'zzyob', 'tdngq'), (3, 41.41, 'pmcch', 72, 'tvaax', 'uznia'), (4, 6.53, 'ddcmc', 46, 'zqdpu', 'orxpy'), (5, 5.57, 'epnxm', 72, 'uxmyf', 'rukqq'), (6, 31.51, 'zcqmo', 55, 'ztmvq', 'eovop'), (7, 84.76, 'snguq', 47, 'wvnie', 'giqfd'), (8, 63.56, 'AVToK', 67, 'YrUvp', 'Ppwix'), (9, 17.12, 'bbmqm', 36, 'rcqnx', 'uqrha'), (10, 29.91, 'Ukohz', 73, 'wrapw', 'ddnnc'), (11, 22.56, 'epllh', 42, 'ijbfx', 'yxfqq'), (12, 36.18, 'khxpv', 19, 'epzrh', 'lywgq'), (13, 3.14, 'mxyeV', 35, 'zZscN', 'xfnwl'), (14, 76.92, 'jabsx', 46, 'aksud', 'vwcxn'), (15, 9.68, 'ptiox', 76, 'plsua', 'lqyzv'), (22, 10.01, 'PDlhr', 87, 'wdVPJ', 'AQyNx'), (23, 49.42, 'aIIWK', 11, 'MVgRO', 'BmcJE'), (24, 58.11, 'vNOBN', 26, 'MDISC', 'bLjhp'), (25, 34.51, 'rcUag', 7, 'iJZbY', 'ySQoR'), (26, 54.82, 'ogTsD', 86, 'pgayp', 'sBWoa')]}}
2025-02-05 23:43:45,702 - 
2025-02-05 23:43:45,713 - iter: 69
2025-02-05 23:43:47,198 - table table_0 has 4 rows
2025-02-05 23:43:47,198 - res_dict: {'trx1_lock_row_ids': [2, 3], 'trx2_lock_row_ids': [1, 4], 'intersection_row_ids': []}
2025-02-05 23:43:47,198 - lock_same_resource: False
2025-02-05 23:43:47,198 - 
2025-02-05 23:43:47,199 - non intersection phase1
2025-02-05 23:43:47,199 - 事务1在第一阶段自己加的锁: II
2025-02-05 23:43:47,199 - 事务2在第一阶段自己加的锁: II
2025-02-05 23:43:47,199 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:43:47,199 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:43:47,202 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-05 23:43:47,203 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:43:47,203 - params: {'set_expr': 'col_0 = 28', 'v1': '2', 'v2': '4', 'table': 'table_0'}
2025-02-05 23:43:47,206 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:43:47,208 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:43:47,208 - params: {'vals': 'NULL, 47, 64, 80.74', 'insert_cols': 'id, col_0, col_1, col_3', 'table': 'table_0'}
2025-02-05 23:43:47,210 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:43:47,212 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:43:47,212 - params: {'set_expr': 'col_1 = 93', 'cond': '(id = 5) AND (col_3 = 79.9)', 'table': 'table_0'}
2025-02-05 23:43:47,212 - non intersection phase1 end
2025-02-05 23:43:47,212 - 
2025-02-05 23:43:47,212 - non intersection phase2
2025-02-05 23:43:47,215 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:43:47,217 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:43:47,217 - params: {'cond': '(id = 1)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:43:47,221 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=3
2025-02-05 23:43:47,222 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:43:47,222 - params: {'v1': '2', 'v2': '4', 'select_cols': 'col_0, col_1', 'table': 'table_0'}
2025-02-05 23:43:47,223 - non intersection phase2 end
2025-02-05 23:43:47,223 - 
2025-02-05 23:43:47,223 - 生成死锁事务序列成功如下
2025-02-05 23:43:47,223 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_3) VALUES (NULL, 47, 64, 80.74)'), (1, 'UPDATE table_0 SET col_0 = 28 WHERE id BETWEEN 2 AND 3'), (2, 'UPDATE table_0 SET col_1 = 93 WHERE (id = 5) AND (col_3 = 79.9)'), (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE'), (1, 'SELECT id FROM table_0 WHERE (id = 1) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:43:48,755 - 创建事务1连接成功
2025-02-05 23:43:48,756 - 执行事务1语句: BEGIN
2025-02-05 23:43:48,757 - 执行事务1语句: UPDATE table_0 SET col_0 = 28 WHERE id BETWEEN 2 AND 3
2025-02-05 23:43:48,758 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 1) FOR UPDATE
2025-02-05 23:43:48,760 - 执行事务1语句: COMMIT;
2025-02-05 23:43:48,764 - 执行事务1成功
2025-02-05 23:43:51,385 - 恢复初始状态成功
2025-02-05 23:43:52,168 - 创建事务2连接成功
2025-02-05 23:43:52,169 - 执行事务2语句: BEGIN
2025-02-05 23:43:52,170 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3) VALUES (NULL, 47, 64, 80.74)
2025-02-05 23:43:52,171 - 执行事务2语句: UPDATE table_0 SET col_1 = 93 WHERE (id = 5) AND (col_3 = 79.9)
2025-02-05 23:43:52,171 - 执行事务2语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-05 23:43:52,173 - 执行事务2语句: COMMIT;
2025-02-05 23:43:52,178 - 执行事务2成功
2025-02-05 23:43:57,131 - 
2025-02-05 23:43:57,131 - 执行前idx: 3, pending_stmts: {2: (2, 'INSERT INTO table_0 (id, col_0, col_1, col_3) VALUES (NULL, 47, 64, 80.74)', <Thread(Thread-514, started 14952)>, 1738770237.1310463)}
2025-02-05 23:43:57,242 - stmt_idx: 2, status: success, result: None
2025-02-05 23:43:57,243 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_3) VALUES (NULL, 47, 64, 80.74)
2025-02-05 23:43:57,243 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:43:57,243 - 
2025-02-05 23:43:57,352 - 
2025-02-05 23:43:57,353 - 执行前idx: 4, pending_stmts: {3: (1, 'UPDATE table_0 SET col_0 = 28 WHERE id BETWEEN 2 AND 3', <Thread(Thread-515, started 35004)>, 1738770237.352134)}
2025-02-05 23:43:57,458 - stmt_idx: 3, status: success, result: None
2025-02-05 23:43:57,458 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 28 WHERE id BETWEEN 2 AND 3
2025-02-05 23:43:57,458 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:43:57,458 - 
2025-02-05 23:43:57,563 - 
2025-02-05 23:43:57,564 - 执行前idx: 5, pending_stmts: {4: (2, 'UPDATE table_0 SET col_1 = 93 WHERE (id = 5) AND (col_3 = 79.9)', <Thread(Thread-516, started 36968)>, 1738770237.5639415)}
2025-02-05 23:43:57,670 - stmt_idx: 4, status: success, result: None
2025-02-05 23:43:57,670 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 93 WHERE (id = 5) AND (col_3 = 79.9)
2025-02-05 23:43:57,670 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:43:57,670 - 
2025-02-05 23:43:57,778 - 
2025-02-05 23:43:57,778 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-517, started 17924)>, 1738770237.7785356)}
2025-02-05 23:43:57,886 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-05 23:43:57,886 - 执行后idx: 6, pending_stmts: {5: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-517, started 17924)>, 1738770237.7785356)}
2025-02-05 23:43:57,886 - 
2025-02-05 23:43:57,999 - 
2025-02-05 23:43:57,999 - 执行前idx: 7, pending_stmts: {5: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-517, started 17924)>, 1738770237.7785356), 6: (1, 'SELECT id FROM table_0 WHERE (id = 1) FOR UPDATE', <Thread(Thread-518, started 40724)>, 1738770237.9991434)}
2025-02-05 23:43:58,109 - wait for lock, trx_id: 2, stmt: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-05 23:43:58,214 - stmt_idx: 6, status: success, result: None
2025-02-05 23:43:58,214 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (id = 1) FOR UPDATE
2025-02-05 23:43:58,214 - 执行后idx: 7, pending_stmts: {5: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-517, started 17924)>, 1738770237.7785356)}
2025-02-05 23:43:58,214 - 
2025-02-05 23:43:58,326 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-517, started 17924)>, 1738770237.7785356)}
2025-02-05 23:43:58,326 - 
2025-02-05 23:43:58,326 - 执行前idx: 9, pending_stmts: {5: (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE', <Thread(Thread-517, stopped 17924)>, 1738770237.7785356)}
2025-02-05 23:43:58,429 - stmt_idx: 5, status: success, result: None
2025-02-05 23:43:58,430 - 成功执行序列中事务2语句: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-05 23:43:58,430 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE
2025-02-05 23:43:58,431 - 执行后idx: 9, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-519, started 40092)>, 1738770238.4310331)}
2025-02-05 23:43:58,431 - 
2025-02-05 23:43:58,538 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (2, 'COMMIT', <Thread(Thread-519, stopped 40092)>, 1738770238.4310331)}
2025-02-05 23:43:58,538 - 
2025-02-05 23:43:58,538 - 执行前idx: 9, pending_stmts: {7: (2, 'COMMIT', <Thread(Thread-519, stopped 40092)>, 1738770238.4310331)}
2025-02-05 23:43:58,643 - stmt_idx: 7, status: success, result: None
2025-02-05 23:43:58,643 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:43:58,643 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:43:58,643 - 
2025-02-05 23:43:58,750 - 执行序列成功
2025-02-05 23:43:59,523 - is_atomic: True
2025-02-05 23:43:59,523 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:43:59,524 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'INSERT INTO table_0 (id, col_0, col_1, col_3) VALUES (NULL, 47, 64, 80.74)'), (1, 'UPDATE table_0 SET col_0 = 28 WHERE id BETWEEN 2 AND 3'), (2, 'UPDATE table_0 SET col_1 = 93 WHERE (id = 5) AND (col_3 = 79.9)'), (1, 'SELECT id FROM table_0 WHERE (id = 1) FOR UPDATE'), (1, 'COMMIT'), (2, 'SELECT col_0, col_1 FROM table_0 WHERE id BETWEEN 2 AND 3 FOR UPDATE'), (2, 'COMMIT')]
2025-02-05 23:43:59,524 - snapshots: {'before': {'table_0': [(1, 58, 13, 32.44), (2, 3, 37, 86.45), (4, 74, 58, 27.66), (5, 15, 11, 79.9)]}, 'trx1': {'table_0': [(1, 58, 13, 32.44), (2, 28, 37, 86.45), (4, 74, 58, 27.66), (5, 15, 11, 79.9)]}, 'trx2': {'table_0': [(1, 58, 13, 32.44), (2, 3, 37, 86.45), (4, 74, 58, 27.66), (5, 15, 93, 79.9), (6, 47, 64, 80.74)]}, 'serial': {'table_0': [(1, 58, 13, 32.44), (2, 28, 37, 86.45), (4, 74, 58, 27.66), (5, 15, 93, 79.9), (7, 47, 64, 80.74)]}}
2025-02-05 23:43:59,524 - 
2025-02-05 23:43:59,535 - iter: 70
2025-02-05 23:44:01,113 - table table_0 has 7 rows
2025-02-05 23:44:01,113 - trx1_start_id: 5
2025-02-05 23:44:01,113 - trx1_end_id: 5
2025-02-05 23:44:01,113 - trx1_exclusive_start_id: 5
2025-02-05 23:44:01,113 - trx1_exclusive_end_id: 4
2025-02-05 23:44:01,113 - trx1_exclusive_ids: []
2025-02-05 23:44:01,113 - trx2_start_id: 5
2025-02-05 23:44:01,113 - trx2_end_id: 5
2025-02-05 23:44:01,113 - trx2_exclusive_start_id: 6
2025-02-05 23:44:01,113 - trx2_exclusive_end_id: 5
2025-02-05 23:44:01,113 - trx2_exclusive_ids: []
2025-02-05 23:44:01,113 - intersection_ids: [5]
2025-02-05 23:44:01,113 - res_dict: {'trx1_lock_row_ids': [5], 'trx2_lock_row_ids': [5], 'intersection_row_ids': [5]}
2025-02-05 23:44:01,113 - lock_same_resource: True
2025-02-05 23:44:01,113 - 
2025-02-05 23:44:01,113 - intersection phase1
2025-02-05 23:44:01,117 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:44:01,118 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:01,118 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:44:01,122 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:44:01,123 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:01,124 - params: {'set_expr': 'col_0 = 13, col_1 = 41.86', 'v1': '5', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:44:01,124 - intersection phase1 end
2025-02-05 23:44:01,124 - 
2025-02-05 23:44:01,125 - intersection phase2
2025-02-05 23:44:01,125 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:44:01,125 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:44:01,125 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:44:01,125 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:44:01,129 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=4
2025-02-05 23:44:01,130 - 生成连续锁定SQL失败: 找不到从5到4的行
2025-02-05 23:44:01,130 - 生成锁SQL失败: 找不到从5到4的行
2025-02-05 23:44:01,130 - 生成死锁事务序列失败: 找不到从5到4的行
2025-02-05 23:44:01,130 - 
2025-02-05 23:44:01,130 - Error in iteration 70: 找不到从5到4的行
2025-02-05 23:44:01,130 - 
2025-02-05 23:44:01,135 - iter: 71
2025-02-05 23:44:02,608 - table table_0 has 5 rows
2025-02-05 23:44:02,608 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [5], 'intersection_row_ids': []}
2025-02-05 23:44:02,608 - lock_same_resource: False
2025-02-05 23:44:02,608 - 
2025-02-05 23:44:02,608 - non intersection phase1
2025-02-05 23:44:02,608 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:44:02,609 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:44:02,609 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:44:02,609 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:44:02,611 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 23:44:02,612 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:02,612 - params: {'v1': '1', 'v2': '1', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:02,616 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:44:02,617 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:02,617 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:44:02,618 - non intersection phase1 end
2025-02-05 23:44:02,618 - 
2025-02-05 23:44:02,618 - non intersection phase2
2025-02-05 23:44:02,622 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:44:02,623 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:02,623 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:02,625 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=1
2025-02-05 23:44:02,626 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:02,627 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:44:02,627 - non intersection phase2 end
2025-02-05 23:44:02,627 - 
2025-02-05 23:44:02,627 - 生成死锁事务序列成功如下
2025-02-05 23:44:02,627 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:44:04,178 - 创建事务1连接成功
2025-02-05 23:44:04,179 - 执行事务1语句: BEGIN
2025-02-05 23:44:04,181 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:44:04,181 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:44:04,182 - 执行事务1语句: COMMIT;
2025-02-05 23:44:04,186 - 执行事务1成功
2025-02-05 23:44:06,793 - 恢复初始状态成功
2025-02-05 23:44:07,588 - 创建事务2连接成功
2025-02-05 23:44:07,589 - 执行事务2语句: BEGIN
2025-02-05 23:44:07,590 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:44:07,591 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:07,591 - 执行事务2语句: COMMIT;
2025-02-05 23:44:07,596 - 执行事务2成功
2025-02-05 23:44:12,535 - 
2025-02-05 23:44:12,535 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-520, started 37372)>, 1738770252.535962)}
2025-02-05 23:44:12,638 - stmt_idx: 2, status: success, result: None
2025-02-05 23:44:12,638 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:44:12,638 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:44:12,638 - 
2025-02-05 23:44:12,747 - 
2025-02-05 23:44:12,747 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-521, started 11176)>, 1738770252.7473185)}
2025-02-05 23:44:12,854 - stmt_idx: 3, status: success, result: None
2025-02-05 23:44:12,854 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:44:12,854 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:44:12,854 - 
2025-02-05 23:44:12,964 - 
2025-02-05 23:44:12,964 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-522, started 11364)>, 1738770252.9641798)}
2025-02-05 23:44:13,069 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:44:13,069 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-522, started 11364)>, 1738770252.9641798)}
2025-02-05 23:44:13,069 - 
2025-02-05 23:44:13,174 - 
2025-02-05 23:44:13,175 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-522, started 11364)>, 1738770252.9641798), 5: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-523, started 28752)>, 1738770253.1749444)}
2025-02-05 23:44:13,177 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:13,280 - stmt_idx: 4, status: success, result: None
2025-02-05 23:44:13,280 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:44:13,280 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:44:13,386 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:44:13,386 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:13,386 - 错误: dictionary changed size during iteration
2025-02-05 23:44:13,389 - 执行序列成功
2025-02-05 23:44:14,166 - is_atomic: True
2025-02-05 23:44:14,167 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:44:14,167 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 23:44:14,167 - snapshots: {'before': {'table_0': [(1, 10, 'cvjcz', 6), (2, 65, 'xhiss', 23), (3, 1, 'jldtc', 99), (4, 73, 'bvojz', 33), (5, 66, 'sourq', 73)]}, 'trx1': {'table_0': [(1, 10, 'cvjcz', 6), (2, 65, 'xhiss', 23), (3, 1, 'jldtc', 99), (4, 73, 'bvojz', 33), (5, 66, 'sourq', 73)]}, 'trx2': {'table_0': [(1, 10, 'cvjcz', 6), (2, 65, 'xhiss', 23), (3, 1, 'jldtc', 99), (4, 73, 'bvojz', 33), (5, 66, 'sourq', 73)]}, 'serial': {'table_0': [(1, 10, 'cvjcz', 6), (2, 65, 'xhiss', 23), (3, 1, 'jldtc', 99), (4, 73, 'bvojz', 33), (5, 66, 'sourq', 73)]}}
2025-02-05 23:44:14,167 - 
2025-02-05 23:44:14,178 - iter: 72
2025-02-05 23:44:15,678 - table table_0 has 13 rows
2025-02-05 23:44:15,678 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 23:44:15,678 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 23:44:15,678 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
2025-02-05 23:44:15,678 - trx1_exclusive_ids: []
2025-02-05 23:44:15,678 - trx2_exclusive_ids: []
2025-02-05 23:44:15,679 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]}
2025-02-05 23:44:15,679 - lock_same_resource: True
2025-02-05 23:44:15,679 - 
2025-02-05 23:44:15,679 - intersection phase1
2025-02-05 23:44:15,682 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,683 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:15,683 - params: {'set_expr': "col_3 = 86.76, col_2 = 'JjjHU', col_0 = 99.34", 'v1': '1', 'v2': '1', 'table': 'table_0'}
2025-02-05 23:44:15,686 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,688 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:15,688 - params: {'set_expr': "col_3 = 44.69, col_2 = 'alcDN'", 'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 23:44:15,692 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,693 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:15,693 - params: {'set_expr': "col_3 = 23.19, col_0 = 77.7, col_2 = 'JpPQS'", 'cond': "(id = 3) AND (col_3 = 87.42) AND (col_2 = 'xfmyu')", 'table': 'table_0'}
2025-02-05 23:44:15,696 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,698 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:15,698 - params: {'set_expr': "col_1 = 'XCLgx', col_3 = 98.17, col_2 = 'mMSHu', col_0 = 64.55", 'v1': '4', 'v2': '4', 'table': 'table_0'}
2025-02-05 23:44:15,702 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,703 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:15,703 - params: {'set_expr': "col_3 = 20.24, col_1 = 'YFYwY'", 'cond': "(col_1 = 'kftvo') AND (col_0 = 97.4)", 'table': 'table_0'}
2025-02-05 23:44:15,708 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,710 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:15,710 - params: {'vals': "NULL, 39.97, 'GWmNX', 'PehhE', 4.64", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,714 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,716 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:15,716 - params: {'vals': "NULL, 78.25, 'Dhiwy', 'pLWKv', 36.66", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,718 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,720 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:15,720 - params: {'set_expr': 'col_0 = 70.13, col_3 = 71.42', 'cond': "(col_1 = 'vnxyv') AND (col_0 = 5.55) AND (col_3 = 7.94)", 'table': 'table_0'}
2025-02-05 23:44:15,724 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,725 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:15,725 - params: {'vals': "NULL, 59.18, 'FlWjm', 'qKKBD', 11.96", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,728 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,730 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:15,730 - params: {'vals': "NULL, 90.53, 'VUaCz', 'ATkTF', 66.06", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,733 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,735 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:15,735 - params: {'set_expr': "col_1 = 'YIQKj', col_3 = 9.71", 'cond': "(col_2 = 'maqri')", 'table': 'table_0'}
2025-02-05 23:44:15,739 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,740 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:15,741 - params: {'vals': "NULL, 29.3, 'FUxem', 'SCtYC', 43.67", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,744 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,745 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:15,745 - params: {'set_expr': "col_2 = 'tszlq', col_3 = 74.76", 'v1': '13', 'v2': '13', 'table': 'table_0'}
2025-02-05 23:44:15,749 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,750 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:15,750 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,752 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,753 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:15,753 - params: {'cond': "(col_1 = 'bxqju')", 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,758 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,759 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:15,759 - params: {'cond': "(col_2 = 'xfmyu')", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:15,763 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,764 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:15,765 - params: {'cond': '(id = 4)', 'select_cols': 'id, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,768 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,770 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:15,770 - params: {'cond': '(id = 5)', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 23:44:15,774 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,775 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:15,775 - params: {'v1': '6', 'v2': '6', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:15,777 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,779 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:15,779 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:44:15,783 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,784 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:15,784 - params: {'cond': "(col_2 = 'oskfi') AND (col_0 = 5.55)", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:15,788 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,790 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:15,790 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:44:15,793 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,794 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:15,795 - params: {'v1': '10', 'v2': '10', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:44:15,799 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,800 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:15,800 - params: {'v1': '11', 'v2': '11', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:15,803 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,805 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:15,805 - params: {'cond': "(col_2 = 'sfsmz')", 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:44:15,808 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=13, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,810 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:15,810 - params: {'cond': '(id = 13)', 'select_cols': 'id, col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:15,810 - intersection phase1 end
2025-02-05 23:44:15,810 - 
2025-02-05 23:44:15,810 - intersection phase2
2025-02-05 23:44:15,811 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:44:15,811 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:44:15,811 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:44:15,811 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:44:15,811 - intersection phase2 end
2025-02-05 23:44:15,811 - 
2025-02-05 23:44:15,811 - intersection phase3
2025-02-05 23:44:15,815 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,817 - needed_params: {'cond', 'table'}
2025-02-05 23:44:15,817 - params: {'cond': "(col_1 = 'umzgj') AND (col_2 = 'zhwpi') AND (col_3 = 71.12)", 'table': 'table_0'}
2025-02-05 23:44:15,820 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:44:15,821 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:15,821 - params: {'set_expr': "col_3 = 39.42, col_1 = 'uduzp', col_2 = 'OJUJV'", 'cond': '(col_0 = 11.05)', 'table': 'table_0'}
2025-02-05 23:44:15,822 - intersection phase3 end
2025-02-05 23:44:15,822 - 
2025-02-05 23:44:15,822 - 生成死锁事务序列成功如下
2025-02-05 23:44:15,822 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_3 = 86.76, col_2 = 'JjjHU', col_0 = 99.34 WHERE id BETWEEN 1 AND 1"), (1, "UPDATE table_0 SET col_3 = 44.69, col_2 = 'alcDN' WHERE (id = 2)"), (1, "UPDATE table_0 SET col_3 = 23.19, col_0 = 77.7, col_2 = 'JpPQS' WHERE (id = 3) AND (col_3 = 87.42) AND (col_2 = 'xfmyu')"), (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_1 = 'bxqju') LOCK IN SHARE MODE"), (2, "SELECT * FROM table_0 WHERE (col_2 = 'xfmyu') LOCK IN SHARE MODE"), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_1 = 'XCLgx', col_3 = 98.17, col_2 = 'mMSHu', col_0 = 64.55 WHERE id BETWEEN 4 AND 4"), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_3 = 20.24, col_1 = 'YFYwY' WHERE (col_1 = 'kftvo') AND (col_0 = 97.4)"), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.97, 'GWmNX', 'PehhE', 4.64)"), (2, "SELECT * FROM table_0 WHERE (col_2 = 'oskfi') AND (col_0 = 5.55) LOCK IN SHARE MODE"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 78.25, 'Dhiwy', 'pLWKv', 36.66)"), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_0 = 70.13, col_3 = 71.42 WHERE (col_1 = 'vnxyv') AND (col_0 = 5.55) AND (col_3 = 7.94)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.18, 'FlWjm', 'qKKBD', 11.96)"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, "SELECT id, col_2 FROM table_0 WHERE (col_2 = 'sfsmz') LOCK IN SHARE MODE"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.53, 'VUaCz', 'ATkTF', 66.06)"), (1, "UPDATE table_0 SET col_1 = 'YIQKj', col_3 = 9.71 WHERE (col_2 = 'maqri')"), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 13) LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 29.3, 'FUxem', 'SCtYC', 43.67)"), (1, "UPDATE table_0 SET col_2 = 'tszlq', col_3 = 74.76 WHERE id BETWEEN 13 AND 13"), (1, "DELETE FROM table_0 WHERE (col_1 = 'umzgj') AND (col_2 = 'zhwpi') AND (col_3 = 71.12)"), (2, "UPDATE table_0 SET col_3 = 39.42, col_1 = 'uduzp', col_2 = 'OJUJV' WHERE (col_0 = 11.05)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:44:17,347 - 创建事务1连接成功
2025-02-05 23:44:17,348 - 执行事务1语句: BEGIN
2025-02-05 23:44:17,350 - 执行事务1语句: UPDATE table_0 SET col_3 = 86.76, col_2 = 'JjjHU', col_0 = 99.34 WHERE id BETWEEN 1 AND 1
2025-02-05 23:44:17,351 - 执行事务1语句: UPDATE table_0 SET col_3 = 44.69, col_2 = 'alcDN' WHERE (id = 2)
2025-02-05 23:44:17,352 - 执行事务1语句: UPDATE table_0 SET col_3 = 23.19, col_0 = 77.7, col_2 = 'JpPQS' WHERE (id = 3) AND (col_3 = 87.42) AND (col_2 = 'xfmyu')
2025-02-05 23:44:17,352 - 执行事务1语句: UPDATE table_0 SET col_1 = 'XCLgx', col_3 = 98.17, col_2 = 'mMSHu', col_0 = 64.55 WHERE id BETWEEN 4 AND 4
2025-02-05 23:44:17,353 - 执行事务1语句: UPDATE table_0 SET col_3 = 20.24, col_1 = 'YFYwY' WHERE (col_1 = 'kftvo') AND (col_0 = 97.4)
2025-02-05 23:44:17,353 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.97, 'GWmNX', 'PehhE', 4.64)
2025-02-05 23:44:17,354 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 78.25, 'Dhiwy', 'pLWKv', 36.66)
2025-02-05 23:44:17,355 - 执行事务1语句: UPDATE table_0 SET col_0 = 70.13, col_3 = 71.42 WHERE (col_1 = 'vnxyv') AND (col_0 = 5.55) AND (col_3 = 7.94)
2025-02-05 23:44:17,355 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.18, 'FlWjm', 'qKKBD', 11.96)
2025-02-05 23:44:17,356 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.53, 'VUaCz', 'ATkTF', 66.06)
2025-02-05 23:44:17,356 - 执行事务1语句: UPDATE table_0 SET col_1 = 'YIQKj', col_3 = 9.71 WHERE (col_2 = 'maqri')
2025-02-05 23:44:17,357 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 29.3, 'FUxem', 'SCtYC', 43.67)
2025-02-05 23:44:17,358 - 执行事务1语句: UPDATE table_0 SET col_2 = 'tszlq', col_3 = 74.76 WHERE id BETWEEN 13 AND 13
2025-02-05 23:44:17,359 - 执行事务1语句: DELETE FROM table_0 WHERE (col_1 = 'umzgj') AND (col_2 = 'zhwpi') AND (col_3 = 71.12)
2025-02-05 23:44:17,361 - 执行事务1语句: COMMIT;
2025-02-05 23:44:17,365 - 执行事务1成功
2025-02-05 23:44:19,943 - 恢复初始状态成功
2025-02-05 23:44:20,724 - 创建事务2连接成功
2025-02-05 23:44:20,725 - 执行事务2语句: BEGIN
2025-02-05 23:44:20,726 - 执行事务2语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:20,727 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_1 = 'bxqju') LOCK IN SHARE MODE
2025-02-05 23:44:20,728 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_2 = 'xfmyu') LOCK IN SHARE MODE
2025-02-05 23:44:20,729 - 执行事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 23:44:20,730 - 执行事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:44:20,730 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:44:20,731 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:44:20,731 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_2 = 'oskfi') AND (col_0 = 5.55) LOCK IN SHARE MODE
2025-02-05 23:44:20,732 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:44:20,733 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 23:44:20,733 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 23:44:20,734 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE (col_2 = 'sfsmz') LOCK IN SHARE MODE
2025-02-05 23:44:20,735 - 执行事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 13) LOCK IN SHARE MODE
2025-02-05 23:44:20,736 - 执行事务2语句: UPDATE table_0 SET col_3 = 39.42, col_1 = 'uduzp', col_2 = 'OJUJV' WHERE (col_0 = 11.05)
2025-02-05 23:44:20,738 - 执行事务2语句: COMMIT;
2025-02-05 23:44:20,742 - 执行事务2成功
2025-02-05 23:44:25,775 - 
2025-02-05 23:44:25,775 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_3 = 86.76, col_2 = 'JjjHU', col_0 = 99.34 WHERE id BETWEEN 1 AND 1", <Thread(Thread-524, started 22292)>, 1738770265.7753468)}
2025-02-05 23:44:25,880 - stmt_idx: 2, status: success, result: None
2025-02-05 23:44:25,880 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 86.76, col_2 = 'JjjHU', col_0 = 99.34 WHERE id BETWEEN 1 AND 1
2025-02-05 23:44:25,880 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:44:25,880 - 
2025-02-05 23:44:25,985 - 
2025-02-05 23:44:25,986 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_3 = 44.69, col_2 = 'alcDN' WHERE (id = 2)", <Thread(Thread-525, started 44748)>, 1738770265.985717)}
2025-02-05 23:44:26,090 - stmt_idx: 3, status: success, result: None
2025-02-05 23:44:26,090 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 44.69, col_2 = 'alcDN' WHERE (id = 2)
2025-02-05 23:44:26,090 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:44:26,090 - 
2025-02-05 23:44:26,202 - 
2025-02-05 23:44:26,203 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_3 = 23.19, col_0 = 77.7, col_2 = 'JpPQS' WHERE (id = 3) AND (col_3 = 87.42) AND (col_2 = 'xfmyu')", <Thread(Thread-526, started 18736)>, 1738770266.20167)}
2025-02-05 23:44:26,306 - stmt_idx: 4, status: success, result: None
2025-02-05 23:44:26,306 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 23.19, col_0 = 77.7, col_2 = 'JpPQS' WHERE (id = 3) AND (col_3 = 87.42) AND (col_2 = 'xfmyu')
2025-02-05 23:44:26,306 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:44:26,306 - 
2025-02-05 23:44:26,413 - 
2025-02-05 23:44:26,413 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:26,518 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:26,518 - 执行后idx: 6, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:26,518 - 
2025-02-05 23:44:26,624 - 
2025-02-05 23:44:26,625 - 执行前idx: 10, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 9: (1, "UPDATE table_0 SET col_1 = 'XCLgx', col_3 = 98.17, col_2 = 'mMSHu', col_0 = 64.55 WHERE id BETWEEN 4 AND 4", <Thread(Thread-528, started 39140)>, 1738770266.6243322)}
2025-02-05 23:44:26,731 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:26,834 - stmt_idx: 9, status: success, result: None
2025-02-05 23:44:26,834 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'XCLgx', col_3 = 98.17, col_2 = 'mMSHu', col_0 = 64.55 WHERE id BETWEEN 4 AND 4
2025-02-05 23:44:26,834 - 执行后idx: 10, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:26,834 - 
2025-02-05 23:44:26,942 - 
2025-02-05 23:44:26,943 - 执行前idx: 13, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 12: (1, "UPDATE table_0 SET col_3 = 20.24, col_1 = 'YFYwY' WHERE (col_1 = 'kftvo') AND (col_0 = 97.4)", <Thread(Thread-529, started 25560)>, 1738770266.94208)}
2025-02-05 23:44:27,053 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:27,163 - stmt_idx: 12, status: success, result: None
2025-02-05 23:44:27,163 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 20.24, col_1 = 'YFYwY' WHERE (col_1 = 'kftvo') AND (col_0 = 97.4)
2025-02-05 23:44:27,163 - 执行后idx: 13, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:27,163 - 
2025-02-05 23:44:27,271 - 
2025-02-05 23:44:27,272 - 执行前idx: 15, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 14: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.97, 'GWmNX', 'PehhE', 4.64)", <Thread(Thread-530, started 40984)>, 1738770267.2716045)}
2025-02-05 23:44:27,376 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:27,484 - stmt_idx: 14, status: success, result: None
2025-02-05 23:44:27,484 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.97, 'GWmNX', 'PehhE', 4.64)
2025-02-05 23:44:27,484 - 执行后idx: 15, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:27,484 - 
2025-02-05 23:44:27,594 - 
2025-02-05 23:44:27,595 - 执行前idx: 17, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 16: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 78.25, 'Dhiwy', 'pLWKv', 36.66)", <Thread(Thread-531, started 21580)>, 1738770267.5942392)}
2025-02-05 23:44:27,710 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:27,816 - stmt_idx: 16, status: success, result: None
2025-02-05 23:44:27,816 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 78.25, 'Dhiwy', 'pLWKv', 36.66)
2025-02-05 23:44:27,816 - 执行后idx: 17, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:27,816 - 
2025-02-05 23:44:27,921 - 
2025-02-05 23:44:27,922 - 执行前idx: 19, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 18: (1, "UPDATE table_0 SET col_0 = 70.13, col_3 = 71.42 WHERE (col_1 = 'vnxyv') AND (col_0 = 5.55) AND (col_3 = 7.94)", <Thread(Thread-532, started 9760)>, 1738770267.9211285)}
2025-02-05 23:44:28,027 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:28,130 - stmt_idx: 18, status: success, result: None
2025-02-05 23:44:28,130 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 70.13, col_3 = 71.42 WHERE (col_1 = 'vnxyv') AND (col_0 = 5.55) AND (col_3 = 7.94)
2025-02-05 23:44:28,130 - 执行后idx: 19, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:28,130 - 
2025-02-05 23:44:28,233 - 
2025-02-05 23:44:28,234 - 执行前idx: 20, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 19: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.18, 'FlWjm', 'qKKBD', 11.96)", <Thread(Thread-533, started 39244)>, 1738770268.2338722)}
2025-02-05 23:44:28,344 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:28,446 - stmt_idx: 19, status: success, result: None
2025-02-05 23:44:28,446 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.18, 'FlWjm', 'qKKBD', 11.96)
2025-02-05 23:44:28,446 - 执行后idx: 20, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:28,446 - 
2025-02-05 23:44:28,553 - 
2025-02-05 23:44:28,554 - 执行前idx: 24, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 23: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.53, 'VUaCz', 'ATkTF', 66.06)", <Thread(Thread-534, started 44368)>, 1738770268.553282)}
2025-02-05 23:44:28,660 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:28,767 - stmt_idx: 23, status: success, result: None
2025-02-05 23:44:28,767 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.53, 'VUaCz', 'ATkTF', 66.06)
2025-02-05 23:44:28,767 - 执行后idx: 24, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:28,767 - 
2025-02-05 23:44:28,875 - 
2025-02-05 23:44:28,875 - 执行前idx: 25, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 24: (1, "UPDATE table_0 SET col_1 = 'YIQKj', col_3 = 9.71 WHERE (col_2 = 'maqri')", <Thread(Thread-535, started 28476)>, 1738770268.8752077)}
2025-02-05 23:44:28,980 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:29,088 - stmt_idx: 24, status: success, result: None
2025-02-05 23:44:29,088 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'YIQKj', col_3 = 9.71 WHERE (col_2 = 'maqri')
2025-02-05 23:44:29,088 - 执行后idx: 25, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:29,088 - 
2025-02-05 23:44:29,191 - 
2025-02-05 23:44:29,192 - 执行前idx: 27, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 26: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 29.3, 'FUxem', 'SCtYC', 43.67)", <Thread(Thread-536, started 44616)>, 1738770269.191716)}
2025-02-05 23:44:29,297 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:29,409 - stmt_idx: 26, status: success, result: None
2025-02-05 23:44:29,410 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 29.3, 'FUxem', 'SCtYC', 43.67)
2025-02-05 23:44:29,410 - 执行后idx: 27, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:29,410 - 
2025-02-05 23:44:29,519 - 
2025-02-05 23:44:29,520 - 执行前idx: 28, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 27: (1, "UPDATE table_0 SET col_2 = 'tszlq', col_3 = 74.76 WHERE id BETWEEN 13 AND 13", <Thread(Thread-537, started 43444)>, 1738770269.5196788)}
2025-02-05 23:44:29,624 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:29,732 - stmt_idx: 27, status: success, result: None
2025-02-05 23:44:29,732 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'tszlq', col_3 = 74.76 WHERE id BETWEEN 13 AND 13
2025-02-05 23:44:29,732 - 执行后idx: 28, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:29,733 - 
2025-02-05 23:44:29,838 - 
2025-02-05 23:44:29,839 - 执行前idx: 29, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376), 28: (1, "DELETE FROM table_0 WHERE (col_1 = 'umzgj') AND (col_2 = 'zhwpi') AND (col_3 = 71.12)", <Thread(Thread-538, started 42240)>, 1738770269.838804)}
2025-02-05 23:44:29,946 - wait for lock, trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:30,054 - stmt_idx: 28, status: success, result: None
2025-02-05 23:44:30,054 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_1 = 'umzgj') AND (col_2 = 'zhwpi') AND (col_3 = 71.12)
2025-02-05 23:44:30,054 - 执行后idx: 29, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:30,054 - 
2025-02-05 23:44:30,166 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, started 42144)>, 1738770266.4134376)}
2025-02-05 23:44:30,166 - 
2025-02-05 23:44:30,166 - 执行前idx: 32, pending_stmts: {5: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-527, stopped 42144)>, 1738770266.4134376)}
2025-02-05 23:44:30,269 - stmt_idx: 5, status: success, result: None
2025-02-05 23:44:30,269 - 成功执行序列中事务2语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:30,269 - 结束了阻塞，blocked_trx_id: 2, stmt: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:30,273 - 执行后idx: 32, pending_stmts: {6: (2, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_1 = 'bxqju') LOCK IN SHARE MODE", <Thread(Thread-539, stopped 41036)>, 1738770270.2690094), 7: (2, "SELECT * FROM table_0 WHERE (col_2 = 'xfmyu') LOCK IN SHARE MODE", <Thread(Thread-540, started 35836)>, 1738770270.2690094), 8: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-541, started 40896)>, 1738770270.2707798), 10: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-542, started 37664)>, 1738770270.2707798), 11: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-543, started 44560)>, 1738770270.2712855), 13: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-544, started 35612)>, 1738770270.2712855), 15: (2, "SELECT * FROM table_0 WHERE (col_2 = 'oskfi') AND (col_0 = 5.55) LOCK IN SHARE MODE", <Thread(Thread-545, started 20580)>, 1738770270.2717788), 17: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-546, started 33092)>, 1738770270.2717788), 20: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-547, started 17932)>, 1738770270.2717788), 21: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-548, started 37804)>, 1738770270.2722836), 22: (2, "SELECT id, col_2 FROM table_0 WHERE (col_2 = 'sfsmz') LOCK IN SHARE MODE", <Thread(Thread-549, started 42184)>, 1738770270.2722836), 25: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 13) LOCK IN SHARE MODE', <Thread(Thread-550, started 21464)>, 1738770270.2728066), 29: (2, "UPDATE table_0 SET col_3 = 39.42, col_1 = 'uduzp', col_2 = 'OJUJV' WHERE (col_0 = 11.05)", <Thread(Thread-551, started 36016)>, 1738770270.2728066), 31: (2, 'COMMIT', <Thread(Thread-552, started 40840)>, 1738770270.273331)}
2025-02-05 23:44:30,273 - 
2025-02-05 23:44:30,375 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_1 = 'bxqju') LOCK IN SHARE MODE", <Thread(Thread-539, stopped 41036)>, 1738770270.2690094), 7: (2, "SELECT * FROM table_0 WHERE (col_2 = 'xfmyu') LOCK IN SHARE MODE", <Thread(Thread-540, stopped 35836)>, 1738770270.2690094), 8: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-541, stopped 40896)>, 1738770270.2707798), 10: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-542, stopped 37664)>, 1738770270.2707798), 11: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-543, stopped 44560)>, 1738770270.2712855), 13: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-544, stopped 35612)>, 1738770270.2712855), 15: (2, "SELECT * FROM table_0 WHERE (col_2 = 'oskfi') AND (col_0 = 5.55) LOCK IN SHARE MODE", <Thread(Thread-545, stopped 20580)>, 1738770270.2717788), 17: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-546, stopped 33092)>, 1738770270.2717788), 20: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-547, stopped 17932)>, 1738770270.2717788), 21: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-548, stopped 37804)>, 1738770270.2722836), 22: (2, "SELECT id, col_2 FROM table_0 WHERE (col_2 = 'sfsmz') LOCK IN SHARE MODE", <Thread(Thread-549, stopped 42184)>, 1738770270.2722836), 25: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 13) LOCK IN SHARE MODE', <Thread(Thread-550, stopped 21464)>, 1738770270.2728066), 29: (2, "UPDATE table_0 SET col_3 = 39.42, col_1 = 'uduzp', col_2 = 'OJUJV' WHERE (col_0 = 11.05)", <Thread(Thread-551, stopped 36016)>, 1738770270.2728066), 31: (2, 'COMMIT', <Thread(Thread-552, stopped 40840)>, 1738770270.273331)}
2025-02-05 23:44:30,375 - 
2025-02-05 23:44:30,375 - 执行前idx: 32, pending_stmts: {6: (2, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_1 = 'bxqju') LOCK IN SHARE MODE", <Thread(Thread-539, stopped 41036)>, 1738770270.2690094), 7: (2, "SELECT * FROM table_0 WHERE (col_2 = 'xfmyu') LOCK IN SHARE MODE", <Thread(Thread-540, stopped 35836)>, 1738770270.2690094), 8: (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-541, stopped 40896)>, 1738770270.2707798), 10: (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-542, stopped 37664)>, 1738770270.2707798), 11: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-543, stopped 44560)>, 1738770270.2712855), 13: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-544, stopped 35612)>, 1738770270.2712855), 15: (2, "SELECT * FROM table_0 WHERE (col_2 = 'oskfi') AND (col_0 = 5.55) LOCK IN SHARE MODE", <Thread(Thread-545, stopped 20580)>, 1738770270.2717788), 17: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-546, stopped 33092)>, 1738770270.2717788), 20: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-547, stopped 17932)>, 1738770270.2717788), 21: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-548, stopped 37804)>, 1738770270.2722836), 22: (2, "SELECT id, col_2 FROM table_0 WHERE (col_2 = 'sfsmz') LOCK IN SHARE MODE", <Thread(Thread-549, stopped 42184)>, 1738770270.2722836), 25: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 13) LOCK IN SHARE MODE', <Thread(Thread-550, stopped 21464)>, 1738770270.2728066), 29: (2, "UPDATE table_0 SET col_3 = 39.42, col_1 = 'uduzp', col_2 = 'OJUJV' WHERE (col_0 = 11.05)", <Thread(Thread-551, stopped 36016)>, 1738770270.2728066), 31: (2, 'COMMIT', <Thread(Thread-552, stopped 40840)>, 1738770270.273331)}
2025-02-05 23:44:30,483 - stmt_idx: 6, status: success, result: None
2025-02-05 23:44:30,483 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_1 = 'bxqju') LOCK IN SHARE MODE
2025-02-05 23:44:30,591 - stmt_idx: 7, status: success, result: None
2025-02-05 23:44:30,592 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_2 = 'xfmyu') LOCK IN SHARE MODE
2025-02-05 23:44:30,698 - stmt_idx: 8, status: success, result: None
2025-02-05 23:44:30,698 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 23:44:30,811 - stmt_idx: 10, status: success, result: None
2025-02-05 23:44:30,812 - 成功执行序列中事务2语句: SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:44:30,920 - stmt_idx: 11, status: success, result: None
2025-02-05 23:44:30,920 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:44:31,026 - stmt_idx: 13, status: success, result: None
2025-02-05 23:44:31,026 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:44:31,131 - stmt_idx: 15, status: success, result: None
2025-02-05 23:44:31,131 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_2 = 'oskfi') AND (col_0 = 5.55) LOCK IN SHARE MODE
2025-02-05 23:44:31,241 - stmt_idx: 17, status: success, result: None
2025-02-05 23:44:31,242 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:44:31,350 - stmt_idx: 20, status: success, result: None
2025-02-05 23:44:31,350 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 23:44:31,457 - stmt_idx: 21, status: success, result: None
2025-02-05 23:44:31,457 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 23:44:31,564 - stmt_idx: 22, status: success, result: None
2025-02-05 23:44:31,564 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE (col_2 = 'sfsmz') LOCK IN SHARE MODE
2025-02-05 23:44:31,675 - stmt_idx: 25, status: success, result: None
2025-02-05 23:44:31,675 - 成功执行序列中事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 13) LOCK IN SHARE MODE
2025-02-05 23:44:31,783 - stmt_idx: 29, status: success, result: None
2025-02-05 23:44:31,783 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 39.42, col_1 = 'uduzp', col_2 = 'OJUJV' WHERE (col_0 = 11.05)
2025-02-05 23:44:31,891 - stmt_idx: 31, status: success, result: None
2025-02-05 23:44:31,891 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:44:31,891 - 执行后idx: 32, pending_stmts: {}
2025-02-05 23:44:31,891 - 
2025-02-05 23:44:31,996 - 执行序列成功
2025-02-05 23:44:32,776 - is_atomic: True
2025-02-05 23:44:32,776 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:44:32,776 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_3 = 86.76, col_2 = 'JjjHU', col_0 = 99.34 WHERE id BETWEEN 1 AND 1"), (1, "UPDATE table_0 SET col_3 = 44.69, col_2 = 'alcDN' WHERE (id = 2)"), (1, "UPDATE table_0 SET col_3 = 23.19, col_0 = 77.7, col_2 = 'JpPQS' WHERE (id = 3) AND (col_3 = 87.42) AND (col_2 = 'xfmyu')"), (1, "UPDATE table_0 SET col_1 = 'XCLgx', col_3 = 98.17, col_2 = 'mMSHu', col_0 = 64.55 WHERE id BETWEEN 4 AND 4"), (1, "UPDATE table_0 SET col_3 = 20.24, col_1 = 'YFYwY' WHERE (col_1 = 'kftvo') AND (col_0 = 97.4)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 39.97, 'GWmNX', 'PehhE', 4.64)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 78.25, 'Dhiwy', 'pLWKv', 36.66)"), (1, "UPDATE table_0 SET col_0 = 70.13, col_3 = 71.42 WHERE (col_1 = 'vnxyv') AND (col_0 = 5.55) AND (col_3 = 7.94)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 59.18, 'FlWjm', 'qKKBD', 11.96)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 90.53, 'VUaCz', 'ATkTF', 66.06)"), (1, "UPDATE table_0 SET col_1 = 'YIQKj', col_3 = 9.71 WHERE (col_2 = 'maqri')"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 29.3, 'FUxem', 'SCtYC', 43.67)"), (1, "UPDATE table_0 SET col_2 = 'tszlq', col_3 = 74.76 WHERE id BETWEEN 13 AND 13"), (1, "DELETE FROM table_0 WHERE (col_1 = 'umzgj') AND (col_2 = 'zhwpi') AND (col_3 = 71.12)"), (1, 'COMMIT'), (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_1 = 'bxqju') LOCK IN SHARE MODE"), (2, "SELECT * FROM table_0 WHERE (col_2 = 'xfmyu') LOCK IN SHARE MODE"), (2, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, "SELECT * FROM table_0 WHERE (col_2 = 'oskfi') AND (col_0 = 5.55) LOCK IN SHARE MODE"), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, "SELECT id, col_2 FROM table_0 WHERE (col_2 = 'sfsmz') LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 13) LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_3 = 39.42, col_1 = 'uduzp', col_2 = 'OJUJV' WHERE (col_0 = 11.05)"), (2, 'COMMIT')]
2025-02-05 23:44:32,776 - snapshots: {'before': {'table_0': [(1, 22.11, 'mbipj', 'tqppt', 57.38), (2, 51.29, 'bxqju', 'hsaia', 29.49), (3, 59.88, 'ujqow', 'xfmyu', 87.42), (4, 11.05, 'umzgj', 'zhwpi', 71.12), (5, 97.4, 'kftvo', 'xoyex', 90.4), (6, 53.35, 'itqge', 'kctwy', 100.0), (7, 10.94, 'yzigw', 'doifj', 39.74), (8, 5.55, 'vnxyv', 'oskfi', 7.94), (9, 35.76, 'bmkkk', 'cyput', 3.34), (10, 2.79, 'jakpu', 'kqiyj', 83.04), (11, 21.91, 'jdvoc', 'maqri', 59.01), (12, 33.05, 'hmfko', 'sfsmz', 59.62), (13, 14.65, 'pkscw', 'foxxf', 71.92)]}, 'trx1': {'table_0': [(1, 99.34, 'mbipj', 'JjjHU', 86.76), (2, 51.29, 'bxqju', 'alcDN', 44.69), (3, 59.88, 'ujqow', 'xfmyu', 87.42), (4, 64.55, 'XCLgx', 'mMSHu', 98.17), (5, 97.4, 'YFYwY', 'xoyex', 20.24), (6, 53.35, 'itqge', 'kctwy', 100.0), (7, 10.94, 'yzigw', 'doifj', 39.74), (8, 5.55, 'vnxyv', 'oskfi', 7.94), (9, 35.76, 'bmkkk', 'cyput', 3.34), (10, 2.79, 'jakpu', 'kqiyj', 83.04), (11, 21.91, 'YIQKj', 'maqri', 9.71), (12, 33.05, 'hmfko', 'sfsmz', 59.62), (13, 14.65, 'pkscw', 'tszlq', 74.76), (14, 39.97, 'GWmNX', 'PehhE', 4.64), (15, 78.25, 'Dhiwy', 'pLWKv', 36.66), (16, 59.18, 'FlWjm', 'qKKBD', 11.96), (17, 90.53, 'VUaCz', 'ATkTF', 66.06), (18, 29.3, 'FUxem', 'SCtYC', 43.67)]}, 'trx2': {'table_0': [(1, 22.11, 'mbipj', 'tqppt', 57.38), (2, 51.29, 'bxqju', 'hsaia', 29.49), (3, 59.88, 'ujqow', 'xfmyu', 87.42), (4, 11.05, 'uduzp', 'OJUJV', 39.42), (5, 97.4, 'kftvo', 'xoyex', 90.4), (6, 53.35, 'itqge', 'kctwy', 100.0), (7, 10.94, 'yzigw', 'doifj', 39.74), (8, 5.55, 'vnxyv', 'oskfi', 7.94), (9, 35.76, 'bmkkk', 'cyput', 3.34), (10, 2.79, 'jakpu', 'kqiyj', 83.04), (11, 21.91, 'jdvoc', 'maqri', 59.01), (12, 33.05, 'hmfko', 'sfsmz', 59.62), (13, 14.65, 'pkscw', 'foxxf', 71.92)]}, 'serial': {'table_0': [(1, 99.34, 'mbipj', 'JjjHU', 86.76), (2, 51.29, 'bxqju', 'alcDN', 44.69), (3, 59.88, 'ujqow', 'xfmyu', 87.42), (4, 64.55, 'XCLgx', 'mMSHu', 98.17), (5, 97.4, 'YFYwY', 'xoyex', 20.24), (6, 53.35, 'itqge', 'kctwy', 100.0), (7, 10.94, 'yzigw', 'doifj', 39.74), (8, 5.55, 'vnxyv', 'oskfi', 7.94), (9, 35.76, 'bmkkk', 'cyput', 3.34), (10, 2.79, 'jakpu', 'kqiyj', 83.04), (11, 21.91, 'YIQKj', 'maqri', 9.71), (12, 33.05, 'hmfko', 'sfsmz', 59.62), (13, 14.65, 'pkscw', 'tszlq', 74.76), (19, 39.97, 'GWmNX', 'PehhE', 4.64), (20, 78.25, 'Dhiwy', 'pLWKv', 36.66), (21, 59.18, 'FlWjm', 'qKKBD', 11.96), (22, 90.53, 'VUaCz', 'ATkTF', 66.06), (23, 29.3, 'FUxem', 'SCtYC', 43.67)]}}
2025-02-05 23:44:32,776 - 
2025-02-05 23:44:32,788 - iter: 73
2025-02-05 23:44:34,364 - table table_0 has 12 rows
2025-02-05 23:44:34,364 - trx1_lock_row_ids: [5, 6, 7, 8, 9, 10, 11]
2025-02-05 23:44:34,364 - trx2_lock_row_ids: [3, 6, 7, 10, 11]
2025-02-05 23:44:34,364 - intersection_row_ids: [6, 7, 10, 11]
2025-02-05 23:44:34,364 - trx1_exclusive_ids: [5, 8, 9]
2025-02-05 23:44:34,364 - trx2_exclusive_ids: [3]
2025-02-05 23:44:34,364 - res_dict: {'trx1_lock_row_ids': [5, 6, 7, 8, 9, 10, 11], 'trx2_lock_row_ids': [3, 6, 7, 10, 11], 'intersection_row_ids': [6, 7, 10, 11]}
2025-02-05 23:44:34,364 - lock_same_resource: True
2025-02-05 23:44:34,364 - 
2025-02-05 23:44:34,364 - intersection phase1
2025-02-05 23:44:34,368 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=11
2025-02-05 23:44:34,369 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:34,369 - params: {'set_expr': "col_3 = 'RNHvG'", 'v1': '5', 'v2': '11', 'table': 'table_0'}
2025-02-05 23:44:34,372 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,373 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:34,374 - params: {'vals': "NULL, 97.0, 'SgJyr', 'muDBY', 'cAskg'", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:34,378 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,379 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:34,379 - params: {'set_expr': "col_1 = 'bWsaL'", 'v1': '7', 'v2': '7', 'table': 'table_0'}
2025-02-05 23:44:34,382 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,384 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:34,384 - params: {'vals': "NULL, 84.95, 'rdGdO', 'yyPdP', 'QFCMn'", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:34,387 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,388 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:34,388 - params: {'vals': "NULL, 51.82, 'cotlo', 'sZfvC', 'UdTlJ'", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:44:34,388 - intersection phase1 end
2025-02-05 23:44:34,388 - 
2025-02-05 23:44:34,388 - intersection phase2
2025-02-05 23:44:34,389 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:44:34,389 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:44:34,389 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:44:34,389 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:44:34,393 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,394 - needed_params: {'cond', 'table'}
2025-02-05 23:44:34,394 - params: {'cond': "(id = 5) AND (col_3 = 'raiit') AND (col_1 = 'nfljn') AND (col_2 = 'kfnga')", 'table': 'table_0'}
2025-02-05 23:44:34,397 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,399 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:34,399 - params: {'set_expr': "col_3 = 'hSSIp', col_1 = 'JGCcp', col_0 = 46.57", 'cond': "(col_1 = 'hcyxt') AND (col_0 = 40.69)", 'table': 'table_0'}
2025-02-05 23:44:34,402 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,403 - needed_params: {'cond', 'table'}
2025-02-05 23:44:34,403 - params: {'cond': "(col_1 = 'pdemo') AND (col_0 = 21.48) AND (col_2 = 'zszsh')", 'table': 'table_0'}
2025-02-05 23:44:34,406 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,408 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:34,408 - params: {'set_expr': "col_2 = 'PFcIk', col_3 = 'aioSi'", 'cond': '(id = 3)', 'table': 'table_0'}
2025-02-05 23:44:34,408 - intersection phase2 end
2025-02-05 23:44:34,408 - 
2025-02-05 23:44:34,408 - intersection phase3
2025-02-05 23:44:34,412 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:44:34,414 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:34,414 - params: {'set_expr': "col_1 = 'fpiiY'", 'cond': '(id = 3)', 'table': 'table_0'}
2025-02-05 23:44:34,417 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 23:44:34,418 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:34,418 - params: {'v1': '10', 'v2': '10', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:44:34,422 - 生成锁SQL失败: 'update'
2025-02-05 23:44:34,422 - 生成死锁事务序列失败: 'update'
2025-02-05 23:44:34,422 - 
2025-02-05 23:44:34,422 - Error in iteration 73: 'update'
2025-02-05 23:44:34,422 - 
2025-02-05 23:44:34,433 - iter: 74
2025-02-05 23:44:35,969 - table table_0 has 5 rows
2025-02-05 23:44:35,969 - trx1_lock_row_ids: [1, 3, 4]
2025-02-05 23:44:35,969 - trx2_lock_row_ids: [1, 3, 4, 5]
2025-02-05 23:44:35,969 - intersection_row_ids: [1, 3, 4]
2025-02-05 23:44:35,969 - trx1_exclusive_ids: []
2025-02-05 23:44:35,969 - trx2_exclusive_ids: [5]
2025-02-05 23:44:35,969 - res_dict: {'trx1_lock_row_ids': [1, 3, 4], 'trx2_lock_row_ids': [1, 3, 4, 5], 'intersection_row_ids': [1, 3, 4]}
2025-02-05 23:44:35,969 - lock_same_resource: True
2025-02-05 23:44:35,969 - 
2025-02-05 23:44:35,970 - intersection phase1
2025-02-05 23:44:35,972 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:44:35,973 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:35,973 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:44:35,975 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:44:35,977 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:35,977 - params: {'cond': '(id = 3)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:35,979 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:44:35,980 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:44:35,980 - params: {'cond': '(id = 4)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:44:35,984 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:44:35,986 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:35,986 - params: {'set_expr': 'col_0 = 49', 'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:44:35,989 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:44:35,991 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:35,991 - params: {'set_expr': 'col_0 = 75', 'v1': '3', 'v2': '3', 'table': 'table_0'}
2025-02-05 23:44:35,995 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:44:35,996 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:35,996 - params: {'vals': 'NULL, 79', 'insert_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:44:35,997 - intersection phase1 end
2025-02-05 23:44:35,997 - 
2025-02-05 23:44:35,997 - intersection phase2
2025-02-05 23:44:35,998 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:44:35,998 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:44:35,998 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:44:35,998 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 23:44:36,000 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:44:36,002 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:44:36,002 - params: {'set_expr': 'col_0 = 47', 'cond': '(id = 5)', 'table': 'table_0'}
2025-02-05 23:44:36,002 - intersection phase2 end
2025-02-05 23:44:36,002 - 
2025-02-05 23:44:36,002 - intersection phase3
2025-02-05 23:44:36,006 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:44:36,007 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:36,007 - params: {'set_expr': 'col_0 = 82', 'v1': '5', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:44:36,009 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:44:36,011 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:44:36,011 - params: {'vals': 'NULL, 80', 'insert_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:44:36,011 - intersection phase3 end
2025-02-05 23:44:36,011 - 
2025-02-05 23:44:36,011 - 生成死锁事务序列成功如下
2025-02-05 23:44:36,011 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_0 = 49 WHERE (id = 1)'), (2, 'UPDATE table_0 SET col_0 = 75 WHERE id BETWEEN 3 AND 3'), (2, 'INSERT INTO table_0 (id, col_0) VALUES (NULL, 79)'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (2, 'UPDATE table_0 SET col_0 = 47 WHERE (id = 5)'), (1, 'UPDATE table_0 SET col_0 = 82 WHERE id BETWEEN 5 AND 5'), (2, 'INSERT INTO table_0 (id, col_0) VALUES (NULL, 80)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:44:37,587 - 创建事务1连接成功
2025-02-05 23:44:37,590 - 执行事务1语句: BEGIN
2025-02-05 23:44:37,591 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:37,592 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 23:44:37,592 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 23:44:37,593 - 执行事务1语句: UPDATE table_0 SET col_0 = 82 WHERE id BETWEEN 5 AND 5
2025-02-05 23:44:37,596 - 执行事务1语句: COMMIT;
2025-02-05 23:44:37,601 - 执行事务1成功
2025-02-05 23:44:40,222 - 恢复初始状态成功
2025-02-05 23:44:41,007 - 创建事务2连接成功
2025-02-05 23:44:41,010 - 执行事务2语句: BEGIN
2025-02-05 23:44:41,011 - 执行事务2语句: UPDATE table_0 SET col_0 = 49 WHERE (id = 1)
2025-02-05 23:44:41,012 - 执行事务2语句: UPDATE table_0 SET col_0 = 75 WHERE id BETWEEN 3 AND 3
2025-02-05 23:44:41,013 - 执行事务2语句: INSERT INTO table_0 (id, col_0) VALUES (NULL, 79)
2025-02-05 23:44:41,013 - 执行事务2语句: UPDATE table_0 SET col_0 = 47 WHERE (id = 5)
2025-02-05 23:44:41,014 - 执行事务2语句: INSERT INTO table_0 (id, col_0) VALUES (NULL, 80)
2025-02-05 23:44:41,016 - 执行事务2语句: COMMIT;
2025-02-05 23:44:41,026 - 执行事务2成功
2025-02-05 23:44:45,986 - 
2025-02-05 23:44:45,986 - 执行前idx: 3, pending_stmts: {2: (2, 'UPDATE table_0 SET col_0 = 49 WHERE (id = 1)', <Thread(Thread-553, started 3624)>, 1738770285.9868348)}
2025-02-05 23:44:46,101 - stmt_idx: 2, status: success, result: None
2025-02-05 23:44:46,101 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 49 WHERE (id = 1)
2025-02-05 23:44:46,101 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:44:46,101 - 
2025-02-05 23:44:46,214 - 
2025-02-05 23:44:46,215 - 执行前idx: 4, pending_stmts: {3: (2, 'UPDATE table_0 SET col_0 = 75 WHERE id BETWEEN 3 AND 3', <Thread(Thread-554, started 8228)>, 1738770286.2143066)}
2025-02-05 23:44:46,323 - stmt_idx: 3, status: success, result: None
2025-02-05 23:44:46,323 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 75 WHERE id BETWEEN 3 AND 3
2025-02-05 23:44:46,323 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:44:46,323 - 
2025-02-05 23:44:46,429 - 
2025-02-05 23:44:46,430 - 执行前idx: 5, pending_stmts: {4: (2, 'INSERT INTO table_0 (id, col_0) VALUES (NULL, 79)', <Thread(Thread-555, started 42280)>, 1738770286.4299507)}
2025-02-05 23:44:46,536 - stmt_idx: 4, status: success, result: None
2025-02-05 23:44:46,536 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0) VALUES (NULL, 79)
2025-02-05 23:44:46,536 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:44:46,536 - 
2025-02-05 23:44:46,645 - 
2025-02-05 23:44:46,646 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-556, started 17096)>, 1738770286.6456285)}
2025-02-05 23:44:46,755 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:46,755 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-556, started 17096)>, 1738770286.6456285)}
2025-02-05 23:44:46,755 - 
2025-02-05 23:44:46,867 - 
2025-02-05 23:44:46,868 - 执行前idx: 9, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-556, started 17096)>, 1738770286.6456285), 8: (2, 'UPDATE table_0 SET col_0 = 47 WHERE (id = 5)', <Thread(Thread-557, started 39856)>, 1738770286.8674772)}
2025-02-05 23:44:46,976 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:47,080 - stmt_idx: 8, status: success, result: None
2025-02-05 23:44:47,080 - 成功执行序列中事务2语句: UPDATE table_0 SET col_0 = 47 WHERE (id = 5)
2025-02-05 23:44:47,080 - 执行后idx: 9, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-556, started 17096)>, 1738770286.6456285)}
2025-02-05 23:44:47,080 - 
2025-02-05 23:44:47,188 - 
2025-02-05 23:44:47,188 - 执行前idx: 11, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-556, started 17096)>, 1738770286.6456285), 10: (2, 'INSERT INTO table_0 (id, col_0) VALUES (NULL, 80)', <Thread(Thread-558, started 13836)>, 1738770287.188638)}
2025-02-05 23:44:47,297 - wait for lock, trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:47,407 - stmt_idx: 10, status: success, result: None
2025-02-05 23:44:47,407 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0) VALUES (NULL, 80)
2025-02-05 23:44:47,407 - 执行后idx: 11, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-556, started 17096)>, 1738770286.6456285)}
2025-02-05 23:44:47,407 - 
2025-02-05 23:44:47,518 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-556, started 17096)>, 1738770286.6456285)}
2025-02-05 23:44:47,519 - 
2025-02-05 23:44:47,519 - 执行前idx: 13, pending_stmts: {5: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-556, stopped 17096)>, 1738770286.6456285)}
2025-02-05 23:44:47,629 - stmt_idx: 5, status: success, result: None
2025-02-05 23:44:47,629 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:47,629 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:44:47,630 - 执行后idx: 13, pending_stmts: {6: (1, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-559, started 15252)>, 1738770287.6302567), 7: (1, 'SELECT id FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-560, started 41888)>, 1738770287.6307764), 9: (1, 'UPDATE table_0 SET col_0 = 82 WHERE id BETWEEN 5 AND 5', <Thread(Thread-561, started 27712)>, 1738770287.6307764), 12: (1, 'COMMIT', <Thread(Thread-562, started 34716)>, 1738770287.6307764)}
2025-02-05 23:44:47,631 - 
2025-02-05 23:44:47,737 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-559, stopped 15252)>, 1738770287.6302567), 7: (1, 'SELECT id FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-560, stopped 41888)>, 1738770287.6307764), 9: (1, 'UPDATE table_0 SET col_0 = 82 WHERE id BETWEEN 5 AND 5', <Thread(Thread-561, stopped 27712)>, 1738770287.6307764), 12: (1, 'COMMIT', <Thread(Thread-562, stopped 34716)>, 1738770287.6307764)}
2025-02-05 23:44:47,737 - 
2025-02-05 23:44:47,737 - 执行前idx: 13, pending_stmts: {6: (1, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-559, stopped 15252)>, 1738770287.6302567), 7: (1, 'SELECT id FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-560, stopped 41888)>, 1738770287.6307764), 9: (1, 'UPDATE table_0 SET col_0 = 82 WHERE id BETWEEN 5 AND 5', <Thread(Thread-561, stopped 27712)>, 1738770287.6307764), 12: (1, 'COMMIT', <Thread(Thread-562, stopped 34716)>, 1738770287.6307764)}
2025-02-05 23:44:47,843 - stmt_idx: 6, status: success, result: None
2025-02-05 23:44:47,843 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 23:44:47,950 - stmt_idx: 7, status: success, result: None
2025-02-05 23:44:47,950 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 23:44:48,058 - stmt_idx: 9, status: success, result: None
2025-02-05 23:44:48,058 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 82 WHERE id BETWEEN 5 AND 5
2025-02-05 23:44:48,169 - stmt_idx: 12, status: success, result: None
2025-02-05 23:44:48,169 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:44:48,169 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:44:48,169 - 
2025-02-05 23:44:48,285 - 执行序列成功
2025-02-05 23:44:49,064 - is_atomic: True
2025-02-05 23:44:49,065 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:44:49,065 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_0 = 49 WHERE (id = 1)'), (2, 'UPDATE table_0 SET col_0 = 75 WHERE id BETWEEN 3 AND 3'), (2, 'INSERT INTO table_0 (id, col_0) VALUES (NULL, 79)'), (2, 'UPDATE table_0 SET col_0 = 47 WHERE (id = 5)'), (2, 'INSERT INTO table_0 (id, col_0) VALUES (NULL, 80)'), (2, 'COMMIT'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (1, 'UPDATE table_0 SET col_0 = 82 WHERE id BETWEEN 5 AND 5'), (1, 'COMMIT')]
2025-02-05 23:44:49,065 - snapshots: {'before': {'table_0': [(1, 90), (2, 100), (3, 78), (4, 10), (5, 14)]}, 'trx1': {'table_0': [(1, 90), (2, 100), (3, 78), (4, 10), (5, 82)]}, 'trx2': {'table_0': [(1, 49), (2, 100), (3, 75), (4, 10), (5, 47), (6, 79), (7, 80)]}, 'serial': {'table_0': [(1, 49), (2, 100), (3, 75), (4, 10), (5, 82), (8, 79), (9, 80)]}}
2025-02-05 23:44:49,065 - 
2025-02-05 23:44:49,075 - iter: 75
2025-02-05 23:44:50,580 - table table_0 has 5 rows
2025-02-05 23:44:50,580 - trx1_start_id: 3
2025-02-05 23:44:50,580 - trx1_end_id: 4
2025-02-05 23:44:50,580 - trx1_exclusive_start_id: 3
2025-02-05 23:44:50,580 - trx1_exclusive_end_id: 2
2025-02-05 23:44:50,580 - trx1_exclusive_ids: []
2025-02-05 23:44:50,580 - trx2_start_id: 3
2025-02-05 23:44:50,580 - trx2_end_id: 5
2025-02-05 23:44:50,580 - trx2_exclusive_start_id: 5
2025-02-05 23:44:50,580 - trx2_exclusive_end_id: 5
2025-02-05 23:44:50,580 - trx2_exclusive_ids: [5]
2025-02-05 23:44:50,580 - intersection_ids: [3, 4]
2025-02-05 23:44:50,581 - res_dict: {'trx1_lock_row_ids': [3, 4], 'trx2_lock_row_ids': [3, 4, 5], 'intersection_row_ids': [3, 4]}
2025-02-05 23:44:50,581 - lock_same_resource: True
2025-02-05 23:44:50,581 - 
2025-02-05 23:44:50,581 - intersection phase1
2025-02-05 23:44:50,584 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=3, is_continuous=True, range_end_idx=4
2025-02-05 23:44:50,585 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:50,585 - params: {'v1': '3', 'v2': '4', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:50,588 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=3, is_continuous=True, range_end_idx=5
2025-02-05 23:44:50,590 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:50,590 - params: {'set_expr': "col_0 = 'BJeIm'", 'v1': '3', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:44:50,590 - intersection phase1 end
2025-02-05 23:44:50,590 - 
2025-02-05 23:44:50,590 - intersection phase2
2025-02-05 23:44:50,591 - 事务1在第二阶段自己加的锁: II
2025-02-05 23:44:50,591 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:44:50,591 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:44:50,591 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:44:50,595 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=3, is_continuous=True, range_end_idx=2
2025-02-05 23:44:50,596 - 生成连续锁定SQL失败: 找不到从3到2的行
2025-02-05 23:44:50,596 - 生成锁SQL失败: 找不到从3到2的行
2025-02-05 23:44:50,596 - 生成死锁事务序列失败: 找不到从3到2的行
2025-02-05 23:44:50,596 - 
2025-02-05 23:44:50,596 - Error in iteration 75: 找不到从3到2的行
2025-02-05 23:44:50,596 - 
2025-02-05 23:44:50,602 - iter: 76
2025-02-05 23:44:52,135 - table table_0 has 11 rows
2025-02-05 23:44:52,135 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'trx2_lock_row_ids': [11], 'intersection_row_ids': []}
2025-02-05 23:44:52,135 - lock_same_resource: False
2025-02-05 23:44:52,135 - 
2025-02-05 23:44:52,135 - non intersection phase1
2025-02-05 23:44:52,136 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:44:52,136 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:44:52,136 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 23:44:52,136 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 23:44:52,139 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=10
2025-02-05 23:44:52,140 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:52,140 - params: {'v1': '1', 'v2': '10', 'select_cols': 'id, col_0, col_476', 'table': 'table_0'}
2025-02-05 23:44:52,144 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:44:52,145 - needed_params: {'cond', 'table'}
2025-02-05 23:44:52,145 - params: {'cond': "(col_1 = 'upenx') AND (col_476 IS NULL) AND (col_0 = 61)", 'table': 'table_0'}
2025-02-05 23:44:52,146 - non intersection phase1 end
2025-02-05 23:44:52,146 - 
2025-02-05 23:44:52,146 - non intersection phase2
2025-02-05 23:44:52,149 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:44:52,151 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:44:52,151 - params: {'v1': '11', 'v2': '11', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:44:52,154 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=6
2025-02-05 23:44:52,156 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:44:52,156 - params: {'set_expr': "col_1 = 'NfAtL'", 'v1': '1', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:44:52,156 - non intersection phase2 end
2025-02-05 23:44:52,156 - 
2025-02-05 23:44:52,156 - 生成死锁事务序列成功如下
2025-02-05 23:44:52,156 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "DELETE FROM table_0 WHERE (col_1 = 'upenx') AND (col_476 IS NULL) AND (col_0 = 61)"), (1, 'SELECT id, col_0, col_476 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE'), (2, "UPDATE table_0 SET col_1 = 'NfAtL' WHERE id BETWEEN 1 AND 6"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:44:53,742 - 创建事务1连接成功
2025-02-05 23:44:53,743 - 执行事务1语句: BEGIN
2025-02-05 23:44:53,744 - 执行事务1语句: SELECT id, col_0, col_476 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE
2025-02-05 23:44:53,745 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 23:44:53,746 - 执行事务1语句: COMMIT;
2025-02-05 23:44:53,749 - 执行事务1成功
2025-02-05 23:44:56,390 - 恢复初始状态成功
2025-02-05 23:44:57,165 - 创建事务2连接成功
2025-02-05 23:44:57,166 - 执行事务2语句: BEGIN
2025-02-05 23:44:57,167 - 执行事务2语句: DELETE FROM table_0 WHERE (col_1 = 'upenx') AND (col_476 IS NULL) AND (col_0 = 61)
2025-02-05 23:44:57,168 - 执行事务2语句: UPDATE table_0 SET col_1 = 'NfAtL' WHERE id BETWEEN 1 AND 6
2025-02-05 23:44:57,170 - 执行事务2语句: COMMIT;
2025-02-05 23:44:57,175 - 执行事务2成功
2025-02-05 23:45:02,087 - 
2025-02-05 23:45:02,087 - 执行前idx: 3, pending_stmts: {2: (2, "DELETE FROM table_0 WHERE (col_1 = 'upenx') AND (col_476 IS NULL) AND (col_0 = 61)", <Thread(Thread-563, started 32156)>, 1738770302.087673)}
2025-02-05 23:45:02,199 - stmt_idx: 2, status: success, result: None
2025-02-05 23:45:02,199 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_1 = 'upenx') AND (col_476 IS NULL) AND (col_0 = 61)
2025-02-05 23:45:02,199 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:45:02,199 - 
2025-02-05 23:45:02,302 - 
2025-02-05 23:45:02,303 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_476 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE', <Thread(Thread-564, started 3836)>, 1738770302.3023136)}
2025-02-05 23:45:02,409 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_476 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE
2025-02-05 23:45:02,410 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_476 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE', <Thread(Thread-564, started 3836)>, 1738770302.3023136)}
2025-02-05 23:45:02,410 - 
2025-02-05 23:45:02,516 - 
2025-02-05 23:45:02,516 - 执行前idx: 5, pending_stmts: {3: (1, 'SELECT id, col_0, col_476 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE', <Thread(Thread-564, started 3836)>, 1738770302.3023136), 4: (2, "UPDATE table_0 SET col_1 = 'NfAtL' WHERE id BETWEEN 1 AND 6", <Thread(Thread-565, started 36400)>, 1738770302.5161731)}
2025-02-05 23:45:02,518 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0, col_476 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE
2025-02-05 23:45:02,623 - stmt_idx: 3, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:45:02,623 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0, col_476 FROM table_0 WHERE id BETWEEN 1 AND 10 FOR UPDATE
2025-02-05 23:45:02,623 - 错误: dictionary changed size during iteration
2025-02-05 23:45:02,627 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (2, "UPDATE table_0 SET col_1 = 'NfAtL' WHERE id BETWEEN 1 AND 6", <Thread(Thread-565, stopped 36400)>, 1738770302.5161731)}
2025-02-05 23:45:02,627 - 
2025-02-05 23:45:02,627 - 执行前idx: 8, pending_stmts: {4: (2, "UPDATE table_0 SET col_1 = 'NfAtL' WHERE id BETWEEN 1 AND 6", <Thread(Thread-565, stopped 36400)>, 1738770302.5161731)}
2025-02-05 23:45:02,728 - stmt_idx: 4, status: success, result: None
2025-02-05 23:45:02,728 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'NfAtL' WHERE id BETWEEN 1 AND 6
2025-02-05 23:45:02,728 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:45:02,728 - 
2025-02-05 23:45:02,839 - 执行序列成功
2025-02-05 23:45:03,603 - is_atomic: True
2025-02-05 23:45:03,603 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:45:03,603 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "DELETE FROM table_0 WHERE (col_1 = 'upenx') AND (col_476 IS NULL) AND (col_0 = 61)"), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, "UPDATE table_0 SET col_1 = 'NfAtL' WHERE id BETWEEN 1 AND 6")]
2025-02-05 23:45:03,603 - snapshots: {'before': {'table_0': [(1, 29, 'zedjr', None), (2, 59, 'twmxh', None), (3, 18, 'jlrwr', None), (4, 68, 'yxajy', None), (5, 71, 'hukea', None), (6, 17, 'pftbh', None), (7, 89, 'odpmy', None), (8, 98, 'afqtq', None), (9, 48, 'nfcwx', None), (10, 6, 'znogk', None), (11, 61, 'upenx', None)]}, 'trx1': {'table_0': [(1, 29, 'zedjr', None), (2, 59, 'twmxh', None), (3, 18, 'jlrwr', None), (4, 68, 'yxajy', None), (5, 71, 'hukea', None), (6, 17, 'pftbh', None), (7, 89, 'odpmy', None), (8, 98, 'afqtq', None), (9, 48, 'nfcwx', None), (10, 6, 'znogk', None), (11, 61, 'upenx', None)]}, 'trx2': {'table_0': [(1, 29, 'NfAtL', None), (2, 59, 'NfAtL', None), (3, 18, 'NfAtL', None), (4, 68, 'NfAtL', None), (5, 71, 'NfAtL', None), (6, 17, 'NfAtL', None), (7, 89, 'odpmy', None), (8, 98, 'afqtq', None), (9, 48, 'nfcwx', None), (10, 6, 'znogk', None)]}, 'serial': {'table_0': [(1, 29, 'NfAtL', None), (2, 59, 'NfAtL', None), (3, 18, 'NfAtL', None), (4, 68, 'NfAtL', None), (5, 71, 'NfAtL', None), (6, 17, 'NfAtL', None), (7, 89, 'odpmy', None), (8, 98, 'afqtq', None), (9, 48, 'nfcwx', None), (10, 6, 'znogk', None)]}}
2025-02-05 23:45:03,603 - 
2025-02-05 23:45:03,615 - iter: 77
2025-02-05 23:45:05,089 - table table_0 has 6 rows
2025-02-05 23:45:05,090 - trx1_start_id: 1
2025-02-05 23:45:05,090 - trx1_end_id: 6
2025-02-05 23:45:05,090 - trx1_exclusive_start_id: 1
2025-02-05 23:45:05,090 - trx1_exclusive_end_id: 4
2025-02-05 23:45:05,090 - trx1_exclusive_ids: [1, 2, 3, 4]
2025-02-05 23:45:05,090 - trx2_start_id: 5
2025-02-05 23:45:05,090 - trx2_end_id: 6
2025-02-05 23:45:05,090 - trx2_exclusive_start_id: 7
2025-02-05 23:45:05,090 - trx2_exclusive_end_id: 6
2025-02-05 23:45:05,090 - trx2_exclusive_ids: []
2025-02-05 23:45:05,090 - intersection_ids: [5, 6]
2025-02-05 23:45:05,090 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6], 'trx2_lock_row_ids': [5, 6], 'intersection_row_ids': [5, 6]}
2025-02-05 23:45:05,090 - lock_same_resource: True
2025-02-05 23:45:05,090 - 
2025-02-05 23:45:05,090 - intersection phase1
2025-02-05 23:45:05,094 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=1, is_continuous=True, range_end_idx=6
2025-02-05 23:45:05,095 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:45:05,095 - params: {'set_expr': 'col_2 = 18.87, col_0 = 80.61', 'v1': '1', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:45:05,098 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=6
2025-02-05 23:45:05,099 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:45:05,100 - params: {'set_expr': 'col_0 = 92.34, col_3 = 92.18, col_1 = 25.91', 'v1': '5', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:45:05,100 - intersection phase1 end
2025-02-05 23:45:05,100 - 
2025-02-05 23:45:05,100 - intersection phase2
2025-02-05 23:45:05,100 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:45:05,100 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:45:05,100 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:45:05,100 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:45:05,104 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 23:45:05,106 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:05,106 - params: {'v1': '1', 'v2': '4', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:45:05,108 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=7, is_continuous=True, range_end_idx=6
2025-02-05 23:45:05,109 - 生成连续锁定SQL失败: 找不到从7到6的行
2025-02-05 23:45:05,109 - 生成锁SQL失败: 找不到从7到6的行
2025-02-05 23:45:05,109 - 生成死锁事务序列失败: 找不到从7到6的行
2025-02-05 23:45:05,109 - 
2025-02-05 23:45:05,109 - Error in iteration 77: 找不到从7到6的行
2025-02-05 23:45:05,109 - 
2025-02-05 23:45:05,116 - iter: 78
2025-02-05 23:45:06,616 - table table_0 has 11 rows
2025-02-05 23:45:06,616 - res_dict: {'trx1_lock_row_ids': [10, 11], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': []}
2025-02-05 23:45:06,616 - lock_same_resource: False
2025-02-05 23:45:06,616 - 
2025-02-05 23:45:06,616 - non intersection phase1
2025-02-05 23:45:06,617 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:45:06,617 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:45:06,617 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:45:06,617 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 23:45:06,620 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:45:06,621 - needed_params: {'cond', 'table'}
2025-02-05 23:45:06,621 - params: {'cond': "(col_2 = 'nnxzk')", 'table': 'table_0'}
2025-02-05 23:45:06,624 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:45:06,625 - needed_params: {'cond', 'table'}
2025-02-05 23:45:06,625 - params: {'cond': '(id = 11)', 'table': 'table_0'}
2025-02-05 23:45:06,629 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=8
2025-02-05 23:45:06,630 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:06,631 - params: {'v1': '1', 'v2': '8', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:45:06,631 - non intersection phase1 end
2025-02-05 23:45:06,631 - 
2025-02-05 23:45:06,631 - non intersection phase2
2025-02-05 23:45:06,635 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=8, is_continuous=True, range_end_idx=8
2025-02-05 23:45:06,636 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:45:06,636 - params: {'set_expr': "col_0 = 73.59, col_2 = 'ozKuj'", 'v1': '8', 'v2': '8', 'table': 'table_0'}
2025-02-05 23:45:06,639 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:45:06,640 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:45:06,640 - params: {'vals': "NULL, 53.12, 70.52, 'DgMpu'", 'insert_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:45:06,640 - non intersection phase2 end
2025-02-05 23:45:06,640 - 
2025-02-05 23:45:06,640 - 生成死锁事务序列成功如下
2025-02-05 23:45:06,640 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "DELETE FROM table_0 WHERE (col_2 = 'nnxzk')"), (1, 'DELETE FROM table_0 WHERE (id = 11)'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 53.12, 70.52, 'DgMpu')"), (1, "UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:45:08,179 - 创建事务1连接成功
2025-02-05 23:45:08,181 - 执行事务1语句: BEGIN
2025-02-05 23:45:08,181 - 执行事务1语句: DELETE FROM table_0 WHERE (col_2 = 'nnxzk')
2025-02-05 23:45:08,183 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 11)
2025-02-05 23:45:08,184 - 执行事务1语句: UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8
2025-02-05 23:45:08,186 - 执行事务1语句: COMMIT;
2025-02-05 23:45:08,191 - 执行事务1成功
2025-02-05 23:45:10,782 - 恢复初始状态成功
2025-02-05 23:45:11,543 - 创建事务2连接成功
2025-02-05 23:45:11,544 - 执行事务2语句: BEGIN
2025-02-05 23:45:11,545 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 FOR UPDATE
2025-02-05 23:45:11,547 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 53.12, 70.52, 'DgMpu')
2025-02-05 23:45:11,549 - 执行事务2语句: COMMIT;
2025-02-05 23:45:11,553 - 执行事务2成功
2025-02-05 23:45:16,474 - 
2025-02-05 23:45:16,475 - 执行前idx: 3, pending_stmts: {2: (1, "DELETE FROM table_0 WHERE (col_2 = 'nnxzk')", <Thread(Thread-566, started 42056)>, 1738770316.4747052)}
2025-02-05 23:45:16,587 - stmt_idx: 2, status: success, result: None
2025-02-05 23:45:16,587 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_2 = 'nnxzk')
2025-02-05 23:45:16,587 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:45:16,587 - 
2025-02-05 23:45:16,695 - 
2025-02-05 23:45:16,695 - 执行前idx: 4, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (id = 11)', <Thread(Thread-567, started 42052)>, 1738770316.6950688)}
2025-02-05 23:45:16,800 - stmt_idx: 3, status: success, result: None
2025-02-05 23:45:16,800 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 11)
2025-02-05 23:45:16,800 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:45:16,800 - 
2025-02-05 23:45:16,909 - 
2025-02-05 23:45:16,909 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 FOR UPDATE', <Thread(Thread-568, started 31480)>, 1738770316.9092748)}
2025-02-05 23:45:17,018 - stmt_idx: 4, status: success, result: None
2025-02-05 23:45:17,018 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 FOR UPDATE
2025-02-05 23:45:17,018 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:45:17,018 - 
2025-02-05 23:45:17,128 - 
2025-02-05 23:45:17,128 - 执行前idx: 6, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 53.12, 70.52, 'DgMpu')", <Thread(Thread-569, started 37176)>, 1738770317.1284819)}
2025-02-05 23:45:17,236 - stmt_idx: 5, status: success, result: None
2025-02-05 23:45:17,236 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 53.12, 70.52, 'DgMpu')
2025-02-05 23:45:17,236 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:45:17,236 - 
2025-02-05 23:45:17,344 - 
2025-02-05 23:45:17,345 - 执行前idx: 7, pending_stmts: {6: (1, "UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8", <Thread(Thread-570, started 34288)>, 1738770317.344646)}
2025-02-05 23:45:17,452 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8
2025-02-05 23:45:17,452 - 执行后idx: 7, pending_stmts: {6: (1, "UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8", <Thread(Thread-570, started 34288)>, 1738770317.344646)}
2025-02-05 23:45:17,452 - 
2025-02-05 23:45:17,563 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, "UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8", <Thread(Thread-570, started 34288)>, 1738770317.344646)}
2025-02-05 23:45:17,563 - 
2025-02-05 23:45:17,563 - 执行前idx: 9, pending_stmts: {6: (1, "UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8", <Thread(Thread-570, stopped 34288)>, 1738770317.344646)}
2025-02-05 23:45:17,668 - stmt_idx: 6, status: success, result: None
2025-02-05 23:45:17,668 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8
2025-02-05 23:45:17,668 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8
2025-02-05 23:45:17,669 - 执行后idx: 9, pending_stmts: {8: (1, 'COMMIT', <Thread(Thread-571, started 40332)>, 1738770317.669931)}
2025-02-05 23:45:17,669 - 
2025-02-05 23:45:17,776 - 序列遍历完成，开始查看剩余阻塞的语句：{8: (1, 'COMMIT', <Thread(Thread-571, stopped 40332)>, 1738770317.669931)}
2025-02-05 23:45:17,777 - 
2025-02-05 23:45:17,777 - 执行前idx: 9, pending_stmts: {8: (1, 'COMMIT', <Thread(Thread-571, stopped 40332)>, 1738770317.669931)}
2025-02-05 23:45:17,883 - stmt_idx: 8, status: success, result: None
2025-02-05 23:45:17,883 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:45:17,883 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:45:17,883 - 
2025-02-05 23:45:17,994 - 执行序列成功
2025-02-05 23:45:18,766 - is_atomic: True
2025-02-05 23:45:18,766 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:45:18,766 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "DELETE FROM table_0 WHERE (col_2 = 'nnxzk')"), (1, 'DELETE FROM table_0 WHERE (id = 11)'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 1 AND 8 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2) VALUES (NULL, 53.12, 70.52, 'DgMpu')"), (2, 'COMMIT'), (1, "UPDATE table_0 SET col_0 = 73.59, col_2 = 'ozKuj' WHERE id BETWEEN 8 AND 8"), (1, 'COMMIT')]
2025-02-05 23:45:18,766 - snapshots: {'before': {'table_0': [(1, 64.11, 41.67, 'rdwmr'), (2, 96.24, 83.58, 'ysfdk'), (3, 80.41, 22.61, 'erlek'), (4, 46.81, 59.29, 'cddnj'), (5, 29.48, 6.26, 'lzsry'), (6, 47.9, 25.71, 'iqqpp'), (7, 63.1, 82.05, 'rsiav'), (8, 88.53, 99.44, 'ifuak'), (9, 26.41, 4.57, 'umbmf'), (10, 7.74, 32.0, 'nnxzk'), (11, 46.61, 71.07, 'zvbgz')]}, 'trx1': {'table_0': [(1, 64.11, 41.67, 'rdwmr'), (2, 96.24, 83.58, 'ysfdk'), (3, 80.41, 22.61, 'erlek'), (4, 46.81, 59.29, 'cddnj'), (5, 29.48, 6.26, 'lzsry'), (6, 47.9, 25.71, 'iqqpp'), (7, 63.1, 82.05, 'rsiav'), (8, 73.59, 99.44, 'ozKuj'), (9, 26.41, 4.57, 'umbmf')]}, 'trx2': {'table_0': [(1, 64.11, 41.67, 'rdwmr'), (2, 96.24, 83.58, 'ysfdk'), (3, 80.41, 22.61, 'erlek'), (4, 46.81, 59.29, 'cddnj'), (5, 29.48, 6.26, 'lzsry'), (6, 47.9, 25.71, 'iqqpp'), (7, 63.1, 82.05, 'rsiav'), (8, 88.53, 99.44, 'ifuak'), (9, 26.41, 4.57, 'umbmf'), (10, 7.74, 32.0, 'nnxzk'), (11, 46.61, 71.07, 'zvbgz'), (12, 53.12, 70.52, 'DgMpu')]}, 'serial': {'table_0': [(1, 64.11, 41.67, 'rdwmr'), (2, 96.24, 83.58, 'ysfdk'), (3, 80.41, 22.61, 'erlek'), (4, 46.81, 59.29, 'cddnj'), (5, 29.48, 6.26, 'lzsry'), (6, 47.9, 25.71, 'iqqpp'), (7, 63.1, 82.05, 'rsiav'), (8, 73.59, 99.44, 'ozKuj'), (9, 26.41, 4.57, 'umbmf'), (13, 53.12, 70.52, 'DgMpu')]}}
2025-02-05 23:45:18,766 - 
2025-02-05 23:45:18,777 - iter: 79
2025-02-05 23:45:20,333 - table table_0 has 5 rows
2025-02-05 23:45:20,333 - trx1_lock_row_ids: [2]
2025-02-05 23:45:20,333 - trx2_lock_row_ids: [2, 3, 4, 5]
2025-02-05 23:45:20,333 - intersection_row_ids: [2]
2025-02-05 23:45:20,334 - trx1_exclusive_ids: []
2025-02-05 23:45:20,334 - trx2_exclusive_ids: [3, 4, 5]
2025-02-05 23:45:20,334 - res_dict: {'trx1_lock_row_ids': [2], 'trx2_lock_row_ids': [2, 3, 4, 5], 'intersection_row_ids': [2]}
2025-02-05 23:45:20,334 - lock_same_resource: True
2025-02-05 23:45:20,334 - 
2025-02-05 23:45:20,334 - intersection phase1
2025-02-05 23:45:20,337 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=5
2025-02-05 23:45:20,338 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:20,338 - params: {'v1': '2', 'v2': '5', 'select_cols': 'id, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:45:20,342 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:45:20,344 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:45:20,344 - params: {'cond': '(id = 2)', 'select_cols': 'id, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:45:20,344 - intersection phase1 end
2025-02-05 23:45:20,344 - 
2025-02-05 23:45:20,344 - intersection phase2
2025-02-05 23:45:20,345 - 事务1在第二阶段自己加的锁: II
2025-02-05 23:45:20,345 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:45:20,345 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:45:20,345 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:45:20,348 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:45:20,349 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:45:20,349 - params: {'vals': "NULL, 'BHRMQ', 'uCZYh', 62, 'PmGxd'", 'insert_cols': 'id, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:45:20,353 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:45:20,355 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:45:20,355 - params: {'vals': "NULL, 'yzOhn', 'TRjjX', 26, 'Vetwn'", 'insert_cols': 'id, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:45:20,358 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:45:20,359 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:45:20,359 - params: {'set_expr': "col_1 = 'McRMb', col_3 = 38, col_2 = 'SNfeZ'", 'v1': '5', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:45:20,359 - intersection phase2 end
2025-02-05 23:45:20,360 - 
2025-02-05 23:45:20,360 - intersection phase3
2025-02-05 23:45:20,363 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:45:20,364 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:20,364 - params: {'v1': '4', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:45:20,368 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:45:20,369 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:45:20,369 - params: {'set_expr': "col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU'", 'cond': "(col_3 = 100) AND (col_4 = 'hwpva')", 'table': 'table_0'}
2025-02-05 23:45:20,369 - intersection phase3 end
2025-02-05 23:45:20,369 - 
2025-02-05 23:45:20,369 - 生成死锁事务序列成功如下
2025-02-05 23:45:20,369 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'BHRMQ', 'uCZYh', 62, 'PmGxd')"), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'yzOhn', 'TRjjX', 26, 'Vetwn')"), (2, "UPDATE table_0 SET col_1 = 'McRMb', col_3 = 38, col_2 = 'SNfeZ' WHERE id BETWEEN 5 AND 5"), (2, "UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:45:21,941 - 创建事务1连接成功
2025-02-05 23:45:21,942 - 执行事务1语句: BEGIN
2025-02-05 23:45:21,944 - 执行事务1语句: SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:45:21,944 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:45:21,946 - 执行事务1语句: COMMIT;
2025-02-05 23:45:21,950 - 执行事务1成功
2025-02-05 23:45:24,573 - 恢复初始状态成功
2025-02-05 23:45:25,367 - 创建事务2连接成功
2025-02-05 23:45:25,369 - 执行事务2语句: BEGIN
2025-02-05 23:45:25,370 - 执行事务2语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE
2025-02-05 23:45:25,371 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'BHRMQ', 'uCZYh', 62, 'PmGxd')
2025-02-05 23:45:25,371 - 执行事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'yzOhn', 'TRjjX', 26, 'Vetwn')
2025-02-05 23:45:25,372 - 执行事务2语句: UPDATE table_0 SET col_1 = 'McRMb', col_3 = 38, col_2 = 'SNfeZ' WHERE id BETWEEN 5 AND 5
2025-02-05 23:45:25,373 - 执行事务2语句: UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')
2025-02-05 23:45:25,375 - 执行事务2语句: COMMIT;
2025-02-05 23:45:25,380 - 执行事务2成功
2025-02-05 23:45:30,307 - 
2025-02-05 23:45:30,307 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-572, started 20908)>, 1738770330.3074358)}
2025-02-05 23:45:30,416 - stmt_idx: 2, status: success, result: None
2025-02-05 23:45:30,416 - 成功执行序列中事务1语句: SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:45:30,416 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:45:30,416 - 
2025-02-05 23:45:30,525 - 
2025-02-05 23:45:30,526 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE', <Thread(Thread-573, started 33448)>, 1738770330.5258553)}
2025-02-05 23:45:30,631 - stmt_idx: 3, status: success, result: None
2025-02-05 23:45:30,631 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE
2025-02-05 23:45:30,631 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:45:30,631 - 
2025-02-05 23:45:30,739 - 
2025-02-05 23:45:30,739 - 执行前idx: 5, pending_stmts: {4: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'BHRMQ', 'uCZYh', 62, 'PmGxd')", <Thread(Thread-574, started 42116)>, 1738770330.7398098)}
2025-02-05 23:45:30,847 - stmt_idx: 4, status: success, result: None
2025-02-05 23:45:30,847 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'BHRMQ', 'uCZYh', 62, 'PmGxd')
2025-02-05 23:45:30,848 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:45:30,848 - 
2025-02-05 23:45:30,955 - 
2025-02-05 23:45:30,955 - 执行前idx: 6, pending_stmts: {5: (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'yzOhn', 'TRjjX', 26, 'Vetwn')", <Thread(Thread-575, started 5208)>, 1738770330.9552903)}
2025-02-05 23:45:31,059 - stmt_idx: 5, status: success, result: None
2025-02-05 23:45:31,059 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'yzOhn', 'TRjjX', 26, 'Vetwn')
2025-02-05 23:45:31,059 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:45:31,059 - 
2025-02-05 23:45:31,163 - 
2025-02-05 23:45:31,163 - 执行前idx: 7, pending_stmts: {6: (2, "UPDATE table_0 SET col_1 = 'McRMb', col_3 = 38, col_2 = 'SNfeZ' WHERE id BETWEEN 5 AND 5", <Thread(Thread-576, started 40456)>, 1738770331.1631157)}
2025-02-05 23:45:31,270 - stmt_idx: 6, status: success, result: None
2025-02-05 23:45:31,270 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'McRMb', col_3 = 38, col_2 = 'SNfeZ' WHERE id BETWEEN 5 AND 5
2025-02-05 23:45:31,270 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:45:31,270 - 
2025-02-05 23:45:31,378 - 
2025-02-05 23:45:31,379 - 执行前idx: 8, pending_stmts: {7: (2, "UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')", <Thread(Thread-577, started 39216)>, 1738770331.378347)}
2025-02-05 23:45:31,488 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')
2025-02-05 23:45:31,489 - 执行后idx: 8, pending_stmts: {7: (2, "UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')", <Thread(Thread-577, started 39216)>, 1738770331.378347)}
2025-02-05 23:45:31,489 - 
2025-02-05 23:45:31,595 - 
2025-02-05 23:45:31,596 - 执行前idx: 9, pending_stmts: {7: (2, "UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')", <Thread(Thread-577, started 39216)>, 1738770331.378347), 8: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-578, started 18728)>, 1738770331.595407)}
2025-02-05 23:45:31,598 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:45:31,703 - stmt_idx: 7, status: success, result: None
2025-02-05 23:45:31,703 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')
2025-02-05 23:45:31,703 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')
2025-02-05 23:45:31,810 - stmt_idx: 8, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:45:31,810 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:45:31,810 - 错误: dictionary changed size during iteration
2025-02-05 23:45:31,814 - 执行序列成功
2025-02-05 23:45:32,592 - is_atomic: True
2025-02-05 23:45:32,592 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:45:32,592 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_2, col_3, col_4 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 5 LOCK IN SHARE MODE'), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'BHRMQ', 'uCZYh', 62, 'PmGxd')"), (2, "INSERT INTO table_0 (id, col_1, col_2, col_3, col_4) VALUES (NULL, 'yzOhn', 'TRjjX', 26, 'Vetwn')"), (2, "UPDATE table_0 SET col_1 = 'McRMb', col_3 = 38, col_2 = 'SNfeZ' WHERE id BETWEEN 5 AND 5"), (2, "UPDATE table_0 SET col_3 = 86, col_1 = 'KoOwj', col_2 = 'nmpSq', col_4 = 'IJduU' WHERE (col_3 = 100) AND (col_4 = 'hwpva')"), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT')]
2025-02-05 23:45:32,592 - snapshots: {'before': {'table_0': [(1, 'kpbsd', 'dopzi', 57, 'xpnda'), (2, 'fmhhb', 'ibcbd', 100, 'hwpva'), (3, 'jbwao', 'sxzwp', 86, 'hrmqt'), (4, 'wdxwk', 'bnuks', 69, 'ftgia'), (5, 'vunvb', 'vbmmj', 40, 'xwidt')]}, 'trx1': {'table_0': [(1, 'kpbsd', 'dopzi', 57, 'xpnda'), (2, 'fmhhb', 'ibcbd', 100, 'hwpva'), (3, 'jbwao', 'sxzwp', 86, 'hrmqt'), (4, 'wdxwk', 'bnuks', 69, 'ftgia'), (5, 'vunvb', 'vbmmj', 40, 'xwidt')]}, 'trx2': {'table_0': [(1, 'kpbsd', 'dopzi', 57, 'xpnda'), (2, 'KoOwj', 'nmpSq', 86, 'IJduU'), (3, 'jbwao', 'sxzwp', 86, 'hrmqt'), (4, 'wdxwk', 'bnuks', 69, 'ftgia'), (5, 'McRMb', 'SNfeZ', 38, 'xwidt'), (6, 'BHRMQ', 'uCZYh', 62, 'PmGxd'), (7, 'yzOhn', 'TRjjX', 26, 'Vetwn')]}, 'serial': {'table_0': [(1, 'kpbsd', 'dopzi', 57, 'xpnda'), (2, 'KoOwj', 'nmpSq', 86, 'IJduU'), (3, 'jbwao', 'sxzwp', 86, 'hrmqt'), (4, 'wdxwk', 'bnuks', 69, 'ftgia'), (5, 'McRMb', 'SNfeZ', 38, 'xwidt'), (8, 'BHRMQ', 'uCZYh', 62, 'PmGxd'), (9, 'yzOhn', 'TRjjX', 26, 'Vetwn')]}}
2025-02-05 23:45:32,592 - 
2025-02-05 23:45:32,604 - iter: 80
2025-02-05 23:45:34,137 - table table_0 has 11 rows
2025-02-05 23:45:34,138 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5], 'trx2_lock_row_ids': [6, 7, 8, 9], 'intersection_row_ids': []}
2025-02-05 23:45:34,138 - lock_same_resource: False
2025-02-05 23:45:34,138 - 
2025-02-05 23:45:34,138 - non intersection phase1
2025-02-05 23:45:34,138 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:45:34,138 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:45:34,138 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:45:34,138 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:45:34,141 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=5
2025-02-05 23:45:34,142 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:34,142 - params: {'v1': '1', 'v2': '5', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:45:34,145 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=9
2025-02-05 23:45:34,146 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:34,146 - params: {'v1': '6', 'v2': '9', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:45:34,147 - non intersection phase1 end
2025-02-05 23:45:34,147 - 
2025-02-05 23:45:34,147 - non intersection phase2
2025-02-05 23:45:34,150 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=6, is_continuous=True, range_end_idx=9
2025-02-05 23:45:34,151 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:45:34,151 - params: {'set_expr': 'col_0 = 43.82', 'v1': '6', 'v2': '9', 'table': 'table_0'}
2025-02-05 23:45:34,154 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 23:45:34,156 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:34,156 - params: {'v1': '1', 'v2': '4', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:45:34,156 - non intersection phase2 end
2025-02-05 23:45:34,156 - 
2025-02-05 23:45:34,156 - 生成死锁事务序列成功如下
2025-02-05 23:45:34,157 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:45:35,692 - 创建事务1连接成功
2025-02-05 23:45:35,693 - 执行事务1语句: BEGIN
2025-02-05 23:45:35,694 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE
2025-02-05 23:45:35,707 - 执行事务1语句: UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9
2025-02-05 23:45:35,709 - 执行事务1语句: COMMIT;
2025-02-05 23:45:35,714 - 执行事务1成功
2025-02-05 23:45:38,342 - 恢复初始状态成功
2025-02-05 23:45:39,112 - 创建事务2连接成功
2025-02-05 23:45:39,114 - 执行事务2语句: BEGIN
2025-02-05 23:45:39,115 - 执行事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE
2025-02-05 23:45:39,116 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE
2025-02-05 23:45:39,117 - 执行事务2语句: COMMIT;
2025-02-05 23:45:39,121 - 执行事务2成功
2025-02-05 23:45:44,027 - 
2025-02-05 23:45:44,027 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE', <Thread(Thread-579, started 32432)>, 1738770344.0276728)}
2025-02-05 23:45:44,130 - stmt_idx: 2, status: success, result: None
2025-02-05 23:45:44,130 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE
2025-02-05 23:45:44,130 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:45:44,130 - 
2025-02-05 23:45:44,233 - 
2025-02-05 23:45:44,234 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE', <Thread(Thread-580, started 15668)>, 1738770344.233756)}
2025-02-05 23:45:44,343 - stmt_idx: 3, status: success, result: None
2025-02-05 23:45:44,343 - 成功执行序列中事务2语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE
2025-02-05 23:45:44,343 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:45:44,343 - 
2025-02-05 23:45:44,453 - 
2025-02-05 23:45:44,454 - 执行前idx: 5, pending_stmts: {4: (1, 'UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9', <Thread(Thread-581, started 7152)>, 1738770344.4533913)}
2025-02-05 23:45:44,558 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9
2025-02-05 23:45:44,558 - 执行后idx: 5, pending_stmts: {4: (1, 'UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9', <Thread(Thread-581, started 7152)>, 1738770344.4533913)}
2025-02-05 23:45:44,559 - 
2025-02-05 23:45:44,666 - 
2025-02-05 23:45:44,667 - 执行前idx: 6, pending_stmts: {4: (1, 'UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9', <Thread(Thread-581, started 7152)>, 1738770344.4533913), 5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE', <Thread(Thread-582, started 42088)>, 1738770344.6666105)}
2025-02-05 23:45:44,669 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE
2025-02-05 23:45:44,773 - stmt_idx: 4, status: success, result: None
2025-02-05 23:45:44,773 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9
2025-02-05 23:45:44,773 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9
2025-02-05 23:45:44,881 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:45:44,881 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 FOR UPDATE
2025-02-05 23:45:44,881 - 错误: dictionary changed size during iteration
2025-02-05 23:45:44,886 - 执行序列成功
2025-02-05 23:45:45,661 - is_atomic: True
2025-02-05 23:45:45,661 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:45:45,661 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 5 FOR UPDATE'), (2, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 6 AND 9 FOR UPDATE'), (1, 'UPDATE table_0 SET col_0 = 43.82 WHERE id BETWEEN 6 AND 9'), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT')]
2025-02-05 23:45:45,661 - snapshots: {'before': {'table_0': [(1, 39.24, 91.89, 54), (2, 19.11, 44.72, 64), (3, 98.22, 10.13, 55), (4, 54.61, 17.89, 52), (5, 62.49, 74.97, 85), (6, 7.73, 36.73, 66), (7, 97.14, 60.74, 46), (8, 78.51, 9.85, 73), (9, 55.96, 68.4, 31), (10, 18.82, 40.21, 49), (11, 33.41, 81.85, 88)]}, 'trx1': {'table_0': [(1, 39.24, 91.89, 54), (2, 19.11, 44.72, 64), (3, 98.22, 10.13, 55), (4, 54.61, 17.89, 52), (5, 62.49, 74.97, 85), (6, 43.82, 36.73, 66), (7, 43.82, 60.74, 46), (8, 43.82, 9.85, 73), (9, 43.82, 68.4, 31), (10, 18.82, 40.21, 49), (11, 33.41, 81.85, 88)]}, 'trx2': {'table_0': [(1, 39.24, 91.89, 54), (2, 19.11, 44.72, 64), (3, 98.22, 10.13, 55), (4, 54.61, 17.89, 52), (5, 62.49, 74.97, 85), (6, 7.73, 36.73, 66), (7, 97.14, 60.74, 46), (8, 78.51, 9.85, 73), (9, 55.96, 68.4, 31), (10, 18.82, 40.21, 49), (11, 33.41, 81.85, 88)]}, 'serial': {'table_0': [(1, 39.24, 91.89, 54), (2, 19.11, 44.72, 64), (3, 98.22, 10.13, 55), (4, 54.61, 17.89, 52), (5, 62.49, 74.97, 85), (6, 43.82, 36.73, 66), (7, 43.82, 60.74, 46), (8, 43.82, 9.85, 73), (9, 43.82, 68.4, 31), (10, 18.82, 40.21, 49), (11, 33.41, 81.85, 88)]}}
2025-02-05 23:45:45,662 - 
2025-02-05 23:45:45,676 - iter: 81
2025-02-05 23:45:47,156 - table table_0 has 15 rows
2025-02-05 23:45:47,156 - res_dict: {'trx1_lock_row_ids': [8, 9, 11, 12], 'trx2_lock_row_ids': [4, 7], 'intersection_row_ids': []}
2025-02-05 23:45:47,156 - lock_same_resource: False
2025-02-05 23:45:47,156 - 
2025-02-05 23:45:47,156 - non intersection phase1
2025-02-05 23:45:47,157 - 事务1在第一阶段自己加的锁: S
2025-02-05 23:45:47,157 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:45:47,157 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:45:47,157 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:45:47,160 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:45:47,161 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:47,161 - params: {'v1': '8', 'v2': '8', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:45:47,165 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:45:47,166 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:47,166 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:45:47,169 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:45:47,171 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:47,171 - params: {'v1': '11', 'v2': '11', 'select_cols': 'col_0', 'table': 'table_0'}
2025-02-05 23:45:47,174 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:45:47,176 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:47,176 - params: {'v1': '12', 'v2': '12', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:45:47,179 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:45:47,180 - needed_params: {'cond', 'table'}
2025-02-05 23:45:47,180 - params: {'cond': "(col_1 = 'bkhda') AND (col_0 = 'yfder')", 'table': 'table_0'}
2025-02-05 23:45:47,184 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:45:47,185 - needed_params: {'cond', 'table'}
2025-02-05 23:45:47,186 - params: {'cond': "(col_0 = 'aufva')", 'table': 'table_0'}
2025-02-05 23:45:47,186 - non intersection phase1 end
2025-02-05 23:45:47,186 - 
2025-02-05 23:45:47,186 - non intersection phase2
2025-02-05 23:45:47,189 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:45:47,192 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:45:47,192 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:45:47,196 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:45:47,198 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:45:47,198 - params: {'cond': "(col_1 = 'lwyan') AND (col_0 = 'ayvix')", 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:45:47,198 - non intersection phase2 end
2025-02-05 23:45:47,198 - 
2025-02-05 23:45:47,199 - 生成死锁事务序列成功如下
2025-02-05 23:45:47,199 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')"), (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (2, "DELETE FROM table_0 WHERE (col_0 = 'aufva')"), (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE'), (2, "SELECT id, col_0 FROM table_0 WHERE (col_1 = 'lwyan') AND (col_0 = 'ayvix') LOCK IN SHARE MODE"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:45:48,748 - 创建事务1连接成功
2025-02-05 23:45:48,750 - 执行事务1语句: BEGIN
2025-02-05 23:45:48,752 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:45:48,752 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:45:48,753 - 执行事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 23:45:48,754 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:45:48,754 - 执行事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:45:48,755 - 执行事务1语句: COMMIT;
2025-02-05 23:45:48,760 - 执行事务1成功
2025-02-05 23:45:51,338 - 恢复初始状态成功
2025-02-05 23:45:52,120 - 创建事务2连接成功
2025-02-05 23:45:52,122 - 执行事务2语句: BEGIN
2025-02-05 23:45:52,123 - 执行事务2语句: DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')
2025-02-05 23:45:52,123 - 执行事务2语句: DELETE FROM table_0 WHERE (col_0 = 'aufva')
2025-02-05 23:45:52,124 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_1 = 'lwyan') AND (col_0 = 'ayvix') LOCK IN SHARE MODE
2025-02-05 23:45:52,127 - 执行事务2语句: COMMIT;
2025-02-05 23:45:52,131 - 执行事务2成功
2025-02-05 23:45:57,118 - 
2025-02-05 23:45:57,118 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-583, started 41608)>, 1738770357.1184974)}
2025-02-05 23:45:57,225 - stmt_idx: 2, status: success, result: None
2025-02-05 23:45:57,225 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:45:57,225 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:45:57,225 - 
2025-02-05 23:45:57,331 - 
2025-02-05 23:45:57,331 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-584, started 42108)>, 1738770357.33125)}
2025-02-05 23:45:57,435 - stmt_idx: 3, status: success, result: None
2025-02-05 23:45:57,436 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:45:57,436 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:45:57,436 - 
2025-02-05 23:45:57,544 - 
2025-02-05 23:45:57,545 - 执行前idx: 5, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')", <Thread(Thread-585, started 13964)>, 1738770357.5449002)}
2025-02-05 23:45:57,651 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')
2025-02-05 23:45:57,651 - 执行后idx: 5, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')", <Thread(Thread-585, started 13964)>, 1738770357.5449002)}
2025-02-05 23:45:57,651 - 
2025-02-05 23:45:57,759 - 
2025-02-05 23:45:57,759 - 执行前idx: 6, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')", <Thread(Thread-585, started 13964)>, 1738770357.5449002), 5: (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-586, started 10124)>, 1738770357.7590282)}
2025-02-05 23:45:57,866 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')
2025-02-05 23:45:57,973 - stmt_idx: 5, status: success, result: None
2025-02-05 23:45:57,974 - 成功执行序列中事务1语句: SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 23:45:57,974 - 执行后idx: 6, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')", <Thread(Thread-585, started 13964)>, 1738770357.5449002)}
2025-02-05 23:45:57,974 - 
2025-02-05 23:45:58,081 - 
2025-02-05 23:45:58,082 - 执行前idx: 7, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')", <Thread(Thread-585, started 13964)>, 1738770357.5449002), 6: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-587, started 25052)>, 1738770358.0816588)}
2025-02-05 23:45:58,188 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')
2025-02-05 23:45:58,295 - stmt_idx: 6, status: success, result: None
2025-02-05 23:45:58,295 - 成功执行序列中事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:45:58,295 - 执行后idx: 7, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')", <Thread(Thread-585, started 13964)>, 1738770357.5449002)}
2025-02-05 23:45:58,295 - 
2025-02-05 23:45:58,402 - 
2025-02-05 23:45:58,403 - 执行前idx: 9, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')", <Thread(Thread-585, started 13964)>, 1738770357.5449002), 8: (1, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE', <Thread(Thread-588, started 32596)>, 1738770358.4027472)}
2025-02-05 23:45:58,405 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:45:58,507 - stmt_idx: 4, status: success, result: None
2025-02-05 23:45:58,507 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')
2025-02-05 23:45:58,507 - 结束了阻塞，blocked_trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')
2025-02-05 23:45:58,615 - stmt_idx: 8, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:45:58,615 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 4 AND 4 FOR UPDATE
2025-02-05 23:45:58,615 - 错误: dictionary changed size during iteration
2025-02-05 23:45:58,615 - 
2025-02-05 23:45:58,615 - 执行前idx: 10, pending_stmts: {7: (2, "DELETE FROM table_0 WHERE (col_0 = 'aufva')", <Thread(Thread-589, stopped 4884)>, 1738770358.5080042), 9: (2, "SELECT id, col_0 FROM table_0 WHERE (col_1 = 'lwyan') AND (col_0 = 'ayvix') LOCK IN SHARE MODE", <Thread(Thread-590, started 4088)>, 1738770358.6156213)}
2025-02-05 23:45:58,721 - stmt_idx: 7, status: success, result: None
2025-02-05 23:45:58,721 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_0 = 'aufva')
2025-02-05 23:45:58,829 - stmt_idx: 9, status: success, result: None
2025-02-05 23:45:58,830 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE (col_1 = 'lwyan') AND (col_0 = 'ayvix') LOCK IN SHARE MODE
2025-02-05 23:45:58,830 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:45:58,830 - 
2025-02-05 23:45:58,938 - 执行序列成功
2025-02-05 23:45:59,707 - is_atomic: True
2025-02-05 23:45:59,707 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:45:59,707 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (1, 'SELECT col_0 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (2, "DELETE FROM table_0 WHERE (col_1 = 'bkhda') AND (col_0 = 'yfder')"), (1, 'ROLLBACK'), (2, "DELETE FROM table_0 WHERE (col_0 = 'aufva')"), (2, "SELECT id, col_0 FROM table_0 WHERE (col_1 = 'lwyan') AND (col_0 = 'ayvix') LOCK IN SHARE MODE"), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT')]
2025-02-05 23:45:59,707 - snapshots: {'before': {'table_0': [(1, 'siody', 'qmfnd'), (2, 'tatax', 'uyhgh'), (3, 'fdgwx', 'uurex'), (4, 'yfder', 'bkhda'), (5, 'mwoix', 'amsyw'), (6, 'tsoha', 'vshwr'), (7, 'aufva', 'jlmfv'), (8, 'ayvix', 'lwyan'), (9, 'zayfl', 'uvwhq'), (10, 'bbecu', 'vgkiq'), (11, 'ptkti', 'gkjqu'), (12, 'trhwf', 'hmepe'), (13, 'fbxur', 'sejym'), (14, 'lmdtj', 'ovbvp'), (15, 'wriec', 'vjdab')]}, 'trx1': {'table_0': [(1, 'siody', 'qmfnd'), (2, 'tatax', 'uyhgh'), (3, 'fdgwx', 'uurex'), (4, 'yfder', 'bkhda'), (5, 'mwoix', 'amsyw'), (6, 'tsoha', 'vshwr'), (7, 'aufva', 'jlmfv'), (8, 'ayvix', 'lwyan'), (9, 'zayfl', 'uvwhq'), (10, 'bbecu', 'vgkiq'), (11, 'ptkti', 'gkjqu'), (12, 'trhwf', 'hmepe'), (13, 'fbxur', 'sejym'), (14, 'lmdtj', 'ovbvp'), (15, 'wriec', 'vjdab')]}, 'trx2': {'table_0': [(1, 'siody', 'qmfnd'), (2, 'tatax', 'uyhgh'), (3, 'fdgwx', 'uurex'), (5, 'mwoix', 'amsyw'), (6, 'tsoha', 'vshwr'), (8, 'ayvix', 'lwyan'), (9, 'zayfl', 'uvwhq'), (10, 'bbecu', 'vgkiq'), (11, 'ptkti', 'gkjqu'), (12, 'trhwf', 'hmepe'), (13, 'fbxur', 'sejym'), (14, 'lmdtj', 'ovbvp'), (15, 'wriec', 'vjdab')]}, 'serial': {'table_0': [(1, 'siody', 'qmfnd'), (2, 'tatax', 'uyhgh'), (3, 'fdgwx', 'uurex'), (5, 'mwoix', 'amsyw'), (6, 'tsoha', 'vshwr'), (8, 'ayvix', 'lwyan'), (9, 'zayfl', 'uvwhq'), (10, 'bbecu', 'vgkiq'), (11, 'ptkti', 'gkjqu'), (12, 'trhwf', 'hmepe'), (13, 'fbxur', 'sejym'), (14, 'lmdtj', 'ovbvp'), (15, 'wriec', 'vjdab')]}}
2025-02-05 23:45:59,707 - 
2025-02-05 23:45:59,718 - iter: 82
2025-02-05 23:46:01,205 - table table_0 has 14 rows
2025-02-05 23:46:01,206 - res_dict: {'trx1_lock_row_ids': [5], 'trx2_lock_row_ids': [8, 9], 'intersection_row_ids': []}
2025-02-05 23:46:01,206 - lock_same_resource: False
2025-02-05 23:46:01,206 - 
2025-02-05 23:46:01,206 - non intersection phase1
2025-02-05 23:46:01,206 - 事务1在第一阶段自己加的锁: S
2025-02-05 23:46:01,206 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:46:01,206 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:46:01,206 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 23:46:01,210 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:46:01,212 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:01,212 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:46:01,214 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=8, is_continuous=True, range_end_idx=9
2025-02-05 23:46:01,216 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:01,216 - params: {'v1': '8', 'v2': '9', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:46:01,216 - non intersection phase1 end
2025-02-05 23:46:01,216 - 
2025-02-05 23:46:01,216 - non intersection phase2
2025-02-05 23:46:01,222 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=9, is_continuous=True, range_end_idx=9
2025-02-05 23:46:01,224 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:01,224 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:46:01,229 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:46:01,230 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:46:01,230 - params: {'set_expr': "col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71", 'v1': '5', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:46:01,231 - non intersection phase2 end
2025-02-05 23:46:01,231 - 
2025-02-05 23:46:01,231 - 生成死锁事务序列成功如下
2025-02-05 23:46:01,231 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 8 AND 9 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71 WHERE id BETWEEN 5 AND 5"), (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:46:02,778 - 创建事务1连接成功
2025-02-05 23:46:02,780 - 执行事务1语句: BEGIN
2025-02-05 23:46:02,781 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:46:02,782 - 执行事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:46:02,782 - 执行事务1语句: COMMIT;
2025-02-05 23:46:02,787 - 执行事务1成功
2025-02-05 23:46:05,350 - 恢复初始状态成功
2025-02-05 23:46:06,123 - 创建事务2连接成功
2025-02-05 23:46:06,125 - 执行事务2语句: BEGIN
2025-02-05 23:46:06,126 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 8 AND 9 FOR UPDATE
2025-02-05 23:46:06,126 - 执行事务2语句: UPDATE table_0 SET col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71 WHERE id BETWEEN 5 AND 5
2025-02-05 23:46:06,128 - 执行事务2语句: COMMIT;
2025-02-05 23:46:06,132 - 执行事务2成功
2025-02-05 23:46:11,014 - 
2025-02-05 23:46:11,014 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-591, started 42788)>, 1738770371.0148926)}
2025-02-05 23:46:11,116 - stmt_idx: 2, status: success, result: None
2025-02-05 23:46:11,116 - 成功执行序列中事务1语句: SELECT id, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:46:11,116 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:46:11,116 - 
2025-02-05 23:46:11,227 - 
2025-02-05 23:46:11,227 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 8 AND 9 FOR UPDATE', <Thread(Thread-592, started 41804)>, 1738770371.2272003)}
2025-02-05 23:46:11,330 - stmt_idx: 3, status: success, result: None
2025-02-05 23:46:11,330 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 8 AND 9 FOR UPDATE
2025-02-05 23:46:11,330 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:46:11,330 - 
2025-02-05 23:46:11,440 - 
2025-02-05 23:46:11,441 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71 WHERE id BETWEEN 5 AND 5", <Thread(Thread-593, started 7160)>, 1738770371.440218)}
2025-02-05 23:46:11,545 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71 WHERE id BETWEEN 5 AND 5
2025-02-05 23:46:11,545 - 执行后idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71 WHERE id BETWEEN 5 AND 5", <Thread(Thread-593, started 7160)>, 1738770371.440218)}
2025-02-05 23:46:11,545 - 
2025-02-05 23:46:11,649 - 
2025-02-05 23:46:11,650 - 执行前idx: 6, pending_stmts: {4: (2, "UPDATE table_0 SET col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71 WHERE id BETWEEN 5 AND 5", <Thread(Thread-593, started 7160)>, 1738770371.440218), 5: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-594, started 29324)>, 1738770371.649084)}
2025-02-05 23:46:11,652 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71 WHERE id BETWEEN 5 AND 5
2025-02-05 23:46:11,757 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:46:11,757 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: UPDATE table_0 SET col_0 = 5.92, col_3 = 75.68, col_2 = 'bLqWX', col_1 = 9.71 WHERE id BETWEEN 5 AND 5
2025-02-05 23:46:11,757 - 错误: dictionary changed size during iteration
2025-02-05 23:46:11,760 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-594, stopped 29324)>, 1738770371.649084)}
2025-02-05 23:46:11,760 - 
2025-02-05 23:46:11,760 - 执行前idx: 8, pending_stmts: {5: (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-594, stopped 29324)>, 1738770371.649084)}
2025-02-05 23:46:11,864 - stmt_idx: 5, status: success, result: None
2025-02-05 23:46:11,864 - 成功执行序列中事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:46:11,864 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:46:11,864 - 
2025-02-05 23:46:11,972 - 执行序列成功
2025-02-05 23:46:12,744 - is_atomic: True
2025-02-05 23:46:12,744 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:46:12,744 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_2 FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 8 AND 9 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'SELECT id, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE')]
2025-02-05 23:46:12,744 - snapshots: {'before': {'table_0': [(1, 7.62, 48.8, 'prrar', 90.03), (2, 2.36, 32.86, 'ylwvo', 30.9), (3, 36.6, 51.1, 'kyxjz', 85.03), (4, 7.47, 37.63, 'uummn', 91.79), (5, 8.76, 93.94, 'hhbpw', 85.92), (6, 53.28, 5.61, 'fzizv', 80.55), (7, 81.28, 47.36, 'cjzuz', 13.74), (8, 63.63, 63.76, 'nqohm', 57.09), (9, 75.49, 72.12, 'ewgnn', 77.69), (10, 69.84, 69.61, 'pnvos', 16.39), (11, 16.86, 78.5, 'wugwn', 81.1), (12, 78.66, 80.5, 'gtorv', 95.09), (13, 59.49, 62.44, 'dvnvu', 78.54), (14, 89.77, 18.51, 'yopfn', 96.04)]}, 'trx1': {'table_0': [(1, 7.62, 48.8, 'prrar', 90.03), (2, 2.36, 32.86, 'ylwvo', 30.9), (3, 36.6, 51.1, 'kyxjz', 85.03), (4, 7.47, 37.63, 'uummn', 91.79), (5, 8.76, 93.94, 'hhbpw', 85.92), (6, 53.28, 5.61, 'fzizv', 80.55), (7, 81.28, 47.36, 'cjzuz', 13.74), (8, 63.63, 63.76, 'nqohm', 57.09), (9, 75.49, 72.12, 'ewgnn', 77.69), (10, 69.84, 69.61, 'pnvos', 16.39), (11, 16.86, 78.5, 'wugwn', 81.1), (12, 78.66, 80.5, 'gtorv', 95.09), (13, 59.49, 62.44, 'dvnvu', 78.54), (14, 89.77, 18.51, 'yopfn', 96.04)]}, 'trx2': {'table_0': [(1, 7.62, 48.8, 'prrar', 90.03), (2, 2.36, 32.86, 'ylwvo', 30.9), (3, 36.6, 51.1, 'kyxjz', 85.03), (4, 7.47, 37.63, 'uummn', 91.79), (5, 5.92, 9.71, 'bLqWX', 75.68), (6, 53.28, 5.61, 'fzizv', 80.55), (7, 81.28, 47.36, 'cjzuz', 13.74), (8, 63.63, 63.76, 'nqohm', 57.09), (9, 75.49, 72.12, 'ewgnn', 77.69), (10, 69.84, 69.61, 'pnvos', 16.39), (11, 16.86, 78.5, 'wugwn', 81.1), (12, 78.66, 80.5, 'gtorv', 95.09), (13, 59.49, 62.44, 'dvnvu', 78.54), (14, 89.77, 18.51, 'yopfn', 96.04)]}, 'serial': {'table_0': [(1, 7.62, 48.8, 'prrar', 90.03), (2, 2.36, 32.86, 'ylwvo', 30.9), (3, 36.6, 51.1, 'kyxjz', 85.03), (4, 7.47, 37.63, 'uummn', 91.79), (5, 8.76, 93.94, 'hhbpw', 85.92), (6, 53.28, 5.61, 'fzizv', 80.55), (7, 81.28, 47.36, 'cjzuz', 13.74), (8, 63.63, 63.76, 'nqohm', 57.09), (9, 75.49, 72.12, 'ewgnn', 77.69), (10, 69.84, 69.61, 'pnvos', 16.39), (11, 16.86, 78.5, 'wugwn', 81.1), (12, 78.66, 80.5, 'gtorv', 95.09), (13, 59.49, 62.44, 'dvnvu', 78.54), (14, 89.77, 18.51, 'yopfn', 96.04)]}}
2025-02-05 23:46:12,744 - 
2025-02-05 23:46:12,756 - iter: 83
2025-02-05 23:46:14,254 - table table_0 has 14 rows
2025-02-05 23:46:14,254 - res_dict: {'trx1_lock_row_ids': [4, 5, 6, 7], 'trx2_lock_row_ids': [8, 9, 10], 'intersection_row_ids': []}
2025-02-05 23:46:14,254 - lock_same_resource: False
2025-02-05 23:46:14,254 - 
2025-02-05 23:46:14,254 - non intersection phase1
2025-02-05 23:46:14,255 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:46:14,255 - 事务2在第一阶段自己加的锁: S
2025-02-05 23:46:14,255 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:46:14,255 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:46:14,258 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=7
2025-02-05 23:46:14,259 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:14,259 - params: {'v1': '4', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:46:14,261 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=8, is_continuous=True, range_end_idx=10
2025-02-05 23:46:14,263 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:14,263 - params: {'v1': '8', 'v2': '10', 'select_cols': 'id, col_3', 'table': 'table_0'}
2025-02-05 23:46:14,263 - non intersection phase1 end
2025-02-05 23:46:14,263 - 
2025-02-05 23:46:14,264 - non intersection phase2
2025-02-05 23:46:14,267 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=10, is_continuous=True, range_end_idx=10
2025-02-05 23:46:14,269 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:14,269 - params: {'v1': '10', 'v2': '10', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:46:14,272 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:46:14,273 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:14,274 - params: {'v1': '4', 'v2': '5', 'select_cols': 'col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:46:14,274 - non intersection phase2 end
2025-02-05 23:46:14,274 - 
2025-02-05 23:46:14,274 - 生成死锁事务序列成功如下
2025-02-05 23:46:14,274 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE'), (2, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:46:15,797 - 创建事务1连接成功
2025-02-05 23:46:15,799 - 执行事务1语句: BEGIN
2025-02-05 23:46:15,800 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE
2025-02-05 23:46:15,800 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 FOR UPDATE
2025-02-05 23:46:15,801 - 执行事务1语句: COMMIT;
2025-02-05 23:46:15,805 - 执行事务1成功
2025-02-05 23:46:18,392 - 恢复初始状态成功
2025-02-05 23:46:19,152 - 创建事务2连接成功
2025-02-05 23:46:19,153 - 执行事务2语句: BEGIN
2025-02-05 23:46:19,155 - 执行事务2语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE
2025-02-05 23:46:19,155 - 执行事务2语句: SELECT col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:46:19,156 - 执行事务2语句: COMMIT;
2025-02-05 23:46:19,160 - 执行事务2成功
2025-02-05 23:46:24,063 - 
2025-02-05 23:46:24,063 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE', <Thread(Thread-595, started 40240)>, 1738770384.0631626)}
2025-02-05 23:46:24,173 - stmt_idx: 2, status: success, result: None
2025-02-05 23:46:24,173 - 成功执行序列中事务2语句: SELECT id, col_3 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE
2025-02-05 23:46:24,174 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:46:24,174 - 
2025-02-05 23:46:24,280 - 
2025-02-05 23:46:24,281 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE', <Thread(Thread-596, started 35708)>, 1738770384.280928)}
2025-02-05 23:46:24,382 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE
2025-02-05 23:46:24,382 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE', <Thread(Thread-596, started 35708)>, 1738770384.280928)}
2025-02-05 23:46:24,382 - 
2025-02-05 23:46:24,487 - 
2025-02-05 23:46:24,488 - 执行前idx: 6, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE', <Thread(Thread-596, started 35708)>, 1738770384.280928), 5: (2, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-597, started 44940)>, 1738770384.4877913)}
2025-02-05 23:46:24,491 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE
2025-02-05 23:46:24,592 - stmt_idx: 3, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:46:24,593 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 7 FOR UPDATE
2025-02-05 23:46:24,593 - 错误: dictionary changed size during iteration
2025-02-05 23:46:24,595 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-597, stopped 44940)>, 1738770384.4877913)}
2025-02-05 23:46:24,595 - 
2025-02-05 23:46:24,595 - 执行前idx: 8, pending_stmts: {5: (2, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-597, stopped 44940)>, 1738770384.4877913)}
2025-02-05 23:46:24,707 - stmt_idx: 5, status: success, result: None
2025-02-05 23:46:24,707 - 成功执行序列中事务2语句: SELECT col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:46:24,707 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:46:24,707 - 
2025-02-05 23:46:24,814 - 执行序列成功
2025-02-05 23:46:25,578 - is_atomic: True
2025-02-05 23:46:25,578 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:46:25,578 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_3 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE'), (1, 'ROLLBACK'), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'SELECT col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE')]
2025-02-05 23:46:25,578 - snapshots: {'before': {'table_0': [(1, 61.55, 'bptqv', 66.05), (2, 43.16, 'tpqer', 52.4), (3, 46.2, 'bhnod', 25.67), (4, 64.92, 'owxds', 87.53), (5, 96.54, 'wefoq', 66.26), (6, 17.44, 'hsylu', 27.22), (7, 37.42, 'nfseb', 97.94), (8, 46.93, 'owafc', 28.42), (9, 70.17, 'ztpio', 16.56), (10, 69.05, 'fcqac', 29.25), (11, 77.81, 'izkvw', 89.04), (12, 55.59, 'bhzpd', 30.77), (13, 76.11, 'jozbw', 17.43), (14, 97.49, 'npgtv', 69.74)]}, 'trx1': {'table_0': [(1, 61.55, 'bptqv', 66.05), (2, 43.16, 'tpqer', 52.4), (3, 46.2, 'bhnod', 25.67), (4, 64.92, 'owxds', 87.53), (5, 96.54, 'wefoq', 66.26), (6, 17.44, 'hsylu', 27.22), (7, 37.42, 'nfseb', 97.94), (8, 46.93, 'owafc', 28.42), (9, 70.17, 'ztpio', 16.56), (10, 69.05, 'fcqac', 29.25), (11, 77.81, 'izkvw', 89.04), (12, 55.59, 'bhzpd', 30.77), (13, 76.11, 'jozbw', 17.43), (14, 97.49, 'npgtv', 69.74)]}, 'trx2': {'table_0': [(1, 61.55, 'bptqv', 66.05), (2, 43.16, 'tpqer', 52.4), (3, 46.2, 'bhnod', 25.67), (4, 64.92, 'owxds', 87.53), (5, 96.54, 'wefoq', 66.26), (6, 17.44, 'hsylu', 27.22), (7, 37.42, 'nfseb', 97.94), (8, 46.93, 'owafc', 28.42), (9, 70.17, 'ztpio', 16.56), (10, 69.05, 'fcqac', 29.25), (11, 77.81, 'izkvw', 89.04), (12, 55.59, 'bhzpd', 30.77), (13, 76.11, 'jozbw', 17.43), (14, 97.49, 'npgtv', 69.74)]}, 'serial': {'table_0': [(1, 61.55, 'bptqv', 66.05), (2, 43.16, 'tpqer', 52.4), (3, 46.2, 'bhnod', 25.67), (4, 64.92, 'owxds', 87.53), (5, 96.54, 'wefoq', 66.26), (6, 17.44, 'hsylu', 27.22), (7, 37.42, 'nfseb', 97.94), (8, 46.93, 'owafc', 28.42), (9, 70.17, 'ztpio', 16.56), (10, 69.05, 'fcqac', 29.25), (11, 77.81, 'izkvw', 89.04), (12, 55.59, 'bhzpd', 30.77), (13, 76.11, 'jozbw', 17.43), (14, 97.49, 'npgtv', 69.74)]}}
2025-02-05 23:46:25,578 - 
2025-02-05 23:46:25,591 - iter: 84
2025-02-05 23:46:27,093 - table table_0 has 8 rows
2025-02-05 23:46:27,094 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 23:46:27,094 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 23:46:27,094 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7, 8]
2025-02-05 23:46:27,094 - trx1_exclusive_ids: []
2025-02-05 23:46:27,094 - trx2_exclusive_ids: []
2025-02-05 23:46:27,094 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7, 8]}
2025-02-05 23:46:27,094 - lock_same_resource: True
2025-02-05 23:46:27,094 - 
2025-02-05 23:46:27,094 - intersection phase1
2025-02-05 23:46:27,098 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,099 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:46:27,100 - params: {'vals': "NULL, 'ebzSO', 'YxGNM'", 'insert_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,103 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,104 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:46:27,104 - params: {'vals': "NULL, 'cXgzG', 'fWIkS'", 'insert_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,110 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,112 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:46:27,112 - params: {'vals': "NULL, 'QaiBD', 'qSyTG'", 'insert_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,116 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,117 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:46:27,117 - params: {'set_expr': "col_832 = 'wepha', col_1 = 'qaZTQ'", 'v1': '4', 'v2': '4', 'table': 'table_0'}
2025-02-05 23:46:27,120 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,121 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:46:27,122 - params: {'vals': "NULL, 'nflHK', 'xIMin'", 'insert_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,125 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,126 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:46:27,126 - params: {'vals': "NULL, 'mlzWM', 'QsEUv'", 'insert_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,129 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,130 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:46:27,130 - params: {'vals': "NULL, 'WXytW', 'XFTEa'", 'insert_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,134 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,136 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:46:27,136 - params: {'vals': "NULL, 'pnbdx', 'VCaoI'", 'insert_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,138 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,139 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:27,139 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:46:27,143 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,144 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:46:27,144 - params: {'cond': '(id = 2)', 'select_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,148 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,149 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:27,149 - params: {'v1': '3', 'v2': '3', 'select_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,153 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,155 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:27,155 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,158 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,159 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:46:27,160 - params: {'cond': "(col_832 IS NULL) AND (col_1 = 'bjoni')", 'select_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,163 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,164 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:46:27,164 - params: {'cond': '(id = 6)', 'select_cols': 'id, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,167 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,168 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:27,168 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_1, col_832', 'table': 'table_0'}
2025-02-05 23:46:27,171 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,172 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:46:27,172 - params: {'cond': "(col_1 = 'etqfl')", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:46:27,173 - intersection phase1 end
2025-02-05 23:46:27,173 - 
2025-02-05 23:46:27,173 - intersection phase2
2025-02-05 23:46:27,173 - 事务1在第二阶段自己加的锁: II
2025-02-05 23:46:27,173 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:46:27,173 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:46:27,173 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:46:27,173 - intersection phase2 end
2025-02-05 23:46:27,174 - 
2025-02-05 23:46:27,174 - intersection phase3
2025-02-05 23:46:27,177 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,178 - needed_params: {'cond', 'table'}
2025-02-05 23:46:27,178 - params: {'cond': '(id = 3)', 'table': 'table_0'}
2025-02-05 23:46:27,182 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:46:27,184 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:46:27,184 - params: {'cond': "(col_832 IS NULL) AND (col_1 = 'qzeee')", 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:46:27,184 - intersection phase3 end
2025-02-05 23:46:27,184 - 
2025-02-05 23:46:27,184 - 生成死锁事务序列成功如下
2025-02-05 23:46:27,184 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'ebzSO', 'YxGNM')"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'cXgzG', 'fWIkS')"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'QaiBD', 'qSyTG')"), (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_832 = 'wepha', col_1 = 'qaZTQ' WHERE id BETWEEN 4 AND 4"), (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'nflHK', 'xIMin')"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'mlzWM', 'QsEUv')"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'WXytW', 'XFTEa')"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'pnbdx', 'VCaoI')"), (2, "SELECT id, col_1, col_832 FROM table_0 WHERE (col_832 IS NULL) AND (col_1 = 'bjoni') LOCK IN SHARE MODE"), (2, 'SELECT id, col_832 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (2, "SELECT * FROM table_0 WHERE (col_1 = 'etqfl') LOCK IN SHARE MODE"), (1, 'DELETE FROM table_0 WHERE (id = 3)'), (2, "SELECT id, col_1 FROM table_0 WHERE (col_832 IS NULL) AND (col_1 = 'qzeee') FOR UPDATE"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:46:28,705 - 创建事务1连接成功
2025-02-05 23:46:28,706 - 执行事务1语句: BEGIN
2025-02-05 23:46:28,716 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'ebzSO', 'YxGNM')
2025-02-05 23:46:28,716 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'cXgzG', 'fWIkS')
2025-02-05 23:46:28,717 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'QaiBD', 'qSyTG')
2025-02-05 23:46:28,718 - 执行事务1语句: UPDATE table_0 SET col_832 = 'wepha', col_1 = 'qaZTQ' WHERE id BETWEEN 4 AND 4
2025-02-05 23:46:28,719 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'nflHK', 'xIMin')
2025-02-05 23:46:28,720 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'mlzWM', 'QsEUv')
2025-02-05 23:46:28,720 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'WXytW', 'XFTEa')
2025-02-05 23:46:28,721 - 执行事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'pnbdx', 'VCaoI')
2025-02-05 23:46:28,721 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 3)
2025-02-05 23:46:28,723 - 执行事务1语句: COMMIT;
2025-02-05 23:46:28,728 - 执行事务1成功
2025-02-05 23:46:31,328 - 恢复初始状态成功
2025-02-05 23:46:32,094 - 创建事务2连接成功
2025-02-05 23:46:32,096 - 执行事务2语句: BEGIN
2025-02-05 23:46:32,097 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:46:32,097 - 执行事务2语句: SELECT id, col_1, col_832 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:46:32,099 - 执行事务2语句: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 23:46:32,099 - 执行事务2语句: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:46:32,100 - 执行事务2语句: SELECT id, col_1, col_832 FROM table_0 WHERE (col_832 IS NULL) AND (col_1 = 'bjoni') LOCK IN SHARE MODE
2025-02-05 23:46:32,101 - 执行事务2语句: SELECT id, col_832 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 23:46:32,101 - 执行事务2语句: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:46:32,102 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_1 = 'etqfl') LOCK IN SHARE MODE
2025-02-05 23:46:32,102 - 执行事务2语句: SELECT id, col_1 FROM table_0 WHERE (col_832 IS NULL) AND (col_1 = 'qzeee') FOR UPDATE
2025-02-05 23:46:32,103 - 执行事务2语句: COMMIT;
2025-02-05 23:46:32,107 - 执行事务2成功
2025-02-05 23:46:37,097 - 
2025-02-05 23:46:37,097 - 执行前idx: 3, pending_stmts: {2: (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'ebzSO', 'YxGNM')", <Thread(Thread-598, started 40608)>, 1738770397.097124)}
2025-02-05 23:46:37,199 - stmt_idx: 2, status: success, result: None
2025-02-05 23:46:37,199 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'ebzSO', 'YxGNM')
2025-02-05 23:46:37,199 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:46:37,199 - 
2025-02-05 23:46:37,308 - 
2025-02-05 23:46:37,309 - 执行前idx: 4, pending_stmts: {3: (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'cXgzG', 'fWIkS')", <Thread(Thread-599, started 39348)>, 1738770397.3088799)}
2025-02-05 23:46:37,413 - stmt_idx: 3, status: success, result: None
2025-02-05 23:46:37,413 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'cXgzG', 'fWIkS')
2025-02-05 23:46:37,413 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:46:37,413 - 
2025-02-05 23:46:37,522 - 
2025-02-05 23:46:37,523 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-600, started 33168)>, 1738770397.5225363)}
2025-02-05 23:46:37,627 - stmt_idx: 4, status: success, result: None
2025-02-05 23:46:37,627 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:46:37,627 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:46:37,627 - 
2025-02-05 23:46:37,735 - 
2025-02-05 23:46:37,735 - 执行前idx: 6, pending_stmts: {5: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-601, started 36300)>, 1738770397.7358377)}
2025-02-05 23:46:37,838 - stmt_idx: 5, status: success, result: None
2025-02-05 23:46:37,839 - 成功执行序列中事务2语句: SELECT id, col_1, col_832 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:46:37,839 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:46:37,839 - 
2025-02-05 23:46:37,944 - 
2025-02-05 23:46:37,945 - 执行前idx: 7, pending_stmts: {6: (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'QaiBD', 'qSyTG')", <Thread(Thread-602, started 40668)>, 1738770397.9449418)}
2025-02-05 23:46:38,050 - stmt_idx: 6, status: success, result: None
2025-02-05 23:46:38,050 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'QaiBD', 'qSyTG')
2025-02-05 23:46:38,050 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:46:38,050 - 
2025-02-05 23:46:38,153 - 
2025-02-05 23:46:38,154 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE', <Thread(Thread-603, started 33768)>, 1738770398.1534462)}
2025-02-05 23:46:38,261 - stmt_idx: 7, status: success, result: None
2025-02-05 23:46:38,261 - 成功执行序列中事务2语句: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE
2025-02-05 23:46:38,261 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:46:38,261 - 
2025-02-05 23:46:38,365 - 
2025-02-05 23:46:38,365 - 执行前idx: 9, pending_stmts: {8: (1, "UPDATE table_0 SET col_832 = 'wepha', col_1 = 'qaZTQ' WHERE id BETWEEN 4 AND 4", <Thread(Thread-604, started 15068)>, 1738770398.3652291)}
2025-02-05 23:46:38,470 - stmt_idx: 8, status: success, result: None
2025-02-05 23:46:38,471 - 成功执行序列中事务1语句: UPDATE table_0 SET col_832 = 'wepha', col_1 = 'qaZTQ' WHERE id BETWEEN 4 AND 4
2025-02-05 23:46:38,471 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:46:38,471 - 
2025-02-05 23:46:38,578 - 
2025-02-05 23:46:38,578 - 执行前idx: 10, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258)}
2025-02-05 23:46:38,684 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:46:38,684 - 执行后idx: 10, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258)}
2025-02-05 23:46:38,684 - 
2025-02-05 23:46:38,793 - 
2025-02-05 23:46:38,793 - 执行前idx: 11, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258), 10: (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'nflHK', 'xIMin')", <Thread(Thread-606, started 42208)>, 1738770398.7933724)}
2025-02-05 23:46:38,899 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:46:39,006 - stmt_idx: 10, status: success, result: None
2025-02-05 23:46:39,006 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'nflHK', 'xIMin')
2025-02-05 23:46:39,006 - 执行后idx: 11, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258)}
2025-02-05 23:46:39,006 - 
2025-02-05 23:46:39,111 - 
2025-02-05 23:46:39,112 - 执行前idx: 12, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258), 11: (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'mlzWM', 'QsEUv')", <Thread(Thread-607, started 31184)>, 1738770399.1116595)}
2025-02-05 23:46:39,219 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:46:39,326 - stmt_idx: 11, status: success, result: None
2025-02-05 23:46:39,326 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'mlzWM', 'QsEUv')
2025-02-05 23:46:39,326 - 执行后idx: 12, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258)}
2025-02-05 23:46:39,326 - 
2025-02-05 23:46:39,430 - 
2025-02-05 23:46:39,430 - 执行前idx: 13, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258), 12: (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'WXytW', 'XFTEa')", <Thread(Thread-608, started 44768)>, 1738770399.4300485)}
2025-02-05 23:46:39,533 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:46:39,642 - stmt_idx: 12, status: success, result: None
2025-02-05 23:46:39,642 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'WXytW', 'XFTEa')
2025-02-05 23:46:39,642 - 执行后idx: 13, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258)}
2025-02-05 23:46:39,643 - 
2025-02-05 23:46:39,747 - 
2025-02-05 23:46:39,747 - 执行前idx: 14, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258), 13: (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'pnbdx', 'VCaoI')", <Thread(Thread-609, started 44708)>, 1738770399.7471228)}
2025-02-05 23:46:39,850 - wait for lock, trx_id: 2, stmt: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:46:39,958 - stmt_idx: 13, status: success, result: None
2025-02-05 23:46:39,958 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'pnbdx', 'VCaoI')
2025-02-05 23:46:39,958 - 执行后idx: 14, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258)}
2025-02-05 23:46:39,958 - 
2025-02-05 23:46:40,064 - 
2025-02-05 23:46:40,065 - 执行前idx: 19, pending_stmts: {9: (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-605, started 37700)>, 1738770398.5780258), 18: (1, 'DELETE FROM table_0 WHERE (id = 3)', <Thread(Thread-610, started 38116)>, 1738770400.0648801)}
2025-02-05 23:46:40,068 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:46:40,172 - stmt_idx: 9, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:46:40,172 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:46:40,172 - 错误: dictionary changed size during iteration
2025-02-05 23:46:40,176 - 序列遍历完成，开始查看剩余阻塞的语句：{18: (1, 'DELETE FROM table_0 WHERE (id = 3)', <Thread(Thread-610, stopped 38116)>, 1738770400.0648801)}
2025-02-05 23:46:40,176 - 
2025-02-05 23:46:40,176 - 执行前idx: 22, pending_stmts: {18: (1, 'DELETE FROM table_0 WHERE (id = 3)', <Thread(Thread-610, stopped 38116)>, 1738770400.0648801)}
2025-02-05 23:46:40,287 - stmt_idx: 18, status: success, result: None
2025-02-05 23:46:40,287 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 3)
2025-02-05 23:46:40,287 - 执行后idx: 22, pending_stmts: {}
2025-02-05 23:46:40,287 - 
2025-02-05 23:46:40,396 - 执行序列成功
2025-02-05 23:46:41,174 - is_atomic: True
2025-02-05 23:46:41,174 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:46:41,174 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'ebzSO', 'YxGNM')"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'cXgzG', 'fWIkS')"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'QaiBD', 'qSyTG')"), (2, 'SELECT id, col_1, col_832 FROM table_0 WHERE id BETWEEN 3 AND 3 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_832 = 'wepha', col_1 = 'qaZTQ' WHERE id BETWEEN 4 AND 4"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'nflHK', 'xIMin')"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'mlzWM', 'QsEUv')"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'WXytW', 'XFTEa')"), (1, "INSERT INTO table_0 (id, col_1, col_832) VALUES (NULL, 'pnbdx', 'VCaoI')"), (2, 'ROLLBACK'), (2, "--Skipped, trx_id: 2, stmt: SELECT id, col_1 FROM table_0 WHERE (col_832 IS NULL) AND (col_1 = 'qzeee') FOR UPDATE"), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'DELETE FROM table_0 WHERE (id = 3)')]
2025-02-05 23:46:41,174 - snapshots: {'before': {'table_0': [(1, 'gmrsd', None), (2, 'iuopp', None), (3, 'rzpmm', None), (4, 'pkhum', None), (5, 'bjoni', None), (6, 'bjagp', None), (7, 'qzeee', None), (8, 'etqfl', None)]}, 'trx1': {'table_0': [(1, 'gmrsd', None), (2, 'iuopp', None), (4, 'qaZTQ', 'wepha'), (5, 'bjoni', None), (6, 'bjagp', None), (7, 'qzeee', None), (8, 'etqfl', None), (9, 'ebzSO', 'YxGNM'), (10, 'cXgzG', 'fWIkS'), (11, 'QaiBD', 'qSyTG'), (12, 'nflHK', 'xIMin'), (13, 'mlzWM', 'QsEUv'), (14, 'WXytW', 'XFTEa'), (15, 'pnbdx', 'VCaoI')]}, 'trx2': {'table_0': [(1, 'gmrsd', None), (2, 'iuopp', None), (3, 'rzpmm', None), (4, 'pkhum', None), (5, 'bjoni', None), (6, 'bjagp', None), (7, 'qzeee', None), (8, 'etqfl', None)]}, 'serial': {'table_0': [(1, 'gmrsd', None), (2, 'iuopp', None), (4, 'qaZTQ', 'wepha'), (5, 'bjoni', None), (6, 'bjagp', None), (7, 'qzeee', None), (8, 'etqfl', None), (16, 'ebzSO', 'YxGNM'), (17, 'cXgzG', 'fWIkS'), (18, 'QaiBD', 'qSyTG'), (19, 'nflHK', 'xIMin'), (20, 'mlzWM', 'QsEUv'), (21, 'WXytW', 'XFTEa'), (22, 'pnbdx', 'VCaoI')]}}
2025-02-05 23:46:41,174 - 
2025-02-05 23:46:41,187 - iter: 85
2025-02-05 23:46:42,673 - table table_0 has 5 rows
2025-02-05 23:46:42,673 - trx1_lock_row_ids: [4, 5]
2025-02-05 23:46:42,674 - trx2_lock_row_ids: [4, 5]
2025-02-05 23:46:42,674 - intersection_row_ids: [4, 5]
2025-02-05 23:46:42,674 - trx1_exclusive_ids: []
2025-02-05 23:46:42,674 - trx2_exclusive_ids: []
2025-02-05 23:46:42,674 - res_dict: {'trx1_lock_row_ids': [4, 5], 'trx2_lock_row_ids': [4, 5], 'intersection_row_ids': [4, 5]}
2025-02-05 23:46:42,674 - lock_same_resource: True
2025-02-05 23:46:42,674 - 
2025-02-05 23:46:42,674 - intersection phase1
2025-02-05 23:46:42,677 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:46:42,679 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:46:42,679 - params: {'set_expr': "col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57", 'v1': '4', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:46:42,682 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:46:42,684 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:46:42,684 - params: {'set_expr': "col_1 = 'SQSKl', col_4 = 'nqoCL'", 'cond': '(id = 4)', 'table': 'table_0'}
2025-02-05 23:46:42,686 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:46:42,688 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:46:42,688 - params: {'vals': "NULL, 76, 'Rqkpk', 83.19, 'cSylj', 'WKxSP'", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:46:42,688 - intersection phase1 end
2025-02-05 23:46:42,688 - 
2025-02-05 23:46:42,689 - intersection phase2
2025-02-05 23:46:42,689 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:46:42,689 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:46:42,689 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:46:42,689 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:46:42,689 - intersection phase2 end
2025-02-05 23:46:42,689 - 
2025-02-05 23:46:42,689 - intersection phase3
2025-02-05 23:46:42,693 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:46:42,694 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:46:42,695 - params: {'set_expr': "col_4 = 'tWxpw', col_0 = 25, col_2 = 35.29", 'cond': "(col_3 = 'jyggs') AND (col_4 = 'mrbaq')", 'table': 'table_0'}
2025-02-05 23:46:42,698 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:46:42,700 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:42,700 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:46:42,700 - intersection phase3 end
2025-02-05 23:46:42,700 - 
2025-02-05 23:46:42,700 - 生成死锁事务序列成功如下
2025-02-05 23:46:42,700 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_1 = 'SQSKl', col_4 = 'nqoCL' WHERE (id = 4)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 76, 'Rqkpk', 83.19, 'cSylj', 'WKxSP')"), (1, "UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_4 = 'tWxpw', col_0 = 25, col_2 = 35.29 WHERE (col_3 = 'jyggs') AND (col_4 = 'mrbaq')"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:46:44,249 - 创建事务1连接成功
2025-02-05 23:46:44,251 - 执行事务1语句: BEGIN
2025-02-05 23:46:44,252 - 执行事务1语句: UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5
2025-02-05 23:46:44,252 - 执行事务1语句: UPDATE table_0 SET col_4 = 'tWxpw', col_0 = 25, col_2 = 35.29 WHERE (col_3 = 'jyggs') AND (col_4 = 'mrbaq')
2025-02-05 23:46:44,255 - 执行事务1语句: COMMIT;
2025-02-05 23:46:44,259 - 执行事务1成功
2025-02-05 23:46:46,833 - 恢复初始状态成功
2025-02-05 23:46:47,626 - 创建事务2连接成功
2025-02-05 23:46:47,628 - 执行事务2语句: BEGIN
2025-02-05 23:46:47,629 - 执行事务2语句: UPDATE table_0 SET col_1 = 'SQSKl', col_4 = 'nqoCL' WHERE (id = 4)
2025-02-05 23:46:47,630 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 76, 'Rqkpk', 83.19, 'cSylj', 'WKxSP')
2025-02-05 23:46:47,631 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:46:47,633 - 执行事务2语句: COMMIT;
2025-02-05 23:46:47,638 - 执行事务2成功
2025-02-05 23:46:52,560 - 
2025-02-05 23:46:52,560 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_1 = 'SQSKl', col_4 = 'nqoCL' WHERE (id = 4)", <Thread(Thread-611, started 42760)>, 1738770412.5600424)}
2025-02-05 23:46:52,667 - stmt_idx: 2, status: success, result: None
2025-02-05 23:46:52,667 - 成功执行序列中事务2语句: UPDATE table_0 SET col_1 = 'SQSKl', col_4 = 'nqoCL' WHERE (id = 4)
2025-02-05 23:46:52,667 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:46:52,667 - 
2025-02-05 23:46:52,773 - 
2025-02-05 23:46:52,773 - 执行前idx: 4, pending_stmts: {3: (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 76, 'Rqkpk', 83.19, 'cSylj', 'WKxSP')", <Thread(Thread-612, started 36276)>, 1738770412.7731605)}
2025-02-05 23:46:52,874 - stmt_idx: 3, status: success, result: None
2025-02-05 23:46:52,874 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 76, 'Rqkpk', 83.19, 'cSylj', 'WKxSP')
2025-02-05 23:46:52,874 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:46:52,874 - 
2025-02-05 23:46:52,983 - 
2025-02-05 23:46:52,983 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5", <Thread(Thread-613, started 37288)>, 1738770412.9833775)}
2025-02-05 23:46:53,087 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5
2025-02-05 23:46:53,087 - 执行后idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5", <Thread(Thread-613, started 37288)>, 1738770412.9833775)}
2025-02-05 23:46:53,087 - 
2025-02-05 23:46:53,192 - 
2025-02-05 23:46:53,193 - 执行前idx: 6, pending_stmts: {4: (1, "UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5", <Thread(Thread-613, started 37288)>, 1738770412.9833775), 5: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE', <Thread(Thread-614, started 384)>, 1738770413.192887)}
2025-02-05 23:46:53,302 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5
2025-02-05 23:46:53,412 - stmt_idx: 5, status: success, result: None
2025-02-05 23:46:53,412 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE
2025-02-05 23:46:53,412 - 执行后idx: 6, pending_stmts: {4: (1, "UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5", <Thread(Thread-613, started 37288)>, 1738770412.9833775)}
2025-02-05 23:46:53,412 - 
2025-02-05 23:46:53,526 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5", <Thread(Thread-613, started 37288)>, 1738770412.9833775)}
2025-02-05 23:46:53,526 - 
2025-02-05 23:46:53,526 - 执行前idx: 9, pending_stmts: {4: (1, "UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5", <Thread(Thread-613, stopped 37288)>, 1738770412.9833775)}
2025-02-05 23:46:53,631 - stmt_idx: 4, status: success, result: None
2025-02-05 23:46:53,631 - 成功执行序列中事务1语句: UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5
2025-02-05 23:46:53,631 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5
2025-02-05 23:46:53,633 - 执行后idx: 9, pending_stmts: {6: (1, "UPDATE table_0 SET col_4 = 'tWxpw', col_0 = 25, col_2 = 35.29 WHERE (col_3 = 'jyggs') AND (col_4 = 'mrbaq')", <Thread(Thread-615, started 9776)>, 1738770413.6328685), 7: (1, 'COMMIT', <Thread(Thread-616, started 42412)>, 1738770413.6331036)}
2025-02-05 23:46:53,633 - 
2025-02-05 23:46:53,740 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (1, "UPDATE table_0 SET col_4 = 'tWxpw', col_0 = 25, col_2 = 35.29 WHERE (col_3 = 'jyggs') AND (col_4 = 'mrbaq')", <Thread(Thread-615, stopped 9776)>, 1738770413.6328685), 7: (1, 'COMMIT', <Thread(Thread-616, stopped 42412)>, 1738770413.6331036)}
2025-02-05 23:46:53,740 - 
2025-02-05 23:46:53,740 - 执行前idx: 9, pending_stmts: {6: (1, "UPDATE table_0 SET col_4 = 'tWxpw', col_0 = 25, col_2 = 35.29 WHERE (col_3 = 'jyggs') AND (col_4 = 'mrbaq')", <Thread(Thread-615, stopped 9776)>, 1738770413.6328685), 7: (1, 'COMMIT', <Thread(Thread-616, stopped 42412)>, 1738770413.6331036)}
2025-02-05 23:46:53,846 - stmt_idx: 6, status: success, result: None
2025-02-05 23:46:53,846 - 成功执行序列中事务1语句: UPDATE table_0 SET col_4 = 'tWxpw', col_0 = 25, col_2 = 35.29 WHERE (col_3 = 'jyggs') AND (col_4 = 'mrbaq')
2025-02-05 23:46:53,953 - stmt_idx: 7, status: success, result: None
2025-02-05 23:46:53,953 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:46:53,954 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:46:53,954 - 
2025-02-05 23:46:54,064 - 执行序列成功
2025-02-05 23:46:54,844 - is_atomic: True
2025-02-05 23:46:54,845 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:46:54,845 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_1 = 'SQSKl', col_4 = 'nqoCL' WHERE (id = 4)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 76, 'Rqkpk', 83.19, 'cSylj', 'WKxSP')"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, "UPDATE table_0 SET col_4 = 'LPIGT', col_1 = 'acTxd', col_3 = 'CaHIh', col_0 = 89, col_2 = 49.57 WHERE id BETWEEN 4 AND 5"), (1, "UPDATE table_0 SET col_4 = 'tWxpw', col_0 = 25, col_2 = 35.29 WHERE (col_3 = 'jyggs') AND (col_4 = 'mrbaq')"), (1, 'COMMIT')]
2025-02-05 23:46:54,845 - snapshots: {'before': {'table_0': [(1, 99, 'wofhl', 75.35, 'ymhie', 'hnxzs'), (2, 68, 'ysyij', 84.85, 'ynkcj', 'ylgqp'), (3, 55, 'emkfk', 88.92, 'ufmav', 'lblgf'), (4, 29, 'ufcwk', 23.12, 'fvypb', 'fzkxy'), (5, 38, 'reuxx', 50.54, 'jyggs', 'mrbaq')]}, 'trx1': {'table_0': [(1, 99, 'wofhl', 75.35, 'ymhie', 'hnxzs'), (2, 68, 'ysyij', 84.85, 'ynkcj', 'ylgqp'), (3, 55, 'emkfk', 88.92, 'ufmav', 'lblgf'), (4, 89, 'acTxd', 49.57, 'CaHIh', 'LPIGT'), (5, 89, 'acTxd', 49.57, 'CaHIh', 'LPIGT')]}, 'trx2': {'table_0': [(1, 99, 'wofhl', 75.35, 'ymhie', 'hnxzs'), (2, 68, 'ysyij', 84.85, 'ynkcj', 'ylgqp'), (3, 55, 'emkfk', 88.92, 'ufmav', 'lblgf'), (4, 29, 'SQSKl', 23.12, 'fvypb', 'nqoCL'), (5, 38, 'reuxx', 50.54, 'jyggs', 'mrbaq'), (6, 76, 'Rqkpk', 83.19, 'cSylj', 'WKxSP')]}, 'serial': {'table_0': [(1, 99, 'wofhl', 75.35, 'ymhie', 'hnxzs'), (2, 68, 'ysyij', 84.85, 'ynkcj', 'ylgqp'), (3, 55, 'emkfk', 88.92, 'ufmav', 'lblgf'), (4, 89, 'acTxd', 49.57, 'CaHIh', 'LPIGT'), (5, 89, 'acTxd', 49.57, 'CaHIh', 'LPIGT'), (7, 76, 'Rqkpk', 83.19, 'cSylj', 'WKxSP')]}}
2025-02-05 23:46:54,845 - 
2025-02-05 23:46:54,855 - iter: 86
2025-02-05 23:46:56,398 - table table_0 has 6 rows
2025-02-05 23:46:56,398 - res_dict: {'trx1_lock_row_ids': [1], 'trx2_lock_row_ids': [2, 3, 4, 5, 6], 'intersection_row_ids': []}
2025-02-05 23:46:56,399 - lock_same_resource: False
2025-02-05 23:46:56,399 - 
2025-02-05 23:46:56,399 - non intersection phase1
2025-02-05 23:46:56,399 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:46:56,399 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:46:56,399 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:46:56,399 - 事务2在第二阶段请求对方资源的锁: II
2025-02-05 23:46:56,403 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:46:56,404 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:56,404 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:46:56,407 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 23:46:56,408 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:56,408 - params: {'v1': '2', 'v2': '6', 'select_cols': 'id, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:46:56,409 - non intersection phase1 end
2025-02-05 23:46:56,409 - 
2025-02-05 23:46:56,410 - non intersection phase2
2025-02-05 23:46:56,413 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:46:56,414 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:46:56,414 - params: {'v1': '5', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:46:56,417 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:46:56,419 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:46:56,419 - params: {'set_expr': "col_0 = 'vETDv', col_670 = 'TGZDM', col_3 = 26.73, col_252 = 'Yxxqm', col_2 = 'yzHif', col_1 = 'KraJQ'", 'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:46:56,419 - non intersection phase2 end
2025-02-05 23:46:56,419 - 
2025-02-05 23:46:56,420 - 生成死锁事务序列成功如下
2025-02-05 23:46:56,420 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, "UPDATE table_0 SET col_0 = 'vETDv', col_670 = 'TGZDM', col_3 = 26.73, col_252 = 'Yxxqm', col_2 = 'yzHif', col_1 = 'KraJQ' WHERE (id = 1)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:46:57,962 - 创建事务1连接成功
2025-02-05 23:46:57,964 - 执行事务1语句: BEGIN
2025-02-05 23:46:57,965 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:46:57,965 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:46:57,966 - 执行事务1语句: COMMIT;
2025-02-05 23:46:57,970 - 执行事务1成功
2025-02-05 23:47:00,573 - 恢复初始状态成功
2025-02-05 23:47:01,362 - 创建事务2连接成功
2025-02-05 23:47:01,364 - 执行事务2语句: BEGIN
2025-02-05 23:47:01,365 - 执行事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE
2025-02-05 23:47:01,366 - 执行事务2语句: UPDATE table_0 SET col_0 = 'vETDv', col_670 = 'TGZDM', col_3 = 26.73, col_252 = 'Yxxqm', col_2 = 'yzHif', col_1 = 'KraJQ' WHERE (id = 1)
2025-02-05 23:47:01,368 - 执行事务2语句: COMMIT;
2025-02-05 23:47:01,373 - 执行事务2成功
2025-02-05 23:47:06,337 - 
2025-02-05 23:47:06,337 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-617, started 27820)>, 1738770426.3379035)}
2025-02-05 23:47:06,449 - stmt_idx: 2, status: success, result: None
2025-02-05 23:47:06,449 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:47:06,449 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:47:06,449 - 
2025-02-05 23:47:06,558 - 
2025-02-05 23:47:06,559 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE', <Thread(Thread-618, started 4028)>, 1738770426.5584962)}
2025-02-05 23:47:06,666 - stmt_idx: 3, status: success, result: None
2025-02-05 23:47:06,666 - 成功执行序列中事务2语句: SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE
2025-02-05 23:47:06,666 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:47:06,666 - 
2025-02-05 23:47:06,775 - 
2025-02-05 23:47:06,776 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-619, started 40440)>, 1738770426.7756357)}
2025-02-05 23:47:06,891 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:47:06,891 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-619, started 40440)>, 1738770426.7756357)}
2025-02-05 23:47:06,891 - 
2025-02-05 23:47:06,998 - 
2025-02-05 23:47:06,999 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-619, started 40440)>, 1738770426.7756357), 5: (2, "UPDATE table_0 SET col_0 = 'vETDv', col_670 = 'TGZDM', col_3 = 26.73, col_252 = 'Yxxqm', col_2 = 'yzHif', col_1 = 'KraJQ' WHERE (id = 1)", <Thread(Thread-620, started 37600)>, 1738770426.9985797)}
2025-02-05 23:47:07,001 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: UPDATE table_0 SET col_0 = 'vETDv', col_670 = 'TGZDM', col_3 = 26.73, col_252 = 'Yxxqm', col_2 = 'yzHif', col_1 = 'KraJQ' WHERE (id = 1)
2025-02-05 23:47:07,114 - stmt_idx: 4, status: success, result: None
2025-02-05 23:47:07,114 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:47:07,114 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:47:07,222 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:47:07,222 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: UPDATE table_0 SET col_0 = 'vETDv', col_670 = 'TGZDM', col_3 = 26.73, col_252 = 'Yxxqm', col_2 = 'yzHif', col_1 = 'KraJQ' WHERE (id = 1)
2025-02-05 23:47:07,222 - 错误: dictionary changed size during iteration
2025-02-05 23:47:07,225 - 执行序列成功
2025-02-05 23:47:08,021 - is_atomic: True
2025-02-05 23:47:08,021 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:47:08,021 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, 'SELECT id, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'ROLLBACK'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 23:47:08,021 - snapshots: {'before': {'table_0': [(1, 'ebmbj', 'sqjci', 'gdiiw', 9.32, None, None), (2, 'sfzlv', 'onvsy', 'jnxvu', 64.02, None, None), (3, 'fwxnz', 'frjex', 'cywim', 80.02, None, None), (4, 'hujck', 'xqrsj', 'vxlgl', 31.53, None, None), (5, 'xmiau', 'erdrp', 'sraue', 8.82, None, None), (6, 'npjpq', 'tinet', 'mpotm', 39.39, None, None)]}, 'trx1': {'table_0': [(1, 'ebmbj', 'sqjci', 'gdiiw', 9.32, None, None), (2, 'sfzlv', 'onvsy', 'jnxvu', 64.02, None, None), (3, 'fwxnz', 'frjex', 'cywim', 80.02, None, None), (4, 'hujck', 'xqrsj', 'vxlgl', 31.53, None, None), (5, 'xmiau', 'erdrp', 'sraue', 8.82, None, None), (6, 'npjpq', 'tinet', 'mpotm', 39.39, None, None)]}, 'trx2': {'table_0': [(1, 'vETDv', 'KraJQ', 'yzHif', 26.73, 'Yxxqm', 'TGZDM'), (2, 'sfzlv', 'onvsy', 'jnxvu', 64.02, None, None), (3, 'fwxnz', 'frjex', 'cywim', 80.02, None, None), (4, 'hujck', 'xqrsj', 'vxlgl', 31.53, None, None), (5, 'xmiau', 'erdrp', 'sraue', 8.82, None, None), (6, 'npjpq', 'tinet', 'mpotm', 39.39, None, None)]}, 'serial': {'table_0': [(1, 'ebmbj', 'sqjci', 'gdiiw', 9.32, None, None), (2, 'sfzlv', 'onvsy', 'jnxvu', 64.02, None, None), (3, 'fwxnz', 'frjex', 'cywim', 80.02, None, None), (4, 'hujck', 'xqrsj', 'vxlgl', 31.53, None, None), (5, 'xmiau', 'erdrp', 'sraue', 8.82, None, None), (6, 'npjpq', 'tinet', 'mpotm', 39.39, None, None)]}}
2025-02-05 23:47:08,021 - 
2025-02-05 23:47:08,032 - iter: 87
2025-02-05 23:47:09,550 - table table_0 has 14 rows
2025-02-05 23:47:09,550 - res_dict: {'trx1_lock_row_ids': [1, 14], 'trx2_lock_row_ids': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'intersection_row_ids': []}
2025-02-05 23:47:09,550 - lock_same_resource: False
2025-02-05 23:47:09,550 - 
2025-02-05 23:47:09,550 - non intersection phase1
2025-02-05 23:47:09,550 - 事务1在第一阶段自己加的锁: II
2025-02-05 23:47:09,550 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:47:09,550 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:47:09,550 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:47:09,553 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:47:09,554 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:47:09,555 - params: {'set_expr': "col_3 = 'LXDPG'", 'v1': '1', 'v2': '1', 'table': 'table_0'}
2025-02-05 23:47:09,557 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:47:09,558 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:47:09,559 - params: {'set_expr': "col_751 = 'dSASL', col_0 = 48.73", 'cond': '(id = 14)', 'table': 'table_0'}
2025-02-05 23:47:09,563 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=3, is_continuous=True, range_end_idx=13
2025-02-05 23:47:09,564 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:09,564 - params: {'v1': '3', 'v2': '13', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:47:09,564 - non intersection phase1 end
2025-02-05 23:47:09,564 - 
2025-02-05 23:47:09,565 - non intersection phase2
2025-02-05 23:47:09,568 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=13, is_continuous=True, range_end_idx=13
2025-02-05 23:47:09,569 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:09,569 - params: {'v1': '13', 'v2': '13', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_751', 'table': 'table_0'}
2025-02-05 23:47:09,572 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:47:09,574 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:47:09,574 - params: {'set_expr': 'col_1 = 35.49', 'cond': '(id = 14)', 'table': 'table_0'}
2025-02-05 23:47:09,574 - non intersection phase2 end
2025-02-05 23:47:09,574 - 
2025-02-05 23:47:09,574 - 生成死锁事务序列成功如下
2025-02-05 23:47:09,574 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_3 = 'LXDPG' WHERE id BETWEEN 1 AND 1"), (1, "UPDATE table_0 SET col_751 = 'dSASL', col_0 = 48.73 WHERE (id = 14)"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_751 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE'), (2, 'UPDATE table_0 SET col_1 = 35.49 WHERE (id = 14)'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:47:11,112 - 创建事务1连接成功
2025-02-05 23:47:11,113 - 执行事务1语句: BEGIN
2025-02-05 23:47:11,114 - 执行事务1语句: UPDATE table_0 SET col_3 = 'LXDPG' WHERE id BETWEEN 1 AND 1
2025-02-05 23:47:11,115 - 执行事务1语句: UPDATE table_0 SET col_751 = 'dSASL', col_0 = 48.73 WHERE (id = 14)
2025-02-05 23:47:11,116 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_751 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 23:47:11,118 - 执行事务1语句: COMMIT;
2025-02-05 23:47:11,123 - 执行事务1成功
2025-02-05 23:47:13,742 - 恢复初始状态成功
2025-02-05 23:47:14,541 - 创建事务2连接成功
2025-02-05 23:47:14,542 - 执行事务2语句: BEGIN
2025-02-05 23:47:14,544 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-05 23:47:14,545 - 执行事务2语句: UPDATE table_0 SET col_1 = 35.49 WHERE (id = 14)
2025-02-05 23:47:14,546 - 执行事务2语句: COMMIT;
2025-02-05 23:47:14,551 - 执行事务2成功
2025-02-05 23:47:19,520 - 
2025-02-05 23:47:19,520 - 执行前idx: 3, pending_stmts: {2: (1, "UPDATE table_0 SET col_3 = 'LXDPG' WHERE id BETWEEN 1 AND 1", <Thread(Thread-621, started 33928)>, 1738770439.5208216)}
2025-02-05 23:47:19,632 - stmt_idx: 2, status: success, result: None
2025-02-05 23:47:19,632 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 'LXDPG' WHERE id BETWEEN 1 AND 1
2025-02-05 23:47:19,632 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:47:19,632 - 
2025-02-05 23:47:19,739 - 
2025-02-05 23:47:19,740 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_751 = 'dSASL', col_0 = 48.73 WHERE (id = 14)", <Thread(Thread-622, started 37196)>, 1738770439.7393534)}
2025-02-05 23:47:19,849 - stmt_idx: 3, status: success, result: None
2025-02-05 23:47:19,849 - 成功执行序列中事务1语句: UPDATE table_0 SET col_751 = 'dSASL', col_0 = 48.73 WHERE (id = 14)
2025-02-05 23:47:19,849 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:47:19,849 - 
2025-02-05 23:47:19,959 - 
2025-02-05 23:47:19,959 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-623, started 43136)>, 1738770439.9591005)}
2025-02-05 23:47:20,067 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-05 23:47:20,067 - 执行后idx: 5, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-623, started 43136)>, 1738770439.9591005)}
2025-02-05 23:47:20,067 - 
2025-02-05 23:47:20,176 - 
2025-02-05 23:47:20,176 - 执行前idx: 6, pending_stmts: {4: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE', <Thread(Thread-623, started 43136)>, 1738770439.9591005), 5: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_751 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-624, started 36432)>, 1738770440.1761262)}
2025-02-05 23:47:20,178 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-05 23:47:20,284 - stmt_idx: 4, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:47:20,284 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 3 AND 13 FOR UPDATE
2025-02-05 23:47:20,284 - 错误: dictionary changed size during iteration
2025-02-05 23:47:20,288 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_751 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-624, stopped 36432)>, 1738770440.1761262)}
2025-02-05 23:47:20,288 - 
2025-02-05 23:47:20,289 - 执行前idx: 9, pending_stmts: {5: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_751 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE', <Thread(Thread-624, stopped 36432)>, 1738770440.1761262)}
2025-02-05 23:47:20,390 - stmt_idx: 5, status: success, result: None
2025-02-05 23:47:20,391 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_751 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE
2025-02-05 23:47:20,391 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:47:20,391 - 
2025-02-05 23:47:20,502 - 执行序列成功
2025-02-05 23:47:21,290 - is_atomic: True
2025-02-05 23:47:21,290 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:47:21,290 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, "UPDATE table_0 SET col_3 = 'LXDPG' WHERE id BETWEEN 1 AND 1"), (1, "UPDATE table_0 SET col_751 = 'dSASL', col_0 = 48.73 WHERE (id = 14)"), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: UPDATE table_0 SET col_1 = 35.49 WHERE (id = 14)'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_751 FROM table_0 WHERE id BETWEEN 13 AND 13 FOR UPDATE')]
2025-02-05 23:47:21,290 - snapshots: {'before': {'table_0': [(1, 7.15, 2.94, 13, 'xsimd', None), (2, 76.23, 29.82, 50, 'bwvmd', None), (3, 81.66, 64.04, 15, 'kuqnt', None), (4, 38.99, 42.82, 18, 'aofae', None), (5, 13.35, 97.39, 61, 'frohm', None), (6, 17.53, 85.77, 63, 'fvvyi', None), (7, 99.77, 54.6, 48, 'dhrfd', None), (8, 68.09, 8.97, 37, 'rbufu', None), (9, 44.57, 59.55, 84, 'itvxj', None), (10, 34.69, 44.01, 49, 'kupwz', None), (11, 79.62, 91.78, 85, 'qjmrr', None), (12, 26.67, 70.46, 2, 'mgdyp', None), (13, 39.11, 25.82, 62, 'yllpf', None), (14, 67.95, 74.91, 100, 'ufqea', None)]}, 'trx1': {'table_0': [(1, 7.15, 2.94, 13, 'LXDPG', None), (2, 76.23, 29.82, 50, 'bwvmd', None), (3, 81.66, 64.04, 15, 'kuqnt', None), (4, 38.99, 42.82, 18, 'aofae', None), (5, 13.35, 97.39, 61, 'frohm', None), (6, 17.53, 85.77, 63, 'fvvyi', None), (7, 99.77, 54.6, 48, 'dhrfd', None), (8, 68.09, 8.97, 37, 'rbufu', None), (9, 44.57, 59.55, 84, 'itvxj', None), (10, 34.69, 44.01, 49, 'kupwz', None), (11, 79.62, 91.78, 85, 'qjmrr', None), (12, 26.67, 70.46, 2, 'mgdyp', None), (13, 39.11, 25.82, 62, 'yllpf', None), (14, 48.73, 74.91, 100, 'ufqea', 'dSASL')]}, 'trx2': {'table_0': [(1, 7.15, 2.94, 13, 'xsimd', None), (2, 76.23, 29.82, 50, 'bwvmd', None), (3, 81.66, 64.04, 15, 'kuqnt', None), (4, 38.99, 42.82, 18, 'aofae', None), (5, 13.35, 97.39, 61, 'frohm', None), (6, 17.53, 85.77, 63, 'fvvyi', None), (7, 99.77, 54.6, 48, 'dhrfd', None), (8, 68.09, 8.97, 37, 'rbufu', None), (9, 44.57, 59.55, 84, 'itvxj', None), (10, 34.69, 44.01, 49, 'kupwz', None), (11, 79.62, 91.78, 85, 'qjmrr', None), (12, 26.67, 70.46, 2, 'mgdyp', None), (13, 39.11, 25.82, 62, 'yllpf', None), (14, 67.95, 35.49, 100, 'ufqea', None)]}, 'serial': {'table_0': [(1, 7.15, 2.94, 13, 'LXDPG', None), (2, 76.23, 29.82, 50, 'bwvmd', None), (3, 81.66, 64.04, 15, 'kuqnt', None), (4, 38.99, 42.82, 18, 'aofae', None), (5, 13.35, 97.39, 61, 'frohm', None), (6, 17.53, 85.77, 63, 'fvvyi', None), (7, 99.77, 54.6, 48, 'dhrfd', None), (8, 68.09, 8.97, 37, 'rbufu', None), (9, 44.57, 59.55, 84, 'itvxj', None), (10, 34.69, 44.01, 49, 'kupwz', None), (11, 79.62, 91.78, 85, 'qjmrr', None), (12, 26.67, 70.46, 2, 'mgdyp', None), (13, 39.11, 25.82, 62, 'yllpf', None), (14, 48.73, 74.91, 100, 'ufqea', 'dSASL')]}}
2025-02-05 23:47:21,290 - 
2025-02-05 23:47:21,301 - iter: 88
2025-02-05 23:47:22,822 - table table_0 has 15 rows
2025-02-05 23:47:22,822 - trx1_start_id: 2
2025-02-05 23:47:22,822 - trx1_end_id: 7
2025-02-05 23:47:22,822 - trx1_exclusive_start_id: 2
2025-02-05 23:47:22,822 - trx1_exclusive_end_id: 6
2025-02-05 23:47:22,822 - trx1_exclusive_ids: [2, 3, 4, 5, 6]
2025-02-05 23:47:22,822 - trx2_start_id: 7
2025-02-05 23:47:22,822 - trx2_end_id: 12
2025-02-05 23:47:22,822 - trx2_exclusive_start_id: 8
2025-02-05 23:47:22,822 - trx2_exclusive_end_id: 12
2025-02-05 23:47:22,822 - trx2_exclusive_ids: [8, 9, 10, 11, 12]
2025-02-05 23:47:22,822 - intersection_ids: [7]
2025-02-05 23:47:22,823 - res_dict: {'trx1_lock_row_ids': [2, 3, 4, 5, 6, 7], 'trx2_lock_row_ids': [7, 8, 9, 10, 11, 12], 'intersection_row_ids': [7]}
2025-02-05 23:47:22,823 - lock_same_resource: True
2025-02-05 23:47:22,823 - 
2025-02-05 23:47:22,823 - intersection phase1
2025-02-05 23:47:22,826 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=2, is_continuous=True, range_end_idx=7
2025-02-05 23:47:22,827 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:22,827 - params: {'v1': '2', 'v2': '7', 'select_cols': 'col_3', 'table': 'table_0'}
2025-02-05 23:47:22,830 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=7, is_continuous=True, range_end_idx=12
2025-02-05 23:47:22,831 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:47:22,831 - params: {'set_expr': "col_2 = 'gxzte', col_3 = 'gPnWd', col_0 = 'xEuoM', col_4 = 'gLnaK'", 'v1': '7', 'v2': '12', 'table': 'table_0'}
2025-02-05 23:47:22,832 - intersection phase1 end
2025-02-05 23:47:22,832 - 
2025-02-05 23:47:22,832 - intersection phase2
2025-02-05 23:47:22,832 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:47:22,832 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:47:22,832 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:47:22,832 - 事务2在第三阶段请求对方资源的锁: S
2025-02-05 23:47:22,836 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=6
2025-02-05 23:47:22,837 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:22,837 - params: {'v1': '2', 'v2': '6', 'select_cols': 'col_0, col_1, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:47:22,840 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=8, is_continuous=True, range_end_idx=12
2025-02-05 23:47:22,842 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:22,842 - params: {'v1': '8', 'v2': '12', 'select_cols': 'col_0, col_3', 'table': 'table_0'}
2025-02-05 23:47:22,842 - intersection phase2 end
2025-02-05 23:47:22,842 - 
2025-02-05 23:47:22,842 - intersection phase3
2025-02-05 23:47:22,845 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=8, is_continuous=True, range_end_idx=10
2025-02-05 23:47:22,846 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:22,846 - params: {'v1': '8', 'v2': '10', 'select_cols': 'id, col_1, col_2, col_4', 'table': 'table_0'}
2025-02-05 23:47:22,848 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=4, is_continuous=True, range_end_idx=6
2025-02-05 23:47:22,850 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:22,850 - params: {'v1': '4', 'v2': '6', 'select_cols': 'col_0, col_2, col_4', 'table': 'table_0'}
2025-02-05 23:47:22,850 - intersection phase3 end
2025-02-05 23:47:22,851 - 
2025-02-05 23:47:22,851 - 生成死锁事务序列成功如下
2025-02-05 23:47:22,851 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_2 = 'gxzte', col_3 = 'gPnWd', col_0 = 'xEuoM', col_4 = 'gLnaK' WHERE id BETWEEN 7 AND 12"), (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE'), (2, 'SELECT col_0, col_3 FROM table_0 WHERE id BETWEEN 8 AND 12 FOR UPDATE'), (2, 'SELECT col_0, col_2, col_4 FROM table_0 WHERE id BETWEEN 4 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:47:24,398 - 创建事务1连接成功
2025-02-05 23:47:24,400 - 执行事务1语句: BEGIN
2025-02-05 23:47:24,402 - 执行事务1语句: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE
2025-02-05 23:47:24,404 - 执行事务1语句: SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE
2025-02-05 23:47:24,405 - 执行事务1语句: SELECT id, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE
2025-02-05 23:47:24,406 - 执行事务1语句: COMMIT;
2025-02-05 23:47:24,414 - 执行事务1成功
2025-02-05 23:47:27,102 - 恢复初始状态成功
2025-02-05 23:47:27,875 - 创建事务2连接成功
2025-02-05 23:47:27,876 - 执行事务2语句: BEGIN
2025-02-05 23:47:27,877 - 执行事务2语句: UPDATE table_0 SET col_2 = 'gxzte', col_3 = 'gPnWd', col_0 = 'xEuoM', col_4 = 'gLnaK' WHERE id BETWEEN 7 AND 12
2025-02-05 23:47:27,878 - 执行事务2语句: SELECT col_0, col_3 FROM table_0 WHERE id BETWEEN 8 AND 12 FOR UPDATE
2025-02-05 23:47:27,879 - 执行事务2语句: SELECT col_0, col_2, col_4 FROM table_0 WHERE id BETWEEN 4 AND 6 LOCK IN SHARE MODE
2025-02-05 23:47:27,881 - 执行事务2语句: COMMIT;
2025-02-05 23:47:27,886 - 执行事务2成功
2025-02-05 23:47:32,822 - 
2025-02-05 23:47:32,822 - 执行前idx: 3, pending_stmts: {2: (2, "UPDATE table_0 SET col_2 = 'gxzte', col_3 = 'gPnWd', col_0 = 'xEuoM', col_4 = 'gLnaK' WHERE id BETWEEN 7 AND 12", <Thread(Thread-625, started 45012)>, 1738770452.8221743)}
2025-02-05 23:47:32,931 - stmt_idx: 2, status: success, result: None
2025-02-05 23:47:32,931 - 成功执行序列中事务2语句: UPDATE table_0 SET col_2 = 'gxzte', col_3 = 'gPnWd', col_0 = 'xEuoM', col_4 = 'gLnaK' WHERE id BETWEEN 7 AND 12
2025-02-05 23:47:32,931 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:47:32,931 - 
2025-02-05 23:47:33,043 - 
2025-02-05 23:47:33,043 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE', <Thread(Thread-626, started 21840)>, 1738770453.0429578)}
2025-02-05 23:47:33,151 - wait for lock, trx_id: 1, stmt: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE
2025-02-05 23:47:33,152 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE', <Thread(Thread-626, started 21840)>, 1738770453.0429578)}
2025-02-05 23:47:33,152 - 
2025-02-05 23:47:33,258 - 
2025-02-05 23:47:33,259 - 执行前idx: 6, pending_stmts: {3: (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE', <Thread(Thread-626, started 21840)>, 1738770453.0429578), 5: (2, 'SELECT col_0, col_3 FROM table_0 WHERE id BETWEEN 8 AND 12 FOR UPDATE', <Thread(Thread-627, started 32340)>, 1738770453.258986)}
2025-02-05 23:47:33,368 - wait for lock, trx_id: 1, stmt: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE
2025-02-05 23:47:33,474 - stmt_idx: 5, status: success, result: None
2025-02-05 23:47:33,474 - 成功执行序列中事务2语句: SELECT col_0, col_3 FROM table_0 WHERE id BETWEEN 8 AND 12 FOR UPDATE
2025-02-05 23:47:33,474 - 执行后idx: 6, pending_stmts: {3: (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE', <Thread(Thread-626, started 21840)>, 1738770453.0429578)}
2025-02-05 23:47:33,474 - 
2025-02-05 23:47:33,582 - 
2025-02-05 23:47:33,582 - 执行前idx: 7, pending_stmts: {3: (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE', <Thread(Thread-626, started 21840)>, 1738770453.0429578), 6: (2, 'SELECT col_0, col_2, col_4 FROM table_0 WHERE id BETWEEN 4 AND 6 LOCK IN SHARE MODE', <Thread(Thread-628, started 34116)>, 1738770453.5820088)}
2025-02-05 23:47:33,684 - wait for lock, trx_id: 1, stmt: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE
2025-02-05 23:47:33,792 - stmt_idx: 6, status: success, result: None
2025-02-05 23:47:33,793 - 成功执行序列中事务2语句: SELECT col_0, col_2, col_4 FROM table_0 WHERE id BETWEEN 4 AND 6 LOCK IN SHARE MODE
2025-02-05 23:47:33,793 - 执行后idx: 7, pending_stmts: {3: (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE', <Thread(Thread-626, started 21840)>, 1738770453.0429578)}
2025-02-05 23:47:33,793 - 
2025-02-05 23:47:33,910 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE', <Thread(Thread-626, started 21840)>, 1738770453.0429578)}
2025-02-05 23:47:33,910 - 
2025-02-05 23:47:33,911 - 执行前idx: 10, pending_stmts: {3: (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE', <Thread(Thread-626, stopped 21840)>, 1738770453.0429578)}
2025-02-05 23:47:34,012 - stmt_idx: 3, status: success, result: None
2025-02-05 23:47:34,012 - 成功执行序列中事务1语句: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE
2025-02-05 23:47:34,012 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE
2025-02-05 23:47:34,013 - 执行后idx: 10, pending_stmts: {4: (1, 'SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE', <Thread(Thread-629, started 36000)>, 1738770454.0136297), 7: (1, 'SELECT id, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE', <Thread(Thread-630, started 12208)>, 1738770454.0138106), 9: (1, 'COMMIT', <Thread(Thread-631, started 29408)>, 1738770454.0138106)}
2025-02-05 23:47:34,014 - 
2025-02-05 23:47:34,122 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE', <Thread(Thread-629, stopped 36000)>, 1738770454.0136297), 7: (1, 'SELECT id, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE', <Thread(Thread-630, stopped 12208)>, 1738770454.0138106), 9: (1, 'COMMIT', <Thread(Thread-631, stopped 29408)>, 1738770454.0138106)}
2025-02-05 23:47:34,122 - 
2025-02-05 23:47:34,122 - 执行前idx: 10, pending_stmts: {4: (1, 'SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE', <Thread(Thread-629, stopped 36000)>, 1738770454.0136297), 7: (1, 'SELECT id, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE', <Thread(Thread-630, stopped 12208)>, 1738770454.0138106), 9: (1, 'COMMIT', <Thread(Thread-631, stopped 29408)>, 1738770454.0138106)}
2025-02-05 23:47:34,231 - stmt_idx: 4, status: success, result: None
2025-02-05 23:47:34,231 - 成功执行序列中事务1语句: SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE
2025-02-05 23:47:34,343 - stmt_idx: 7, status: success, result: None
2025-02-05 23:47:34,343 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE
2025-02-05 23:47:34,450 - stmt_idx: 9, status: success, result: None
2025-02-05 23:47:34,450 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:47:34,450 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:47:34,450 - 
2025-02-05 23:47:34,565 - 执行序列成功
2025-02-05 23:47:35,338 - is_atomic: True
2025-02-05 23:47:35,338 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:47:35,338 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "UPDATE table_0 SET col_2 = 'gxzte', col_3 = 'gPnWd', col_0 = 'xEuoM', col_4 = 'gLnaK' WHERE id BETWEEN 7 AND 12"), (2, 'SELECT col_0, col_3 FROM table_0 WHERE id BETWEEN 8 AND 12 FOR UPDATE'), (2, 'SELECT col_0, col_2, col_4 FROM table_0 WHERE id BETWEEN 4 AND 6 LOCK IN SHARE MODE'), (2, 'COMMIT'), (1, 'SELECT col_3 FROM table_0 WHERE id BETWEEN 2 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 2 AND 6 FOR UPDATE'), (1, 'SELECT id, col_1, col_2, col_4 FROM table_0 WHERE id BETWEEN 8 AND 10 LOCK IN SHARE MODE'), (1, 'COMMIT')]
2025-02-05 23:47:35,339 - snapshots: {'before': {'table_0': [(1, 'cighq', 59, 'ptrxm', 'afqks', 'rmkwv'), (2, 'agacd', 84, 'hjcec', 'upbcg', 'ncldf'), (3, 'gxzaz', 94, 'oancf', 'sonns', 'bygbo'), (4, 'jgjot', 31, 'fuurq', 'gsthc', 'seanj'), (5, 'izadp', 46, 'wqijr', 'xmiui', 'ynzcn'), (6, 'lgknm', 99, 'vtdgh', 'jnwsz', 'tbzxi'), (7, 'anjzx', 4, 'plipj', 'gegqb', 'eqmkl'), (8, 'nuyqs', 50, 'wpkbk', 'luicx', 'rundu'), (9, 'fvdli', 69, 'xnktx', 'zzidk', 'slzob'), (10, 'wsspd', 30, 'fnhmx', 'wccft', 'mimdp'), (11, 'rfudq', 83, 'ytrtq', 'huflb', 'riaiy'), (12, 'dqcbk', 74, 'bfrwi', 'fgzas', 'cqdei'), (13, 'ddjdz', 87, 'ggnpe', 'clefh', 'bgtmg'), (14, 'yefto', 81, 'nvviv', 'ludzn', 'ydjzc'), (15, 'snyuh', 3, 'ullyn', 'gnxih', 'ugxwl')]}, 'trx1': {'table_0': [(1, 'cighq', 59, 'ptrxm', 'afqks', 'rmkwv'), (2, 'agacd', 84, 'hjcec', 'upbcg', 'ncldf'), (3, 'gxzaz', 94, 'oancf', 'sonns', 'bygbo'), (4, 'jgjot', 31, 'fuurq', 'gsthc', 'seanj'), (5, 'izadp', 46, 'wqijr', 'xmiui', 'ynzcn'), (6, 'lgknm', 99, 'vtdgh', 'jnwsz', 'tbzxi'), (7, 'anjzx', 4, 'plipj', 'gegqb', 'eqmkl'), (8, 'nuyqs', 50, 'wpkbk', 'luicx', 'rundu'), (9, 'fvdli', 69, 'xnktx', 'zzidk', 'slzob'), (10, 'wsspd', 30, 'fnhmx', 'wccft', 'mimdp'), (11, 'rfudq', 83, 'ytrtq', 'huflb', 'riaiy'), (12, 'dqcbk', 74, 'bfrwi', 'fgzas', 'cqdei'), (13, 'ddjdz', 87, 'ggnpe', 'clefh', 'bgtmg'), (14, 'yefto', 81, 'nvviv', 'ludzn', 'ydjzc'), (15, 'snyuh', 3, 'ullyn', 'gnxih', 'ugxwl')]}, 'trx2': {'table_0': [(1, 'cighq', 59, 'ptrxm', 'afqks', 'rmkwv'), (2, 'agacd', 84, 'hjcec', 'upbcg', 'ncldf'), (3, 'gxzaz', 94, 'oancf', 'sonns', 'bygbo'), (4, 'jgjot', 31, 'fuurq', 'gsthc', 'seanj'), (5, 'izadp', 46, 'wqijr', 'xmiui', 'ynzcn'), (6, 'lgknm', 99, 'vtdgh', 'jnwsz', 'tbzxi'), (7, 'xEuoM', 4, 'gxzte', 'gPnWd', 'gLnaK'), (8, 'xEuoM', 50, 'gxzte', 'gPnWd', 'gLnaK'), (9, 'xEuoM', 69, 'gxzte', 'gPnWd', 'gLnaK'), (10, 'xEuoM', 30, 'gxzte', 'gPnWd', 'gLnaK'), (11, 'xEuoM', 83, 'gxzte', 'gPnWd', 'gLnaK'), (12, 'xEuoM', 74, 'gxzte', 'gPnWd', 'gLnaK'), (13, 'ddjdz', 87, 'ggnpe', 'clefh', 'bgtmg'), (14, 'yefto', 81, 'nvviv', 'ludzn', 'ydjzc'), (15, 'snyuh', 3, 'ullyn', 'gnxih', 'ugxwl')]}, 'serial': {'table_0': [(1, 'cighq', 59, 'ptrxm', 'afqks', 'rmkwv'), (2, 'agacd', 84, 'hjcec', 'upbcg', 'ncldf'), (3, 'gxzaz', 94, 'oancf', 'sonns', 'bygbo'), (4, 'jgjot', 31, 'fuurq', 'gsthc', 'seanj'), (5, 'izadp', 46, 'wqijr', 'xmiui', 'ynzcn'), (6, 'lgknm', 99, 'vtdgh', 'jnwsz', 'tbzxi'), (7, 'xEuoM', 4, 'gxzte', 'gPnWd', 'gLnaK'), (8, 'xEuoM', 50, 'gxzte', 'gPnWd', 'gLnaK'), (9, 'xEuoM', 69, 'gxzte', 'gPnWd', 'gLnaK'), (10, 'xEuoM', 30, 'gxzte', 'gPnWd', 'gLnaK'), (11, 'xEuoM', 83, 'gxzte', 'gPnWd', 'gLnaK'), (12, 'xEuoM', 74, 'gxzte', 'gPnWd', 'gLnaK'), (13, 'ddjdz', 87, 'ggnpe', 'clefh', 'bgtmg'), (14, 'yefto', 81, 'nvviv', 'ludzn', 'ydjzc'), (15, 'snyuh', 3, 'ullyn', 'gnxih', 'ugxwl')]}}
2025-02-05 23:47:35,339 - 
2025-02-05 23:47:35,350 - iter: 89
2025-02-05 23:47:36,907 - table table_0 has 8 rows
2025-02-05 23:47:36,908 - res_dict: {'trx1_lock_row_ids': [1, 2, 4, 6, 8], 'trx2_lock_row_ids': [3, 5, 7], 'intersection_row_ids': []}
2025-02-05 23:47:36,908 - lock_same_resource: False
2025-02-05 23:47:36,908 - 
2025-02-05 23:47:36,908 - non intersection phase1
2025-02-05 23:47:36,908 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:47:36,908 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:47:36,908 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:47:36,908 - 事务2在第二阶段请求对方资源的锁: S
2025-02-05 23:47:36,911 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,912 - needed_params: {'cond', 'table'}
2025-02-05 23:47:36,913 - params: {'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:47:36,915 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,916 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:47:36,916 - params: {'set_expr': "col_0 = 'yqeYk', col_1 = 'Fleyp'", 'cond': '(id = 2)', 'table': 'table_0'}
2025-02-05 23:47:36,919 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,921 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:47:36,921 - params: {'set_expr': "col_3 = 'VFMKH'", 'cond': "(col_0 = 'rqcbt') AND (col_703 IS NULL) AND (col_2 = 'ethtu')", 'table': 'table_0'}
2025-02-05 23:47:36,923 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,925 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:36,925 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_724, col_703', 'table': 'table_0'}
2025-02-05 23:47:36,929 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,930 - needed_params: {'cond', 'table'}
2025-02-05 23:47:36,930 - params: {'cond': "(id = 8) AND (col_703 IS NULL) AND (col_1 = 'orsnj')", 'table': 'table_0'}
2025-02-05 23:47:36,933 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,934 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:47:36,934 - params: {'cond': "(id = 3) AND (col_1 = 'gsebz') AND (col_703 IS NULL) AND (col_0 = 'jmsdm')", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:47:36,938 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,940 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:36,940 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_0, col_1, col_3, col_724, col_703', 'table': 'table_0'}
2025-02-05 23:47:36,943 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,944 - needed_params: {'cond', 'table'}
2025-02-05 23:47:36,944 - params: {'cond': "(col_3 = 'dooty') AND (col_703 IS NULL)", 'table': 'table_0'}
2025-02-05 23:47:36,944 - non intersection phase1 end
2025-02-05 23:47:36,944 - 
2025-02-05 23:47:36,944 - non intersection phase2
2025-02-05 23:47:36,948 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,949 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:36,949 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_0, col_1, col_3, col_724', 'table': 'table_0'}
2025-02-05 23:47:36,953 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:47:36,955 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:36,955 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:47:36,955 - non intersection phase2 end
2025-02-05 23:47:36,955 - 
2025-02-05 23:47:36,955 - 生成死锁事务序列成功如下
2025-02-05 23:47:36,955 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, "UPDATE table_0 SET col_0 = 'yqeYk', col_1 = 'Fleyp' WHERE (id = 2)"), (2, "SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 'gsebz') AND (col_703 IS NULL) AND (col_0 = 'jmsdm') FOR UPDATE"), (1, "UPDATE table_0 SET col_3 = 'VFMKH' WHERE (col_0 = 'rqcbt') AND (col_703 IS NULL) AND (col_2 = 'ethtu')"), (2, 'SELECT id, col_0, col_1, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, "DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)"), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (id = 8) AND (col_703 IS NULL) AND (col_1 = 'orsnj')"), (1, 'SELECT id, col_0, col_1, col_3, col_724 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:47:38,504 - 创建事务1连接成功
2025-02-05 23:47:38,505 - 执行事务1语句: BEGIN
2025-02-05 23:47:38,506 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 23:47:38,507 - 执行事务1语句: UPDATE table_0 SET col_0 = 'yqeYk', col_1 = 'Fleyp' WHERE (id = 2)
2025-02-05 23:47:38,508 - 执行事务1语句: UPDATE table_0 SET col_3 = 'VFMKH' WHERE (col_0 = 'rqcbt') AND (col_703 IS NULL) AND (col_2 = 'ethtu')
2025-02-05 23:47:38,509 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:47:38,509 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 8) AND (col_703 IS NULL) AND (col_1 = 'orsnj')
2025-02-05 23:47:38,510 - 执行事务1语句: SELECT id, col_0, col_1, col_3, col_724 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:47:38,512 - 执行事务1语句: COMMIT;
2025-02-05 23:47:38,517 - 执行事务1成功
2025-02-05 23:47:41,103 - 恢复初始状态成功
2025-02-05 23:47:41,880 - 创建事务2连接成功
2025-02-05 23:47:41,882 - 执行事务2语句: BEGIN
2025-02-05 23:47:41,883 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 'gsebz') AND (col_703 IS NULL) AND (col_0 = 'jmsdm') FOR UPDATE
2025-02-05 23:47:41,883 - 执行事务2语句: SELECT id, col_0, col_1, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:47:41,884 - 执行事务2语句: DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)
2025-02-05 23:47:41,885 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:47:41,887 - 执行事务2语句: COMMIT;
2025-02-05 23:47:41,892 - 执行事务2成功
2025-02-05 23:47:46,844 - 
2025-02-05 23:47:46,844 - 执行前idx: 3, pending_stmts: {2: (1, 'DELETE FROM table_0 WHERE (id = 1)', <Thread(Thread-632, started 39140)>, 1738770466.8443322)}
2025-02-05 23:47:46,952 - stmt_idx: 2, status: success, result: None
2025-02-05 23:47:46,952 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 1)
2025-02-05 23:47:46,952 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:47:46,952 - 
2025-02-05 23:47:47,055 - 
2025-02-05 23:47:47,056 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_0 = 'yqeYk', col_1 = 'Fleyp' WHERE (id = 2)", <Thread(Thread-633, started 18408)>, 1738770467.055615)}
2025-02-05 23:47:47,162 - stmt_idx: 3, status: success, result: None
2025-02-05 23:47:47,162 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 'yqeYk', col_1 = 'Fleyp' WHERE (id = 2)
2025-02-05 23:47:47,162 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:47:47,162 - 
2025-02-05 23:47:47,268 - 
2025-02-05 23:47:47,269 - 执行前idx: 5, pending_stmts: {4: (2, "SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 'gsebz') AND (col_703 IS NULL) AND (col_0 = 'jmsdm') FOR UPDATE", <Thread(Thread-634, started 30712)>, 1738770467.2685475)}
2025-02-05 23:47:47,375 - stmt_idx: 4, status: success, result: None
2025-02-05 23:47:47,375 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 'gsebz') AND (col_703 IS NULL) AND (col_0 = 'jmsdm') FOR UPDATE
2025-02-05 23:47:47,375 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:47:47,375 - 
2025-02-05 23:47:47,485 - 
2025-02-05 23:47:47,485 - 执行前idx: 6, pending_stmts: {5: (1, "UPDATE table_0 SET col_3 = 'VFMKH' WHERE (col_0 = 'rqcbt') AND (col_703 IS NULL) AND (col_2 = 'ethtu')", <Thread(Thread-635, started 31312)>, 1738770467.4850333)}
2025-02-05 23:47:47,592 - stmt_idx: 5, status: success, result: None
2025-02-05 23:47:47,592 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 'VFMKH' WHERE (col_0 = 'rqcbt') AND (col_703 IS NULL) AND (col_2 = 'ethtu')
2025-02-05 23:47:47,592 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:47:47,592 - 
2025-02-05 23:47:47,697 - 
2025-02-05 23:47:47,698 - 执行前idx: 7, pending_stmts: {6: (2, 'SELECT id, col_0, col_1, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-636, started 9912)>, 1738770467.6976693)}
2025-02-05 23:47:47,811 - stmt_idx: 6, status: success, result: None
2025-02-05 23:47:47,811 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:47:47,811 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:47:47,811 - 
2025-02-05 23:47:47,922 - 
2025-02-05 23:47:47,923 - 执行前idx: 8, pending_stmts: {7: (2, "DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)", <Thread(Thread-637, started 44616)>, 1738770467.9221325)}
2025-02-05 23:47:48,026 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)
2025-02-05 23:47:48,027 - 执行后idx: 8, pending_stmts: {7: (2, "DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)", <Thread(Thread-637, started 44616)>, 1738770467.9221325)}
2025-02-05 23:47:48,027 - 
2025-02-05 23:47:48,137 - 
2025-02-05 23:47:48,137 - 执行前idx: 9, pending_stmts: {7: (2, "DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)", <Thread(Thread-637, started 44616)>, 1738770467.9221325), 8: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-638, started 4852)>, 1738770468.1374683)}
2025-02-05 23:47:48,241 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)
2025-02-05 23:47:48,349 - stmt_idx: 8, status: success, result: None
2025-02-05 23:47:48,349 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:47:48,349 - 执行后idx: 9, pending_stmts: {7: (2, "DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)", <Thread(Thread-637, started 44616)>, 1738770467.9221325)}
2025-02-05 23:47:48,349 - 
2025-02-05 23:47:48,455 - 
2025-02-05 23:47:48,455 - 执行前idx: 10, pending_stmts: {7: (2, "DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)", <Thread(Thread-637, started 44616)>, 1738770467.9221325), 9: (1, "DELETE FROM table_0 WHERE (id = 8) AND (col_703 IS NULL) AND (col_1 = 'orsnj')", <Thread(Thread-639, started 12236)>, 1738770468.4551396)}
2025-02-05 23:47:48,559 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)
2025-02-05 23:47:48,668 - stmt_idx: 9, status: success, result: None
2025-02-05 23:47:48,668 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 8) AND (col_703 IS NULL) AND (col_1 = 'orsnj')
2025-02-05 23:47:48,668 - 执行后idx: 10, pending_stmts: {7: (2, "DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)", <Thread(Thread-637, started 44616)>, 1738770467.9221325)}
2025-02-05 23:47:48,668 - 
2025-02-05 23:47:48,772 - 
2025-02-05 23:47:48,772 - 执行前idx: 11, pending_stmts: {7: (2, "DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)", <Thread(Thread-637, started 44616)>, 1738770467.9221325), 10: (1, 'SELECT id, col_0, col_1, col_3, col_724 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-640, started 41324)>, 1738770468.772449)}
2025-02-05 23:47:48,774 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)
2025-02-05 23:47:48,879 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:47:48,879 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: DELETE FROM table_0 WHERE (col_3 = 'dooty') AND (col_703 IS NULL)
2025-02-05 23:47:48,879 - 错误: dictionary changed size during iteration
2025-02-05 23:47:48,884 - 序列遍历完成，开始查看剩余阻塞的语句：{10: (1, 'SELECT id, col_0, col_1, col_3, col_724 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-640, stopped 41324)>, 1738770468.772449)}
2025-02-05 23:47:48,884 - 
2025-02-05 23:47:48,884 - 执行前idx: 14, pending_stmts: {10: (1, 'SELECT id, col_0, col_1, col_3, col_724 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-640, stopped 41324)>, 1738770468.772449)}
2025-02-05 23:47:48,996 - stmt_idx: 10, status: success, result: None
2025-02-05 23:47:48,996 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3, col_724 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:47:48,996 - 执行后idx: 14, pending_stmts: {}
2025-02-05 23:47:48,996 - 
2025-02-05 23:47:49,102 - 执行序列成功
2025-02-05 23:47:49,879 - is_atomic: True
2025-02-05 23:47:49,879 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:47:49,879 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'DELETE FROM table_0 WHERE (id = 1)'), (1, "UPDATE table_0 SET col_0 = 'yqeYk', col_1 = 'Fleyp' WHERE (id = 2)"), (2, "SELECT * FROM table_0 WHERE (id = 3) AND (col_1 = 'gsebz') AND (col_703 IS NULL) AND (col_0 = 'jmsdm') FOR UPDATE"), (1, "UPDATE table_0 SET col_3 = 'VFMKH' WHERE (col_0 = 'rqcbt') AND (col_703 IS NULL) AND (col_2 = 'ethtu')"), (2, 'SELECT id, col_0, col_1, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_724, col_703 FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, "DELETE FROM table_0 WHERE (id = 8) AND (col_703 IS NULL) AND (col_1 = 'orsnj')"), (2, 'ROLLBACK'), (2, '--Skipped, trx_id: 2, stmt: SELECT id FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT'), (1, 'SELECT id, col_0, col_1, col_3, col_724 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE')]
2025-02-05 23:47:49,879 - snapshots: {'before': {'table_0': [(1, 'bqpxh', 'ngooh', 'bazou', 'vejzl', None, None), (2, 'aykvc', 'odrff', 'lqmjf', 'rwvep', None, None), (3, 'jmsdm', 'gsebz', 'puwtg', 'ltiio', None, None), (4, 'rqcbt', 'nrlrc', 'ethtu', 'djsul', None, None), (5, 'osujq', 'wzjaz', 'velvs', 'vrndr', None, None), (6, 'cnruc', 'yhxtt', 'qmgrm', 'itstk', None, None), (7, 'ovjpb', 'jsamn', 'ykiri', 'dooty', None, None), (8, 'iouya', 'orsnj', 'amqte', 'mmlxq', None, None)]}, 'trx1': {'table_0': [(2, 'yqeYk', 'Fleyp', 'lqmjf', 'rwvep', None, None), (3, 'jmsdm', 'gsebz', 'puwtg', 'ltiio', None, None), (4, 'rqcbt', 'nrlrc', 'ethtu', 'VFMKH', None, None), (5, 'osujq', 'wzjaz', 'velvs', 'vrndr', None, None), (6, 'cnruc', 'yhxtt', 'qmgrm', 'itstk', None, None), (7, 'ovjpb', 'jsamn', 'ykiri', 'dooty', None, None)]}, 'trx2': {'table_0': [(1, 'bqpxh', 'ngooh', 'bazou', 'vejzl', None, None), (2, 'aykvc', 'odrff', 'lqmjf', 'rwvep', None, None), (3, 'jmsdm', 'gsebz', 'puwtg', 'ltiio', None, None), (4, 'rqcbt', 'nrlrc', 'ethtu', 'djsul', None, None), (5, 'osujq', 'wzjaz', 'velvs', 'vrndr', None, None), (6, 'cnruc', 'yhxtt', 'qmgrm', 'itstk', None, None), (8, 'iouya', 'orsnj', 'amqte', 'mmlxq', None, None)]}, 'serial': {'table_0': [(2, 'yqeYk', 'Fleyp', 'lqmjf', 'rwvep', None, None), (3, 'jmsdm', 'gsebz', 'puwtg', 'ltiio', None, None), (4, 'rqcbt', 'nrlrc', 'ethtu', 'VFMKH', None, None), (5, 'osujq', 'wzjaz', 'velvs', 'vrndr', None, None), (6, 'cnruc', 'yhxtt', 'qmgrm', 'itstk', None, None), (7, 'ovjpb', 'jsamn', 'ykiri', 'dooty', None, None)]}}
2025-02-05 23:47:49,879 - 
2025-02-05 23:47:49,891 - iter: 90
2025-02-05 23:47:51,355 - table table_0 has 5 rows
2025-02-05 23:47:51,355 - trx1_start_id: 1
2025-02-05 23:47:51,355 - trx1_end_id: 4
2025-02-05 23:47:51,356 - trx1_exclusive_start_id: 1
2025-02-05 23:47:51,356 - trx1_exclusive_end_id: 2
2025-02-05 23:47:51,356 - trx1_exclusive_ids: [1, 2]
2025-02-05 23:47:51,356 - trx2_start_id: 3
2025-02-05 23:47:51,356 - trx2_end_id: 5
2025-02-05 23:47:51,356 - trx2_exclusive_start_id: 5
2025-02-05 23:47:51,356 - trx2_exclusive_end_id: 5
2025-02-05 23:47:51,356 - trx2_exclusive_ids: [5]
2025-02-05 23:47:51,356 - intersection_ids: [3, 4]
2025-02-05 23:47:51,356 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4], 'trx2_lock_row_ids': [3, 4, 5], 'intersection_row_ids': [3, 4]}
2025-02-05 23:47:51,356 - lock_same_resource: True
2025-02-05 23:47:51,356 - 
2025-02-05 23:47:51,356 - intersection phase1
2025-02-05 23:47:51,359 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 23:47:51,360 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:51,360 - params: {'v1': '1', 'v2': '4', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:47:51,362 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=3, is_continuous=True, range_end_idx=5
2025-02-05 23:47:51,363 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:51,363 - params: {'v1': '3', 'v2': '5', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:47:51,364 - intersection phase1 end
2025-02-05 23:47:51,364 - 
2025-02-05 23:47:51,364 - intersection phase2
2025-02-05 23:47:51,364 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:47:51,364 - 事务2在第二阶段自己加的锁: II
2025-02-05 23:47:51,364 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:47:51,365 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:47:51,368 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=1, is_continuous=True, range_end_idx=2
2025-02-05 23:47:51,369 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:47:51,370 - params: {'v1': '1', 'v2': '2', 'select_cols': 'id, col_1', 'table': 'table_0'}
2025-02-05 23:47:51,373 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:47:51,375 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:47:51,375 - params: {'set_expr': "col_3 = 23.99, col_0 = 'rSVsb', col_1 = 'WEhIS', col_2 = 68.59", 'v1': '5', 'v2': '5', 'table': 'table_0'}
2025-02-05 23:47:51,375 - intersection phase2 end
2025-02-05 23:47:51,376 - 
2025-02-05 23:47:51,376 - intersection phase3
2025-02-05 23:47:51,379 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:47:51,380 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:47:51,380 - params: {'set_expr': "col_2 = 65.63, col_0 = 'GYELK', col_3 = 95.3, col_1 = 'KgIxy'", 'cond': "(id = 5) AND (col_0 = 'vpgki') AND (col_2 = 93.02) AND (col_3 = 32.33)", 'table': 'table_0'}
2025-02-05 23:47:51,384 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:47:51,386 - needed_params: {'cond', 'table'}
2025-02-05 23:47:51,386 - params: {'cond': "(col_2 = 8.4) AND (col_1 = 'imzqj')", 'table': 'table_0'}
2025-02-05 23:47:51,386 - intersection phase3 end
2025-02-05 23:47:51,386 - 
2025-02-05 23:47:51,386 - 生成死锁事务序列成功如下
2025-02-05 23:47:51,386 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 5 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_3 = 23.99, col_0 = 'rSVsb', col_1 = 'WEhIS', col_2 = 68.59 WHERE id BETWEEN 5 AND 5"), (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE'), (2, "DELETE FROM table_0 WHERE (col_2 = 8.4) AND (col_1 = 'imzqj')"), (1, "UPDATE table_0 SET col_2 = 65.63, col_0 = 'GYELK', col_3 = 95.3, col_1 = 'KgIxy' WHERE (id = 5) AND (col_0 = 'vpgki') AND (col_2 = 93.02) AND (col_3 = 32.33)"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:47:52,938 - 创建事务1连接成功
2025-02-05 23:47:52,939 - 执行事务1语句: BEGIN
2025-02-05 23:47:52,940 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE
2025-02-05 23:47:52,942 - 执行事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:47:52,943 - 执行事务1语句: UPDATE table_0 SET col_2 = 65.63, col_0 = 'GYELK', col_3 = 95.3, col_1 = 'KgIxy' WHERE (id = 5) AND (col_0 = 'vpgki') AND (col_2 = 93.02) AND (col_3 = 32.33)
2025-02-05 23:47:52,943 - 执行事务1语句: COMMIT;
2025-02-05 23:47:52,947 - 执行事务1成功
2025-02-05 23:47:55,565 - 恢复初始状态成功
2025-02-05 23:47:56,329 - 创建事务2连接成功
2025-02-05 23:47:56,330 - 执行事务2语句: BEGIN
2025-02-05 23:47:56,332 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 5 LOCK IN SHARE MODE
2025-02-05 23:47:56,332 - 执行事务2语句: UPDATE table_0 SET col_3 = 23.99, col_0 = 'rSVsb', col_1 = 'WEhIS', col_2 = 68.59 WHERE id BETWEEN 5 AND 5
2025-02-05 23:47:56,333 - 执行事务2语句: DELETE FROM table_0 WHERE (col_2 = 8.4) AND (col_1 = 'imzqj')
2025-02-05 23:47:56,335 - 执行事务2语句: COMMIT;
2025-02-05 23:47:56,339 - 执行事务2成功
2025-02-05 23:48:01,267 - 
2025-02-05 23:48:01,267 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE', <Thread(Thread-641, started 40140)>, 1738770481.2672455)}
2025-02-05 23:48:01,372 - stmt_idx: 2, status: success, result: None
2025-02-05 23:48:01,372 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE
2025-02-05 23:48:01,372 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:48:01,372 - 
2025-02-05 23:48:01,482 - 
2025-02-05 23:48:01,482 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 5 LOCK IN SHARE MODE', <Thread(Thread-642, started 41888)>, 1738770481.4822292)}
2025-02-05 23:48:01,591 - stmt_idx: 3, status: success, result: None
2025-02-05 23:48:01,591 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 3 AND 5 LOCK IN SHARE MODE
2025-02-05 23:48:01,592 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:48:01,592 - 
2025-02-05 23:48:01,697 - 
2025-02-05 23:48:01,698 - 执行前idx: 5, pending_stmts: {4: (2, "UPDATE table_0 SET col_3 = 23.99, col_0 = 'rSVsb', col_1 = 'WEhIS', col_2 = 68.59 WHERE id BETWEEN 5 AND 5", <Thread(Thread-643, started 43732)>, 1738770481.6978762)}
2025-02-05 23:48:01,804 - stmt_idx: 4, status: success, result: None
2025-02-05 23:48:01,804 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 23.99, col_0 = 'rSVsb', col_1 = 'WEhIS', col_2 = 68.59 WHERE id BETWEEN 5 AND 5
2025-02-05 23:48:01,804 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:48:01,804 - 
2025-02-05 23:48:01,909 - 
2025-02-05 23:48:01,911 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-644, started 29024)>, 1738770481.9099305)}
2025-02-05 23:48:02,019 - wait for lock, trx_id: 1, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:48:02,019 - 执行后idx: 6, pending_stmts: {5: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-644, started 29024)>, 1738770481.9099305)}
2025-02-05 23:48:02,019 - 
2025-02-05 23:48:02,124 - 
2025-02-05 23:48:02,125 - 执行前idx: 7, pending_stmts: {5: (1, 'SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE', <Thread(Thread-644, started 29024)>, 1738770481.9099305), 6: (2, "DELETE FROM table_0 WHERE (col_2 = 8.4) AND (col_1 = 'imzqj')", <Thread(Thread-645, started 20948)>, 1738770482.1248932)}
2025-02-05 23:48:02,127 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:48:02,233 - stmt_idx: 5, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:48:02,233 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_1 FROM table_0 WHERE id BETWEEN 1 AND 2 FOR UPDATE
2025-02-05 23:48:02,233 - 错误: dictionary changed size during iteration
2025-02-05 23:48:02,237 - 序列遍历完成，开始查看剩余阻塞的语句：{6: (2, "DELETE FROM table_0 WHERE (col_2 = 8.4) AND (col_1 = 'imzqj')", <Thread(Thread-645, stopped 20948)>, 1738770482.1248932)}
2025-02-05 23:48:02,237 - 
2025-02-05 23:48:02,237 - 执行前idx: 10, pending_stmts: {6: (2, "DELETE FROM table_0 WHERE (col_2 = 8.4) AND (col_1 = 'imzqj')", <Thread(Thread-645, stopped 20948)>, 1738770482.1248932)}
2025-02-05 23:48:02,338 - stmt_idx: 6, status: success, result: None
2025-02-05 23:48:02,338 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_2 = 8.4) AND (col_1 = 'imzqj')
2025-02-05 23:48:02,338 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:48:02,338 - 
2025-02-05 23:48:02,449 - 执行序列成功
2025-02-05 23:48:03,243 - is_atomic: True
2025-02-05 23:48:03,243 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:48:03,243 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 3 AND 5 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_3 = 23.99, col_0 = 'rSVsb', col_1 = 'WEhIS', col_2 = 68.59 WHERE id BETWEEN 5 AND 5"), (1, 'ROLLBACK'), (1, "--Skipped, trx_id: 1, stmt: UPDATE table_0 SET col_2 = 65.63, col_0 = 'GYELK', col_3 = 95.3, col_1 = 'KgIxy' WHERE (id = 5) AND (col_0 = 'vpgki') AND (col_2 = 93.02) AND (col_3 = 32.33)"), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, "DELETE FROM table_0 WHERE (col_2 = 8.4) AND (col_1 = 'imzqj')")]
2025-02-05 23:48:03,243 - snapshots: {'before': {'table_0': [(1, 'lqnoq', 'imzqj', 8.4, 7.52), (2, 'bcibr', 'vhdjx', 69.04, 25.37), (3, 'ntzhj', 'chqlm', 12.2, 1.62), (4, 'etdlr', 'iyohu', 63.52, 60.1), (5, 'vpgki', 'vjzmn', 93.02, 32.33)]}, 'trx1': {'table_0': [(1, 'lqnoq', 'imzqj', 8.4, 7.52), (2, 'bcibr', 'vhdjx', 69.04, 25.37), (3, 'ntzhj', 'chqlm', 12.2, 1.62), (4, 'etdlr', 'iyohu', 63.52, 60.1), (5, 'vpgki', 'vjzmn', 93.02, 32.33)]}, 'trx2': {'table_0': [(2, 'bcibr', 'vhdjx', 69.04, 25.37), (3, 'ntzhj', 'chqlm', 12.2, 1.62), (4, 'etdlr', 'iyohu', 63.52, 60.1), (5, 'rSVsb', 'WEhIS', 68.59, 23.99)]}, 'serial': {'table_0': [(2, 'bcibr', 'vhdjx', 69.04, 25.37), (3, 'ntzhj', 'chqlm', 12.2, 1.62), (4, 'etdlr', 'iyohu', 63.52, 60.1), (5, 'rSVsb', 'WEhIS', 68.59, 23.99)]}}
2025-02-05 23:48:03,243 - 
2025-02-05 23:48:03,254 - iter: 91
2025-02-05 23:48:04,717 - table table_0 has 5 rows
2025-02-05 23:48:04,717 - res_dict: {'trx1_lock_row_ids': [5], 'trx2_lock_row_ids': [1, 2, 3, 4], 'intersection_row_ids': []}
2025-02-05 23:48:04,717 - lock_same_resource: False
2025-02-05 23:48:04,717 - 
2025-02-05 23:48:04,717 - non intersection phase1
2025-02-05 23:48:04,718 - 事务1在第一阶段自己加的锁: S
2025-02-05 23:48:04,718 - 事务2在第一阶段自己加的锁: S
2025-02-05 23:48:04,718 - 事务1在第二阶段请求对方资源的锁: X
2025-02-05 23:48:04,718 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:48:04,721 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:48:04,722 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:04,722 - params: {'cond': '(col_1 = 61) AND (col_2 = 58.84)', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:48:04,724 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=1, is_continuous=True, range_end_idx=4
2025-02-05 23:48:04,727 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:04,727 - params: {'v1': '1', 'v2': '4', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:48:04,727 - non intersection phase1 end
2025-02-05 23:48:04,727 - 
2025-02-05 23:48:04,727 - non intersection phase2
2025-02-05 23:48:04,731 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=2, is_continuous=True, range_end_idx=4
2025-02-05 23:48:04,732 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:04,732 - params: {'v1': '2', 'v2': '4', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:48:04,734 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:48:04,736 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:04,736 - params: {'cond': '(col_2 = 58.84) AND (col_1 = 61)', 'select_cols': 'id, col_0, col_1, col_2', 'table': 'table_0'}
2025-02-05 23:48:04,737 - non intersection phase2 end
2025-02-05 23:48:04,737 - 
2025-02-05 23:48:04,737 - 生成死锁事务序列成功如下
2025-02-05 23:48:04,737 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 61) AND (col_2 = 58.84) LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 58.84) AND (col_1 = 61) FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:48:06,301 - 创建事务1连接成功
2025-02-05 23:48:06,302 - 执行事务1语句: BEGIN
2025-02-05 23:48:06,303 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 61) AND (col_2 = 58.84) LOCK IN SHARE MODE
2025-02-05 23:48:06,304 - 执行事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE
2025-02-05 23:48:06,304 - 执行事务1语句: COMMIT;
2025-02-05 23:48:06,309 - 执行事务1成功
2025-02-05 23:48:08,934 - 恢复初始状态成功
2025-02-05 23:48:09,702 - 创建事务2连接成功
2025-02-05 23:48:09,703 - 执行事务2语句: BEGIN
2025-02-05 23:48:09,705 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE
2025-02-05 23:48:09,705 - 执行事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 58.84) AND (col_1 = 61) FOR UPDATE
2025-02-05 23:48:09,706 - 执行事务2语句: COMMIT;
2025-02-05 23:48:09,710 - 执行事务2成功
2025-02-05 23:48:14,664 - 
2025-02-05 23:48:14,665 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 61) AND (col_2 = 58.84) LOCK IN SHARE MODE', <Thread(Thread-646, started 37992)>, 1738770494.6646807)}
2025-02-05 23:48:14,769 - stmt_idx: 2, status: success, result: None
2025-02-05 23:48:14,769 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 61) AND (col_2 = 58.84) LOCK IN SHARE MODE
2025-02-05 23:48:14,769 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:48:14,769 - 
2025-02-05 23:48:14,878 - 
2025-02-05 23:48:14,879 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE', <Thread(Thread-647, started 7628)>, 1738770494.8785768)}
2025-02-05 23:48:14,987 - stmt_idx: 3, status: success, result: None
2025-02-05 23:48:14,987 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE
2025-02-05 23:48:14,987 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:48:14,987 - 
2025-02-05 23:48:15,095 - 
2025-02-05 23:48:15,095 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE', <Thread(Thread-648, started 9096)>, 1738770495.0952368)}
2025-02-05 23:48:15,203 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE
2025-02-05 23:48:15,203 - 执行后idx: 5, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE', <Thread(Thread-648, started 9096)>, 1738770495.0952368)}
2025-02-05 23:48:15,203 - 
2025-02-05 23:48:15,307 - 
2025-02-05 23:48:15,307 - 执行前idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE', <Thread(Thread-648, started 9096)>, 1738770495.0952368), 5: (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 58.84) AND (col_1 = 61) FOR UPDATE', <Thread(Thread-649, started 30824)>, 1738770495.3078628)}
2025-02-05 23:48:15,415 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE
2025-02-05 23:48:15,528 - stmt_idx: 5, status: success, result: None
2025-02-05 23:48:15,528 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 58.84) AND (col_1 = 61) FOR UPDATE
2025-02-05 23:48:15,528 - 执行后idx: 6, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE', <Thread(Thread-648, started 9096)>, 1738770495.0952368)}
2025-02-05 23:48:15,528 - 
2025-02-05 23:48:15,636 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE', <Thread(Thread-648, started 9096)>, 1738770495.0952368)}
2025-02-05 23:48:15,636 - 
2025-02-05 23:48:15,637 - 执行前idx: 8, pending_stmts: {4: (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE', <Thread(Thread-648, stopped 9096)>, 1738770495.0952368)}
2025-02-05 23:48:15,746 - stmt_idx: 4, status: success, result: None
2025-02-05 23:48:15,746 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE
2025-02-05 23:48:15,746 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE
2025-02-05 23:48:15,746 - 执行后idx: 8, pending_stmts: {7: (1, 'COMMIT', <Thread(Thread-650, started 35428)>, 1738770495.7460032)}
2025-02-05 23:48:15,746 - 
2025-02-05 23:48:15,854 - 序列遍历完成，开始查看剩余阻塞的语句：{7: (1, 'COMMIT', <Thread(Thread-650, stopped 35428)>, 1738770495.7460032)}
2025-02-05 23:48:15,854 - 
2025-02-05 23:48:15,855 - 执行前idx: 8, pending_stmts: {7: (1, 'COMMIT', <Thread(Thread-650, stopped 35428)>, 1738770495.7460032)}
2025-02-05 23:48:15,964 - stmt_idx: 7, status: success, result: None
2025-02-05 23:48:15,964 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:48:15,964 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:48:15,964 - 
2025-02-05 23:48:16,073 - 执行序列成功
2025-02-05 23:48:16,858 - is_atomic: True
2025-02-05 23:48:16,858 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:48:16,858 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_1 = 61) AND (col_2 = 58.84) LOCK IN SHARE MODE'), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 1 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE (col_2 = 58.84) AND (col_1 = 61) FOR UPDATE'), (2, 'COMMIT'), (1, 'SELECT id, col_0, col_1, col_2 FROM table_0 WHERE id BETWEEN 2 AND 4 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 23:48:16,858 - snapshots: {'before': {'table_0': [(1, 45.65, 46, 85.41), (2, 31.8, 52, 77.53), (3, 20.33, 25, 47.4), (4, 19.45, 94, 70.29), (5, 81.84, 61, 58.84)]}, 'trx1': {'table_0': [(1, 45.65, 46, 85.41), (2, 31.8, 52, 77.53), (3, 20.33, 25, 47.4), (4, 19.45, 94, 70.29), (5, 81.84, 61, 58.84)]}, 'trx2': {'table_0': [(1, 45.65, 46, 85.41), (2, 31.8, 52, 77.53), (3, 20.33, 25, 47.4), (4, 19.45, 94, 70.29), (5, 81.84, 61, 58.84)]}, 'serial': {'table_0': [(1, 45.65, 46, 85.41), (2, 31.8, 52, 77.53), (3, 20.33, 25, 47.4), (4, 19.45, 94, 70.29), (5, 81.84, 61, 58.84)]}}
2025-02-05 23:48:16,858 - 
2025-02-05 23:48:16,869 - iter: 92
2025-02-05 23:48:18,367 - table table_0 has 12 rows
2025-02-05 23:48:18,368 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
2025-02-05 23:48:18,368 - trx2_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
2025-02-05 23:48:18,368 - intersection_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
2025-02-05 23:48:18,368 - trx1_exclusive_ids: []
2025-02-05 23:48:18,368 - trx2_exclusive_ids: []
2025-02-05 23:48:18,368 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'trx2_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'intersection_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}
2025-02-05 23:48:18,368 - lock_same_resource: True
2025-02-05 23:48:18,368 - 
2025-02-05 23:48:18,368 - intersection phase1
2025-02-05 23:48:18,371 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,372 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:18,373 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 23:48:18,375 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,376 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,377 - params: {'cond': '(id = 2)', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:48:18,379 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,381 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,382 - params: {'cond': '(id = 3)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:18,385 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,386 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:18,386 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,389 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,390 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,390 - params: {'cond': '(id = 5)', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:48:18,393 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,395 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,395 - params: {'cond': "(col_2 = 'flppx') AND (col_1 = 'qupcy') AND (col_0 = 22)", 'select_cols': 'id, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,401 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,402 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:18,402 - params: {'v1': '7', 'v2': '7', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:48:18,406 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,408 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,408 - params: {'cond': "(col_1 = 'tqjgn') AND (col_0 = 66)", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:18,411 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,412 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,413 - params: {'cond': "(col_1 = 'uqynm') AND (col_3 = 'gwjfn') AND (col_2 = 'punqd')", 'select_cols': 'id, col_0, col_2', 'table': 'table_0'}
2025-02-05 23:48:18,417 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,418 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,418 - params: {'cond': "(col_1 = 'bscpf') AND (col_0 = 93)", 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:48:18,422 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,423 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,423 - params: {'cond': '(col_0 = 78)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:18,427 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,429 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:18,429 - params: {'v1': '12', 'v2': '12', 'select_cols': 'id, col_0, col_1, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,432 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,434 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:18,434 - params: {'v1': '1', 'v2': '1', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:18,437 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,438 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,438 - params: {'cond': "(col_1 = 'yxnmi')", 'select_cols': 'col_1, col_2', 'table': 'table_0'}
2025-02-05 23:48:18,442 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,443 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,443 - params: {'cond': '(id = 3)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:18,446 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,448 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,448 - params: {'cond': '(id = 4)', 'select_cols': 'id, col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,451 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,453 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,453 - params: {'cond': '(id = 5)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:18,456 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,458 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:18,458 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,460 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,461 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,462 - params: {'cond': '(id = 7)', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,464 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,465 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,465 - params: {'cond': "(col_3 = 'ivxrx') AND (col_0 = 66) AND (col_1 = 'tqjgn')", 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,467 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,468 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:18,468 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,471 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,472 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,472 - params: {'cond': '(id = 10)', 'select_cols': 'col_2', 'table': 'table_0'}
2025-02-05 23:48:18,474 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,475 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:18,475 - params: {'v1': '11', 'v2': '11', 'select_cols': 'id, col_0, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,478 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,479 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:18,479 - params: {'cond': "(col_3 = 'mzynj') AND (col_0 = 79)", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:18,479 - intersection phase1 end
2025-02-05 23:48:18,479 - 
2025-02-05 23:48:18,479 - intersection phase2
2025-02-05 23:48:18,480 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:48:18,480 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:48:18,480 - 事务1在第三阶段请求对方资源的锁: II
2025-02-05 23:48:18,480 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 23:48:18,480 - intersection phase2 end
2025-02-05 23:48:18,480 - 
2025-02-05 23:48:18,480 - intersection phase3
2025-02-05 23:48:18,483 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,484 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:48:18,484 - params: {'vals': "NULL, 21, 'Pbmbc', 'zWZaX', 'WHFdn'", 'insert_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:18,487 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:48:18,488 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:48:18,488 - params: {'set_expr': "col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS'", 'cond': "(id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)", 'table': 'table_0'}
2025-02-05 23:48:18,488 - intersection phase3 end
2025-02-05 23:48:18,488 - 
2025-02-05 23:48:18,488 - 生成死锁事务序列成功如下
2025-02-05 23:48:18,488 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (2, "SELECT col_1, col_2 FROM table_0 WHERE (col_1 = 'yxnmi') LOCK IN SHARE MODE"), (2, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ivxrx') AND (col_0 = 66) AND (col_1 = 'tqjgn') LOCK IN SHARE MODE"), (1, "SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'flppx') AND (col_1 = 'qupcy') AND (col_0 = 22) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_1 = 'tqjgn') AND (col_0 = 66) LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_2 FROM table_0 WHERE (col_1 = 'uqynm') AND (col_3 = 'gwjfn') AND (col_2 = 'punqd') LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT col_2 FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, "SELECT * FROM table_0 WHERE (col_3 = 'mzynj') AND (col_0 = 79) LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 'bscpf') AND (col_0 = 93) LOCK IN SHARE MODE"), (1, 'SELECT * FROM table_0 WHERE (col_0 = 78) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (2, "UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)"), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 21, 'Pbmbc', 'zWZaX', 'WHFdn')"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:48:20,076 - 创建事务1连接成功
2025-02-05 23:48:20,078 - 执行事务1语句: BEGIN
2025-02-05 23:48:20,079 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:48:20,080 - 执行事务1语句: SELECT id FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:48:20,080 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 23:48:20,081 - 执行事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:48:20,082 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:48:20,083 - 执行事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'flppx') AND (col_1 = 'qupcy') AND (col_0 = 22) LOCK IN SHARE MODE
2025-02-05 23:48:20,084 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:48:20,084 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'tqjgn') AND (col_0 = 66) LOCK IN SHARE MODE
2025-02-05 23:48:20,085 - 执行事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (col_1 = 'uqynm') AND (col_3 = 'gwjfn') AND (col_2 = 'punqd') LOCK IN SHARE MODE
2025-02-05 23:48:20,086 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 'bscpf') AND (col_0 = 93) LOCK IN SHARE MODE
2025-02-05 23:48:20,086 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_0 = 78) LOCK IN SHARE MODE
2025-02-05 23:48:20,087 - 执行事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:48:20,088 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 21, 'Pbmbc', 'zWZaX', 'WHFdn')
2025-02-05 23:48:20,090 - 执行事务1语句: COMMIT;
2025-02-05 23:48:20,094 - 执行事务1成功
2025-02-05 23:48:22,713 - 恢复初始状态成功
2025-02-05 23:48:23,507 - 创建事务2连接成功
2025-02-05 23:48:23,508 - 执行事务2语句: BEGIN
2025-02-05 23:48:23,509 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:48:23,510 - 执行事务2语句: SELECT col_1, col_2 FROM table_0 WHERE (col_1 = 'yxnmi') LOCK IN SHARE MODE
2025-02-05 23:48:23,511 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 23:48:23,511 - 执行事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 23:48:23,512 - 执行事务2语句: SELECT * FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:48:23,513 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:48:23,513 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 23:48:23,514 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ivxrx') AND (col_0 = 66) AND (col_1 = 'tqjgn') LOCK IN SHARE MODE
2025-02-05 23:48:23,515 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:48:23,516 - 执行事务2语句: SELECT col_2 FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE
2025-02-05 23:48:23,516 - 执行事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 23:48:23,517 - 执行事务2语句: SELECT * FROM table_0 WHERE (col_3 = 'mzynj') AND (col_0 = 79) LOCK IN SHARE MODE
2025-02-05 23:48:23,518 - 执行事务2语句: UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)
2025-02-05 23:48:23,520 - 执行事务2语句: COMMIT;
2025-02-05 23:48:23,524 - 执行事务2成功
2025-02-05 23:48:28,481 - 
2025-02-05 23:48:28,481 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-651, started 44740)>, 1738770508.481327)}
2025-02-05 23:48:28,595 - stmt_idx: 2, status: success, result: None
2025-02-05 23:48:28,595 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:48:28,595 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:48:28,595 - 
2025-02-05 23:48:28,704 - 
2025-02-05 23:48:28,704 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE', <Thread(Thread-652, started 43448)>, 1738770508.7045205)}
2025-02-05 23:48:28,812 - stmt_idx: 3, status: success, result: None
2025-02-05 23:48:28,812 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE
2025-02-05 23:48:28,812 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:48:28,812 - 
2025-02-05 23:48:28,927 - 
2025-02-05 23:48:28,928 - 执行前idx: 5, pending_stmts: {4: (1, 'SELECT id FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-653, started 30516)>, 1738770508.9275055)}
2025-02-05 23:48:29,035 - stmt_idx: 4, status: success, result: None
2025-02-05 23:48:29,035 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:48:29,035 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:48:29,035 - 
2025-02-05 23:48:29,144 - 
2025-02-05 23:48:29,145 - 执行前idx: 6, pending_stmts: {5: (1, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-654, started 33224)>, 1738770509.144861)}
2025-02-05 23:48:29,251 - stmt_idx: 5, status: success, result: None
2025-02-05 23:48:29,251 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 23:48:29,252 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:48:29,252 - 
2025-02-05 23:48:29,357 - 
2025-02-05 23:48:29,357 - 执行前idx: 7, pending_stmts: {6: (2, "SELECT col_1, col_2 FROM table_0 WHERE (col_1 = 'yxnmi') LOCK IN SHARE MODE", <Thread(Thread-655, started 31700)>, 1738770509.3575566)}
2025-02-05 23:48:29,462 - stmt_idx: 6, status: success, result: None
2025-02-05 23:48:29,462 - 成功执行序列中事务2语句: SELECT col_1, col_2 FROM table_0 WHERE (col_1 = 'yxnmi') LOCK IN SHARE MODE
2025-02-05 23:48:29,462 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:48:29,462 - 
2025-02-05 23:48:29,573 - 
2025-02-05 23:48:29,573 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE', <Thread(Thread-656, started 10784)>, 1738770509.5721774)}
2025-02-05 23:48:29,679 - stmt_idx: 7, status: success, result: None
2025-02-05 23:48:29,679 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE
2025-02-05 23:48:29,679 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:48:29,680 - 
2025-02-05 23:48:29,784 - 
2025-02-05 23:48:29,784 - 执行前idx: 9, pending_stmts: {8: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-657, started 32508)>, 1738770509.7848654)}
2025-02-05 23:48:29,890 - stmt_idx: 8, status: success, result: None
2025-02-05 23:48:29,890 - 成功执行序列中事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 23:48:29,890 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:48:29,890 - 
2025-02-05 23:48:30,001 - 
2025-02-05 23:48:30,001 - 执行前idx: 10, pending_stmts: {9: (2, 'SELECT * FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-658, started 39564)>, 1738770510.0011957)}
2025-02-05 23:48:30,104 - stmt_idx: 9, status: success, result: None
2025-02-05 23:48:30,105 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:48:30,105 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:48:30,105 - 
2025-02-05 23:48:30,212 - 
2025-02-05 23:48:30,213 - 执行前idx: 11, pending_stmts: {10: (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-659, started 25472)>, 1738770510.212192)}
2025-02-05 23:48:30,318 - stmt_idx: 10, status: success, result: None
2025-02-05 23:48:30,318 - 成功执行序列中事务1语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:48:30,318 - 执行后idx: 11, pending_stmts: {}
2025-02-05 23:48:30,318 - 
2025-02-05 23:48:30,425 - 
2025-02-05 23:48:30,425 - 执行前idx: 12, pending_stmts: {11: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-660, started 33580)>, 1738770510.4253256)}
2025-02-05 23:48:30,530 - stmt_idx: 11, status: success, result: None
2025-02-05 23:48:30,530 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:48:30,530 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:48:30,530 - 
2025-02-05 23:48:30,638 - 
2025-02-05 23:48:30,639 - 执行前idx: 13, pending_stmts: {12: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE', <Thread(Thread-661, started 44272)>, 1738770510.6382916)}
2025-02-05 23:48:30,743 - stmt_idx: 12, status: success, result: None
2025-02-05 23:48:30,743 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE
2025-02-05 23:48:30,743 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:48:30,743 - 
2025-02-05 23:48:30,851 - 
2025-02-05 23:48:30,852 - 执行前idx: 14, pending_stmts: {13: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE', <Thread(Thread-662, started 13064)>, 1738770510.8512616)}
2025-02-05 23:48:30,960 - stmt_idx: 13, status: success, result: None
2025-02-05 23:48:30,960 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE
2025-02-05 23:48:30,960 - 执行后idx: 14, pending_stmts: {}
2025-02-05 23:48:30,960 - 
2025-02-05 23:48:31,067 - 
2025-02-05 23:48:31,068 - 执行前idx: 15, pending_stmts: {14: (2, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ivxrx') AND (col_0 = 66) AND (col_1 = 'tqjgn') LOCK IN SHARE MODE", <Thread(Thread-663, started 41900)>, 1738770511.0671556)}
2025-02-05 23:48:31,174 - stmt_idx: 14, status: success, result: None
2025-02-05 23:48:31,174 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ivxrx') AND (col_0 = 66) AND (col_1 = 'tqjgn') LOCK IN SHARE MODE
2025-02-05 23:48:31,174 - 执行后idx: 15, pending_stmts: {}
2025-02-05 23:48:31,174 - 
2025-02-05 23:48:31,281 - 
2025-02-05 23:48:31,281 - 执行前idx: 16, pending_stmts: {15: (1, "SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'flppx') AND (col_1 = 'qupcy') AND (col_0 = 22) LOCK IN SHARE MODE", <Thread(Thread-664, started 12776)>, 1738770511.2816436)}
2025-02-05 23:48:31,390 - stmt_idx: 15, status: success, result: None
2025-02-05 23:48:31,390 - 成功执行序列中事务1语句: SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'flppx') AND (col_1 = 'qupcy') AND (col_0 = 22) LOCK IN SHARE MODE
2025-02-05 23:48:31,390 - 执行后idx: 16, pending_stmts: {}
2025-02-05 23:48:31,390 - 
2025-02-05 23:48:31,499 - 
2025-02-05 23:48:31,500 - 执行前idx: 17, pending_stmts: {16: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-665, started 36428)>, 1738770511.4997716)}
2025-02-05 23:48:31,610 - stmt_idx: 16, status: success, result: None
2025-02-05 23:48:31,610 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:48:31,610 - 执行后idx: 17, pending_stmts: {}
2025-02-05 23:48:31,610 - 
2025-02-05 23:48:31,715 - 
2025-02-05 23:48:31,716 - 执行前idx: 18, pending_stmts: {17: (1, "SELECT * FROM table_0 WHERE (col_1 = 'tqjgn') AND (col_0 = 66) LOCK IN SHARE MODE", <Thread(Thread-666, started 22180)>, 1738770511.7157364)}
2025-02-05 23:48:31,822 - stmt_idx: 17, status: success, result: None
2025-02-05 23:48:31,823 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'tqjgn') AND (col_0 = 66) LOCK IN SHARE MODE
2025-02-05 23:48:31,823 - 执行后idx: 18, pending_stmts: {}
2025-02-05 23:48:31,823 - 
2025-02-05 23:48:31,930 - 
2025-02-05 23:48:31,930 - 执行前idx: 19, pending_stmts: {18: (1, "SELECT id, col_0, col_2 FROM table_0 WHERE (col_1 = 'uqynm') AND (col_3 = 'gwjfn') AND (col_2 = 'punqd') LOCK IN SHARE MODE", <Thread(Thread-667, started 8968)>, 1738770511.9300585)}
2025-02-05 23:48:32,036 - stmt_idx: 18, status: success, result: None
2025-02-05 23:48:32,036 - 成功执行序列中事务1语句: SELECT id, col_0, col_2 FROM table_0 WHERE (col_1 = 'uqynm') AND (col_3 = 'gwjfn') AND (col_2 = 'punqd') LOCK IN SHARE MODE
2025-02-05 23:48:32,036 - 执行后idx: 19, pending_stmts: {}
2025-02-05 23:48:32,036 - 
2025-02-05 23:48:32,142 - 
2025-02-05 23:48:32,143 - 执行前idx: 20, pending_stmts: {19: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-668, started 44412)>, 1738770512.1426237)}
2025-02-05 23:48:32,245 - stmt_idx: 19, status: success, result: None
2025-02-05 23:48:32,246 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:48:32,246 - 执行后idx: 20, pending_stmts: {}
2025-02-05 23:48:32,246 - 
2025-02-05 23:48:32,355 - 
2025-02-05 23:48:32,356 - 执行前idx: 21, pending_stmts: {20: (2, 'SELECT col_2 FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE', <Thread(Thread-669, started 31304)>, 1738770512.3554218)}
2025-02-05 23:48:32,461 - stmt_idx: 20, status: success, result: None
2025-02-05 23:48:32,461 - 成功执行序列中事务2语句: SELECT col_2 FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE
2025-02-05 23:48:32,461 - 执行后idx: 21, pending_stmts: {}
2025-02-05 23:48:32,461 - 
2025-02-05 23:48:32,569 - 
2025-02-05 23:48:32,570 - 执行前idx: 22, pending_stmts: {21: (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE', <Thread(Thread-670, started 25172)>, 1738770512.569623)}
2025-02-05 23:48:32,676 - stmt_idx: 21, status: success, result: None
2025-02-05 23:48:32,676 - 成功执行序列中事务2语句: SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE
2025-02-05 23:48:32,676 - 执行后idx: 22, pending_stmts: {}
2025-02-05 23:48:32,676 - 
2025-02-05 23:48:32,785 - 
2025-02-05 23:48:32,785 - 执行前idx: 23, pending_stmts: {22: (2, "SELECT * FROM table_0 WHERE (col_3 = 'mzynj') AND (col_0 = 79) LOCK IN SHARE MODE", <Thread(Thread-671, started 44500)>, 1738770512.7851295)}
2025-02-05 23:48:32,894 - stmt_idx: 22, status: success, result: None
2025-02-05 23:48:32,894 - 成功执行序列中事务2语句: SELECT * FROM table_0 WHERE (col_3 = 'mzynj') AND (col_0 = 79) LOCK IN SHARE MODE
2025-02-05 23:48:32,894 - 执行后idx: 23, pending_stmts: {}
2025-02-05 23:48:32,894 - 
2025-02-05 23:48:32,997 - 
2025-02-05 23:48:32,998 - 执行前idx: 24, pending_stmts: {23: (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 'bscpf') AND (col_0 = 93) LOCK IN SHARE MODE", <Thread(Thread-672, started 42520)>, 1738770512.9978173)}
2025-02-05 23:48:33,102 - stmt_idx: 23, status: success, result: None
2025-02-05 23:48:33,103 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 'bscpf') AND (col_0 = 93) LOCK IN SHARE MODE
2025-02-05 23:48:33,103 - 执行后idx: 24, pending_stmts: {}
2025-02-05 23:48:33,103 - 
2025-02-05 23:48:33,209 - 
2025-02-05 23:48:33,210 - 执行前idx: 25, pending_stmts: {24: (1, 'SELECT * FROM table_0 WHERE (col_0 = 78) LOCK IN SHARE MODE', <Thread(Thread-673, started 41916)>, 1738770513.2097225)}
2025-02-05 23:48:33,316 - stmt_idx: 24, status: success, result: None
2025-02-05 23:48:33,316 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_0 = 78) LOCK IN SHARE MODE
2025-02-05 23:48:33,316 - 执行后idx: 25, pending_stmts: {}
2025-02-05 23:48:33,316 - 
2025-02-05 23:48:33,422 - 
2025-02-05 23:48:33,423 - 执行前idx: 26, pending_stmts: {25: (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-674, started 42336)>, 1738770513.4228046)}
2025-02-05 23:48:33,530 - stmt_idx: 25, status: success, result: None
2025-02-05 23:48:33,530 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:48:33,530 - 执行后idx: 26, pending_stmts: {}
2025-02-05 23:48:33,530 - 
2025-02-05 23:48:33,633 - 
2025-02-05 23:48:33,633 - 执行前idx: 27, pending_stmts: {26: (2, "UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)", <Thread(Thread-675, started 43868)>, 1738770513.6320817)}
2025-02-05 23:48:33,738 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)
2025-02-05 23:48:33,739 - 执行后idx: 27, pending_stmts: {26: (2, "UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)", <Thread(Thread-675, started 43868)>, 1738770513.6320817)}
2025-02-05 23:48:33,739 - 
2025-02-05 23:48:33,843 - 
2025-02-05 23:48:33,844 - 执行前idx: 28, pending_stmts: {26: (2, "UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)", <Thread(Thread-675, started 43868)>, 1738770513.6320817), 27: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 21, 'Pbmbc', 'zWZaX', 'WHFdn')", <Thread(Thread-676, started 37892)>, 1738770513.8439605)}
2025-02-05 23:48:33,954 - wait for lock, trx_id: 2, stmt: UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)
2025-02-05 23:48:34,060 - stmt_idx: 27, status: success, result: None
2025-02-05 23:48:34,060 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 21, 'Pbmbc', 'zWZaX', 'WHFdn')
2025-02-05 23:48:34,060 - 执行后idx: 28, pending_stmts: {26: (2, "UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)", <Thread(Thread-675, started 43868)>, 1738770513.6320817)}
2025-02-05 23:48:34,060 - 
2025-02-05 23:48:34,167 - 序列遍历完成，开始查看剩余阻塞的语句：{26: (2, "UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)", <Thread(Thread-675, started 43868)>, 1738770513.6320817)}
2025-02-05 23:48:34,167 - 
2025-02-05 23:48:34,167 - 执行前idx: 30, pending_stmts: {26: (2, "UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)", <Thread(Thread-675, stopped 43868)>, 1738770513.6320817)}
2025-02-05 23:48:34,268 - stmt_idx: 26, status: success, result: None
2025-02-05 23:48:34,269 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)
2025-02-05 23:48:34,269 - 结束了阻塞，blocked_trx_id: 2, stmt: UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)
2025-02-05 23:48:34,270 - 执行后idx: 30, pending_stmts: {28: (2, 'COMMIT', <Thread(Thread-677, started 35028)>, 1738770514.269488)}
2025-02-05 23:48:34,270 - 
2025-02-05 23:48:34,373 - 序列遍历完成，开始查看剩余阻塞的语句：{28: (2, 'COMMIT', <Thread(Thread-677, stopped 35028)>, 1738770514.269488)}
2025-02-05 23:48:34,373 - 
2025-02-05 23:48:34,374 - 执行前idx: 30, pending_stmts: {28: (2, 'COMMIT', <Thread(Thread-677, stopped 35028)>, 1738770514.269488)}
2025-02-05 23:48:34,480 - stmt_idx: 28, status: success, result: None
2025-02-05 23:48:34,480 - 成功执行序列中事务2语句: COMMIT
2025-02-05 23:48:34,480 - 执行后idx: 30, pending_stmts: {}
2025-02-05 23:48:34,480 - 
2025-02-05 23:48:34,585 - 执行序列成功
2025-02-05 23:48:35,358 - is_atomic: True
2025-02-05 23:48:35,358 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:48:35,358 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2 FROM table_0 WHERE id BETWEEN 1 AND 1 LOCK IN SHARE MODE'), (1, 'SELECT id FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (2, "SELECT col_1, col_2 FROM table_0 WHERE (col_1 = 'yxnmi') LOCK IN SHARE MODE"), (2, 'SELECT * FROM table_0 WHERE (id = 3) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (2, 'SELECT * FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 7) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 5) LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (col_3 = 'ivxrx') AND (col_0 = 66) AND (col_1 = 'tqjgn') LOCK IN SHARE MODE"), (1, "SELECT id, col_2, col_3 FROM table_0 WHERE (col_2 = 'flppx') AND (col_1 = 'qupcy') AND (col_0 = 22) LOCK IN SHARE MODE"), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "SELECT * FROM table_0 WHERE (col_1 = 'tqjgn') AND (col_0 = 66) LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_2 FROM table_0 WHERE (col_1 = 'uqynm') AND (col_3 = 'gwjfn') AND (col_2 = 'punqd') LOCK IN SHARE MODE"), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, 'SELECT col_2 FROM table_0 WHERE (id = 10) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_2, col_3 FROM table_0 WHERE id BETWEEN 11 AND 11 LOCK IN SHARE MODE'), (2, "SELECT * FROM table_0 WHERE (col_3 = 'mzynj') AND (col_0 = 79) LOCK IN SHARE MODE"), (1, "SELECT id, col_0, col_1 FROM table_0 WHERE (col_1 = 'bscpf') AND (col_0 = 93) LOCK IN SHARE MODE"), (1, 'SELECT * FROM table_0 WHERE (col_0 = 78) LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_3 FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3) VALUES (NULL, 21, 'Pbmbc', 'zWZaX', 'WHFdn')"), (1, 'COMMIT'), (2, "UPDATE table_0 SET col_3 = 'hVRTV', col_2 = 'jFvpm', col_0 = 65, col_1 = 'dnffS' WHERE (id = 11) AND (col_3 = 'rpoxs') AND (col_0 = 78)"), (2, 'COMMIT')]
2025-02-05 23:48:35,358 - snapshots: {'before': {'table_0': [(1, 19, 'dnbde', 'zcxnz', 'fpccv'), (2, 31, 'yxnmi', 'lvrym', 'ujxbd'), (3, 71, 'wxsfs', 'traoq', 'vvwyy'), (4, 75, 'lpuoe', 'dpzkn', 'pvpzt'), (5, 61, 'pxhds', 'vgbnm', 'utbsp'), (6, 22, 'qupcy', 'flppx', 'mwyqf'), (7, 66, 'fzolr', 'jhgmy', 'wbfqi'), (8, 66, 'tqjgn', 'dvokg', 'ivxrx'), (9, 24, 'uqynm', 'punqd', 'gwjfn'), (10, 93, 'bscpf', 'dtkpd', 'yujoz'), (11, 78, 'dtygn', 'ihdvv', 'rpoxs'), (12, 79, 'islqt', 'qdcqv', 'mzynj')]}, 'trx1': {'table_0': [(1, 19, 'dnbde', 'zcxnz', 'fpccv'), (2, 31, 'yxnmi', 'lvrym', 'ujxbd'), (3, 71, 'wxsfs', 'traoq', 'vvwyy'), (4, 75, 'lpuoe', 'dpzkn', 'pvpzt'), (5, 61, 'pxhds', 'vgbnm', 'utbsp'), (6, 22, 'qupcy', 'flppx', 'mwyqf'), (7, 66, 'fzolr', 'jhgmy', 'wbfqi'), (8, 66, 'tqjgn', 'dvokg', 'ivxrx'), (9, 24, 'uqynm', 'punqd', 'gwjfn'), (10, 93, 'bscpf', 'dtkpd', 'yujoz'), (11, 78, 'dtygn', 'ihdvv', 'rpoxs'), (12, 79, 'islqt', 'qdcqv', 'mzynj'), (13, 21, 'Pbmbc', 'zWZaX', 'WHFdn')]}, 'trx2': {'table_0': [(1, 19, 'dnbde', 'zcxnz', 'fpccv'), (2, 31, 'yxnmi', 'lvrym', 'ujxbd'), (3, 71, 'wxsfs', 'traoq', 'vvwyy'), (4, 75, 'lpuoe', 'dpzkn', 'pvpzt'), (5, 61, 'pxhds', 'vgbnm', 'utbsp'), (6, 22, 'qupcy', 'flppx', 'mwyqf'), (7, 66, 'fzolr', 'jhgmy', 'wbfqi'), (8, 66, 'tqjgn', 'dvokg', 'ivxrx'), (9, 24, 'uqynm', 'punqd', 'gwjfn'), (10, 93, 'bscpf', 'dtkpd', 'yujoz'), (11, 65, 'dnffS', 'jFvpm', 'hVRTV'), (12, 79, 'islqt', 'qdcqv', 'mzynj')]}, 'serial': {'table_0': [(1, 19, 'dnbde', 'zcxnz', 'fpccv'), (2, 31, 'yxnmi', 'lvrym', 'ujxbd'), (3, 71, 'wxsfs', 'traoq', 'vvwyy'), (4, 75, 'lpuoe', 'dpzkn', 'pvpzt'), (5, 61, 'pxhds', 'vgbnm', 'utbsp'), (6, 22, 'qupcy', 'flppx', 'mwyqf'), (7, 66, 'fzolr', 'jhgmy', 'wbfqi'), (8, 66, 'tqjgn', 'dvokg', 'ivxrx'), (9, 24, 'uqynm', 'punqd', 'gwjfn'), (10, 93, 'bscpf', 'dtkpd', 'yujoz'), (11, 65, 'dnffS', 'jFvpm', 'hVRTV'), (12, 79, 'islqt', 'qdcqv', 'mzynj'), (14, 21, 'Pbmbc', 'zWZaX', 'WHFdn')]}}
2025-02-05 23:48:35,358 - 
2025-02-05 23:48:35,370 - iter: 93
2025-02-05 23:48:36,890 - table table_0 has 10 rows
2025-02-05 23:48:36,890 - trx1_lock_row_ids: [1, 2, 4, 6, 7, 8, 10]
2025-02-05 23:48:36,890 - trx2_lock_row_ids: [2]
2025-02-05 23:48:36,890 - intersection_row_ids: [2]
2025-02-05 23:48:36,890 - trx1_exclusive_ids: [1, 4, 6, 7, 8, 10]
2025-02-05 23:48:36,890 - trx2_exclusive_ids: []
2025-02-05 23:48:36,890 - res_dict: {'trx1_lock_row_ids': [1, 2, 4, 6, 7, 8, 10], 'trx2_lock_row_ids': [2], 'intersection_row_ids': [2]}
2025-02-05 23:48:36,890 - lock_same_resource: True
2025-02-05 23:48:36,890 - 
2025-02-05 23:48:36,890 - intersection phase1
2025-02-05 23:48:36,893 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,894 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:36,894 - params: {'cond': '(id = 2)', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:36,898 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,900 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:48:36,901 - params: {'set_expr': 'col_3 = 59.42', 'cond': '(id = 2) AND (col_3 = 77.42)', 'table': 'table_0'}
2025-02-05 23:48:36,901 - intersection phase1 end
2025-02-05 23:48:36,901 - 
2025-02-05 23:48:36,901 - intersection phase2
2025-02-05 23:48:36,901 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:48:36,902 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:48:36,902 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:48:36,902 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 23:48:36,905 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,906 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:36,906 - params: {'cond': "(col_1 = 'fvwtu')", 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:48:36,910 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,911 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:36,911 - params: {'v1': '4', 'v2': '4', 'select_cols': 'id, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:48:36,917 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,919 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:36,919 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_1, col_2, col_3, col_982', 'table': 'table_0'}
2025-02-05 23:48:36,923 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,925 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:36,925 - params: {'v1': '7', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:36,929 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,930 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:36,931 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id, col_1, col_2, col_3, col_982', 'table': 'table_0'}
2025-02-05 23:48:36,935 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,936 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:36,936 - params: {'v1': '10', 'v2': '10', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:48:36,937 - intersection phase2 end
2025-02-05 23:48:36,937 - 
2025-02-05 23:48:36,937 - intersection phase3
2025-02-05 23:48:36,939 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:48:36,941 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:36,941 - params: {'cond': '(id = 2)', 'select_cols': 'col_3', 'table': 'table_0'}
2025-02-05 23:48:36,941 - intersection phase3 end
2025-02-05 23:48:36,941 - 
2025-02-05 23:48:36,941 - 生成死锁事务序列成功如下
2025-02-05 23:48:36,941 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_3 = 59.42 WHERE (id = 2) AND (col_3 = 77.42)'), (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, "SELECT id FROM table_0 WHERE (col_1 = 'fvwtu') LOCK IN SHARE MODE"), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT col_3 FROM table_0 WHERE (id = 2) FOR UPDATE'), (2, None), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:48:38,497 - 创建事务1连接成功
2025-02-05 23:48:38,498 - 执行事务1语句: BEGIN
2025-02-05 23:48:38,500 - 执行事务1语句: SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:48:38,500 - 执行事务1语句: SELECT id FROM table_0 WHERE (col_1 = 'fvwtu') LOCK IN SHARE MODE
2025-02-05 23:48:38,501 - 执行事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:48:38,502 - 执行事务1语句: SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:48:38,502 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:48:38,503 - 执行事务1语句: SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:48:38,504 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 23:48:38,504 - 执行事务1语句: SELECT col_3 FROM table_0 WHERE (id = 2) FOR UPDATE
2025-02-05 23:48:38,505 - 执行事务1语句: COMMIT;
2025-02-05 23:48:38,509 - 执行事务1成功
2025-02-05 23:48:41,105 - 恢复初始状态成功
2025-02-05 23:48:41,893 - 创建事务2连接成功
2025-02-05 23:48:41,894 - 执行事务2语句: BEGIN
2025-02-05 23:48:41,896 - 执行事务2语句: UPDATE table_0 SET col_3 = 59.42 WHERE (id = 2) AND (col_3 = 77.42)
2025-02-05 23:48:41,898 - 执行事务2语句: COMMIT;
2025-02-05 23:48:41,902 - 执行事务2成功
2025-02-05 23:48:46,827 - 
2025-02-05 23:48:46,827 - 执行前idx: 3, pending_stmts: {2: (2, 'UPDATE table_0 SET col_3 = 59.42 WHERE (id = 2) AND (col_3 = 77.42)', <Thread(Thread-678, started 23620)>, 1738770526.8273718)}
2025-02-05 23:48:46,931 - stmt_idx: 2, status: success, result: None
2025-02-05 23:48:46,931 - 成功执行序列中事务2语句: UPDATE table_0 SET col_3 = 59.42 WHERE (id = 2) AND (col_3 = 77.42)
2025-02-05 23:48:46,931 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:48:46,931 - 
2025-02-05 23:48:47,040 - 
2025-02-05 23:48:47,041 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-679, started 32096)>, 1738770527.0402966)}
2025-02-05 23:48:47,146 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:48:47,147 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-679, started 32096)>, 1738770527.0402966)}
2025-02-05 23:48:47,147 - 
2025-02-05 23:48:47,252 - stmt为None, trx_id: 2, stmt: None
2025-02-05 23:48:47,256 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-679, started 32096)>, 1738770527.0402966)}
2025-02-05 23:48:47,256 - 
2025-02-05 23:48:47,256 - 执行前idx: 14, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE', <Thread(Thread-679, stopped 32096)>, 1738770527.0402966)}
2025-02-05 23:48:47,360 - stmt_idx: 3, status: success, result: None
2025-02-05 23:48:47,360 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:48:47,360 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE
2025-02-05 23:48:47,363 - 执行后idx: 14, pending_stmts: {4: (1, "SELECT id FROM table_0 WHERE (col_1 = 'fvwtu') LOCK IN SHARE MODE", <Thread(Thread-680, started 31148)>, 1738770527.361789), 5: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-681, started 33228)>, 1738770527.3624237), 6: (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-682, started 16688)>, 1738770527.3624237), 7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-683, started 29800)>, 1738770527.3629308), 8: (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-684, started 32996)>, 1738770527.3629308), 9: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-685, started 41976)>, 1738770527.3629308), 10: (1, 'SELECT col_3 FROM table_0 WHERE (id = 2) FOR UPDATE', <Thread(Thread-686, started 23388)>, 1738770527.3636575), 13: (1, 'COMMIT', <Thread(Thread-687, started 33044)>, 1738770527.3636575)}
2025-02-05 23:48:47,363 - 
2025-02-05 23:48:47,468 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "SELECT id FROM table_0 WHERE (col_1 = 'fvwtu') LOCK IN SHARE MODE", <Thread(Thread-680, stopped 31148)>, 1738770527.361789), 5: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-681, stopped 33228)>, 1738770527.3624237), 6: (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-682, stopped 16688)>, 1738770527.3624237), 7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-683, stopped 29800)>, 1738770527.3629308), 8: (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-684, stopped 32996)>, 1738770527.3629308), 9: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-685, stopped 41976)>, 1738770527.3629308), 10: (1, 'SELECT col_3 FROM table_0 WHERE (id = 2) FOR UPDATE', <Thread(Thread-686, stopped 23388)>, 1738770527.3636575), 13: (1, 'COMMIT', <Thread(Thread-687, stopped 33044)>, 1738770527.3636575)}
2025-02-05 23:48:47,468 - 
2025-02-05 23:48:47,468 - 执行前idx: 14, pending_stmts: {4: (1, "SELECT id FROM table_0 WHERE (col_1 = 'fvwtu') LOCK IN SHARE MODE", <Thread(Thread-680, stopped 31148)>, 1738770527.361789), 5: (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE', <Thread(Thread-681, stopped 33228)>, 1738770527.3624237), 6: (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-682, stopped 16688)>, 1738770527.3624237), 7: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-683, stopped 29800)>, 1738770527.3629308), 8: (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE', <Thread(Thread-684, stopped 32996)>, 1738770527.3629308), 9: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE', <Thread(Thread-685, stopped 41976)>, 1738770527.3629308), 10: (1, 'SELECT col_3 FROM table_0 WHERE (id = 2) FOR UPDATE', <Thread(Thread-686, stopped 23388)>, 1738770527.3636575), 13: (1, 'COMMIT', <Thread(Thread-687, stopped 33044)>, 1738770527.3636575)}
2025-02-05 23:48:47,577 - stmt_idx: 4, status: success, result: None
2025-02-05 23:48:47,577 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (col_1 = 'fvwtu') LOCK IN SHARE MODE
2025-02-05 23:48:47,684 - stmt_idx: 5, status: success, result: None
2025-02-05 23:48:47,684 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE
2025-02-05 23:48:47,791 - stmt_idx: 6, status: success, result: None
2025-02-05 23:48:47,791 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:48:47,897 - stmt_idx: 7, status: success, result: None
2025-02-05 23:48:47,898 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:48:47,999 - stmt_idx: 8, status: success, result: None
2025-02-05 23:48:48,000 - 成功执行序列中事务1语句: SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE
2025-02-05 23:48:48,107 - stmt_idx: 9, status: success, result: None
2025-02-05 23:48:48,107 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE
2025-02-05 23:48:48,214 - stmt_idx: 10, status: success, result: None
2025-02-05 23:48:48,214 - 成功执行序列中事务1语句: SELECT col_3 FROM table_0 WHERE (id = 2) FOR UPDATE
2025-02-05 23:48:48,323 - stmt_idx: 13, status: success, result: None
2025-02-05 23:48:48,323 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:48:48,323 - 执行后idx: 14, pending_stmts: {}
2025-02-05 23:48:48,323 - 
2025-02-05 23:48:48,431 - 执行序列成功
2025-02-05 23:48:49,204 - is_atomic: True
2025-02-05 23:48:49,204 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:48:49,204 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'UPDATE table_0 SET col_3 = 59.42 WHERE (id = 2) AND (col_3 = 77.42)'), (2, 'COMMIT'), (1, 'SELECT * FROM table_0 WHERE (id = 2) LOCK IN SHARE MODE'), (1, "SELECT id FROM table_0 WHERE (col_1 = 'fvwtu') LOCK IN SHARE MODE"), (1, 'SELECT id, col_1, col_2, col_3 FROM table_0 WHERE id BETWEEN 4 AND 4 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, 'SELECT id, col_1, col_2, col_3, col_982 FROM table_0 WHERE id BETWEEN 8 AND 8 LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 10 AND 10 LOCK IN SHARE MODE'), (1, 'SELECT col_3 FROM table_0 WHERE (id = 2) FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 23:48:49,204 - snapshots: {'before': {'table_0': [(1, 'fvwtu', 89, 77.04, None), (2, 'aoacl', 100, 77.42, None), (3, 'gglmn', 77, 15.63, None), (4, 'rcjvd', 96, 75.04, None), (5, 'egcda', 9, 62.98, None), (6, 'hhyze', 61, 21.77, None), (7, 'vgzyq', 71, 15.8, None), (8, 'dnjep', 30, 45.01, None), (9, 'ypgzs', 92, 56.31, None), (10, 'ilsvj', 20, 17.79, None)]}, 'trx1': {'table_0': [(1, 'fvwtu', 89, 77.04, None), (2, 'aoacl', 100, 77.42, None), (3, 'gglmn', 77, 15.63, None), (4, 'rcjvd', 96, 75.04, None), (5, 'egcda', 9, 62.98, None), (6, 'hhyze', 61, 21.77, None), (7, 'vgzyq', 71, 15.8, None), (8, 'dnjep', 30, 45.01, None), (9, 'ypgzs', 92, 56.31, None), (10, 'ilsvj', 20, 17.79, None)]}, 'trx2': {'table_0': [(1, 'fvwtu', 89, 77.04, None), (2, 'aoacl', 100, 59.42, None), (3, 'gglmn', 77, 15.63, None), (4, 'rcjvd', 96, 75.04, None), (5, 'egcda', 9, 62.98, None), (6, 'hhyze', 61, 21.77, None), (7, 'vgzyq', 71, 15.8, None), (8, 'dnjep', 30, 45.01, None), (9, 'ypgzs', 92, 56.31, None), (10, 'ilsvj', 20, 17.79, None)]}, 'serial': {'table_0': [(1, 'fvwtu', 89, 77.04, None), (2, 'aoacl', 100, 59.42, None), (3, 'gglmn', 77, 15.63, None), (4, 'rcjvd', 96, 75.04, None), (5, 'egcda', 9, 62.98, None), (6, 'hhyze', 61, 21.77, None), (7, 'vgzyq', 71, 15.8, None), (8, 'dnjep', 30, 45.01, None), (9, 'ypgzs', 92, 56.31, None), (10, 'ilsvj', 20, 17.79, None)]}}
2025-02-05 23:48:49,205 - 
2025-02-05 23:48:49,215 - iter: 94
2025-02-05 23:48:50,722 - table table_0 has 13 rows
2025-02-05 23:48:50,723 - res_dict: {'trx1_lock_row_ids': [9, 12], 'trx2_lock_row_ids': [3, 6], 'intersection_row_ids': []}
2025-02-05 23:48:50,723 - lock_same_resource: False
2025-02-05 23:48:50,723 - 
2025-02-05 23:48:50,723 - non intersection phase1
2025-02-05 23:48:50,723 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:48:50,723 - 事务2在第一阶段自己加的锁: II
2025-02-05 23:48:50,723 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 23:48:50,723 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:48:50,726 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:48:50,727 - needed_params: {'cond', 'table'}
2025-02-05 23:48:50,727 - params: {'cond': '(col_0 = 50) AND (col_1 = 66.63)', 'table': 'table_0'}
2025-02-05 23:48:50,731 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:48:50,732 - needed_params: {'cond', 'table'}
2025-02-05 23:48:50,732 - params: {'cond': '(id = 12)', 'table': 'table_0'}
2025-02-05 23:48:50,735 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:48:50,737 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:48:50,737 - params: {'vals': 'NULL, 84, 77.44', 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:48:50,741 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:48:50,742 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:48:50,742 - params: {'vals': 'NULL, 53, 59.62', 'insert_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:48:50,742 - non intersection phase1 end
2025-02-05 23:48:50,742 - 
2025-02-05 23:48:50,742 - non intersection phase2
2025-02-05 23:48:50,745 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:48:50,746 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:48:50,746 - params: {'cond': '(id = 6)', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:48:50,749 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:48:50,750 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:48:50,750 - params: {'v1': '12', 'v2': '12', 'select_cols': 'id, col_0, col_1', 'table': 'table_0'}
2025-02-05 23:48:50,751 - non intersection phase2 end
2025-02-05 23:48:50,751 - 
2025-02-05 23:48:50,751 - 生成死锁事务序列成功如下
2025-02-05 23:48:50,751 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 84, 77.44)'), (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)'), (2, 'INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 53, 59.62)'), (1, 'DELETE FROM table_0 WHERE (id = 12)'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:48:52,293 - 创建事务1连接成功
2025-02-05 23:48:52,295 - 执行事务1语句: BEGIN
2025-02-05 23:48:52,296 - 执行事务1语句: DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)
2025-02-05 23:48:52,296 - 执行事务1语句: DELETE FROM table_0 WHERE (id = 12)
2025-02-05 23:48:52,297 - 执行事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 23:48:52,299 - 执行事务1语句: COMMIT;
2025-02-05 23:48:52,303 - 执行事务1成功
2025-02-05 23:48:54,914 - 恢复初始状态成功
2025-02-05 23:48:55,667 - 创建事务2连接成功
2025-02-05 23:48:55,669 - 执行事务2语句: BEGIN
2025-02-05 23:48:55,670 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 84, 77.44)
2025-02-05 23:48:55,670 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 53, 59.62)
2025-02-05 23:48:55,671 - 执行事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-05 23:48:55,674 - 执行事务2语句: COMMIT;
2025-02-05 23:48:55,678 - 执行事务2成功
2025-02-05 23:49:00,584 - 
2025-02-05 23:49:00,584 - 执行前idx: 3, pending_stmts: {2: (2, 'INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 84, 77.44)', <Thread(Thread-688, started 38956)>, 1738770540.5843155)}
2025-02-05 23:49:00,694 - stmt_idx: 2, status: success, result: None
2025-02-05 23:49:00,694 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 84, 77.44)
2025-02-05 23:49:00,694 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:49:00,694 - 
2025-02-05 23:49:00,799 - 
2025-02-05 23:49:00,800 - 执行前idx: 4, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)', <Thread(Thread-689, started 33932)>, 1738770540.7993784)}
2025-02-05 23:49:00,906 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)
2025-02-05 23:49:00,906 - 执行后idx: 4, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)', <Thread(Thread-689, started 33932)>, 1738770540.7993784)}
2025-02-05 23:49:00,906 - 
2025-02-05 23:49:01,016 - 
2025-02-05 23:49:01,016 - 执行前idx: 5, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)', <Thread(Thread-689, started 33932)>, 1738770540.7993784), 4: (2, 'INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 53, 59.62)', <Thread(Thread-690, started 42604)>, 1738770541.0166886)}
2025-02-05 23:49:01,123 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)
2025-02-05 23:49:01,230 - stmt_idx: 4, status: success, result: None
2025-02-05 23:49:01,230 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 53, 59.62)
2025-02-05 23:49:01,230 - 执行后idx: 5, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)', <Thread(Thread-689, started 33932)>, 1738770540.7993784)}
2025-02-05 23:49:01,230 - 
2025-02-05 23:49:01,338 - 
2025-02-05 23:49:01,339 - 执行前idx: 8, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)', <Thread(Thread-689, started 33932)>, 1738770540.7993784), 7: (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE', <Thread(Thread-691, started 37036)>, 1738770541.3384953)}
2025-02-05 23:49:01,444 - wait for lock, trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)
2025-02-05 23:49:01,552 - stmt_idx: 7, status: success, result: None
2025-02-05 23:49:01,552 - 成功执行序列中事务2语句: SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE
2025-02-05 23:49:01,552 - 执行后idx: 8, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)', <Thread(Thread-689, started 33932)>, 1738770540.7993784)}
2025-02-05 23:49:01,552 - 
2025-02-05 23:49:01,658 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)', <Thread(Thread-689, started 33932)>, 1738770540.7993784)}
2025-02-05 23:49:01,658 - 
2025-02-05 23:49:01,659 - 执行前idx: 10, pending_stmts: {3: (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)', <Thread(Thread-689, stopped 33932)>, 1738770540.7993784)}
2025-02-05 23:49:01,772 - stmt_idx: 3, status: success, result: None
2025-02-05 23:49:01,772 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)
2025-02-05 23:49:01,772 - 结束了阻塞，blocked_trx_id: 1, stmt: DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)
2025-02-05 23:49:01,773 - 执行后idx: 10, pending_stmts: {5: (1, 'DELETE FROM table_0 WHERE (id = 12)', <Thread(Thread-692, started 37520)>, 1738770541.7730088), 6: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-693, started 29112)>, 1738770541.773312), 8: (1, 'COMMIT', <Thread(Thread-694, started 20908)>, 1738770541.773312)}
2025-02-05 23:49:01,773 - 
2025-02-05 23:49:01,874 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (1, 'DELETE FROM table_0 WHERE (id = 12)', <Thread(Thread-692, stopped 37520)>, 1738770541.7730088), 6: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-693, stopped 29112)>, 1738770541.773312), 8: (1, 'COMMIT', <Thread(Thread-694, stopped 20908)>, 1738770541.773312)}
2025-02-05 23:49:01,874 - 
2025-02-05 23:49:01,874 - 执行前idx: 10, pending_stmts: {5: (1, 'DELETE FROM table_0 WHERE (id = 12)', <Thread(Thread-692, stopped 37520)>, 1738770541.7730088), 6: (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE', <Thread(Thread-693, stopped 29112)>, 1738770541.773312), 8: (1, 'COMMIT', <Thread(Thread-694, stopped 20908)>, 1738770541.773312)}
2025-02-05 23:49:01,982 - stmt_idx: 5, status: success, result: None
2025-02-05 23:49:01,982 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (id = 12)
2025-02-05 23:49:02,085 - stmt_idx: 6, status: success, result: None
2025-02-05 23:49:02,085 - 成功执行序列中事务1语句: SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE
2025-02-05 23:49:02,194 - stmt_idx: 8, status: success, result: None
2025-02-05 23:49:02,194 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:49:02,194 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:49:02,194 - 
2025-02-05 23:49:02,302 - 执行序列成功
2025-02-05 23:49:03,089 - is_atomic: True
2025-02-05 23:49:03,089 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:49:03,089 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 84, 77.44)'), (2, 'INSERT INTO table_0 (id, col_0, col_1) VALUES (NULL, 53, 59.62)'), (2, 'SELECT id, col_0, col_1 FROM table_0 WHERE id BETWEEN 12 AND 12 FOR UPDATE'), (2, 'COMMIT'), (1, 'DELETE FROM table_0 WHERE (col_0 = 50) AND (col_1 = 66.63)'), (1, 'DELETE FROM table_0 WHERE (id = 12)'), (1, 'SELECT id, col_0, col_1 FROM table_0 WHERE (id = 6) LOCK IN SHARE MODE'), (1, 'COMMIT')]
2025-02-05 23:49:03,090 - snapshots: {'before': {'table_0': [(1, 42, 42.32), (2, 94, 72.02), (3, 75, 15.57), (4, 56, 38.29), (5, 61, 1.91), (6, 55, 84.95), (7, 98, 69.12), (8, 29, 30.16), (9, 50, 66.63), (10, 98, 40.27), (11, 71, 44.67), (12, 11, 79.57), (13, 54, 49.73)]}, 'trx1': {'table_0': [(1, 42, 42.32), (2, 94, 72.02), (3, 75, 15.57), (4, 56, 38.29), (5, 61, 1.91), (6, 55, 84.95), (7, 98, 69.12), (8, 29, 30.16), (9, 50, 66.63), (10, 98, 40.27), (11, 71, 44.67), (13, 54, 49.73)]}, 'trx2': {'table_0': [(1, 42, 42.32), (2, 94, 72.02), (3, 75, 15.57), (4, 56, 38.29), (5, 61, 1.91), (6, 55, 84.95), (7, 98, 69.12), (8, 29, 30.16), (9, 50, 66.63), (10, 98, 40.27), (11, 71, 44.67), (12, 11, 79.57), (13, 54, 49.73), (14, 84, 77.44), (15, 53, 59.62)]}, 'serial': {'table_0': [(1, 42, 42.32), (2, 94, 72.02), (3, 75, 15.57), (4, 56, 38.29), (5, 61, 1.91), (6, 55, 84.95), (7, 98, 69.12), (8, 29, 30.16), (9, 50, 66.63), (10, 98, 40.27), (11, 71, 44.67), (13, 54, 49.73), (16, 84, 77.44), (17, 53, 59.62)]}}
2025-02-05 23:49:03,090 - 
2025-02-05 23:49:03,103 - iter: 95
2025-02-05 23:49:04,641 - table table_0 has 14 rows
2025-02-05 23:49:04,642 - trx1_lock_row_ids: [9, 10, 11, 12]
2025-02-05 23:49:04,642 - trx2_lock_row_ids: [9, 14]
2025-02-05 23:49:04,642 - intersection_row_ids: [9]
2025-02-05 23:49:04,642 - trx1_exclusive_ids: [10, 11, 12]
2025-02-05 23:49:04,642 - trx2_exclusive_ids: [14]
2025-02-05 23:49:04,642 - res_dict: {'trx1_lock_row_ids': [9, 10, 11, 12], 'trx2_lock_row_ids': [9, 14], 'intersection_row_ids': [9]}
2025-02-05 23:49:04,642 - lock_same_resource: True
2025-02-05 23:49:04,642 - 
2025-02-05 23:49:04,642 - intersection phase1
2025-02-05 23:49:04,645 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=II, row_idx=9, is_continuous=True, range_end_idx=12
2025-02-05 23:49:04,646 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:49:04,646 - params: {'set_expr': "col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8", 'v1': '9', 'v2': '12', 'table': 'table_0'}
2025-02-05 23:49:04,649 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:49:04,651 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:04,651 - params: {'v1': '9', 'v2': '9', 'select_cols': 'id, col_0, col_1, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:49:04,651 - intersection phase1 end
2025-02-05 23:49:04,651 - 
2025-02-05 23:49:04,652 - intersection phase2
2025-02-05 23:49:04,652 - 事务1在第二阶段自己加的锁: S
2025-02-05 23:49:04,652 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:49:04,652 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:49:04,652 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:49:04,656 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=10, is_continuous=False, range_end_idx=None
2025-02-05 23:49:04,658 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:49:04,658 - params: {'cond': "(col_1 = 'oblfm')", 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:49:04,662 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:49:04,664 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:49:04,664 - params: {'cond': '(id = 11)', 'select_cols': 'id, col_2, col_4', 'table': 'table_0'}
2025-02-05 23:49:04,667 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=12, is_continuous=False, range_end_idx=None
2025-02-05 23:49:04,669 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:04,669 - params: {'v1': '12', 'v2': '12', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:49:04,672 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:49:04,674 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:49:04,674 - params: {'cond': "(col_3 = 'cqlwq') AND (col_2 = 78.47)", 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:49:04,674 - intersection phase2 end
2025-02-05 23:49:04,674 - 
2025-02-05 23:49:04,674 - intersection phase3
2025-02-05 23:49:04,679 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=14, is_continuous=False, range_end_idx=None
2025-02-05 23:49:04,680 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:04,680 - params: {'v1': '14', 'v2': '14', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:49:04,686 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=11, is_continuous=False, range_end_idx=None
2025-02-05 23:49:04,688 - needed_params: {'cond', 'table'}
2025-02-05 23:49:04,688 - params: {'cond': '(id = 11)', 'table': 'table_0'}
2025-02-05 23:49:04,688 - intersection phase3 end
2025-02-05 23:49:04,688 - 
2025-02-05 23:49:04,688 - 生成死锁事务序列成功如下
2025-02-05 23:49:04,688 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12"), (1, "SELECT * FROM table_0 WHERE (col_1 = 'oblfm') LOCK IN SHARE MODE"), (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_3 = 'cqlwq') AND (col_2 = 78.47) FOR UPDATE"), (2, 'DELETE FROM table_0 WHERE (id = 11)'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE'), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:49:06,249 - 创建事务1连接成功
2025-02-05 23:49:06,250 - 执行事务1语句: BEGIN
2025-02-05 23:49:06,251 - 执行事务1语句: UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12
2025-02-05 23:49:06,252 - 执行事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'oblfm') LOCK IN SHARE MODE
2025-02-05 23:49:06,253 - 执行事务1语句: SELECT id, col_2, col_4 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE
2025-02-05 23:49:06,253 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:49:06,254 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE
2025-02-05 23:49:06,256 - 执行事务1语句: COMMIT;
2025-02-05 23:49:06,261 - 执行事务1成功
2025-02-05 23:49:08,885 - 恢复初始状态成功
2025-02-05 23:49:09,668 - 创建事务2连接成功
2025-02-05 23:49:09,670 - 执行事务2语句: BEGIN
2025-02-05 23:49:09,672 - 执行事务2语句: SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:49:09,673 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_3 = 'cqlwq') AND (col_2 = 78.47) FOR UPDATE
2025-02-05 23:49:09,674 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 11)
2025-02-05 23:49:09,676 - 执行事务2语句: COMMIT;
2025-02-05 23:49:09,681 - 执行事务2成功
2025-02-05 23:49:14,647 - 
2025-02-05 23:49:14,647 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE', <Thread(Thread-695, started 34144)>, 1738770554.647899)}
2025-02-05 23:49:14,750 - stmt_idx: 2, status: success, result: None
2025-02-05 23:49:14,750 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE
2025-02-05 23:49:14,750 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:49:14,750 - 
2025-02-05 23:49:14,860 - 
2025-02-05 23:49:14,861 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12", <Thread(Thread-696, started 43216)>, 1738770554.8604317)}
2025-02-05 23:49:14,968 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12
2025-02-05 23:49:14,968 - 执行后idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12", <Thread(Thread-696, started 43216)>, 1738770554.8604317)}
2025-02-05 23:49:14,969 - 
2025-02-05 23:49:15,073 - 
2025-02-05 23:49:15,074 - 执行前idx: 8, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12", <Thread(Thread-696, started 43216)>, 1738770554.8604317), 7: (2, "SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_3 = 'cqlwq') AND (col_2 = 78.47) FOR UPDATE", <Thread(Thread-697, started 40144)>, 1738770555.073963)}
2025-02-05 23:49:15,180 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12
2025-02-05 23:49:15,289 - stmt_idx: 7, status: success, result: None
2025-02-05 23:49:15,289 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_3 = 'cqlwq') AND (col_2 = 78.47) FOR UPDATE
2025-02-05 23:49:15,289 - 执行后idx: 8, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12", <Thread(Thread-696, started 43216)>, 1738770554.8604317)}
2025-02-05 23:49:15,289 - 
2025-02-05 23:49:15,397 - 
2025-02-05 23:49:15,398 - 执行前idx: 9, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12", <Thread(Thread-696, started 43216)>, 1738770554.8604317), 8: (2, 'DELETE FROM table_0 WHERE (id = 11)', <Thread(Thread-698, started 36108)>, 1738770555.3978164)}
2025-02-05 23:49:15,502 - wait for lock, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12
2025-02-05 23:49:15,610 - stmt_idx: 8, status: success, result: None
2025-02-05 23:49:15,610 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 11)
2025-02-05 23:49:15,610 - 执行后idx: 9, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12", <Thread(Thread-696, started 43216)>, 1738770554.8604317)}
2025-02-05 23:49:15,610 - 
2025-02-05 23:49:15,728 - 序列遍历完成，开始查看剩余阻塞的语句：{3: (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12", <Thread(Thread-696, started 43216)>, 1738770554.8604317)}
2025-02-05 23:49:15,728 - 
2025-02-05 23:49:15,728 - 执行前idx: 12, pending_stmts: {3: (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12", <Thread(Thread-696, started 43216)>, 1738770554.8604317)}
2025-02-05 23:49:15,830 - stmt_idx: 3, status: success, result: None
2025-02-05 23:49:15,830 - 成功执行序列中事务1语句: UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12
2025-02-05 23:49:15,830 - 结束了阻塞，blocked_trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12
2025-02-05 23:49:15,832 - 执行后idx: 12, pending_stmts: {4: (1, "SELECT * FROM table_0 WHERE (col_1 = 'oblfm') LOCK IN SHARE MODE", <Thread(Thread-699, started 37128)>, 1738770555.8319228), 5: (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE', <Thread(Thread-700, started 43580)>, 1738770555.8323514), 6: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-701, started 39180)>, 1738770555.8323514), 9: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE', <Thread(Thread-702, started 29476)>, 1738770555.8323514), 11: (1, 'COMMIT', <Thread(Thread-703, started 26636)>, 1738770555.8328567)}
2025-02-05 23:49:15,832 - 
2025-02-05 23:49:15,938 - 序列遍历完成，开始查看剩余阻塞的语句：{4: (1, "SELECT * FROM table_0 WHERE (col_1 = 'oblfm') LOCK IN SHARE MODE", <Thread(Thread-699, stopped 37128)>, 1738770555.8319228), 5: (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE', <Thread(Thread-700, stopped 43580)>, 1738770555.8323514), 6: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-701, stopped 39180)>, 1738770555.8323514), 9: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE', <Thread(Thread-702, stopped 29476)>, 1738770555.8323514), 11: (1, 'COMMIT', <Thread(Thread-703, stopped 26636)>, 1738770555.8328567)}
2025-02-05 23:49:15,938 - 
2025-02-05 23:49:15,938 - 执行前idx: 12, pending_stmts: {4: (1, "SELECT * FROM table_0 WHERE (col_1 = 'oblfm') LOCK IN SHARE MODE", <Thread(Thread-699, stopped 37128)>, 1738770555.8319228), 5: (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE', <Thread(Thread-700, stopped 43580)>, 1738770555.8323514), 6: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE', <Thread(Thread-701, stopped 39180)>, 1738770555.8323514), 9: (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE', <Thread(Thread-702, stopped 29476)>, 1738770555.8323514), 11: (1, 'COMMIT', <Thread(Thread-703, stopped 26636)>, 1738770555.8328567)}
2025-02-05 23:49:16,047 - stmt_idx: 4, status: success, result: None
2025-02-05 23:49:16,047 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE (col_1 = 'oblfm') LOCK IN SHARE MODE
2025-02-05 23:49:16,156 - stmt_idx: 5, status: success, result: None
2025-02-05 23:49:16,156 - 成功执行序列中事务1语句: SELECT id, col_2, col_4 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE
2025-02-05 23:49:16,264 - stmt_idx: 6, status: success, result: None
2025-02-05 23:49:16,264 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE
2025-02-05 23:49:16,373 - stmt_idx: 9, status: success, result: None
2025-02-05 23:49:16,373 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE
2025-02-05 23:49:16,482 - stmt_idx: 11, status: success, result: None
2025-02-05 23:49:16,482 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:49:16,482 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:49:16,482 - 
2025-02-05 23:49:16,591 - 执行序列成功
2025-02-05 23:49:17,376 - is_atomic: True
2025-02-05 23:49:17,376 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:49:17,376 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE id BETWEEN 9 AND 9 LOCK IN SHARE MODE'), (2, "SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE (col_3 = 'cqlwq') AND (col_2 = 78.47) FOR UPDATE"), (2, 'DELETE FROM table_0 WHERE (id = 11)'), (2, 'COMMIT'), (1, "UPDATE table_0 SET col_1 = 'NdpsN', col_3 = 'BIezZ', col_4 = 50.8 WHERE id BETWEEN 9 AND 12"), (1, "SELECT * FROM table_0 WHERE (col_1 = 'oblfm') LOCK IN SHARE MODE"), (1, 'SELECT id, col_2, col_4 FROM table_0 WHERE (id = 11) LOCK IN SHARE MODE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 12 AND 12 LOCK IN SHARE MODE'), (1, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 14 AND 14 FOR UPDATE'), (1, 'COMMIT')]
2025-02-05 23:49:17,376 - snapshots: {'before': {'table_0': [(1, 60.74, 'clsjd', 34.49, 'chpdb', 62.49), (2, 21.04, 'bikob', 67.57, 'ilwfc', 76.45), (3, 77.71, 'vpmlj', 75.66, 'eptxs', 70.7), (4, 83.39, 'yblru', 17.3, 'viqlm', 76.31), (5, 40.17, 'xmtuz', 4.48, 'njsxz', 40.66), (6, 95.04, 'ltuho', 74.8, 'kljyv', 28.03), (7, 27.57, 'iiuag', 92.04, 'adtea', 1.81), (8, 69.27, 'hoxli', 84.76, 'tpfsh', 37.12), (9, 6.6, 'faeen', 66.47, 'mnoci', 93.8), (10, 47.91, 'oblfm', 92.66, 'tfyhr', 6.54), (11, 18.4, 'jfbwq', 34.19, 'kgfgq', 56.15), (12, 3.04, 'jndtk', 73.44, 'tumwm', 28.38), (13, 41.69, 'pxkox', 76.07, 'yvvne', 33.36), (14, 51.84, 'kzojd', 78.47, 'cqlwq', 98.18)]}, 'trx1': {'table_0': [(1, 60.74, 'clsjd', 34.49, 'chpdb', 62.49), (2, 21.04, 'bikob', 67.57, 'ilwfc', 76.45), (3, 77.71, 'vpmlj', 75.66, 'eptxs', 70.7), (4, 83.39, 'yblru', 17.3, 'viqlm', 76.31), (5, 40.17, 'xmtuz', 4.48, 'njsxz', 40.66), (6, 95.04, 'ltuho', 74.8, 'kljyv', 28.03), (7, 27.57, 'iiuag', 92.04, 'adtea', 1.81), (8, 69.27, 'hoxli', 84.76, 'tpfsh', 37.12), (9, 6.6, 'NdpsN', 66.47, 'BIezZ', 50.8), (10, 47.91, 'NdpsN', 92.66, 'BIezZ', 50.8), (11, 18.4, 'NdpsN', 34.19, 'BIezZ', 50.8), (12, 3.04, 'NdpsN', 73.44, 'BIezZ', 50.8), (13, 41.69, 'pxkox', 76.07, 'yvvne', 33.36), (14, 51.84, 'kzojd', 78.47, 'cqlwq', 98.18)]}, 'trx2': {'table_0': [(1, 60.74, 'clsjd', 34.49, 'chpdb', 62.49), (2, 21.04, 'bikob', 67.57, 'ilwfc', 76.45), (3, 77.71, 'vpmlj', 75.66, 'eptxs', 70.7), (4, 83.39, 'yblru', 17.3, 'viqlm', 76.31), (5, 40.17, 'xmtuz', 4.48, 'njsxz', 40.66), (6, 95.04, 'ltuho', 74.8, 'kljyv', 28.03), (7, 27.57, 'iiuag', 92.04, 'adtea', 1.81), (8, 69.27, 'hoxli', 84.76, 'tpfsh', 37.12), (9, 6.6, 'faeen', 66.47, 'mnoci', 93.8), (10, 47.91, 'oblfm', 92.66, 'tfyhr', 6.54), (12, 3.04, 'jndtk', 73.44, 'tumwm', 28.38), (13, 41.69, 'pxkox', 76.07, 'yvvne', 33.36), (14, 51.84, 'kzojd', 78.47, 'cqlwq', 98.18)]}, 'serial': {'table_0': [(1, 60.74, 'clsjd', 34.49, 'chpdb', 62.49), (2, 21.04, 'bikob', 67.57, 'ilwfc', 76.45), (3, 77.71, 'vpmlj', 75.66, 'eptxs', 70.7), (4, 83.39, 'yblru', 17.3, 'viqlm', 76.31), (5, 40.17, 'xmtuz', 4.48, 'njsxz', 40.66), (6, 95.04, 'ltuho', 74.8, 'kljyv', 28.03), (7, 27.57, 'iiuag', 92.04, 'adtea', 1.81), (8, 69.27, 'hoxli', 84.76, 'tpfsh', 37.12), (9, 6.6, 'NdpsN', 66.47, 'BIezZ', 50.8), (10, 47.91, 'NdpsN', 92.66, 'BIezZ', 50.8), (12, 3.04, 'NdpsN', 73.44, 'BIezZ', 50.8), (13, 41.69, 'pxkox', 76.07, 'yvvne', 33.36), (14, 51.84, 'kzojd', 78.47, 'cqlwq', 98.18)]}}
2025-02-05 23:49:17,376 - 
2025-02-05 23:49:17,387 - iter: 96
2025-02-05 23:49:18,879 - table table_0 has 5 rows
2025-02-05 23:49:18,880 - res_dict: {'trx1_lock_row_ids': [4, 5], 'trx2_lock_row_ids': [1, 2], 'intersection_row_ids': []}
2025-02-05 23:49:18,880 - lock_same_resource: False
2025-02-05 23:49:18,880 - 
2025-02-05 23:49:18,880 - non intersection phase1
2025-02-05 23:49:18,880 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:49:18,880 - 事务2在第一阶段自己加的锁: II
2025-02-05 23:49:18,880 - 事务1在第二阶段请求对方资源的锁: II
2025-02-05 23:49:18,880 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:49:18,883 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:49:18,884 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:18,884 - params: {'v1': '4', 'v2': '5', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:49:18,888 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:49:18,889 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:49:18,889 - params: {'vals': "NULL, 43, 'khHcq', 75.41", 'insert_cols': 'id, col_0, col_1, col_205', 'table': 'table_0'}
2025-02-05 23:49:18,891 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:49:18,892 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:49:18,892 - params: {'vals': "NULL, 27, 'oERVk', 74.68", 'insert_cols': 'id, col_0, col_1, col_205', 'table': 'table_0'}
2025-02-05 23:49:18,892 - non intersection phase1 end
2025-02-05 23:49:18,893 - 
2025-02-05 23:49:18,893 - non intersection phase2
2025-02-05 23:49:18,895 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:49:18,896 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:49:18,897 - params: {'set_expr': "col_1 = 'vQWvq'", 'v1': '2', 'v2': '2', 'table': 'table_0'}
2025-02-05 23:49:18,900 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=5, is_continuous=True, range_end_idx=5
2025-02-05 23:49:18,901 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:18,902 - params: {'v1': '5', 'v2': '5', 'select_cols': 'id, col_0, col_1, col_205', 'table': 'table_0'}
2025-02-05 23:49:18,902 - non intersection phase2 end
2025-02-05 23:49:18,902 - 
2025-02-05 23:49:18,902 - 生成死锁事务序列成功如下
2025-02-05 23:49:18,902 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 43, 'khHcq', 75.41)"), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 27, 'oERVk', 74.68)"), (2, 'SELECT id, col_0, col_1, col_205 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE'), (1, "UPDATE table_0 SET col_1 = 'vQWvq' WHERE id BETWEEN 2 AND 2"), (2, 'COMMIT'), (1, 'COMMIT')]
2025-02-05 23:49:20,476 - 创建事务1连接成功
2025-02-05 23:49:20,478 - 执行事务1语句: BEGIN
2025-02-05 23:49:20,479 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:49:20,480 - 执行事务1语句: UPDATE table_0 SET col_1 = 'vQWvq' WHERE id BETWEEN 2 AND 2
2025-02-05 23:49:20,482 - 执行事务1语句: COMMIT;
2025-02-05 23:49:20,486 - 执行事务1成功
2025-02-05 23:49:23,075 - 恢复初始状态成功
2025-02-05 23:49:23,834 - 创建事务2连接成功
2025-02-05 23:49:23,835 - 执行事务2语句: BEGIN
2025-02-05 23:49:23,836 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 43, 'khHcq', 75.41)
2025-02-05 23:49:23,836 - 执行事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 27, 'oERVk', 74.68)
2025-02-05 23:49:23,837 - 执行事务2语句: SELECT id, col_0, col_1, col_205 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:49:23,840 - 执行事务2语句: COMMIT;
2025-02-05 23:49:23,845 - 执行事务2成功
2025-02-05 23:49:28,847 - 
2025-02-05 23:49:28,847 - 执行前idx: 3, pending_stmts: {2: (2, "INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 43, 'khHcq', 75.41)", <Thread(Thread-704, started 36140)>, 1738770568.84778)}
2025-02-05 23:49:28,950 - stmt_idx: 2, status: success, result: None
2025-02-05 23:49:28,951 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 43, 'khHcq', 75.41)
2025-02-05 23:49:28,951 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:49:28,951 - 
2025-02-05 23:49:29,058 - 
2025-02-05 23:49:29,059 - 执行前idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-705, started 25704)>, 1738770569.0581226)}
2025-02-05 23:49:29,172 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:49:29,172 - 执行后idx: 4, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-705, started 25704)>, 1738770569.0581226)}
2025-02-05 23:49:29,172 - 
2025-02-05 23:49:29,278 - 
2025-02-05 23:49:29,278 - 执行前idx: 5, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-705, started 25704)>, 1738770569.0581226), 4: (2, "INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 27, 'oERVk', 74.68)", <Thread(Thread-706, started 38708)>, 1738770569.2789326)}
2025-02-05 23:49:29,390 - wait for lock, trx_id: 1, stmt: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:49:29,498 - stmt_idx: 4, status: success, result: None
2025-02-05 23:49:29,498 - 成功执行序列中事务2语句: INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 27, 'oERVk', 74.68)
2025-02-05 23:49:29,499 - 执行后idx: 5, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-705, started 25704)>, 1738770569.0581226)}
2025-02-05 23:49:29,499 - 
2025-02-05 23:49:29,611 - 
2025-02-05 23:49:29,611 - 执行前idx: 6, pending_stmts: {3: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE', <Thread(Thread-705, started 25704)>, 1738770569.0581226), 5: (2, 'SELECT id, col_0, col_1, col_205 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-707, started 40132)>, 1738770569.6114686)}
2025-02-05 23:49:29,614 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:49:29,717 - stmt_idx: 3, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:49:29,717 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 4 AND 5 FOR UPDATE
2025-02-05 23:49:29,717 - 错误: dictionary changed size during iteration
2025-02-05 23:49:29,721 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_0, col_1, col_205 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-707, stopped 40132)>, 1738770569.6114686)}
2025-02-05 23:49:29,721 - 
2025-02-05 23:49:29,722 - 执行前idx: 9, pending_stmts: {5: (2, 'SELECT id, col_0, col_1, col_205 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE', <Thread(Thread-707, stopped 40132)>, 1738770569.6114686)}
2025-02-05 23:49:29,830 - stmt_idx: 5, status: success, result: None
2025-02-05 23:49:29,830 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_205 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE
2025-02-05 23:49:29,830 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:49:29,830 - 
2025-02-05 23:49:29,938 - 执行序列成功
2025-02-05 23:49:30,724 - is_atomic: True
2025-02-05 23:49:30,724 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:49:30,724 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, "INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 43, 'khHcq', 75.41)"), (2, "INSERT INTO table_0 (id, col_0, col_1, col_205) VALUES (NULL, 27, 'oERVk', 74.68)"), (1, 'ROLLBACK'), (1, "--Skipped, trx_id: 1, stmt: UPDATE table_0 SET col_1 = 'vQWvq' WHERE id BETWEEN 2 AND 2"), (2, 'COMMIT'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'SELECT id, col_0, col_1, col_205 FROM table_0 WHERE id BETWEEN 5 AND 5 FOR UPDATE')]
2025-02-05 23:49:30,724 - snapshots: {'before': {'table_0': [(1, 4, 'aamvw', None), (2, 56, 'inxnu', None), (3, 8, 'zsfyu', None), (4, 92, 'ivkee', None), (5, 62, 'zcvcp', None)]}, 'trx1': {'table_0': [(1, 4, 'aamvw', None), (2, 56, 'vQWvq', None), (3, 8, 'zsfyu', None), (4, 92, 'ivkee', None), (5, 62, 'zcvcp', None)]}, 'trx2': {'table_0': [(1, 4, 'aamvw', None), (2, 56, 'inxnu', None), (3, 8, 'zsfyu', None), (4, 92, 'ivkee', None), (5, 62, 'zcvcp', None), (6, 43, 'khHcq', 75.41), (7, 27, 'oERVk', 74.68)]}, 'serial': {'table_0': [(1, 4, 'aamvw', None), (2, 56, 'inxnu', None), (3, 8, 'zsfyu', None), (4, 92, 'ivkee', None), (5, 62, 'zcvcp', None), (8, 43, 'khHcq', 75.41), (9, 27, 'oERVk', 74.68)]}}
2025-02-05 23:49:30,724 - 
2025-02-05 23:49:30,736 - iter: 97
2025-02-05 23:49:32,247 - table table_0 has 9 rows
2025-02-05 23:49:32,247 - trx1_lock_row_ids: [1, 2, 3, 4, 5, 6, 7, 8, 9]
2025-02-05 23:49:32,247 - trx2_lock_row_ids: [2, 6, 7]
2025-02-05 23:49:32,247 - intersection_row_ids: [2, 6, 7]
2025-02-05 23:49:32,247 - trx1_exclusive_ids: [1, 3, 4, 5, 8, 9]
2025-02-05 23:49:32,247 - trx2_exclusive_ids: []
2025-02-05 23:49:32,247 - res_dict: {'trx1_lock_row_ids': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'trx2_lock_row_ids': [2, 6, 7], 'intersection_row_ids': [2, 6, 7]}
2025-02-05 23:49:32,248 - lock_same_resource: True
2025-02-05 23:49:32,248 - 
2025-02-05 23:49:32,248 - intersection phase1
2025-02-05 23:49:32,250 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=II, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,251 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:49:32,252 - params: {'set_expr': "col_2 = 'DPMnX'", 'cond': '(col_1 = 12) AND (col_518 IS NULL) AND (col_0 = 87.12)', 'table': 'table_0'}
2025-02-05 23:49:32,254 - Generating lock SQL with params: template_key=insert, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,256 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:49:32,256 - params: {'vals': "NULL, 42.64, 65, 'wCKhm', 4", 'insert_cols': 'id, col_0, col_1, col_2, col_518', 'table': 'table_0'}
2025-02-05 23:49:32,259 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,260 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:49:32,260 - params: {'set_expr': "col_2 = 'eiOHE', col_0 = 5.14", 'v1': '7', 'v2': '7', 'table': 'table_0'}
2025-02-05 23:49:32,263 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,264 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:32,264 - params: {'v1': '2', 'v2': '2', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:49:32,267 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,268 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:32,269 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id, col_1, col_2, col_518', 'table': 'table_0'}
2025-02-05 23:49:32,271 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,273 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:32,273 - params: {'v1': '7', 'v2': '7', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:49:32,273 - intersection phase1 end
2025-02-05 23:49:32,273 - 
2025-02-05 23:49:32,273 - intersection phase2
2025-02-05 23:49:32,274 - 事务1在第二阶段自己加的锁: X
2025-02-05 23:49:32,274 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:49:32,274 - 事务1在第三阶段请求对方资源的锁: S
2025-02-05 23:49:32,274 - 事务2在第三阶段请求对方资源的锁: X
2025-02-05 23:49:32,278 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,279 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:49:32,279 - params: {'set_expr': "col_2 = 'oDceH', col_1 = 78, col_518 = 89", 'cond': '(id = 1)', 'table': 'table_0'}
2025-02-05 23:49:32,282 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,284 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:49:32,284 - params: {'set_expr': "col_0 = 43.59, col_2 = 'Ftufg', col_1 = 97", 'cond': '(id = 3)', 'table': 'table_0'}
2025-02-05 23:49:32,287 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,288 - needed_params: {'cond', 'table'}
2025-02-05 23:49:32,288 - params: {'cond': "(col_2 = 'ztxxa')", 'table': 'table_0'}
2025-02-05 23:49:32,292 - Generating lock SQL with params: template_key=update, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,293 - needed_params: {'set_expr', 'cond', 'table'}
2025-02-05 23:49:32,293 - params: {'set_expr': "col_0 = 95.36, col_1 = 71, col_518 = 68, col_2 = 'hLkpc'", 'cond': '(col_518 IS NULL)', 'table': 'table_0'}
2025-02-05 23:49:32,296 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,298 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:32,298 - params: {'v1': '8', 'v2': '8', 'select_cols': 'id, col_0, col_1, col_2, col_518', 'table': 'table_0'}
2025-02-05 23:49:32,301 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=9, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,303 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:32,303 - params: {'v1': '9', 'v2': '9', 'select_cols': '*', 'table': 'table_0'}
2025-02-05 23:49:32,303 - intersection phase2 end
2025-02-05 23:49:32,303 - 
2025-02-05 23:49:32,303 - intersection phase3
2025-02-05 23:49:32,307 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:49:32,308 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:49:32,308 - params: {'cond': "(col_2 = 'wcjhg') AND (col_1 = 92) AND (col_518 IS NULL)", 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:49:32,309 - intersection phase3 end
2025-02-05 23:49:32,309 - 
2025-02-05 23:49:32,309 - 生成死锁事务序列成功如下
2025-02-05 23:49:32,309 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 'DPMnX' WHERE (col_1 = 12) AND (col_518 IS NULL) AND (col_0 = 87.12)"), (2, 'SELECT id, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_518) VALUES (NULL, 42.64, 65, 'wCKhm', 4)"), (1, "UPDATE table_0 SET col_2 = 'eiOHE', col_0 = 5.14 WHERE id BETWEEN 7 AND 7"), (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 'oDceH', col_1 = 78, col_518 = 89 WHERE (id = 1)"), (1, "UPDATE table_0 SET col_0 = 43.59, col_2 = 'Ftufg', col_1 = 97 WHERE (id = 3)"), (1, "DELETE FROM table_0 WHERE (col_2 = 'ztxxa')"), (1, "UPDATE table_0 SET col_0 = 95.36, col_1 = 71, col_518 = 68, col_2 = 'hLkpc' WHERE (col_518 IS NULL)"), (1, 'SELECT id, col_0, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (2, None), (1, "SELECT id FROM table_0 WHERE (col_2 = 'wcjhg') AND (col_1 = 92) AND (col_518 IS NULL) LOCK IN SHARE MODE"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:49:33,892 - 创建事务1连接成功
2025-02-05 23:49:33,893 - 执行事务1语句: BEGIN
2025-02-05 23:49:33,894 - 执行事务1语句: UPDATE table_0 SET col_2 = 'DPMnX' WHERE (col_1 = 12) AND (col_518 IS NULL) AND (col_0 = 87.12)
2025-02-05 23:49:33,895 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_518) VALUES (NULL, 42.64, 65, 'wCKhm', 4)
2025-02-05 23:49:33,895 - 执行事务1语句: UPDATE table_0 SET col_2 = 'eiOHE', col_0 = 5.14 WHERE id BETWEEN 7 AND 7
2025-02-05 23:49:33,896 - 执行事务1语句: UPDATE table_0 SET col_2 = 'oDceH', col_1 = 78, col_518 = 89 WHERE (id = 1)
2025-02-05 23:49:33,897 - 执行事务1语句: UPDATE table_0 SET col_0 = 43.59, col_2 = 'Ftufg', col_1 = 97 WHERE (id = 3)
2025-02-05 23:49:33,898 - 执行事务1语句: DELETE FROM table_0 WHERE (col_2 = 'ztxxa')
2025-02-05 23:49:33,899 - 执行事务1语句: UPDATE table_0 SET col_0 = 95.36, col_1 = 71, col_518 = 68, col_2 = 'hLkpc' WHERE (col_518 IS NULL)
2025-02-05 23:49:33,899 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:49:33,900 - 执行事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:49:33,901 - 执行事务1语句: SELECT id FROM table_0 WHERE (col_2 = 'wcjhg') AND (col_1 = 92) AND (col_518 IS NULL) LOCK IN SHARE MODE
2025-02-05 23:49:33,902 - 执行事务1语句: COMMIT;
2025-02-05 23:49:33,907 - 执行事务1成功
2025-02-05 23:49:36,519 - 恢复初始状态成功
2025-02-05 23:49:37,287 - 创建事务2连接成功
2025-02-05 23:49:37,289 - 执行事务2语句: BEGIN
2025-02-05 23:49:37,289 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:49:37,290 - 执行事务2语句: SELECT id, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:49:37,291 - 执行事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:49:37,291 - 执行事务2语句: COMMIT;
2025-02-05 23:49:37,295 - 执行事务2成功
2025-02-05 23:49:42,206 - 
2025-02-05 23:49:42,207 - 执行前idx: 3, pending_stmts: {2: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE', <Thread(Thread-708, started 4088)>, 1738770582.206987)}
2025-02-05 23:49:42,314 - stmt_idx: 2, status: success, result: None
2025-02-05 23:49:42,314 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE
2025-02-05 23:49:42,314 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:49:42,314 - 
2025-02-05 23:49:42,423 - 
2025-02-05 23:49:42,424 - 执行前idx: 4, pending_stmts: {3: (1, "UPDATE table_0 SET col_2 = 'DPMnX' WHERE (col_1 = 12) AND (col_518 IS NULL) AND (col_0 = 87.12)", <Thread(Thread-709, started 31032)>, 1738770582.4231603)}
2025-02-05 23:49:42,531 - stmt_idx: 3, status: success, result: None
2025-02-05 23:49:42,531 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'DPMnX' WHERE (col_1 = 12) AND (col_518 IS NULL) AND (col_0 = 87.12)
2025-02-05 23:49:42,531 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:49:42,531 - 
2025-02-05 23:49:42,642 - 
2025-02-05 23:49:42,643 - 执行前idx: 5, pending_stmts: {4: (2, 'SELECT id, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE', <Thread(Thread-710, started 36340)>, 1738770582.642912)}
2025-02-05 23:49:42,749 - stmt_idx: 4, status: success, result: None
2025-02-05 23:49:42,749 - 成功执行序列中事务2语句: SELECT id, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE
2025-02-05 23:49:42,749 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:49:42,749 - 
2025-02-05 23:49:42,857 - 
2025-02-05 23:49:42,858 - 执行前idx: 6, pending_stmts: {5: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_518) VALUES (NULL, 42.64, 65, 'wCKhm', 4)", <Thread(Thread-711, started 35972)>, 1738770582.8574164)}
2025-02-05 23:49:42,969 - stmt_idx: 5, status: success, result: None
2025-02-05 23:49:42,969 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_518) VALUES (NULL, 42.64, 65, 'wCKhm', 4)
2025-02-05 23:49:42,969 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:49:42,969 - 
2025-02-05 23:49:43,078 - 
2025-02-05 23:49:43,079 - 执行前idx: 7, pending_stmts: {6: (1, "UPDATE table_0 SET col_2 = 'eiOHE', col_0 = 5.14 WHERE id BETWEEN 7 AND 7", <Thread(Thread-712, started 14472)>, 1738770583.0789163)}
2025-02-05 23:49:43,189 - stmt_idx: 6, status: success, result: None
2025-02-05 23:49:43,189 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'eiOHE', col_0 = 5.14 WHERE id BETWEEN 7 AND 7
2025-02-05 23:49:43,189 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:49:43,189 - 
2025-02-05 23:49:43,298 - 
2025-02-05 23:49:43,298 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-713, started 34696)>, 1738770583.2980082)}
2025-02-05 23:49:43,401 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:49:43,401 - 执行后idx: 8, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-713, started 34696)>, 1738770583.2980082)}
2025-02-05 23:49:43,401 - 
2025-02-05 23:49:43,507 - 
2025-02-05 23:49:43,507 - 执行前idx: 9, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-713, started 34696)>, 1738770583.2980082), 8: (1, "UPDATE table_0 SET col_2 = 'oDceH', col_1 = 78, col_518 = 89 WHERE (id = 1)", <Thread(Thread-714, started 43456)>, 1738770583.5070744)}
2025-02-05 23:49:43,619 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:49:43,730 - stmt_idx: 8, status: success, result: None
2025-02-05 23:49:43,731 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 'oDceH', col_1 = 78, col_518 = 89 WHERE (id = 1)
2025-02-05 23:49:43,731 - 执行后idx: 9, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-713, started 34696)>, 1738770583.2980082)}
2025-02-05 23:49:43,731 - 
2025-02-05 23:49:43,843 - 
2025-02-05 23:49:43,843 - 执行前idx: 10, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-713, started 34696)>, 1738770583.2980082), 9: (1, "UPDATE table_0 SET col_0 = 43.59, col_2 = 'Ftufg', col_1 = 97 WHERE (id = 3)", <Thread(Thread-715, started 40320)>, 1738770583.843037)}
2025-02-05 23:49:43,948 - wait for lock, trx_id: 2, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:49:44,050 - stmt_idx: 9, status: success, result: None
2025-02-05 23:49:44,050 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 43.59, col_2 = 'Ftufg', col_1 = 97 WHERE (id = 3)
2025-02-05 23:49:44,050 - 执行后idx: 10, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-713, started 34696)>, 1738770583.2980082)}
2025-02-05 23:49:44,050 - 
2025-02-05 23:49:44,158 - 
2025-02-05 23:49:44,159 - 执行前idx: 11, pending_stmts: {7: (2, 'SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE', <Thread(Thread-713, started 34696)>, 1738770583.2980082), 10: (1, "DELETE FROM table_0 WHERE (col_2 = 'ztxxa')", <Thread(Thread-716, started 43692)>, 1738770584.1585023)}
2025-02-05 23:49:44,161 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:49:44,266 - stmt_idx: 7, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:49:44,266 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务2语句: SELECT * FROM table_0 WHERE id BETWEEN 7 AND 7 LOCK IN SHARE MODE
2025-02-05 23:49:44,266 - 错误: dictionary changed size during iteration
2025-02-05 23:49:44,266 - 
2025-02-05 23:49:44,266 - 执行前idx: 12, pending_stmts: {10: (1, "DELETE FROM table_0 WHERE (col_2 = 'ztxxa')", <Thread(Thread-716, stopped 43692)>, 1738770584.1585023), 11: (1, "UPDATE table_0 SET col_0 = 95.36, col_1 = 71, col_518 = 68, col_2 = 'hLkpc' WHERE (col_518 IS NULL)", <Thread(Thread-717, started 32332)>, 1738770584.266017)}
2025-02-05 23:49:44,377 - stmt_idx: 10, status: success, result: None
2025-02-05 23:49:44,377 - 成功执行序列中事务1语句: DELETE FROM table_0 WHERE (col_2 = 'ztxxa')
2025-02-05 23:49:44,487 - stmt_idx: 11, status: success, result: None
2025-02-05 23:49:44,487 - 成功执行序列中事务1语句: UPDATE table_0 SET col_0 = 95.36, col_1 = 71, col_518 = 68, col_2 = 'hLkpc' WHERE (col_518 IS NULL)
2025-02-05 23:49:44,487 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:49:44,487 - 
2025-02-05 23:49:44,593 - 
2025-02-05 23:49:44,593 - 执行前idx: 13, pending_stmts: {12: (1, 'SELECT id, col_0, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE', <Thread(Thread-718, started 4284)>, 1738770584.5932403)}
2025-02-05 23:49:44,699 - stmt_idx: 12, status: success, result: None
2025-02-05 23:49:44,699 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE
2025-02-05 23:49:44,699 - 执行后idx: 13, pending_stmts: {}
2025-02-05 23:49:44,699 - 
2025-02-05 23:49:44,813 - 
2025-02-05 23:49:44,814 - 执行前idx: 14, pending_stmts: {13: (1, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE', <Thread(Thread-719, started 31916)>, 1738770584.8130724)}
2025-02-05 23:49:44,919 - stmt_idx: 13, status: success, result: None
2025-02-05 23:49:44,919 - 成功执行序列中事务1语句: SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE
2025-02-05 23:49:44,919 - 执行后idx: 14, pending_stmts: {}
2025-02-05 23:49:44,920 - 
2025-02-05 23:49:45,030 - stmt为None, trx_id: 2, stmt: None
2025-02-05 23:49:45,031 - 
2025-02-05 23:49:45,031 - 执行前idx: 16, pending_stmts: {15: (1, "SELECT id FROM table_0 WHERE (col_2 = 'wcjhg') AND (col_1 = 92) AND (col_518 IS NULL) LOCK IN SHARE MODE", <Thread(Thread-720, started 22004)>, 1738770585.0316472)}
2025-02-05 23:49:45,136 - stmt_idx: 15, status: success, result: None
2025-02-05 23:49:45,136 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE (col_2 = 'wcjhg') AND (col_1 = 92) AND (col_518 IS NULL) LOCK IN SHARE MODE
2025-02-05 23:49:45,136 - 执行后idx: 16, pending_stmts: {}
2025-02-05 23:49:45,136 - 
2025-02-05 23:49:45,253 - 执行序列成功
2025-02-05 23:49:46,029 - is_atomic: True
2025-02-05 23:49:46,030 - info: 死锁发生，事务2被回滚，事务1的结果与单独执行时一致，满足原子性
2025-02-05 23:49:46,030 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 2 AND 2 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 'DPMnX' WHERE (col_1 = 12) AND (col_518 IS NULL) AND (col_0 = 87.12)"), (2, 'SELECT id, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 6 AND 6 LOCK IN SHARE MODE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_518) VALUES (NULL, 42.64, 65, 'wCKhm', 4)"), (1, "UPDATE table_0 SET col_2 = 'eiOHE', col_0 = 5.14 WHERE id BETWEEN 7 AND 7"), (1, "UPDATE table_0 SET col_2 = 'oDceH', col_1 = 78, col_518 = 89 WHERE (id = 1)"), (1, "UPDATE table_0 SET col_0 = 43.59, col_2 = 'Ftufg', col_1 = 97 WHERE (id = 3)"), (2, 'ROLLBACK'), (1, "DELETE FROM table_0 WHERE (col_2 = 'ztxxa')"), (1, "UPDATE table_0 SET col_0 = 95.36, col_1 = 71, col_518 = 68, col_2 = 'hLkpc' WHERE (col_518 IS NULL)"), (1, 'SELECT id, col_0, col_1, col_2, col_518 FROM table_0 WHERE id BETWEEN 8 AND 8 FOR UPDATE'), (1, 'SELECT * FROM table_0 WHERE id BETWEEN 9 AND 9 FOR UPDATE'), (1, "SELECT id FROM table_0 WHERE (col_2 = 'wcjhg') AND (col_1 = 92) AND (col_518 IS NULL) LOCK IN SHARE MODE"), (1, 'COMMIT'), (2, '--Skipped, trx_id: 2, stmt: COMMIT')]
2025-02-05 23:49:46,030 - snapshots: {'before': {'table_0': [(1, 76.79, 17, 'cfjmy', None), (2, 87.12, 12, 'ljhln', None), (3, 27.14, 79, 'smnap', None), (4, 18.54, 37, 'ztxxa', None), (5, 70.61, 49, 'hbqok', None), (6, 15.74, 88, 'zpmdh', None), (7, 48.07, 92, 'wcjhg', None), (8, 39.14, 38, 'xorui', None), (9, 4.59, 71, 'jgbnc', None)]}, 'trx1': {'table_0': [(1, 76.79, 78, 'oDceH', 89), (2, 95.36, 71, 'hLkpc', 68), (3, 95.36, 71, 'hLkpc', 68), (5, 95.36, 71, 'hLkpc', 68), (6, 95.36, 71, 'hLkpc', 68), (7, 95.36, 71, 'hLkpc', 68), (8, 95.36, 71, 'hLkpc', 68), (9, 95.36, 71, 'hLkpc', 68), (10, 42.64, 65, 'wCKhm', 4)]}, 'trx2': {'table_0': [(1, 76.79, 17, 'cfjmy', None), (2, 87.12, 12, 'ljhln', None), (3, 27.14, 79, 'smnap', None), (4, 18.54, 37, 'ztxxa', None), (5, 70.61, 49, 'hbqok', None), (6, 15.74, 88, 'zpmdh', None), (7, 48.07, 92, 'wcjhg', None), (8, 39.14, 38, 'xorui', None), (9, 4.59, 71, 'jgbnc', None)]}, 'serial': {'table_0': [(1, 76.79, 78, 'oDceH', 89), (2, 95.36, 71, 'hLkpc', 68), (3, 95.36, 71, 'hLkpc', 68), (5, 95.36, 71, 'hLkpc', 68), (6, 95.36, 71, 'hLkpc', 68), (7, 95.36, 71, 'hLkpc', 68), (8, 95.36, 71, 'hLkpc', 68), (9, 95.36, 71, 'hLkpc', 68), (11, 42.64, 65, 'wCKhm', 4)]}}
2025-02-05 23:49:46,030 - 
2025-02-05 23:49:46,041 - iter: 98
2025-02-05 23:49:47,544 - table table_0 has 10 rows
2025-02-05 23:49:47,544 - res_dict: {'trx1_lock_row_ids': [6, 7, 8], 'trx2_lock_row_ids': [1, 2, 3, 4, 5], 'intersection_row_ids': []}
2025-02-05 23:49:47,545 - lock_same_resource: False
2025-02-05 23:49:47,545 - 
2025-02-05 23:49:47,545 - non intersection phase1
2025-02-05 23:49:47,545 - 事务1在第一阶段自己加的锁: X
2025-02-05 23:49:47,545 - 事务2在第一阶段自己加的锁: X
2025-02-05 23:49:47,545 - 事务1在第二阶段请求对方资源的锁: S
2025-02-05 23:49:47,545 - 事务2在第二阶段请求对方资源的锁: X
2025-02-05 23:49:47,548 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=8
2025-02-05 23:49:47,549 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:47,549 - params: {'v1': '6', 'v2': '8', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:49:47,551 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=X, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:49:47,553 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:47,553 - params: {'v1': '1', 'v2': '1', 'select_cols': 'id, col_0', 'table': 'table_0'}
2025-02-05 23:49:47,557 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=2, is_continuous=False, range_end_idx=None
2025-02-05 23:49:47,558 - needed_params: {'cond', 'table'}
2025-02-05 23:49:47,559 - params: {'cond': "(col_3 = 'cuqek')", 'table': 'table_0'}
2025-02-05 23:49:47,561 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:49:47,562 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:49:47,563 - params: {'cond': '(id = 3)', 'select_cols': 'id, col_0, col_1, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:49:47,566 - Generating lock SQL with params: template_key=delete, lock_level=row, lock_type=X, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:49:47,567 - needed_params: {'cond', 'table'}
2025-02-05 23:49:47,567 - params: {'cond': '(id = 4)', 'table': 'table_0'}
2025-02-05 23:49:47,572 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:49:47,573 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:49:47,573 - params: {'cond': "(col_3 = 'qwyqn') AND (col_1 = 74.31)", 'select_cols': 'col_1', 'table': 'table_0'}
2025-02-05 23:49:47,574 - non intersection phase1 end
2025-02-05 23:49:47,574 - 
2025-02-05 23:49:47,574 - non intersection phase2
2025-02-05 23:49:47,577 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:49:47,578 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:49:47,579 - params: {'cond': "(col_2 = 'iqkpr')", 'select_cols': 'id, col_2', 'table': 'table_0'}
2025-02-05 23:49:47,583 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=X, row_idx=6, is_continuous=True, range_end_idx=6
2025-02-05 23:49:47,585 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:49:47,585 - params: {'v1': '6', 'v2': '6', 'select_cols': 'id', 'table': 'table_0'}
2025-02-05 23:49:47,585 - non intersection phase2 end
2025-02-05 23:49:47,585 - 
2025-02-05 23:49:47,585 - 生成死锁事务序列成功如下
2025-02-05 23:49:47,585 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "DELETE FROM table_0 WHERE (col_3 = 'cuqek')"), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 3) FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 4)'), (2, "SELECT col_1 FROM table_0 WHERE (col_3 = 'qwyqn') AND (col_1 = 74.31) FOR UPDATE"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE'), (1, "SELECT id, col_2 FROM table_0 WHERE (col_2 = 'iqkpr') LOCK IN SHARE MODE"), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:49:49,117 - 创建事务1连接成功
2025-02-05 23:49:49,118 - 执行事务1语句: BEGIN
2025-02-05 23:49:49,119 - 执行事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE
2025-02-05 23:49:49,120 - 执行事务1语句: SELECT id, col_2 FROM table_0 WHERE (col_2 = 'iqkpr') LOCK IN SHARE MODE
2025-02-05 23:49:49,121 - 执行事务1语句: COMMIT;
2025-02-05 23:49:49,125 - 执行事务1成功
2025-02-05 23:49:51,738 - 恢复初始状态成功
2025-02-05 23:49:52,499 - 创建事务2连接成功
2025-02-05 23:49:52,500 - 执行事务2语句: BEGIN
2025-02-05 23:49:52,501 - 执行事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:49:52,502 - 执行事务2语句: DELETE FROM table_0 WHERE (col_3 = 'cuqek')
2025-02-05 23:49:52,502 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 23:49:52,503 - 执行事务2语句: DELETE FROM table_0 WHERE (id = 4)
2025-02-05 23:49:52,504 - 执行事务2语句: SELECT col_1 FROM table_0 WHERE (col_3 = 'qwyqn') AND (col_1 = 74.31) FOR UPDATE
2025-02-05 23:49:52,504 - 执行事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:49:52,507 - 执行事务2语句: COMMIT;
2025-02-05 23:49:52,511 - 执行事务2成功
2025-02-05 23:49:57,437 - 
2025-02-05 23:49:57,438 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE', <Thread(Thread-721, started 8752)>, 1738770597.4376712)}
2025-02-05 23:49:57,550 - stmt_idx: 2, status: success, result: None
2025-02-05 23:49:57,551 - 成功执行序列中事务1语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE
2025-02-05 23:49:57,551 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:49:57,551 - 
2025-02-05 23:49:57,660 - 
2025-02-05 23:49:57,661 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE', <Thread(Thread-722, started 26656)>, 1738770597.6609545)}
2025-02-05 23:49:57,764 - stmt_idx: 3, status: success, result: None
2025-02-05 23:49:57,764 - 成功执行序列中事务2语句: SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE
2025-02-05 23:49:57,765 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:49:57,765 - 
2025-02-05 23:49:57,870 - 
2025-02-05 23:49:57,871 - 执行前idx: 5, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_3 = 'cuqek')", <Thread(Thread-723, started 42740)>, 1738770597.8702161)}
2025-02-05 23:49:57,971 - wait for lock, trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_3 = 'cuqek')
2025-02-05 23:49:57,971 - 执行后idx: 5, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_3 = 'cuqek')", <Thread(Thread-723, started 42740)>, 1738770597.8702161)}
2025-02-05 23:49:57,971 - 
2025-02-05 23:49:58,079 - 
2025-02-05 23:49:58,080 - 执行前idx: 10, pending_stmts: {4: (2, "DELETE FROM table_0 WHERE (col_3 = 'cuqek')", <Thread(Thread-723, started 42740)>, 1738770597.8702161), 9: (1, "SELECT id, col_2 FROM table_0 WHERE (col_2 = 'iqkpr') LOCK IN SHARE MODE", <Thread(Thread-724, started 29960)>, 1738770598.07925)}
2025-02-05 23:49:58,081 - 执行语句错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction, stmt: SELECT id, col_2 FROM table_0 WHERE (col_2 = 'iqkpr') LOCK IN SHARE MODE
2025-02-05 23:49:58,183 - stmt_idx: 4, status: success, result: None
2025-02-05 23:49:58,183 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (col_3 = 'cuqek')
2025-02-05 23:49:58,183 - 结束了阻塞，blocked_trx_id: 2, stmt: DELETE FROM table_0 WHERE (col_3 = 'cuqek')
2025-02-05 23:49:58,289 - stmt_idx: 9, status: error, result: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction
2025-02-05 23:49:58,289 - 死锁错误: 1213 (40001): Deadlock found when trying to get lock; try restarting transaction，事务1语句: SELECT id, col_2 FROM table_0 WHERE (col_2 = 'iqkpr') LOCK IN SHARE MODE
2025-02-05 23:49:58,289 - 错误: dictionary changed size during iteration
2025-02-05 23:49:58,293 - 序列遍历完成，开始查看剩余阻塞的语句：{5: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 3) FOR UPDATE', <Thread(Thread-725, stopped 40028)>, 1738770598.1842146), 6: (2, 'DELETE FROM table_0 WHERE (id = 4)', <Thread(Thread-726, stopped 38840)>, 1738770598.1848452), 7: (2, "SELECT col_1 FROM table_0 WHERE (col_3 = 'qwyqn') AND (col_1 = 74.31) FOR UPDATE", <Thread(Thread-727, stopped 28944)>, 1738770598.1848452), 8: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-728, stopped 37012)>, 1738770598.1848452)}
2025-02-05 23:49:58,293 - 
2025-02-05 23:49:58,293 - 执行前idx: 12, pending_stmts: {5: (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 3) FOR UPDATE', <Thread(Thread-725, stopped 40028)>, 1738770598.1842146), 6: (2, 'DELETE FROM table_0 WHERE (id = 4)', <Thread(Thread-726, stopped 38840)>, 1738770598.1848452), 7: (2, "SELECT col_1 FROM table_0 WHERE (col_3 = 'qwyqn') AND (col_1 = 74.31) FOR UPDATE", <Thread(Thread-727, stopped 28944)>, 1738770598.1848452), 8: (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE', <Thread(Thread-728, stopped 37012)>, 1738770598.1848452)}
2025-02-05 23:49:58,395 - stmt_idx: 5, status: success, result: None
2025-02-05 23:49:58,395 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 3) FOR UPDATE
2025-02-05 23:49:58,502 - stmt_idx: 6, status: success, result: None
2025-02-05 23:49:58,502 - 成功执行序列中事务2语句: DELETE FROM table_0 WHERE (id = 4)
2025-02-05 23:49:58,609 - stmt_idx: 7, status: success, result: None
2025-02-05 23:49:58,610 - 成功执行序列中事务2语句: SELECT col_1 FROM table_0 WHERE (col_3 = 'qwyqn') AND (col_1 = 74.31) FOR UPDATE
2025-02-05 23:49:58,715 - stmt_idx: 8, status: success, result: None
2025-02-05 23:49:58,715 - 成功执行序列中事务2语句: SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE
2025-02-05 23:49:58,715 - 执行后idx: 12, pending_stmts: {}
2025-02-05 23:49:58,715 - 
2025-02-05 23:49:58,818 - 执行序列成功
2025-02-05 23:49:59,602 - is_atomic: True
2025-02-05 23:49:59,602 - info: 死锁发生，事务1被回滚，事务2的结果与单独执行时一致，满足原子性
2025-02-05 23:49:59,602 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 8 FOR UPDATE'), (2, 'SELECT id, col_0 FROM table_0 WHERE id BETWEEN 1 AND 1 FOR UPDATE'), (2, "DELETE FROM table_0 WHERE (col_3 = 'cuqek')"), (1, 'ROLLBACK'), (1, '--Skipped, trx_id: 1, stmt: COMMIT'), (2, 'COMMIT'), (2, 'SELECT id, col_0, col_1, col_2, col_3 FROM table_0 WHERE (id = 3) FOR UPDATE'), (2, 'DELETE FROM table_0 WHERE (id = 4)'), (2, "SELECT col_1 FROM table_0 WHERE (col_3 = 'qwyqn') AND (col_1 = 74.31) FOR UPDATE"), (2, 'SELECT id FROM table_0 WHERE id BETWEEN 6 AND 6 FOR UPDATE')]
2025-02-05 23:49:59,603 - snapshots: {'before': {'table_0': [(1, 18, 87.05, 'ygsxw', 'gjecf'), (2, 60, 48.56, 'tnnax', 'cuqek'), (3, 30, 60.69, 'scriq', 'ktytm'), (4, 93, 79.11, 'iqkpr', 'htvre'), (5, 86, 74.31, 'qfxte', 'qwyqn'), (6, 91, 31.37, 'vkknh', 'gyvou'), (7, 17, 86.63, 'hdwey', 'rjjbv'), (8, 31, 67.64, 'iufyt', 'nizyz'), (9, 38, 14.31, 'eahno', 'ihixh'), (10, 59, 93.03, 'ngzvj', 'fhxmy')]}, 'trx1': {'table_0': [(1, 18, 87.05, 'ygsxw', 'gjecf'), (2, 60, 48.56, 'tnnax', 'cuqek'), (3, 30, 60.69, 'scriq', 'ktytm'), (4, 93, 79.11, 'iqkpr', 'htvre'), (5, 86, 74.31, 'qfxte', 'qwyqn'), (6, 91, 31.37, 'vkknh', 'gyvou'), (7, 17, 86.63, 'hdwey', 'rjjbv'), (8, 31, 67.64, 'iufyt', 'nizyz'), (9, 38, 14.31, 'eahno', 'ihixh'), (10, 59, 93.03, 'ngzvj', 'fhxmy')]}, 'trx2': {'table_0': [(1, 18, 87.05, 'ygsxw', 'gjecf'), (3, 30, 60.69, 'scriq', 'ktytm'), (5, 86, 74.31, 'qfxte', 'qwyqn'), (6, 91, 31.37, 'vkknh', 'gyvou'), (7, 17, 86.63, 'hdwey', 'rjjbv'), (8, 31, 67.64, 'iufyt', 'nizyz'), (9, 38, 14.31, 'eahno', 'ihixh'), (10, 59, 93.03, 'ngzvj', 'fhxmy')]}, 'serial': {'table_0': [(1, 18, 87.05, 'ygsxw', 'gjecf'), (3, 30, 60.69, 'scriq', 'ktytm'), (5, 86, 74.31, 'qfxte', 'qwyqn'), (6, 91, 31.37, 'vkknh', 'gyvou'), (7, 17, 86.63, 'hdwey', 'rjjbv'), (8, 31, 67.64, 'iufyt', 'nizyz'), (9, 38, 14.31, 'eahno', 'ihixh'), (10, 59, 93.03, 'ngzvj', 'fhxmy')]}}
2025-02-05 23:49:59,603 - 
2025-02-05 23:49:59,613 - iter: 99
2025-02-05 23:50:01,113 - table table_0 has 8 rows
2025-02-05 23:50:01,113 - trx1_lock_row_ids: [1, 3, 4, 6, 7, 8]
2025-02-05 23:50:01,113 - trx2_lock_row_ids: [4, 5]
2025-02-05 23:50:01,113 - intersection_row_ids: [4]
2025-02-05 23:50:01,113 - trx1_exclusive_ids: [1, 3, 6, 7, 8]
2025-02-05 23:50:01,113 - trx2_exclusive_ids: [5]
2025-02-05 23:50:01,113 - res_dict: {'trx1_lock_row_ids': [1, 3, 4, 6, 7, 8], 'trx2_lock_row_ids': [4, 5], 'intersection_row_ids': [4]}
2025-02-05 23:50:01,113 - lock_same_resource: True
2025-02-05 23:50:01,113 - 
2025-02-05 23:50:01,114 - intersection phase1
2025-02-05 23:50:01,117 - Generating lock SQL with params: template_key=range but use range, lock_level=row, lock_type=S, row_idx=4, is_continuous=True, range_end_idx=5
2025-02-05 23:50:01,118 - needed_params: {'v1', 'v2', 'select_cols', 'table'}
2025-02-05 23:50:01,118 - params: {'v1': '4', 'v2': '5', 'select_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:50:01,121 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=S, row_idx=4, is_continuous=False, range_end_idx=None
2025-02-05 23:50:01,122 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:50:01,123 - params: {'cond': '(id = 4)', 'select_cols': 'id, col_0, col_1, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:50:01,123 - intersection phase1 end
2025-02-05 23:50:01,123 - 
2025-02-05 23:50:01,123 - intersection phase2
2025-02-05 23:50:01,123 - 事务1在第二阶段自己加的锁: II
2025-02-05 23:50:01,124 - 事务2在第二阶段自己加的锁: X
2025-02-05 23:50:01,124 - 事务1在第三阶段请求对方资源的锁: X
2025-02-05 23:50:01,124 - 事务2在第三阶段请求对方资源的锁: II
2025-02-05 23:50:01,128 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=1, is_continuous=False, range_end_idx=None
2025-02-05 23:50:01,129 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:50:01,129 - params: {'set_expr': "col_2 = 12.28, col_1 = 'fURuw', col_3 = 'zJMKM', col_4 = 68, col_0 = 43", 'v1': '1', 'v2': '1', 'table': 'table_0'}
2025-02-05 23:50:01,131 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=3, is_continuous=False, range_end_idx=None
2025-02-05 23:50:01,133 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:50:01,133 - params: {'set_expr': 'col_4 = 94, col_2 = 49.74', 'v1': '3', 'v2': '3', 'table': 'table_0'}
2025-02-05 23:50:01,136 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=6, is_continuous=False, range_end_idx=None
2025-02-05 23:50:01,139 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:50:01,139 - params: {'set_expr': "col_4 = 31, col_2 = 64.03, col_0 = 5, col_3 = 'CSUpC'", 'v1': '6', 'v2': '6', 'table': 'table_0'}
2025-02-05 23:50:01,143 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=II, row_idx=7, is_continuous=False, range_end_idx=None
2025-02-05 23:50:01,145 - needed_params: {'vals', 'insert_cols', 'table'}
2025-02-05 23:50:01,145 - params: {'vals': "NULL, 72, 'eKaMx', 85.08, 'YMlOi', 99", 'insert_cols': 'id, col_0, col_1, col_2, col_3, col_4', 'table': 'table_0'}
2025-02-05 23:50:01,149 - Generating lock SQL with params: template_key=range, lock_level=row, lock_type=II, row_idx=8, is_continuous=False, range_end_idx=None
2025-02-05 23:50:01,150 - needed_params: {'set_expr', 'v1', 'v2', 'table'}
2025-02-05 23:50:01,151 - params: {'set_expr': "col_3 = 'JrkrW', col_2 = 20.32, col_1 = 'jRwYK'", 'v1': '8', 'v2': '8', 'table': 'table_0'}
2025-02-05 23:50:01,154 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:50:01,156 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:50:01,156 - params: {'cond': '(id = 5)', 'select_cols': 'id, col_2, col_3', 'table': 'table_0'}
2025-02-05 23:50:01,156 - intersection phase2 end
2025-02-05 23:50:01,157 - 
2025-02-05 23:50:01,157 - intersection phase3
2025-02-05 23:50:01,161 - Generating lock SQL with params: template_key=basic, lock_level=row, lock_type=X, row_idx=5, is_continuous=False, range_end_idx=None
2025-02-05 23:50:01,162 - needed_params: {'cond', 'select_cols', 'table'}
2025-02-05 23:50:01,163 - params: {'cond': "(col_3 = 'roizh') AND (col_2 = 6.0)", 'select_cols': 'id, col_0, col_1, col_2, col_4', 'table': 'table_0'}
2025-02-05 23:50:01,163 - intersection phase3 end
2025-02-05 23:50:01,163 - 
2025-02-05 23:50:01,163 - 生成死锁事务序列成功如下
2025-02-05 23:50:01,163 - serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 12.28, col_1 = 'fURuw', col_3 = 'zJMKM', col_4 = 68, col_0 = 43 WHERE id BETWEEN 1 AND 1"), (1, 'UPDATE table_0 SET col_4 = 94, col_2 = 49.74 WHERE id BETWEEN 3 AND 3'), (1, "UPDATE table_0 SET col_4 = 31, col_2 = 64.03, col_0 = 5, col_3 = 'CSUpC' WHERE id BETWEEN 6 AND 6"), (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72, 'eKaMx', 85.08, 'YMlOi', 99)"), (1, "UPDATE table_0 SET col_3 = 'JrkrW', col_2 = 20.32, col_1 = 'jRwYK' WHERE id BETWEEN 8 AND 8"), (1, "SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE"), (2, None), (1, 'COMMIT'), (2, 'COMMIT')]
2025-02-05 23:50:02,716 - 创建事务1连接成功
2025-02-05 23:50:02,717 - 执行事务1语句: BEGIN
2025-02-05 23:50:02,719 - 执行事务1语句: SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 23:50:02,719 - 执行事务1语句: UPDATE table_0 SET col_2 = 12.28, col_1 = 'fURuw', col_3 = 'zJMKM', col_4 = 68, col_0 = 43 WHERE id BETWEEN 1 AND 1
2025-02-05 23:50:02,721 - 执行事务1语句: UPDATE table_0 SET col_4 = 94, col_2 = 49.74 WHERE id BETWEEN 3 AND 3
2025-02-05 23:50:02,721 - 执行事务1语句: UPDATE table_0 SET col_4 = 31, col_2 = 64.03, col_0 = 5, col_3 = 'CSUpC' WHERE id BETWEEN 6 AND 6
2025-02-05 23:50:02,722 - 执行事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72, 'eKaMx', 85.08, 'YMlOi', 99)
2025-02-05 23:50:02,723 - 执行事务1语句: UPDATE table_0 SET col_3 = 'JrkrW', col_2 = 20.32, col_1 = 'jRwYK' WHERE id BETWEEN 8 AND 8
2025-02-05 23:50:02,723 - 执行事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE
2025-02-05 23:50:02,726 - 执行事务1语句: COMMIT;
2025-02-05 23:50:02,730 - 执行事务1成功
2025-02-05 23:50:05,369 - 恢复初始状态成功
2025-02-05 23:50:06,153 - 创建事务2连接成功
2025-02-05 23:50:06,154 - 执行事务2语句: BEGIN
2025-02-05 23:50:06,155 - 执行事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE
2025-02-05 23:50:06,156 - 执行事务2语句: SELECT id, col_2, col_3 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 23:50:06,157 - 执行事务2语句: COMMIT;
2025-02-05 23:50:06,161 - 执行事务2成功
2025-02-05 23:50:11,166 - 
2025-02-05 23:50:11,166 - 执行前idx: 3, pending_stmts: {2: (1, 'SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE', <Thread(Thread-729, started 2820)>, 1738770611.1664262)}
2025-02-05 23:50:11,274 - stmt_idx: 2, status: success, result: None
2025-02-05 23:50:11,274 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE
2025-02-05 23:50:11,274 - 执行后idx: 3, pending_stmts: {}
2025-02-05 23:50:11,275 - 
2025-02-05 23:50:11,382 - 
2025-02-05 23:50:11,383 - 执行前idx: 4, pending_stmts: {3: (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE', <Thread(Thread-730, started 13640)>, 1738770611.3823493)}
2025-02-05 23:50:11,489 - stmt_idx: 3, status: success, result: None
2025-02-05 23:50:11,489 - 成功执行序列中事务2语句: SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE
2025-02-05 23:50:11,489 - 执行后idx: 4, pending_stmts: {}
2025-02-05 23:50:11,489 - 
2025-02-05 23:50:11,595 - 
2025-02-05 23:50:11,596 - 执行前idx: 5, pending_stmts: {4: (1, "UPDATE table_0 SET col_2 = 12.28, col_1 = 'fURuw', col_3 = 'zJMKM', col_4 = 68, col_0 = 43 WHERE id BETWEEN 1 AND 1", <Thread(Thread-731, started 32400)>, 1738770611.5958426)}
2025-02-05 23:50:11,704 - stmt_idx: 4, status: success, result: None
2025-02-05 23:50:11,704 - 成功执行序列中事务1语句: UPDATE table_0 SET col_2 = 12.28, col_1 = 'fURuw', col_3 = 'zJMKM', col_4 = 68, col_0 = 43 WHERE id BETWEEN 1 AND 1
2025-02-05 23:50:11,705 - 执行后idx: 5, pending_stmts: {}
2025-02-05 23:50:11,705 - 
2025-02-05 23:50:11,817 - 
2025-02-05 23:50:11,817 - 执行前idx: 6, pending_stmts: {5: (1, 'UPDATE table_0 SET col_4 = 94, col_2 = 49.74 WHERE id BETWEEN 3 AND 3', <Thread(Thread-732, started 40308)>, 1738770611.8174543)}
2025-02-05 23:50:11,923 - stmt_idx: 5, status: success, result: None
2025-02-05 23:50:11,924 - 成功执行序列中事务1语句: UPDATE table_0 SET col_4 = 94, col_2 = 49.74 WHERE id BETWEEN 3 AND 3
2025-02-05 23:50:11,924 - 执行后idx: 6, pending_stmts: {}
2025-02-05 23:50:11,924 - 
2025-02-05 23:50:12,032 - 
2025-02-05 23:50:12,032 - 执行前idx: 7, pending_stmts: {6: (1, "UPDATE table_0 SET col_4 = 31, col_2 = 64.03, col_0 = 5, col_3 = 'CSUpC' WHERE id BETWEEN 6 AND 6", <Thread(Thread-733, started 43440)>, 1738770612.0324202)}
2025-02-05 23:50:12,138 - stmt_idx: 6, status: success, result: None
2025-02-05 23:50:12,138 - 成功执行序列中事务1语句: UPDATE table_0 SET col_4 = 31, col_2 = 64.03, col_0 = 5, col_3 = 'CSUpC' WHERE id BETWEEN 6 AND 6
2025-02-05 23:50:12,138 - 执行后idx: 7, pending_stmts: {}
2025-02-05 23:50:12,138 - 
2025-02-05 23:50:12,249 - 
2025-02-05 23:50:12,249 - 执行前idx: 8, pending_stmts: {7: (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE (id = 5) FOR UPDATE', <Thread(Thread-734, started 676)>, 1738770612.249135)}
2025-02-05 23:50:12,350 - stmt_idx: 7, status: success, result: None
2025-02-05 23:50:12,350 - 成功执行序列中事务2语句: SELECT id, col_2, col_3 FROM table_0 WHERE (id = 5) FOR UPDATE
2025-02-05 23:50:12,350 - 执行后idx: 8, pending_stmts: {}
2025-02-05 23:50:12,350 - 
2025-02-05 23:50:12,459 - 
2025-02-05 23:50:12,460 - 执行前idx: 9, pending_stmts: {8: (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72, 'eKaMx', 85.08, 'YMlOi', 99)", <Thread(Thread-735, started 28428)>, 1738770612.459233)}
2025-02-05 23:50:12,570 - stmt_idx: 8, status: success, result: None
2025-02-05 23:50:12,570 - 成功执行序列中事务1语句: INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72, 'eKaMx', 85.08, 'YMlOi', 99)
2025-02-05 23:50:12,570 - 执行后idx: 9, pending_stmts: {}
2025-02-05 23:50:12,570 - 
2025-02-05 23:50:12,678 - 
2025-02-05 23:50:12,679 - 执行前idx: 10, pending_stmts: {9: (1, "UPDATE table_0 SET col_3 = 'JrkrW', col_2 = 20.32, col_1 = 'jRwYK' WHERE id BETWEEN 8 AND 8", <Thread(Thread-736, started 26804)>, 1738770612.6781328)}
2025-02-05 23:50:12,789 - stmt_idx: 9, status: success, result: None
2025-02-05 23:50:12,789 - 成功执行序列中事务1语句: UPDATE table_0 SET col_3 = 'JrkrW', col_2 = 20.32, col_1 = 'jRwYK' WHERE id BETWEEN 8 AND 8
2025-02-05 23:50:12,789 - 执行后idx: 10, pending_stmts: {}
2025-02-05 23:50:12,789 - 
2025-02-05 23:50:12,892 - 
2025-02-05 23:50:12,893 - 执行前idx: 11, pending_stmts: {10: (1, "SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE", <Thread(Thread-737, started 25840)>, 1738770612.892182)}
2025-02-05 23:50:13,000 - wait for lock, trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE
2025-02-05 23:50:13,000 - 执行后idx: 11, pending_stmts: {10: (1, "SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE", <Thread(Thread-737, started 25840)>, 1738770612.892182)}
2025-02-05 23:50:13,000 - 
2025-02-05 23:50:13,111 - stmt为None, trx_id: 2, stmt: None
2025-02-05 23:50:13,113 - 序列遍历完成，开始查看剩余阻塞的语句：{10: (1, "SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE", <Thread(Thread-737, started 25840)>, 1738770612.892182)}
2025-02-05 23:50:13,114 - 
2025-02-05 23:50:13,114 - 执行前idx: 14, pending_stmts: {10: (1, "SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE", <Thread(Thread-737, stopped 25840)>, 1738770612.892182)}
2025-02-05 23:50:13,219 - stmt_idx: 10, status: success, result: None
2025-02-05 23:50:13,219 - 成功执行序列中事务1语句: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE
2025-02-05 23:50:13,219 - 结束了阻塞，blocked_trx_id: 1, stmt: SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE
2025-02-05 23:50:13,220 - 执行后idx: 14, pending_stmts: {12: (1, 'COMMIT', <Thread(Thread-738, started 43968)>, 1738770613.2203615)}
2025-02-05 23:50:13,220 - 
2025-02-05 23:50:13,326 - 序列遍历完成，开始查看剩余阻塞的语句：{12: (1, 'COMMIT', <Thread(Thread-738, stopped 43968)>, 1738770613.2203615)}
2025-02-05 23:50:13,326 - 
2025-02-05 23:50:13,326 - 执行前idx: 14, pending_stmts: {12: (1, 'COMMIT', <Thread(Thread-738, stopped 43968)>, 1738770613.2203615)}
2025-02-05 23:50:13,434 - stmt_idx: 12, status: success, result: None
2025-02-05 23:50:13,435 - 成功执行序列中事务1语句: COMMIT
2025-02-05 23:50:13,435 - 执行后idx: 14, pending_stmts: {}
2025-02-05 23:50:13,435 - 
2025-02-05 23:50:13,541 - 执行序列成功
2025-02-05 23:50:14,307 - is_atomic: True
2025-02-05 23:50:14,307 - info: 序列被完整成功执行，无效的测试用例：未发生死锁或锁等待
2025-02-05 23:50:14,307 - executed_serial: [(1, 'BEGIN'), (2, 'BEGIN'), (1, 'SELECT id, col_0, col_1, col_3, col_4 FROM table_0 WHERE (id = 4) LOCK IN SHARE MODE'), (2, 'SELECT id, col_0, col_1, col_2, col_3, col_4 FROM table_0 WHERE id BETWEEN 4 AND 5 LOCK IN SHARE MODE'), (1, "UPDATE table_0 SET col_2 = 12.28, col_1 = 'fURuw', col_3 = 'zJMKM', col_4 = 68, col_0 = 43 WHERE id BETWEEN 1 AND 1"), (1, 'UPDATE table_0 SET col_4 = 94, col_2 = 49.74 WHERE id BETWEEN 3 AND 3'), (1, "UPDATE table_0 SET col_4 = 31, col_2 = 64.03, col_0 = 5, col_3 = 'CSUpC' WHERE id BETWEEN 6 AND 6"), (2, 'SELECT id, col_2, col_3 FROM table_0 WHERE (id = 5) FOR UPDATE'), (1, "INSERT INTO table_0 (id, col_0, col_1, col_2, col_3, col_4) VALUES (NULL, 72, 'eKaMx', 85.08, 'YMlOi', 99)"), (1, "UPDATE table_0 SET col_3 = 'JrkrW', col_2 = 20.32, col_1 = 'jRwYK' WHERE id BETWEEN 8 AND 8"), (2, 'COMMIT'), (1, "SELECT id, col_0, col_1, col_2, col_4 FROM table_0 WHERE (col_3 = 'roizh') AND (col_2 = 6.0) FOR UPDATE"), (1, 'COMMIT')]
2025-02-05 23:50:14,307 - snapshots: {'before': {'table_0': [(1, 51, 'lxnac', 48.57, 'gnbhv', 5), (2, 61, 'uzidf', 12.08, 'flwxg', 4), (3, 71, 'jjvsi', 48.93, 'khobn', 34), (4, 22, 'mumuq', 92.99, 'cnqic', 6), (5, 8, 'zpaxo', 6.0, 'roizh', 35), (6, 20, 'ecegj', 30.84, 'tbdfa', 1), (7, 27, 'smqhj', 48.7, 'rvitn', 64), (8, 76, 'vxssg', 31.79, 'ompfb', 71)]}, 'trx1': {'table_0': [(1, 43, 'fURuw', 12.28, 'zJMKM', 68), (2, 61, 'uzidf', 12.08, 'flwxg', 4), (3, 71, 'jjvsi', 49.74, 'khobn', 94), (4, 22, 'mumuq', 92.99, 'cnqic', 6), (5, 8, 'zpaxo', 6.0, 'roizh', 35), (6, 5, 'ecegj', 64.03, 'CSUpC', 31), (7, 27, 'smqhj', 48.7, 'rvitn', 64), (8, 76, 'jRwYK', 20.32, 'JrkrW', 71), (9, 72, 'eKaMx', 85.08, 'YMlOi', 99)]}, 'trx2': {'table_0': [(1, 51, 'lxnac', 48.57, 'gnbhv', 5), (2, 61, 'uzidf', 12.08, 'flwxg', 4), (3, 71, 'jjvsi', 48.93, 'khobn', 34), (4, 22, 'mumuq', 92.99, 'cnqic', 6), (5, 8, 'zpaxo', 6.0, 'roizh', 35), (6, 20, 'ecegj', 30.84, 'tbdfa', 1), (7, 27, 'smqhj', 48.7, 'rvitn', 64), (8, 76, 'vxssg', 31.79, 'ompfb', 71)]}, 'serial': {'table_0': [(1, 43, 'fURuw', 12.28, 'zJMKM', 68), (2, 61, 'uzidf', 12.08, 'flwxg', 4), (3, 71, 'jjvsi', 49.74, 'khobn', 94), (4, 22, 'mumuq', 92.99, 'cnqic', 6), (5, 8, 'zpaxo', 6.0, 'roizh', 35), (6, 5, 'ecegj', 64.03, 'CSUpC', 31), (7, 27, 'smqhj', 48.7, 'rvitn', 64), (8, 76, 'jRwYK', 20.32, 'JrkrW', 71), (10, 72, 'eKaMx', 85.08, 'YMlOi', 99)]}}
2025-02-05 23:50:14,307 - 
